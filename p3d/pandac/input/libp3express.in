1481293991
3 2
12 libp3express 4 vDgf 12 panda3d.core 
1331
1379 7 is_null 0 4 2714 22 PointerToVoid::is_null 0 1 15 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
47
inline bool PointerToVoid::is_null(void) const;

1380 8 get_hash 0 4 2714 23 PointerToVoid::get_hash 0 1 16 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

1381 5 clear 0 4 2713 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

1382 6 output 0 4 2713 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< double > >::output(ostream &out) const;

1383 19 ~PointerToArrayBase 0 4 2712 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

1384 19 ConstPointerToArray 0 4 2711 50 ConstPointerToArray< double >::ConstPointerToArray 0 3 1 2 3 0
284
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);
ConstPointerToArray< double >::ConstPointerToArray(PyObject *self, PyObject *source);

1385 4 size 0 4 2711 35 ConstPointerToArray< double >::size 0 1 4 0
73
inline unsigned long int ConstPointerToArray< double >::size(void) const;

1386 11 get_element 0 4 2711 42 ConstPointerToArray< double >::get_element 0 1 5 0
91
inline double const &ConstPointerToArray< double >::get_element(unsigned long int n) const;

1387 11 __getitem__ 0 4 2711 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
84
double const &ConstPointerToArray< double >::__getitem__(unsigned long int n) const;

1388 8 get_data 0 4 2711 39 ConstPointerToArray< double >::get_data 0 1 7 0
85
inline std::basic_string< char > ConstPointerToArray< double >::get_data(void) const;

1389 11 get_subdata 0 4 2711 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
128
inline std::basic_string< char > ConstPointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

1390 13 get_ref_count 0 4 2711 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

1391 18 get_node_ref_count 0 4 2711 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

1392 13 __getbuffer__ 0 4 2711 44 ConstPointerToArray< double >::__getbuffer__ 0 1 11 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1393 17 __releasebuffer__ 0 4 2711 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 12 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1394 20 ~ConstPointerToArray 0 4 2711 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

1395 5 clear 0 4 2719 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 29 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

1396 6 output 0 4 2719 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 30 0
82
void PointerToBase< ReferenceCountedVector< float > >::output(ostream &out) const;

1397 19 ~PointerToArrayBase 0 4 2718 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

1398 19 ConstPointerToArray 0 4 2717 49 ConstPointerToArray< float >::ConstPointerToArray 0 3 17 18 19 0
279
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);
ConstPointerToArray< float >::ConstPointerToArray(PyObject *self, PyObject *source);

1399 4 size 0 4 2717 34 ConstPointerToArray< float >::size 0 1 20 0
72
inline unsigned long int ConstPointerToArray< float >::size(void) const;

1400 11 get_element 0 4 2717 41 ConstPointerToArray< float >::get_element 0 1 21 0
89
inline float const &ConstPointerToArray< float >::get_element(unsigned long int n) const;

1401 11 __getitem__ 0 4 2717 41 ConstPointerToArray< float >::__getitem__ 0 1 22 0
82
float const &ConstPointerToArray< float >::__getitem__(unsigned long int n) const;

1402 8 get_data 0 4 2717 38 ConstPointerToArray< float >::get_data 0 1 23 0
84
inline std::basic_string< char > ConstPointerToArray< float >::get_data(void) const;

1403 11 get_subdata 0 4 2717 41 ConstPointerToArray< float >::get_subdata 0 1 24 0
127
inline std::basic_string< char > ConstPointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

1404 13 get_ref_count 0 4 2717 43 ConstPointerToArray< float >::get_ref_count 0 1 25 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

1405 18 get_node_ref_count 0 4 2717 48 ConstPointerToArray< float >::get_node_ref_count 0 1 26 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

1406 13 __getbuffer__ 0 4 2717 43 ConstPointerToArray< float >::__getbuffer__ 0 1 27 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1407 17 __releasebuffer__ 0 4 2717 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 28 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1408 20 ~ConstPointerToArray 0 4 2717 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

1409 5 clear 0 4 2723 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 43 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

1410 6 output 0 4 2723 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 44 0
80
void PointerToBase< ReferenceCountedVector< int > >::output(ostream &out) const;

1411 19 ~PointerToArrayBase 0 4 2722 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

1412 19 ConstPointerToArray 0 4 2721 47 ConstPointerToArray< int >::ConstPointerToArray 0 3 31 32 33 0
269
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);
ConstPointerToArray< int >::ConstPointerToArray(PyObject *self, PyObject *source);

1413 4 size 0 4 2721 32 ConstPointerToArray< int >::size 0 1 34 0
70
inline unsigned long int ConstPointerToArray< int >::size(void) const;

1414 11 get_element 0 4 2721 39 ConstPointerToArray< int >::get_element 0 1 35 0
85
inline int const &ConstPointerToArray< int >::get_element(unsigned long int n) const;

1415 11 __getitem__ 0 4 2721 39 ConstPointerToArray< int >::__getitem__ 0 1 36 0
78
int const &ConstPointerToArray< int >::__getitem__(unsigned long int n) const;

1416 8 get_data 0 4 2721 36 ConstPointerToArray< int >::get_data 0 1 37 0
82
inline std::basic_string< char > ConstPointerToArray< int >::get_data(void) const;

1417 11 get_subdata 0 4 2721 39 ConstPointerToArray< int >::get_subdata 0 1 38 0
125
inline std::basic_string< char > ConstPointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

1418 13 get_ref_count 0 4 2721 41 ConstPointerToArray< int >::get_ref_count 0 1 39 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

1419 18 get_node_ref_count 0 4 2721 46 ConstPointerToArray< int >::get_node_ref_count 0 1 40 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

1420 13 __getbuffer__ 0 4 2721 41 ConstPointerToArray< int >::__getbuffer__ 0 1 41 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1421 17 __releasebuffer__ 0 4 2721 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 42 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1422 20 ~ConstPointerToArray 0 4 2721 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

1423 5 clear 0 4 2727 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 57 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

1424 6 output 0 4 2727 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 58 0
90
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(ostream &out) const;

1425 19 ~PointerToArrayBase 0 4 2726 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

1426 19 ConstPointerToArray 0 4 2725 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 3 45 46 47 0
319
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);
ConstPointerToArray< unsigned char >::ConstPointerToArray(PyObject *self, PyObject *source);

1427 4 size 0 4 2725 42 ConstPointerToArray< unsigned char >::size 0 1 48 0
80
inline unsigned long int ConstPointerToArray< unsigned char >::size(void) const;

1428 11 get_element 0 4 2725 49 ConstPointerToArray< unsigned char >::get_element 0 1 49 0
105
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long int n) const;

1429 11 __getitem__ 0 4 2725 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 50 0
98
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

1430 8 get_data 0 4 2725 46 ConstPointerToArray< unsigned char >::get_data 0 1 51 0
92
inline std::basic_string< char > ConstPointerToArray< unsigned char >::get_data(void) const;

1431 11 get_subdata 0 4 2725 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 52 0
135
inline std::basic_string< char > ConstPointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

1432 13 get_ref_count 0 4 2725 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 53 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

1433 18 get_node_ref_count 0 4 2725 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 54 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

1434 13 __getbuffer__ 0 4 2725 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 55 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

1435 17 __releasebuffer__ 0 4 2725 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 56 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1436 20 ~ConstPointerToArray 0 4 2725 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

1437 11 ConfigFlags 0 4 2729 24 ConfigFlags::ConfigFlags 0 2 82 83 0
112
inline ConfigFlags::ConfigFlags(void) = default;
inline ConfigFlags::ConfigFlags(ConfigFlags const &) = default;

1438 12 ~ConfigFlags 0 4 2729 25 ConfigFlags::~ConfigFlags 0 0 0
32
ConfigFlags::~ConfigFlags(void);

1439 8 get_page 0 4 2728 27 ConfigDeclaration::get_page 0 1 59 67
/**
 * Returns the page on which this declaration can be found.
 */
59
inline ConfigPage *ConfigDeclaration::get_page(void) const;

1440 12 get_variable 0 4 2728 31 ConfigDeclaration::get_variable 0 1 60 148
/**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */
71
inline ConfigVariableCore *ConfigDeclaration::get_variable(void) const;

1441 16 get_default_page 0 4 2733 28 ConfigPage::get_default_page 0 1 84 0
54
static ConfigPage *ConfigPage::get_default_page(void);

1442 14 get_local_page 0 4 2733 26 ConfigPage::get_local_page 0 1 85 0
52
static ConfigPage *ConfigPage::get_local_page(void);

1443 8 get_name 0 4 2733 20 ConfigPage::get_name 0 1 86 115
/**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */
59
inline std::string const &ConfigPage::get_name(void) const;

1444 10 is_special 0 4 2733 22 ConfigPage::is_special 0 1 87 248
/**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */
47
inline bool ConfigPage::is_special(void) const;

1445 11 is_implicit 0 4 2733 23 ConfigPage::is_implicit 0 1 88 180
/**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */
48
inline bool ConfigPage::is_implicit(void) const;

1446 8 set_sort 0 4 2733 20 ConfigPage::set_sort 0 1 89 0
36
void ConfigPage::set_sort(int sort);

1447 8 get_sort 0 4 2733 20 ConfigPage::get_sort 0 1 90 93
/**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */
44
inline int ConfigPage::get_sort(void) const;

1448 12 get_page_seq 0 4 2733 24 ConfigPage::get_page_seq 0 1 91 413
/**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */
48
inline int ConfigPage::get_page_seq(void) const;

1449 15 get_trust_level 0 4 2733 27 ConfigPage::get_trust_level 0 1 92 302
/**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */
51
inline int ConfigPage::get_trust_level(void) const;

1450 15 set_trust_level 0 4 2733 27 ConfigPage::set_trust_level 0 1 93 195
/**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */
57
inline void ConfigPage::set_trust_level(int trust_level);

1451 13 get_signature 0 4 2733 25 ConfigPage::get_signature 0 1 94 153
/**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */
64
inline std::string const &ConfigPage::get_signature(void) const;

1452 5 clear 0 4 2733 17 ConfigPage::clear 0 1 95 0
29
void ConfigPage::clear(void);

1453 8 read_prc 0 4 2733 20 ConfigPage::read_prc 0 1 96 0
39
bool ConfigPage::read_prc(istream &in);

1454 18 read_encrypted_prc 0 4 2733 30 ConfigPage::read_encrypted_prc 0 1 97 0
78
bool ConfigPage::read_encrypted_prc(istream &in, std::string const &password);

1455 16 make_declaration 0 4 2733 28 ConfigPage::make_declaration 0 2 98 99 0
208
ConfigDeclaration *ConfigPage::make_declaration(std::string const &variable, std::string const &value);
ConfigDeclaration *ConfigPage::make_declaration(ConfigVariableCore *variable, std::string const &value);

1456 18 delete_declaration 0 4 2733 30 ConfigPage::delete_declaration 0 1 100 0
61
bool ConfigPage::delete_declaration(ConfigDeclaration *decl);

1457 20 get_num_declarations 0 4 2733 32 ConfigPage::get_num_declarations 0 1 101 0
57
std::size_t ConfigPage::get_num_declarations(void) const;

1458 15 get_declaration 0 4 2733 27 ConfigPage::get_declaration 0 1 102 0
74
ConfigDeclaration const *ConfigPage::get_declaration(std::size_t n) const;

1459 18 modify_declaration 0 4 2733 30 ConfigPage::modify_declaration 0 1 103 0
65
ConfigDeclaration *ConfigPage::modify_declaration(std::size_t n);

1460 17 get_variable_name 0 4 2733 29 ConfigPage::get_variable_name 0 1 104 0
63
std::string ConfigPage::get_variable_name(std::size_t n) const;

1461 16 get_string_value 0 4 2733 28 ConfigPage::get_string_value 0 1 105 0
62
std::string ConfigPage::get_string_value(std::size_t n) const;

1462 16 is_variable_used 0 4 2733 28 ConfigPage::is_variable_used 0 1 106 0
55
bool ConfigPage::is_variable_used(std::size_t n) const;

1463 6 output 0 4 2733 18 ConfigPage::output 0 1 107 0
44
void ConfigPage::output(ostream &out) const;

1464 22 output_brief_signature 0 4 2733 34 ConfigPage::output_brief_signature 0 1 108 0
60
void ConfigPage::output_brief_signature(ostream &out) const;

1465 5 write 0 4 2733 17 ConfigPage::write 0 1 109 0
43
void ConfigPage::write(ostream &out) const;

1466 8 get_name 0 4 2741 28 ConfigVariableCore::get_name 0 1 110 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableCore::get_name(void) const;

1467 7 is_used 0 4 2741 27 ConfigVariableCore::is_used 0 1 111 118
/**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */
52
inline bool ConfigVariableCore::is_used(void) const;

1468 14 get_value_type 0 4 2741 34 ConfigVariableCore::get_value_type 0 1 112 125
/**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */
77
inline ConfigFlags::ValueType ConfigVariableCore::get_value_type(void) const;

1469 15 get_description 0 4 2741 35 ConfigVariableCore::get_description 0 1 113 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableCore::get_description(void) const;

1470 9 get_flags 0 4 2741 29 ConfigVariableCore::get_flags 0 1 114 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableCore::get_flags(void) const;

1471 9 is_closed 0 4 2741 29 ConfigVariableCore::is_closed 0 1 115 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableCore::is_closed(void) const;

1472 15 get_trust_level 0 4 2741 35 ConfigVariableCore::get_trust_level 0 1 116 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableCore::get_trust_level(void) const;

1473 10 is_dynamic 0 4 2741 30 ConfigVariableCore::is_dynamic 0 1 117 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableCore::is_dynamic(void) const;

1474 17 get_default_value 0 4 2741 37 ConfigVariableCore::get_default_value 0 1 118 137
/**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */
82
inline ConfigDeclaration const *ConfigVariableCore::get_default_value(void) const;

1475 14 set_value_type 0 4 2741 34 ConfigVariableCore::set_value_type 0 1 119 0
75
void ConfigVariableCore::set_value_type(ConfigFlags::ValueType value_type);

1476 9 set_flags 0 4 2741 29 ConfigVariableCore::set_flags 0 1 120 0
46
void ConfigVariableCore::set_flags(int flags);

1477 15 set_description 0 4 2741 35 ConfigVariableCore::set_description 0 1 121 0
73
void ConfigVariableCore::set_description(std::string const &description);

1478 17 set_default_value 0 4 2741 37 ConfigVariableCore::set_default_value 0 1 122 0
77
void ConfigVariableCore::set_default_value(std::string const &default_value);

1479 8 set_used 0 4 2741 28 ConfigVariableCore::set_used 0 1 123 75
/**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */
47
inline void ConfigVariableCore::set_used(void);

1480 16 make_local_value 0 4 2741 36 ConfigVariableCore::make_local_value 0 1 124 0
62
ConfigDeclaration *ConfigVariableCore::make_local_value(void);

1481 17 clear_local_value 0 4 2741 37 ConfigVariableCore::clear_local_value 0 1 125 0
49
bool ConfigVariableCore::clear_local_value(void);

1482 15 has_local_value 0 4 2741 35 ConfigVariableCore::has_local_value 0 1 126 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableCore::has_local_value(void) const;

1483 9 has_value 0 4 2741 29 ConfigVariableCore::has_value 0 1 127 0
47
bool ConfigVariableCore::has_value(void) const;

1484 20 get_num_declarations 0 4 2741 40 ConfigVariableCore::get_num_declarations 0 1 128 0
65
std::size_t ConfigVariableCore::get_num_declarations(void) const;

1485 15 get_declaration 0 4 2741 35 ConfigVariableCore::get_declaration 0 1 129 0
82
ConfigDeclaration const *ConfigVariableCore::get_declaration(std::size_t n) const;

1486 18 get_num_references 0 4 2741 38 ConfigVariableCore::get_num_references 0 1 130 157
/**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */
70
inline std::size_t ConfigVariableCore::get_num_references(void) const;

1487 13 get_reference 0 4 2741 33 ConfigVariableCore::get_reference 0 1 131 335
/**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */
87
inline ConfigDeclaration const *ConfigVariableCore::get_reference(std::size_t n) const;

1488 26 get_num_trusted_references 0 4 2741 46 ConfigVariableCore::get_num_trusted_references 0 1 132 115
/**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */
78
inline std::size_t ConfigVariableCore::get_num_trusted_references(void) const;

1489 21 get_trusted_reference 0 4 2741 41 ConfigVariableCore::get_trusted_reference 0 1 133 428
/**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */
95
inline ConfigDeclaration const *ConfigVariableCore::get_trusted_reference(std::size_t n) const;

1490 25 get_num_unique_references 0 4 2741 45 ConfigVariableCore::get_num_unique_references 0 1 134 107
/**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */
77
inline std::size_t ConfigVariableCore::get_num_unique_references(void) const;

1491 20 get_unique_reference 0 4 2741 40 ConfigVariableCore::get_unique_reference 0 1 135 157
/**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */
94
inline ConfigDeclaration const *ConfigVariableCore::get_unique_reference(std::size_t n) const;

1492 6 output 0 4 2741 26 ConfigVariableCore::output 0 1 136 0
52
void ConfigVariableCore::output(ostream &out) const;

1493 5 write 0 4 2741 25 ConfigVariableCore::write 0 1 137 0
51
void ConfigVariableCore::write(ostream &out) const;

1494 16 get_string_value 0 4 2728 35 ConfigDeclaration::get_string_value 0 1 61 186
/**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */
74
inline std::string const &ConfigDeclaration::get_string_value(void) const;

1495 16 set_string_value 0 4 2728 35 ConfigDeclaration::set_string_value 0 1 62 55
/**
 * Changes the value assigned to this variable.
 */
74
inline void ConfigDeclaration::set_string_value(std::string const &value);

1496 13 get_num_words 0 4 2728 32 ConfigDeclaration::get_num_words 0 1 63 156
/**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */
64
inline std::size_t ConfigDeclaration::get_num_words(void) const;

1497 15 has_string_word 0 4 2728 34 ConfigDeclaration::has_string_word 0 1 64 184
/**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */
68
inline bool ConfigDeclaration::has_string_word(std::size_t n) const;

1498 13 has_bool_word 0 4 2728 32 ConfigDeclaration::has_bool_word 0 1 65 97
/**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */
66
inline bool ConfigDeclaration::has_bool_word(std::size_t n) const;

1499 12 has_int_word 0 4 2728 31 ConfigDeclaration::has_int_word 0 1 66 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
65
inline bool ConfigDeclaration::has_int_word(std::size_t n) const;

1500 14 has_int64_word 0 4 2728 33 ConfigDeclaration::has_int64_word 0 1 67 95
/**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */
67
inline bool ConfigDeclaration::has_int64_word(std::size_t n) const;

1501 15 has_double_word 0 4 2728 34 ConfigDeclaration::has_double_word 0 1 68 97
/**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */
68
inline bool ConfigDeclaration::has_double_word(std::size_t n) const;

1502 15 get_string_word 0 4 2728 34 ConfigDeclaration::get_string_word 0 1 69 153
/**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */
75
inline std::string ConfigDeclaration::get_string_word(std::size_t n) const;

1503 13 get_bool_word 0 4 2728 32 ConfigDeclaration::get_bool_word 0 1 70 145
/**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */
66
inline bool ConfigDeclaration::get_bool_word(std::size_t n) const;

1504 12 get_int_word 0 4 2728 31 ConfigDeclaration::get_int_word 0 1 71 140
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */
64
inline int ConfigDeclaration::get_int_word(std::size_t n) const;

1505 14 get_int64_word 0 4 2728 33 ConfigDeclaration::get_int64_word 0 1 72 140
/**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */
70
inline int64_t ConfigDeclaration::get_int64_word(std::size_t n) const;

1506 15 get_double_word 0 4 2728 34 ConfigDeclaration::get_double_word 0 1 73 143
/**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */
70
inline double ConfigDeclaration::get_double_word(std::size_t n) const;

1507 15 set_string_word 0 4 2728 34 ConfigDeclaration::set_string_word 0 1 74 0
81
void ConfigDeclaration::set_string_word(std::size_t n, std::string const &value);

1508 13 set_bool_word 0 4 2728 32 ConfigDeclaration::set_bool_word 0 1 75 0
65
void ConfigDeclaration::set_bool_word(std::size_t n, bool value);

1509 12 set_int_word 0 4 2728 31 ConfigDeclaration::set_int_word 0 1 76 0
63
void ConfigDeclaration::set_int_word(std::size_t n, int value);

1510 14 set_int64_word 0 4 2728 33 ConfigDeclaration::set_int64_word 0 1 77 0
69
void ConfigDeclaration::set_int64_word(std::size_t n, int64_t value);

1511 15 set_double_word 0 4 2728 34 ConfigDeclaration::set_double_word 0 1 78 0
69
void ConfigDeclaration::set_double_word(std::size_t n, double value);

1512 12 get_decl_seq 0 4 2728 31 ConfigDeclaration::get_decl_seq 0 1 79 254
/**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */
55
inline int ConfigDeclaration::get_decl_seq(void) const;

1513 6 output 0 4 2728 25 ConfigDeclaration::output 0 1 80 0
51
void ConfigDeclaration::output(ostream &out) const;

1514 5 write 0 4 2728 24 ConfigDeclaration::write 0 1 81 0
50
void ConfigDeclaration::write(ostream &out) const;

1515 21 loaded_implicit_pages 0 4 2744 40 ConfigPageManager::loaded_implicit_pages 0 1 138 155
/**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */
65
inline bool ConfigPageManager::loaded_implicit_pages(void) const;

1516 19 load_implicit_pages 0 4 2744 38 ConfigPageManager::load_implicit_pages 0 1 139 250
/**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */
57
inline void ConfigPageManager::load_implicit_pages(void);

1517 21 reload_implicit_pages 0 4 2744 40 ConfigPageManager::reload_implicit_pages 0 1 140 0
52
void ConfigPageManager::reload_implicit_pages(void);

1518 15 get_search_path 0 4 2744 34 ConfigPageManager::get_search_path 0 1 141 274
/**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */
61
inline DSearchPath &ConfigPageManager::get_search_path(void);

1519 20 get_num_prc_patterns 0 4 2744 39 ConfigPageManager::get_num_prc_patterns 0 1 142 270
/**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */
71
inline std::size_t ConfigPageManager::get_num_prc_patterns(void) const;

1520 15 get_prc_pattern 0 4 2744 34 ConfigPageManager::get_prc_pattern 0 1 143 131
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */
75
inline std::string ConfigPageManager::get_prc_pattern(std::size_t n) const;

1521 30 get_num_prc_encrypted_patterns 0 4 2744 49 ConfigPageManager::get_num_prc_encrypted_patterns 0 1 144 170
/**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */
81
inline std::size_t ConfigPageManager::get_num_prc_encrypted_patterns(void) const;

1522 25 get_prc_encrypted_pattern 0 4 2744 44 ConfigPageManager::get_prc_encrypted_pattern 0 1 145 151
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */
85
inline std::string ConfigPageManager::get_prc_encrypted_pattern(std::size_t n) const;

1523 31 get_num_prc_executable_patterns 0 4 2744 50 ConfigPageManager::get_num_prc_executable_patterns 0 1 146 232
/**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */
82
inline std::size_t ConfigPageManager::get_num_prc_executable_patterns(void) const;

1524 26 get_prc_executable_pattern 0 4 2744 45 ConfigPageManager::get_prc_executable_pattern 0 1 147 159
/**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */
86
inline std::string ConfigPageManager::get_prc_executable_pattern(std::size_t n) const;

1525 18 make_explicit_page 0 4 2744 37 ConfigPageManager::make_explicit_page 0 1 148 0
75
ConfigPage *ConfigPageManager::make_explicit_page(std::string const &name);

1526 20 delete_explicit_page 0 4 2744 39 ConfigPageManager::delete_explicit_page 0 1 149 0
63
bool ConfigPageManager::delete_explicit_page(ConfigPage *page);

1527 22 get_num_implicit_pages 0 4 2744 41 ConfigPageManager::get_num_implicit_pages 0 1 150 174
/**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */
73
inline std::size_t ConfigPageManager::get_num_implicit_pages(void) const;

1528 17 get_implicit_page 0 4 2744 36 ConfigPageManager::get_implicit_page 0 1 151 94
/**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_implicit_page(std::size_t n) const;

1529 22 get_num_explicit_pages 0 4 2744 41 ConfigPageManager::get_num_explicit_pages 0 1 152 214
/**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */
73
inline std::size_t ConfigPageManager::get_num_explicit_pages(void) const;

1530 17 get_explicit_page 0 4 2744 36 ConfigPageManager::get_explicit_page 0 1 153 94
/**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */
77
inline ConfigPage *ConfigPageManager::get_explicit_page(std::size_t n) const;

1531 6 output 0 4 2744 25 ConfigPageManager::output 0 1 154 0
51
void ConfigPageManager::output(ostream &out) const;

1532 5 write 0 4 2744 24 ConfigPageManager::write 0 1 155 0
50
void ConfigPageManager::write(ostream &out) const;

1533 14 get_global_ptr 0 4 2744 33 ConfigPageManager::get_global_ptr 0 1 156 0
66
static ConfigPageManager *ConfigPageManager::get_global_ptr(void);

1534 8 get_name 0 4 2746 28 ConfigVariableBase::get_name 0 1 163 44
/**
 * Returns the name of the variable.
 */
67
inline std::string const &ConfigVariableBase::get_name(void) const;

1535 14 get_value_type 0 4 2746 34 ConfigVariableBase::get_value_type 0 1 164 132
/**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */
77
inline ConfigFlags::ValueType ConfigVariableBase::get_value_type(void) const;

1536 15 get_description 0 4 2746 35 ConfigVariableBase::get_description 0 1 165 82
/**
 * Returns the brief description of this variable, if it has been defined.
 */
74
inline std::string const &ConfigVariableBase::get_description(void) const;

1537 9 get_flags 0 4 2746 29 ConfigVariableBase::get_flags 0 1 166 250
/**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */
53
inline int ConfigVariableBase::get_flags(void) const;

1538 9 is_closed 0 4 2746 29 ConfigVariableBase::is_closed 0 1 167 413
/**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
54
inline bool ConfigVariableBase::is_closed(void) const;

1539 15 get_trust_level 0 4 2746 35 ConfigVariableBase::get_trust_level 0 1 168 479
/**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */
59
inline int ConfigVariableBase::get_trust_level(void) const;

1540 10 is_dynamic 0 4 2746 30 ConfigVariableBase::is_dynamic 0 1 169 232
/**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */
55
inline bool ConfigVariableBase::is_dynamic(void) const;

1541 17 clear_local_value 0 4 2746 37 ConfigVariableBase::clear_local_value 0 1 170 240
/**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */
56
inline bool ConfigVariableBase::clear_local_value(void);

1542 15 has_local_value 0 4 2746 35 ConfigVariableBase::has_local_value 0 1 171 148
/**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */
60
inline bool ConfigVariableBase::has_local_value(void) const;

1543 9 has_value 0 4 2746 29 ConfigVariableBase::has_value 0 1 172 149
/**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */
54
inline bool ConfigVariableBase::has_value(void) const;

1544 6 output 0 4 2746 26 ConfigVariableBase::output 0 1 173 10
/**
 *
 */
59
inline void ConfigVariableBase::output(ostream &out) const;

1545 5 write 0 4 2746 25 ConfigVariableBase::write 0 1 174 10
/**
 *
 */
58
inline void ConfigVariableBase::write(ostream &out) const;

1546 14 ConfigVariable 0 4 2745 30 ConfigVariable::ConfigVariable 0 2 157 158 458
/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * This constructor is only intended to be called from a specialized
 * ConfigVariableFoo derived class.
 */

/**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */
136
inline ConfigVariable::ConfigVariable(std::string const &name);
inline ConfigVariable::ConfigVariable(ConfigVariable const &) = default;

1547 15 ~ConfigVariable 0 4 2745 31 ConfigVariable::~ConfigVariable 0 0 10
/**
 *
 */
45
inline ConfigVariable::~ConfigVariable(void);

1548 16 get_string_value 0 4 2745 32 ConfigVariable::get_string_value 0 1 159 77
/**
 * Returns the toplevel value of the variable, formatted as a string.
 */
71
inline std::string const &ConfigVariable::get_string_value(void) const;

1549 16 set_string_value 0 4 2745 32 ConfigVariable::set_string_value 0 1 160 177
/**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */
71
inline void ConfigVariable::set_string_value(std::string const &value);

1550 11 clear_value 0 4 2745 27 ConfigVariable::clear_value 0 1 161 129
/**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */
46
inline void ConfigVariable::clear_value(void);

1551 13 get_num_words 0 4 2745 29 ConfigVariable::get_num_words 0 1 162 153
/**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */
61
inline std::size_t ConfigVariable::get_num_words(void) const;

1552 18 ConfigVariableBool 0 4 2747 38 ConfigVariableBool::ConfigVariableBool 0 4 175 176 177 178 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
470
inline ConfigVariableBool::ConfigVariableBool(std::string const &name);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, bool default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableBool::ConfigVariableBool(ConfigVariableBool const &) = default;

1553 10 operator = 0 4 2747 30 ConfigVariableBool::operator = 0 1 179 0
55
inline void ConfigVariableBool::operator =(bool value);

1554 22 operator typecast bool 0 132 2747 42 ConfigVariableBool::operator typecast bool 0 1 187 0
67
inline bool ConfigVariableBool::operator typecast bool(void) const;

1555 4 size 0 4 2747 24 ConfigVariableBool::size 0 1 180 62
/**
 * Returns the number of unique words in the variable.
 */
56
inline std::size_t ConfigVariableBool::size(void) const;

1556 11 operator [] 0 4 2747 31 ConfigVariableBool::operator [] 0 1 181 0
65
inline bool ConfigVariableBool::operator [](std::size_t n) const;

1557 9 set_value 0 4 2747 29 ConfigVariableBool::set_value 0 1 182 48
/**
 * Reassigns the variable's local value.
 */
54
inline void ConfigVariableBool::set_value(bool value);

1558 9 get_value 0 4 2747 29 ConfigVariableBool::get_value 0 1 183 40
/**
 * Returns the variable's value.
 */
54
inline bool ConfigVariableBool::get_value(void) const;

1559 17 get_default_value 0 4 2747 37 ConfigVariableBool::get_default_value 0 1 184 48
/**
 * Returns the variable's default value.
 */
62
inline bool ConfigVariableBool::get_default_value(void) const;

1560 8 get_word 0 4 2747 28 ConfigVariableBool::get_word 0 1 185 44
/**
 * Returns the variable's nth value.
 */
62
inline bool ConfigVariableBool::get_word(std::size_t n) const;

1561 8 set_word 0 4 2747 28 ConfigVariableBool::set_word 0 1 186 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
68
inline void ConfigVariableBool::set_word(std::size_t n, bool value);

1562 19 ~ConfigVariableBool 0 4 2747 39 ConfigVariableBool::~ConfigVariableBool 0 0 0
46
ConfigVariableBool::~ConfigVariableBool(void);

1563 20 ConfigVariableDouble 0 4 2748 42 ConfigVariableDouble::ConfigVariableDouble 0 4 188 189 190 191 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
490
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, double default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableDouble::ConfigVariableDouble(ConfigVariableDouble const &) = default;

1564 10 operator = 0 4 2748 32 ConfigVariableDouble::operator = 0 1 192 0
59
inline void ConfigVariableDouble::operator =(double value);

1565 24 operator typecast double 0 132 2748 46 ConfigVariableDouble::operator typecast double 0 1 200 0
73
inline double ConfigVariableDouble::operator typecast double(void) const;

1566 4 size 0 4 2748 26 ConfigVariableDouble::size 0 1 193 62
/**
 * Returns the number of unique words in the variable.
 */
58
inline std::size_t ConfigVariableDouble::size(void) const;

1567 11 operator [] 0 4 2748 33 ConfigVariableDouble::operator [] 0 1 194 0
69
inline double ConfigVariableDouble::operator [](std::size_t n) const;

1568 9 set_value 0 4 2748 31 ConfigVariableDouble::set_value 0 1 195 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableDouble::set_value(double value);

1569 9 get_value 0 4 2748 31 ConfigVariableDouble::get_value 0 1 196 40
/**
 * Returns the variable's value.
 */
58
inline double ConfigVariableDouble::get_value(void) const;

1570 17 get_default_value 0 4 2748 39 ConfigVariableDouble::get_default_value 0 1 197 48
/**
 * Returns the variable's default value.
 */
66
inline double ConfigVariableDouble::get_default_value(void) const;

1571 8 get_word 0 4 2748 30 ConfigVariableDouble::get_word 0 1 198 44
/**
 * Returns the variable's nth value.
 */
66
inline double ConfigVariableDouble::get_word(std::size_t n) const;

1572 8 set_word 0 4 2748 30 ConfigVariableDouble::set_word 0 1 199 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableDouble::set_word(std::size_t n, double value);

1573 21 ~ConfigVariableDouble 0 4 2748 43 ConfigVariableDouble::~ConfigVariableDouble 0 0 0
50
ConfigVariableDouble::~ConfigVariableDouble(void);

1574 22 ConfigVariableFilename 0 4 2750 46 ConfigVariableFilename::ConfigVariableFilename 0 3 201 202 203 22
/**
 *
 */

/**
 *
 */
345
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name);
inline ConfigVariableFilename::ConfigVariableFilename(std::string const &name, Filename const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableFilename::ConfigVariableFilename(ConfigVariableFilename const &) = default;

1575 10 operator = 0 4 2750 34 ConfigVariableFilename::operator = 0 1 204 0
70
inline void ConfigVariableFilename::operator =(Filename const &value);

1576 17 operator typecast 0 132 2750 41 ConfigVariableFilename::operator typecast 0 1 223 0
77
inline Filename const &ConfigVariableFilename::operator typecast(void) const;

1577 5 c_str 0 4 2750 29 ConfigVariableFilename::c_str 0 1 205 88
// These methods help the ConfigVariableFilename act like a Filename object.

/**
 *
 */
61
inline char const *ConfigVariableFilename::c_str(void) const;

1578 5 empty 0 4 2750 29 ConfigVariableFilename::empty 0 1 206 10
/**
 *
 */
54
inline bool ConfigVariableFilename::empty(void) const;

1579 6 length 0 4 2750 30 ConfigVariableFilename::length 0 1 207 10
/**
 *
 */
62
inline std::size_t ConfigVariableFilename::length(void) const;

1580 11 operator [] 0 4 2750 35 ConfigVariableFilename::operator [] 0 1 208 0
69
inline char ConfigVariableFilename::operator [](std::size_t n) const;

1581 12 get_fullpath 0 4 2750 36 ConfigVariableFilename::get_fullpath 0 1 209 183
/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */
68
inline std::string ConfigVariableFilename::get_fullpath(void) const;

1582 11 get_dirname 0 4 2750 35 ConfigVariableFilename::get_dirname 0 1 210 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
67
inline std::string ConfigVariableFilename::get_dirname(void) const;

1583 12 get_basename 0 4 2750 36 ConfigVariableFilename::get_basename 0 1 211 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
68
inline std::string ConfigVariableFilename::get_basename(void) const;

1584 25 get_fullpath_wo_extension 0 4 2750 49 ConfigVariableFilename::get_fullpath_wo_extension 0 1 212 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
81
inline std::string ConfigVariableFilename::get_fullpath_wo_extension(void) const;

1585 25 get_basename_wo_extension 0 4 2750 49 ConfigVariableFilename::get_basename_wo_extension 0 1 213 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
81
inline std::string ConfigVariableFilename::get_basename_wo_extension(void) const;

1586 13 get_extension 0 4 2750 37 ConfigVariableFilename::get_extension 0 1 214 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
69
inline std::string ConfigVariableFilename::get_extension(void) const;

1587 11 operator == 0 4 2750 35 ConfigVariableFilename::operator == 0 1 215 34
// Comparison operators are handy.
77
inline bool ConfigVariableFilename::operator ==(Filename const &other) const;

1588 11 operator != 0 4 2750 35 ConfigVariableFilename::operator != 0 1 216 0
77
inline bool ConfigVariableFilename::operator !=(Filename const &other) const;

1589 10 operator < 0 4 2750 34 ConfigVariableFilename::operator < 0 1 217 0
76
inline bool ConfigVariableFilename::operator <(Filename const &other) const;

1590 9 set_value 0 4 2750 33 ConfigVariableFilename::set_value 0 1 218 48
/**
 * Reassigns the variable's local value.
 */
69
inline void ConfigVariableFilename::set_value(Filename const &value);

1591 9 get_value 0 4 2750 33 ConfigVariableFilename::get_value 0 1 219 40
/**
 * Returns the variable's value.
 */
62
inline Filename ConfigVariableFilename::get_value(void) const;

1592 17 get_default_value 0 4 2750 41 ConfigVariableFilename::get_default_value 0 1 220 48
/**
 * Returns the variable's default value.
 */
70
inline Filename ConfigVariableFilename::get_default_value(void) const;

1593 8 Filename 0 4 2751 18 Filename::Filename 0 3 224 225 226 85
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Creates an empty Filename.
 */
139
inline Filename::Filename(void);
Filename::Filename(Filename const &dirname, Filename const &basename);
Filename::Filename(PyObject *path);

1594 10 __reduce__ 0 4 2751 20 Filename::__reduce__ 0 1 227 0
53
PyObject *Filename::__reduce__(PyObject *self) const;

1595 13 text_filename 0 4 2751 23 Filename::text_filename 0 2 228 229 192
// Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type().

/**
 *
 */

/**
 *
 */
150
static inline Filename Filename::text_filename(Filename const &filename);
static inline Filename Filename::text_filename(std::string const &filename);

1596 15 binary_filename 0 4 2751 25 Filename::binary_filename 0 2 230 231 22
/**
 *
 */

/**
 *
 */
154
static inline Filename Filename::binary_filename(Filename const &filename);
static inline Filename Filename::binary_filename(std::string const &filename);

1597 12 dso_filename 0 4 2751 22 Filename::dso_filename 0 1 232 10
/**
 *
 */
75
static inline Filename Filename::dso_filename(std::string const &filename);

1598 19 executable_filename 0 4 2751 29 Filename::executable_filename 0 1 233 10
/**
 *
 */
82
static inline Filename Filename::executable_filename(std::string const &filename);

1599 16 pattern_filename 0 4 2751 26 Filename::pattern_filename 0 1 234 101
/**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */
79
static inline Filename Filename::pattern_filename(std::string const &filename);

1600 16 from_os_specific 0 4 2751 26 Filename::from_os_specific 0 1 235 0
120
static Filename Filename::from_os_specific(std::string const &os_specific, Filename::Type type = ::Filename::T_general);

1601 18 from_os_specific_w 0 4 2751 28 Filename::from_os_specific_w 0 1 236 0
123
static Filename Filename::from_os_specific_w(std::wstring const &os_specific, Filename::Type type = ::Filename::T_general);

1602 11 expand_from 0 4 2751 21 Filename::expand_from 0 1 237 0
115
static Filename Filename::expand_from(std::string const &user_string, Filename::Type type = ::Filename::T_general);

1603 9 temporary 0 4 2751 19 Filename::temporary 0 1 238 0
174
static Filename Filename::temporary(std::string const &dirname, std::string const &prefix, std::string const &suffix = string(), Filename::Type type = ::Filename::T_general);

1604 18 get_home_directory 0 4 2751 28 Filename::get_home_directory 0 1 239 0
58
static Filename const &Filename::get_home_directory(void);

1605 18 get_temp_directory 0 4 2751 28 Filename::get_temp_directory 0 1 240 0
58
static Filename const &Filename::get_temp_directory(void);

1606 26 get_user_appdata_directory 0 4 2751 36 Filename::get_user_appdata_directory 0 1 241 0
66
static Filename const &Filename::get_user_appdata_directory(void);

1607 28 get_common_appdata_directory 0 4 2751 38 Filename::get_common_appdata_directory 0 1 242 0
68
static Filename const &Filename::get_common_appdata_directory(void);

1608 10 operator = 0 4 2751 20 Filename::operator = 0 4 243 244 245 246 84
// Assignment is via the = operator.

/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
258
inline Filename &Filename::operator =(std::string const &filename);
inline Filename &Filename::operator =(std::wstring const &filename);
inline Filename &Filename::operator =(char const *filename);
inline Filename &Filename::operator =(Filename const &copy);

1609 17 operator typecast 0 132 2751 27 Filename::operator typecast 0 1 339 60
// And retrieval is by any of the classic string operations.
66
inline std::string const &Filename::operator typecast(void) const;

1610 5 c_str 0 4 2751 15 Filename::c_str 0 1 247 10
/**
 *
 */
47
inline char const *Filename::c_str(void) const;

1611 5 empty 0 4 2751 15 Filename::empty 0 1 248 10
/**
 *
 */
40
inline bool Filename::empty(void) const;

1612 6 length 0 4 2751 16 Filename::length 0 1 249 10
/**
 *
 */
48
inline std::size_t Filename::length(void) const;

1613 11 operator [] 0 4 2751 21 Filename::operator [] 0 1 250 0
55
inline char Filename::operator [](std::size_t n) const;

1614 8 __repr__ 0 4 2751 18 Filename::__repr__ 0 1 251 0
41
PyObject *Filename::__repr__(void) const;

1615 10 __fspath__ 0 4 2751 20 Filename::__fspath__ 0 1 252 0
43
PyObject *Filename::__fspath__(void) const;

1616 6 substr 0 4 2751 16 Filename::substr 0 2 253 254 22
/**
 *
 */

/**
 *
 */
140
inline std::string Filename::substr(std::size_t begin) const;
inline std::string Filename::substr(std::size_t begin, std::size_t end) const;

1617 11 operator += 0 4 2751 21 Filename::operator += 0 1 255 0
60
inline void Filename::operator +=(std::string const &other);

1618 10 operator + 0 4 2751 20 Filename::operator + 0 1 256 0
69
inline Filename Filename::operator +(std::string const &other) const;

1619 10 operator / 0 4 2751 20 Filename::operator / 0 1 257 0
66
inline Filename Filename::operator /(Filename const &other) const;

1620 12 get_fullpath 0 4 2751 22 Filename::get_fullpath 0 1 258 174
// Or, you can use any of these.

/**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */
54
inline std::string Filename::get_fullpath(void) const;

1621 14 get_fullpath_w 0 4 2751 24 Filename::get_fullpath_w 0 1 259 66
/**
 * Returns the entire filename as a wide-character string.
 */
57
inline std::wstring Filename::get_fullpath_w(void) const;

1622 11 get_dirname 0 4 2751 21 Filename::get_dirname 0 1 260 139
/**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */
53
inline std::string Filename::get_dirname(void) const;

1623 12 get_basename 0 4 2751 22 Filename::get_basename 0 1 261 145
/**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */
54
inline std::string Filename::get_basename(void) const;

1624 25 get_fullpath_wo_extension 0 4 2751 35 Filename::get_fullpath_wo_extension 0 1 262 96
/**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */
67
inline std::string Filename::get_fullpath_wo_extension(void) const;

1625 25 get_basename_wo_extension 0 4 2751 35 Filename::get_basename_wo_extension 0 1 263 81
/**
 * Returns the basename part of the filename, without the file extension.
 */
67
inline std::string Filename::get_basename_wo_extension(void) const;

1626 13 get_extension 0 4 2751 23 Filename::get_extension 0 1 264 140
/**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */
55
inline std::string Filename::get_extension(void) const;

1627 12 set_fullpath 0 4 2751 22 Filename::set_fullpath 0 1 265 68
// You can also use any of these to reassign pieces of the filename.
50
void Filename::set_fullpath(std::string const &s);

1628 11 set_dirname 0 4 2751 21 Filename::set_dirname 0 1 266 0
49
void Filename::set_dirname(std::string const &s);

1629 12 set_basename 0 4 2751 22 Filename::set_basename 0 1 267 0
50
void Filename::set_basename(std::string const &s);

1630 25 set_fullpath_wo_extension 0 4 2751 35 Filename::set_fullpath_wo_extension 0 1 268 0
63
void Filename::set_fullpath_wo_extension(std::string const &s);

1631 25 set_basename_wo_extension 0 4 2751 35 Filename::set_basename_wo_extension 0 1 269 0
63
void Filename::set_basename_wo_extension(std::string const &s);

1632 13 set_extension 0 4 2751 23 Filename::set_extension 0 1 270 0
51
void Filename::set_extension(std::string const &s);

1633 10 set_binary 0 4 2751 20 Filename::set_binary 0 1 271 429
// Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll).

/**
 * Indicates that the filename represents a binary file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
39
inline void Filename::set_binary(void);

1634 8 set_text 0 4 2751 18 Filename::set_text 0 1 272 190
/**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */
37
inline void Filename::set_text(void);

1635 9 is_binary 0 4 2751 19 Filename::is_binary 0 1 273 256
/**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */
44
inline bool Filename::is_binary(void) const;

1636 7 is_text 0 4 2751 17 Filename::is_text 0 1 274 252
/**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */
42
inline bool Filename::is_text(void) const;

1637 17 is_binary_or_text 0 4 2751 27 Filename::is_binary_or_text 0 1 275 198
/**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */
52
inline bool Filename::is_binary_or_text(void) const;

1638 8 set_type 0 4 2751 18 Filename::set_type 0 1 276 350
/**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */
52
inline void Filename::set_type(Filename::Type type);

1639 8 get_type 0 4 2751 18 Filename::get_type 0 1 277 104
/**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */
53
inline Filename::Type Filename::get_type(void) const;

1640 11 set_pattern 0 4 2751 21 Filename::set_pattern 0 1 278 688
/**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */
48
inline void Filename::set_pattern(bool pattern);

1641 11 get_pattern 0 4 2751 21 Filename::get_pattern 0 1 279 97
/**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */
46
inline bool Filename::get_pattern(void) const;

1642 8 has_hash 0 4 2751 18 Filename::has_hash 0 1 280 354
/**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */
43
inline bool Filename::has_hash(void) const;

1643 18 get_filename_index 0 4 2751 28 Filename::get_filename_index 0 1 281 0
55
Filename Filename::get_filename_index(int index) const;

1644 15 get_hash_to_end 0 4 2751 25 Filename::get_hash_to_end 0 1 282 130
/**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */
57
inline std::string Filename::get_hash_to_end(void) const;

1645 15 set_hash_to_end 0 4 2751 25 Filename::set_hash_to_end 0 1 283 0
53
void Filename::set_hash_to_end(std::string const &s);

1646 18 extract_components 0 4 2751 28 Filename::extract_components 0 1 284 0
67
void Filename::extract_components(vector_string &components) const;

1647 11 standardize 0 4 2751 21 Filename::standardize 0 1 285 0
33
void Filename::standardize(void);

1648 8 is_local 0 4 2751 18 Filename::is_local 0 1 286 146
/**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */
43
inline bool Filename::is_local(void) const;

1649 18 is_fully_qualified 0 4 2751 28 Filename::is_fully_qualified 0 1 287 444
/**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */
53
inline bool Filename::is_fully_qualified(void) const;

1650 13 make_absolute 0 4 2751 23 Filename::make_absolute 0 2 288 289 0
98
void Filename::make_absolute(void);
void Filename::make_absolute(Filename const &start_directory);

1651 14 make_canonical 0 4 2751 24 Filename::make_canonical 0 1 290 0
36
bool Filename::make_canonical(void);

1652 14 make_true_case 0 4 2751 24 Filename::make_true_case 0 1 291 0
36
bool Filename::make_true_case(void);

1653 14 to_os_specific 0 4 2751 24 Filename::to_os_specific 0 1 292 0
49
std::string Filename::to_os_specific(void) const;

1654 16 to_os_specific_w 0 4 2751 26 Filename::to_os_specific_w 0 1 293 0
52
std::wstring Filename::to_os_specific_w(void) const;

1655 13 to_os_generic 0 4 2751 23 Filename::to_os_generic 0 1 294 0
48
std::string Filename::to_os_generic(void) const;

1656 16 to_os_short_name 0 4 2751 26 Filename::to_os_short_name 0 1 295 0
51
std::string Filename::to_os_short_name(void) const;

1657 15 to_os_long_name 0 4 2751 25 Filename::to_os_long_name 0 1 296 0
50
std::string Filename::to_os_long_name(void) const;

1658 6 exists 0 4 2751 16 Filename::exists 0 1 297 0
34
bool Filename::exists(void) const;

1659 15 is_regular_file 0 4 2751 25 Filename::is_regular_file 0 1 298 0
43
bool Filename::is_regular_file(void) const;

1660 11 is_writable 0 4 2751 21 Filename::is_writable 0 1 299 0
39
bool Filename::is_writable(void) const;

1661 12 is_directory 0 4 2751 22 Filename::is_directory 0 1 300 0
40
bool Filename::is_directory(void) const;

1662 13 is_executable 0 4 2751 23 Filename::is_executable 0 1 301 0
41
bool Filename::is_executable(void) const;

1663 18 compare_timestamps 0 4 2751 28 Filename::compare_timestamps 0 1 302 0
129
int Filename::compare_timestamps(Filename const &other, bool this_missing_is_old = true, bool other_missing_is_old = true) const;

1664 13 get_timestamp 0 4 2751 23 Filename::get_timestamp 0 1 303 0
43
time_t Filename::get_timestamp(void) const;

1665 20 get_access_timestamp 0 4 2751 30 Filename::get_access_timestamp 0 1 304 0
50
time_t Filename::get_access_timestamp(void) const;

1666 13 get_file_size 0 4 2751 23 Filename::get_file_size 0 1 305 0
47
streamsize Filename::get_file_size(void) const;

1667 16 resolve_filename 0 4 2751 26 Filename::resolve_filename 0 1 306 0
112
bool Filename::resolve_filename(DSearchPath const &searchpath, std::string const &default_extension = string());

1668 16 make_relative_to 0 4 2751 26 Filename::make_relative_to 0 1 307 0
79
bool Filename::make_relative_to(Filename directory, bool allow_backups = true);

1669 18 find_on_searchpath 0 4 2751 28 Filename::find_on_searchpath 0 1 308 0
64
int Filename::find_on_searchpath(DSearchPath const &searchpath);

1670 14 scan_directory 0 4 2751 24 Filename::scan_directory 0 2 309 310 0
109
bool Filename::scan_directory(vector_string &contents) const;
PyObject *Filename::scan_directory(void) const;

1671 9 open_read 0 4 2751 19 Filename::open_read 0 2 311 312 0
100
bool Filename::open_read(ifstream &stream) const;
bool Filename::open_read(pifstream &stream) const;

1672 10 open_write 0 4 2751 20 Filename::open_write 0 2 313 314 0
146
bool Filename::open_write(ofstream &stream, bool truncate = true) const;
bool Filename::open_write(pofstream &stream, bool truncate = true) const;

1673 11 open_append 0 4 2751 21 Filename::open_append 0 2 315 316 0
104
bool Filename::open_append(ofstream &stream) const;
bool Filename::open_append(pofstream &stream) const;

1674 15 open_read_write 0 4 2751 25 Filename::open_read_write 0 2 317 318 0
156
bool Filename::open_read_write(fstream &stream, bool truncate = false) const;
bool Filename::open_read_write(pfstream &stream, bool truncate = false) const;

1675 16 open_read_append 0 4 2751 26 Filename::open_read_append 0 2 319 320 0
112
bool Filename::open_read_append(fstream &stream) const;
bool Filename::open_read_append(pfstream &stream) const;

1676 5 chdir 0 4 2751 15 Filename::chdir 0 1 321 0
33
bool Filename::chdir(void) const;

1677 5 touch 0 4 2751 15 Filename::touch 0 1 322 0
33
bool Filename::touch(void) const;

1678 6 unlink 0 4 2751 16 Filename::unlink 0 1 323 0
34
bool Filename::unlink(void) const;

1679 9 rename_to 0 4 2751 19 Filename::rename_to 0 1 324 0
54
bool Filename::rename_to(Filename const &other) const;

1680 7 copy_to 0 4 2751 17 Filename::copy_to 0 1 325 0
52
bool Filename::copy_to(Filename const &other) const;

1681 8 make_dir 0 4 2751 18 Filename::make_dir 0 1 326 0
36
bool Filename::make_dir(void) const;

1682 5 mkdir 0 4 2751 15 Filename::mkdir 0 1 327 0
33
bool Filename::mkdir(void) const;

1683 5 rmdir 0 4 2751 15 Filename::rmdir 0 1 328 0
33
bool Filename::rmdir(void) const;

1684 11 operator == 0 4 2751 21 Filename::operator == 0 1 329 34
// Comparison operators are handy.
66
inline bool Filename::operator ==(std::string const &other) const;

1685 11 operator != 0 4 2751 21 Filename::operator != 0 1 330 0
66
inline bool Filename::operator !=(std::string const &other) const;

1686 10 operator < 0 4 2751 20 Filename::operator < 0 1 331 0
65
inline bool Filename::operator <(std::string const &other) const;

1687 10 compare_to 0 4 2751 20 Filename::compare_to 0 1 332 10
/**
 *
 */
61
inline int Filename::compare_to(Filename const &other) const;

1688 11 __nonzero__ 0 4 2751 21 Filename::__nonzero__ 0 1 333 349
/**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */
46
inline bool Filename::__nonzero__(void) const;

1689 8 get_hash 0 4 2751 18 Filename::get_hash 0 1 334 0
35
int Filename::get_hash(void) const;

1690 6 output 0 4 2751 16 Filename::output 0 1 335 10
/**
 *
 */
49
inline void Filename::output(ostream &out) const;

1691 23 set_filesystem_encoding 0 4 2751 33 Filename::set_filesystem_encoding 0 1 336 266
/**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */
85
static inline void Filename::set_filesystem_encoding(TextEncoder::Encoding encoding);

1692 23 get_filesystem_encoding 0 4 2751 33 Filename::get_filesystem_encoding 0 1 337 125
/**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */
76
static inline TextEncoder::Encoding Filename::get_filesystem_encoding(void);

1693 14 get_class_type 0 4 2751 24 Filename::get_class_type 0 1 338 0
49
static TypeHandle Filename::get_class_type(void);

1694 9 ~Filename 0 4 2751 19 Filename::~Filename 0 0 0
26
Filename::~Filename(void);

1695 8 get_word 0 4 2750 32 ConfigVariableFilename::get_word 0 1 221 44
/**
 * Returns the variable's nth value.
 */
70
inline Filename ConfigVariableFilename::get_word(std::size_t n) const;

1696 8 set_word 0 4 2750 32 ConfigVariableFilename::set_word 0 1 222 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
83
inline void ConfigVariableFilename::set_word(std::size_t n, Filename const &value);

1697 23 ~ConfigVariableFilename 0 4 2750 47 ConfigVariableFilename::~ConfigVariableFilename 0 0 0
54
ConfigVariableFilename::~ConfigVariableFilename(void);

1698 17 ConfigVariableInt 0 4 2753 36 ConfigVariableInt::ConfigVariableInt 0 4 340 341 342 343 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
460
inline ConfigVariableInt::ConfigVariableInt(std::string const &name);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, int default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt::ConfigVariableInt(ConfigVariableInt const &) = default;

1699 10 operator = 0 4 2753 29 ConfigVariableInt::operator = 0 1 344 0
53
inline void ConfigVariableInt::operator =(int value);

1700 21 operator typecast int 0 132 2753 40 ConfigVariableInt::operator typecast int 0 1 352 0
64
inline int ConfigVariableInt::operator typecast int(void) const;

1701 4 size 0 4 2753 23 ConfigVariableInt::size 0 1 345 62
/**
 * Returns the number of unique words in the variable.
 */
55
inline std::size_t ConfigVariableInt::size(void) const;

1702 11 operator [] 0 4 2753 30 ConfigVariableInt::operator [] 0 1 346 0
63
inline int ConfigVariableInt::operator [](std::size_t n) const;

1703 9 set_value 0 4 2753 28 ConfigVariableInt::set_value 0 1 347 48
/**
 * Reassigns the variable's local value.
 */
52
inline void ConfigVariableInt::set_value(int value);

1704 9 get_value 0 4 2753 28 ConfigVariableInt::get_value 0 1 348 40
/**
 * Returns the variable's value.
 */
52
inline int ConfigVariableInt::get_value(void) const;

1705 17 get_default_value 0 4 2753 36 ConfigVariableInt::get_default_value 0 1 349 48
/**
 * Returns the variable's default value.
 */
60
inline int ConfigVariableInt::get_default_value(void) const;

1706 8 get_word 0 4 2753 27 ConfigVariableInt::get_word 0 1 350 44
/**
 * Returns the variable's nth value.
 */
60
inline int ConfigVariableInt::get_word(std::size_t n) const;

1707 8 set_word 0 4 2753 27 ConfigVariableInt::set_word 0 1 351 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
66
inline void ConfigVariableInt::set_word(std::size_t n, int value);

1708 18 ~ConfigVariableInt 0 4 2753 37 ConfigVariableInt::~ConfigVariableInt 0 0 0
44
ConfigVariableInt::~ConfigVariableInt(void);

1709 19 ConfigVariableInt64 0 4 2754 40 ConfigVariableInt64::ConfigVariableInt64 0 4 353 354 355 356 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
482
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, int64_t default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableInt64::ConfigVariableInt64(ConfigVariableInt64 const &) = default;

1710 10 operator = 0 4 2754 31 ConfigVariableInt64::operator = 0 1 357 0
59
inline void ConfigVariableInt64::operator =(int64_t value);

1711 25 operator typecast int64_t 0 132 2754 46 ConfigVariableInt64::operator typecast int64_t 0 1 365 0
74
inline int64_t ConfigVariableInt64::operator typecast int64_t(void) const;

1712 4 size 0 4 2754 25 ConfigVariableInt64::size 0 1 358 62
/**
 * Returns the number of unique words in the variable.
 */
57
inline std::size_t ConfigVariableInt64::size(void) const;

1713 11 operator [] 0 4 2754 32 ConfigVariableInt64::operator [] 0 1 359 0
69
inline int64_t ConfigVariableInt64::operator [](std::size_t n) const;

1714 9 set_value 0 4 2754 30 ConfigVariableInt64::set_value 0 1 360 48
/**
 * Reassigns the variable's local value.
 */
58
inline void ConfigVariableInt64::set_value(int64_t value);

1715 9 get_value 0 4 2754 30 ConfigVariableInt64::get_value 0 1 361 40
/**
 * Returns the variable's value.
 */
58
inline int64_t ConfigVariableInt64::get_value(void) const;

1716 17 get_default_value 0 4 2754 38 ConfigVariableInt64::get_default_value 0 1 362 48
/**
 * Returns the variable's default value.
 */
66
inline int64_t ConfigVariableInt64::get_default_value(void) const;

1717 8 get_word 0 4 2754 29 ConfigVariableInt64::get_word 0 1 363 44
/**
 * Returns the variable's nth value.
 */
66
inline int64_t ConfigVariableInt64::get_word(std::size_t n) const;

1718 8 set_word 0 4 2754 29 ConfigVariableInt64::set_word 0 1 364 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
72
inline void ConfigVariableInt64::set_word(std::size_t n, int64_t value);

1719 20 ~ConfigVariableInt64 0 4 2754 41 ConfigVariableInt64::~ConfigVariableInt64 0 0 0
48
ConfigVariableInt64::~ConfigVariableInt64(void);

1720 18 ConfigVariableList 0 4 2757 38 ConfigVariableList::ConfigVariableList 0 2 366 367 10
/**
 *
 */
214
inline ConfigVariableList::ConfigVariableList(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableList::ConfigVariableList(ConfigVariableList const &) = default;

1721 19 ~ConfigVariableList 0 4 2757 39 ConfigVariableList::~ConfigVariableList 0 0 10
/**
 *
 */
53
inline ConfigVariableList::~ConfigVariableList(void);

1722 14 get_num_values 0 4 2757 34 ConfigVariableList::get_num_values 0 1 368 56
/**
 * Returns the number of values in the variable.
 */
66
inline std::size_t ConfigVariableList::get_num_values(void) const;

1723 16 get_string_value 0 4 2757 36 ConfigVariableList::get_string_value 0 1 369 49
/**
 * Returns the nth value of the variable.
 */
77
inline std::string ConfigVariableList::get_string_value(std::size_t n) const;

1724 21 get_num_unique_values 0 4 2757 41 ConfigVariableList::get_num_unique_values 0 1 370 63
/**
 * Returns the number of unique values in the variable.
 */
73
inline std::size_t ConfigVariableList::get_num_unique_values(void) const;

1725 16 get_unique_value 0 4 2757 36 ConfigVariableList::get_unique_value 0 1 371 56
/**
 * Returns the nth unique value of the variable.
 */
77
inline std::string ConfigVariableList::get_unique_value(std::size_t n) const;

1726 4 size 0 4 2757 24 ConfigVariableList::size 0 1 372 63
/**
 * Returns the number of unique values of the variable.
 */
56
inline std::size_t ConfigVariableList::size(void) const;

1727 11 operator [] 0 4 2757 31 ConfigVariableList::operator [] 0 1 373 0
72
inline std::string ConfigVariableList::operator [](std::size_t n) const;

1728 6 output 0 4 2757 26 ConfigVariableList::output 0 1 374 0
52
void ConfigVariableList::output(ostream &out) const;

1729 5 write 0 4 2757 25 ConfigVariableList::write 0 1 375 0
51
void ConfigVariableList::write(ostream &out) const;

1730 13 make_variable 0 4 2758 36 ConfigVariableManager::make_variable 0 1 376 0
82
ConfigVariableCore *ConfigVariableManager::make_variable(std::string const &name);

1731 22 make_variable_template 0 4 2758 45 ConfigVariableManager::make_variable_template 0 1 377 0
215
ConfigVariableCore *ConfigVariableManager::make_variable_template(std::string const &pattern, ConfigFlags::ValueType type, std::string const &default_value, std::string const &description = string(), int flags = 0);

1732 17 get_num_variables 0 4 2758 40 ConfigVariableManager::get_num_variables 0 1 378 81
/**
 * Returns the current number of active ConfigVariableCores in the world.
 */
72
inline std::size_t ConfigVariableManager::get_num_variables(void) const;

1733 12 get_variable 0 4 2758 35 ConfigVariableManager::get_variable 0 1 379 66
/**
 * Returns the nth active ConfigVariableCore in the world.
 */
84
inline ConfigVariableCore *ConfigVariableManager::get_variable(std::size_t n) const;

1734 17 get_variable_name 0 4 2758 40 ConfigVariableManager::get_variable_name 0 1 380 0
74
std::string ConfigVariableManager::get_variable_name(std::size_t n) const;

1735 16 is_variable_used 0 4 2758 39 ConfigVariableManager::is_variable_used 0 1 381 0
66
bool ConfigVariableManager::is_variable_used(std::size_t n) const;

1736 6 output 0 4 2758 29 ConfigVariableManager::output 0 1 382 0
55
void ConfigVariableManager::output(ostream &out) const;

1737 5 write 0 4 2758 28 ConfigVariableManager::write 0 1 383 0
54
void ConfigVariableManager::write(ostream &out) const;

1738 19 write_prc_variables 0 4 2758 42 ConfigVariableManager::write_prc_variables 0 1 384 0
68
void ConfigVariableManager::write_prc_variables(ostream &out) const;

1739 21 list_unused_variables 0 4 2758 44 ConfigVariableManager::list_unused_variables 0 1 385 0
62
void ConfigVariableManager::list_unused_variables(void) const;

1740 14 list_variables 0 4 2758 37 ConfigVariableManager::list_variables 0 1 386 0
55
void ConfigVariableManager::list_variables(void) const;

1741 22 list_dynamic_variables 0 4 2758 45 ConfigVariableManager::list_dynamic_variables 0 1 387 0
63
void ConfigVariableManager::list_dynamic_variables(void) const;

1742 14 get_global_ptr 0 4 2758 37 ConfigVariableManager::get_global_ptr 0 1 388 0
74
static ConfigVariableManager *ConfigVariableManager::get_global_ptr(void);

1743 24 ConfigVariableSearchPath 0 4 2759 50 ConfigVariableSearchPath::ConfigVariableSearchPath 0 4 389 390 391 392 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
574
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &description = string(), int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, DSearchPath const &default_value, std::string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(std::string const &name, std::string const &default_value, std::string const &description, int flags = 0);
inline ConfigVariableSearchPath::ConfigVariableSearchPath(ConfigVariableSearchPath const &) = default;

1744 25 ~ConfigVariableSearchPath 0 4 2759 51 ConfigVariableSearchPath::~ConfigVariableSearchPath 0 0 10
/**
 *
 */
65
inline ConfigVariableSearchPath::~ConfigVariableSearchPath(void);

1745 17 operator typecast 0 132 2759 43 ConfigVariableSearchPath::operator typecast 0 1 410 0
82
inline DSearchPath const &ConfigVariableSearchPath::operator typecast(void) const;

1746 9 get_value 0 4 2759 35 ConfigVariableSearchPath::get_value 0 1 393 10
/**
 *
 */
74
inline DSearchPath const &ConfigVariableSearchPath::get_value(void) const;

1747 17 get_default_value 0 4 2759 43 ConfigVariableSearchPath::get_default_value 0 1 394 10
/**
 *
 */
82
inline DSearchPath const &ConfigVariableSearchPath::get_default_value(void) const;

1748 7 Results 0 4 2762 29 DSearchPath::Results::Results 0 2 431 432 0
101
DSearchPath::Results::Results(void);
DSearchPath::Results::Results(DSearchPath::Results const &copy);

1749 10 operator = 0 4 2762 32 DSearchPath::Results::operator = 0 1 433 0
72
void DSearchPath::Results::operator =(DSearchPath::Results const &copy);

1750 8 ~Results 0 4 2762 30 DSearchPath::Results::~Results 0 0 0
37
DSearchPath::Results::~Results(void);

1751 5 clear 0 4 2762 27 DSearchPath::Results::clear 0 1 434 0
39
void DSearchPath::Results::clear(void);

1752 13 get_num_files 0 4 2762 35 DSearchPath::Results::get_num_files 0 1 435 0
60
std::size_t DSearchPath::Results::get_num_files(void) const;

1753 8 get_file 0 4 2762 30 DSearchPath::Results::get_file 0 1 436 0
68
Filename const &DSearchPath::Results::get_file(std::size_t n) const;

1754 11 operator [] 0 4 2762 33 DSearchPath::Results::operator [] 0 1 437 0
71
inline Filename DSearchPath::Results::operator [](std::size_t n) const;

1755 4 size 0 4 2762 26 DSearchPath::Results::size 0 1 438 136
/**
 * Returns the num of filenames in the set.  This method is defined to make
 * the Results object appear to be a list in Python.
 */
58
inline std::size_t DSearchPath::Results::size(void) const;

1756 6 output 0 4 2762 28 DSearchPath::Results::output 0 1 439 0
54
void DSearchPath::Results::output(ostream &out) const;

1757 5 write 0 4 2762 27 DSearchPath::Results::write 0 1 440 0
75
void DSearchPath::Results::write(ostream &out, int indent_level = 0) const;

1758 11 DSearchPath 0 4 2761 24 DSearchPath::DSearchPath 0 4 411 412 413 414 0
227
DSearchPath::DSearchPath(void);
DSearchPath::DSearchPath(std::string const &path, std::string const &separator = string());
DSearchPath::DSearchPath(Filename const &directory);
DSearchPath::DSearchPath(DSearchPath const &copy);

1759 10 operator = 0 4 2761 23 DSearchPath::operator = 0 1 415 0
54
void DSearchPath::operator =(DSearchPath const &copy);

1760 12 ~DSearchPath 0 4 2761 25 DSearchPath::~DSearchPath 0 0 0
32
DSearchPath::~DSearchPath(void);

1761 5 clear 0 4 2761 18 DSearchPath::clear 0 1 416 0
30
void DSearchPath::clear(void);

1762 16 append_directory 0 4 2761 29 DSearchPath::append_directory 0 1 417 0
62
void DSearchPath::append_directory(Filename const &directory);

1763 17 prepend_directory 0 4 2761 30 DSearchPath::prepend_directory 0 1 418 0
63
void DSearchPath::prepend_directory(Filename const &directory);

1764 11 append_path 0 4 2761 24 DSearchPath::append_path 0 2 419 420 0
152
void DSearchPath::append_path(std::string const &path, std::string const &separator = string());
void DSearchPath::append_path(DSearchPath const &path);

1765 12 prepend_path 0 4 2761 25 DSearchPath::prepend_path 0 1 421 0
56
void DSearchPath::prepend_path(DSearchPath const &path);

1766 8 is_empty 0 4 2761 21 DSearchPath::is_empty 0 1 422 0
39
bool DSearchPath::is_empty(void) const;

1767 19 get_num_directories 0 4 2761 32 DSearchPath::get_num_directories 0 1 423 0
57
std::size_t DSearchPath::get_num_directories(void) const;

1768 13 get_directory 0 4 2761 26 DSearchPath::get_directory 0 1 424 0
64
Filename const &DSearchPath::get_directory(std::size_t n) const;

1769 9 find_file 0 4 2761 22 DSearchPath::find_file 0 1 425 0
64
Filename DSearchPath::find_file(Filename const &filename) const;

1770 14 find_all_files 0 4 2761 27 DSearchPath::find_all_files 0 2 426 427 184
/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
192
std::size_t DSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results DSearchPath::find_all_files(Filename const &filename) const;

1771 11 search_path 0 4 2761 24 DSearchPath::search_path 0 1 428 251
/**
 * A quick-and-easy way to search a searchpath for a file when you don't feel
 * like building or keeping around a DSearchPath object.  This simply
 * constructs a temporary DSearchPath based on the indicated path string, and
 * searches that.
 */
140
static inline Filename DSearchPath::search_path(Filename const &filename, std::string const &path, std::string const &separator = string());

1772 6 output 0 4 2761 19 DSearchPath::output 0 1 429 0
86
void DSearchPath::output(ostream &out, std::string const &separator = string()) const;

1773 5 write 0 4 2761 18 DSearchPath::write 0 1 430 0
66
void DSearchPath::write(ostream &out, int indent_level = 0) const;

1774 17 clear_local_value 0 4 2759 43 ConfigVariableSearchPath::clear_local_value 0 1 395 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
62
inline bool ConfigVariableSearchPath::clear_local_value(void);

1775 5 clear 0 4 2759 31 ConfigVariableSearchPath::clear 0 1 396 113
/**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */
50
inline void ConfigVariableSearchPath::clear(void);

1776 16 append_directory 0 4 2759 42 ConfigVariableSearchPath::append_directory 0 1 397 62
/**
 * Adds a new directory to the end of the search list.
 */
82
inline void ConfigVariableSearchPath::append_directory(Filename const &directory);

1777 17 prepend_directory 0 4 2759 43 ConfigVariableSearchPath::prepend_directory 0 1 398 64
/**
 * Adds a new directory to the front of the search list.
 */
83
inline void ConfigVariableSearchPath::prepend_directory(Filename const &directory);

1778 11 append_path 0 4 2759 37 ConfigVariableSearchPath::append_path 0 2 399 400 198
/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */

/**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */
192
inline void ConfigVariableSearchPath::append_path(std::string const &path, std::string const &separator = string());
inline void ConfigVariableSearchPath::append_path(DSearchPath const &path);

1779 12 prepend_path 0 4 2759 38 ConfigVariableSearchPath::prepend_path 0 1 401 104
/**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */
76
inline void ConfigVariableSearchPath::prepend_path(DSearchPath const &path);

1780 8 is_empty 0 4 2759 34 ConfigVariableSearchPath::is_empty 0 1 402 69
/**
 * Returns true if the search list is empty, false otherwise.
 */
59
inline bool ConfigVariableSearchPath::is_empty(void) const;

1781 19 get_num_directories 0 4 2759 45 ConfigVariableSearchPath::get_num_directories 0 1 403 64
/**
 * Returns the number of directories on the search list.
 */
77
inline std::size_t ConfigVariableSearchPath::get_num_directories(void) const;

1782 13 get_directory 0 4 2759 39 ConfigVariableSearchPath::get_directory 0 1 404 56
/**
 * Returns the nth directory on the search list.
 */
84
inline Filename const &ConfigVariableSearchPath::get_directory(std::size_t n) const;

1783 9 find_file 0 4 2759 35 ConfigVariableSearchPath::find_file 0 1 405 197
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */
84
inline Filename ConfigVariableSearchPath::find_file(Filename const &filename) const;

1784 14 find_all_files 0 4 2759 40 ConfigVariableSearchPath::find_all_files 0 2 406 407 549
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */

/**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */
225
inline std::size_t ConfigVariableSearchPath::find_all_files(Filename const &filename, DSearchPath::Results &results) const;
inline DSearchPath::Results ConfigVariableSearchPath::find_all_files(Filename const &filename) const;

1785 6 output 0 4 2759 32 ConfigVariableSearchPath::output 0 1 408 10
/**
 *
 */
65
inline void ConfigVariableSearchPath::output(ostream &out) const;

1786 5 write 0 4 2759 31 ConfigVariableSearchPath::write 0 1 409 10
/**
 *
 */
64
inline void ConfigVariableSearchPath::write(ostream &out) const;

1787 20 ConfigVariableString 0 4 2764 42 ConfigVariableString::ConfigVariableString 0 3 441 442 443 22
/**
 *
 */

/**
 *
 */
334
inline ConfigVariableString::ConfigVariableString(std::string const &name);
inline ConfigVariableString::ConfigVariableString(std::string const &name, std::string const &default_value, std::string const &description = string(), int flags = 0);
inline ConfigVariableString::ConfigVariableString(ConfigVariableString const &) = default;

1788 10 operator = 0 4 2764 32 ConfigVariableString::operator = 0 1 444 0
71
inline void ConfigVariableString::operator =(std::string const &value);

1789 17 operator typecast 0 132 2764 39 ConfigVariableString::operator typecast 0 1 457 0
78
inline std::string const &ConfigVariableString::operator typecast(void) const;

1790 5 c_str 0 4 2764 27 ConfigVariableString::c_str 0 1 445 88
// These methods help the ConfigVariableString act like a C++ string object.

/**
 *
 */
59
inline char const *ConfigVariableString::c_str(void) const;

1791 5 empty 0 4 2764 27 ConfigVariableString::empty 0 1 446 10
/**
 *
 */
52
inline bool ConfigVariableString::empty(void) const;

1792 6 length 0 4 2764 28 ConfigVariableString::length 0 1 447 10
/**
 *
 */
60
inline std::size_t ConfigVariableString::length(void) const;

1793 11 operator [] 0 4 2764 33 ConfigVariableString::operator [] 0 1 448 0
67
inline char ConfigVariableString::operator [](std::size_t n) const;

1794 11 operator == 0 4 2764 33 ConfigVariableString::operator == 0 1 449 34
// Comparison operators are handy.
78
inline bool ConfigVariableString::operator ==(std::string const &other) const;

1795 11 operator != 0 4 2764 33 ConfigVariableString::operator != 0 1 450 0
78
inline bool ConfigVariableString::operator !=(std::string const &other) const;

1796 10 operator < 0 4 2764 32 ConfigVariableString::operator < 0 1 451 0
77
inline bool ConfigVariableString::operator <(std::string const &other) const;

1797 9 set_value 0 4 2764 31 ConfigVariableString::set_value 0 1 452 48
/**
 * Reassigns the variable's local value.
 */
70
inline void ConfigVariableString::set_value(std::string const &value);

1798 9 get_value 0 4 2764 31 ConfigVariableString::get_value 0 1 453 40
/**
 * Returns the variable's value.
 */
70
inline std::string const &ConfigVariableString::get_value(void) const;

1799 17 get_default_value 0 4 2764 39 ConfigVariableString::get_default_value 0 1 454 48
/**
 * Returns the variable's default value.
 */
71
inline std::string ConfigVariableString::get_default_value(void) const;

1800 8 get_word 0 4 2764 30 ConfigVariableString::get_word 0 1 455 44
/**
 * Returns the variable's nth value.
 */
71
inline std::string ConfigVariableString::get_word(std::size_t n) const;

1801 8 set_word 0 4 2764 30 ConfigVariableString::set_word 0 1 456 107
/**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */
84
inline void ConfigVariableString::set_word(std::size_t n, std::string const &value);

1802 21 ~ConfigVariableString 0 4 2764 43 ConfigVariableString::~ConfigVariableString 0 0 0
50
ConfigVariableString::~ConfigVariableString(void);

1803 7 GetBool 0 4 2765 16 DConfig::GetBool 0 1 460 0
78
static inline bool DConfig::GetBool(std::string const &sym, bool def = false);

1804 6 GetInt 0 4 2765 15 DConfig::GetInt 0 1 461 0
71
static inline int DConfig::GetInt(std::string const &sym, int def = 0);

1805 8 GetFloat 0 4 2765 17 DConfig::GetFloat 0 1 462 0
79
static inline float DConfig::GetFloat(std::string const &sym, float def = 0.0);

1806 9 GetDouble 0 4 2765 18 DConfig::GetDouble 0 1 463 0
82
static inline double DConfig::GetDouble(std::string const &sym, double def = 0.0);

1807 9 GetString 0 4 2765 18 DConfig::GetString 0 1 464 0
98
static inline std::string DConfig::GetString(std::string const &sym, std::string const &def = "");

1808 7 DConfig 0 4 2765 16 DConfig::DConfig 0 2 458 459 0
92
inline DConfig::DConfig(void) = default;
inline DConfig::DConfig(DConfig const &) = default;

1809 8 ~DConfig 0 4 2765 17 DConfig::~DConfig 0 0 0
24
DConfig::~DConfig(void);

1810 24 has_environment_variable 0 4 2766 46 ExecutionEnvironment::has_environment_variable 0 1 466 73
/**
 * Returns true if the indicated environment variable is defined.
 */
90
static inline bool ExecutionEnvironment::has_environment_variable(std::string const &var);

1811 24 get_environment_variable 0 4 2766 46 ExecutionEnvironment::get_environment_variable 0 1 467 125
/**
 * Returns the definition of the indicated environment variable, or the empty
 * string if the variable is undefined.
 */
97
static inline std::string ExecutionEnvironment::get_environment_variable(std::string const &var);

1812 24 set_environment_variable 0 4 2766 46 ExecutionEnvironment::set_environment_variable 0 1 468 72
/**
 * Changes the definition of the indicated environment variable.
 */
116
static inline void ExecutionEnvironment::set_environment_variable(std::string const &var, std::string const &value);

1813 27 shadow_environment_variable 0 4 2766 49 ExecutionEnvironment::shadow_environment_variable 0 1 469 269
/**
 * Changes the apparent definition of the indicated environment variable by
 * masking it within this class with a new value.  This does not change the
 * actual environment variable, but future calls to get_environment_variable()
 * will return this new value.
 */
119
static inline void ExecutionEnvironment::shadow_environment_variable(std::string const &var, std::string const &value);

1814 12 clear_shadow 0 4 2766 34 ExecutionEnvironment::clear_shadow 0 1 470 140
/**
 * Removes a value set by a previous call to shadow_environment_variable(),
 * and lets the actual value of the variable show again.
 */
78
static inline void ExecutionEnvironment::clear_shadow(std::string const &var);

1815 13 expand_string 0 4 2766 35 ExecutionEnvironment::expand_string 0 1 471 0
79
static std::string ExecutionEnvironment::expand_string(std::string const &str);

1816 12 get_num_args 0 4 2766 34 ExecutionEnvironment::get_num_args 0 1 472 106
/**
 * Returns the number of command-line arguments available, not counting arg 0,
 * the binary name.
 */
67
static inline std::size_t ExecutionEnvironment::get_num_args(void);

1817 7 get_arg 0 4 2766 29 ExecutionEnvironment::get_arg 0 1 473 194
/**
 * Returns the nth command-line argument.  The index n must be in the range [0
 * .. get_num_args()).  The first parameter, n == 0, is the first actual
 * parameter, not the binary name.
 */
71
static inline std::string ExecutionEnvironment::get_arg(std::size_t n);

1818 15 get_binary_name 0 4 2766 37 ExecutionEnvironment::get_binary_name 0 1 474 107
/**
 * Returns the name of the binary executable that started this program, if it
 * can be determined.
 */
70
static inline std::string ExecutionEnvironment::get_binary_name(void);

1819 14 get_dtool_name 0 4 2766 36 ExecutionEnvironment::get_dtool_name 0 1 475 105
/**
 * Returns the name of the libdtool DLL that is used in this program, if it
 * can be determined.
 */
69
static inline std::string ExecutionEnvironment::get_dtool_name(void);

1820 15 set_binary_name 0 4 2766 37 ExecutionEnvironment::set_binary_name 0 1 476 22
/**
 * Do not use.
 */
82
static inline void ExecutionEnvironment::set_binary_name(std::string const &name);

1821 14 set_dtool_name 0 4 2766 36 ExecutionEnvironment::set_dtool_name 0 1 477 22
/**
 * Do not use.
 */
81
static inline void ExecutionEnvironment::set_dtool_name(std::string const &name);

1822 7 get_cwd 0 4 2766 29 ExecutionEnvironment::get_cwd 0 1 478 0
52
static Filename ExecutionEnvironment::get_cwd(void);

1823 20 ExecutionEnvironment 0 4 2766 42 ExecutionEnvironment::ExecutionEnvironment 0 1 465 0
90
inline ExecutionEnvironment::ExecutionEnvironment(ExecutionEnvironment const &) = default;

1824 21 ~ExecutionEnvironment 0 4 2766 43 ExecutionEnvironment::~ExecutionEnvironment 0 0 0
50
ExecutionEnvironment::~ExecutionEnvironment(void);

1825 9 ~ios_base 0 4 2771 19 ios_base::~ios_base 0 0 0
26
ios_base::~ios_base(void);

1826 4 good 0 4 2770 9 ios::good 0 1 499 0
27
bool ios::good(void) const;

1827 3 eof 0 4 2770 8 ios::eof 0 1 500 0
26
bool ios::eof(void) const;

1828 4 fail 0 4 2770 9 ios::fail 0 1 501 0
27
bool ios::fail(void) const;

1829 3 bad 0 4 2770 8 ios::bad 0 1 502 0
26
bool ios::bad(void) const;

1830 5 clear 0 4 2770 10 ios::clear 0 1 503 0
22
void ios::clear(void);

1831 4 ~ios 0 4 2770 9 ios::~ios 0 0 0
16
ios::~ios(void);

1832 13 upcast_to_ios 0 12 2769 22 istream::upcast_to_ios 0 1 490 26
upcast from istream to ios
34
ios *istream::upcast_to_ios(void);

1833 3 get 0 4 2769 12 istream::get 0 1 486 0
23
int istream::get(void);

1834 5 tellg 0 4 2769 14 istream::tellg 0 1 487 0
31
streamoff istream::tellg(void);

1835 5 seekg 0 4 2769 14 istream::seekg 0 2 488 489 0
94
void istream::seekg(streamoff pos);
void istream::seekg(streamoff off, ios_base::seekdir dir);

1836 8 ~istream 0 4 2769 17 istream::~istream 0 0 0
24
istream::~istream(void);

1837 17 upcast_to_istream 0 12 2768 27 iostream::upcast_to_istream 0 1 484 31
upcast from iostream to istream
43
istream *iostream::upcast_to_istream(void);

1838 20 downcast_to_iostream 0 12 2769 29 istream::downcast_to_iostream 0 1 485 33
downcast from istream to iostream
46
iostream *istream::downcast_to_iostream(void);

1839 13 upcast_to_ios 0 12 2774 22 ostream::upcast_to_ios 0 1 498 26
upcast from ostream to ios
34
ios *ostream::upcast_to_ios(void);

1840 3 put 0 4 2774 12 ostream::put 0 1 493 0
26
void ostream::put(char c);

1841 5 flush 0 4 2774 14 ostream::flush 0 1 494 0
26
void ostream::flush(void);

1842 5 tellp 0 4 2774 14 ostream::tellp 0 1 495 0
31
streamoff ostream::tellp(void);

1843 5 seekp 0 4 2774 14 ostream::seekp 0 2 496 497 0
94
void ostream::seekp(streamoff pos);
void ostream::seekp(streamoff off, ios_base::seekdir dir);

1844 8 ~ostream 0 4 2774 17 ostream::~ostream 0 0 0
24
ostream::~ostream(void);

1845 17 upcast_to_ostream 0 12 2768 27 iostream::upcast_to_ostream 0 1 491 31
upcast from iostream to ostream
43
ostream *iostream::upcast_to_ostream(void);

1846 20 downcast_to_iostream 0 12 2774 29 ostream::downcast_to_iostream 0 1 492 33
downcast from ostream to iostream
46
iostream *ostream::downcast_to_iostream(void);

1847 5 flush 0 4 2768 15 iostream::flush 0 1 483 0
27
void iostream::flush(void);

1848 9 ~iostream 0 4 2768 19 iostream::~iostream 0 0 0
26
iostream::~iostream(void);

1849 10 FileStream 0 4 2767 22 FileStream::FileStream 0 2 479 480 22
/**
 *
 */

/**
 *
 */
131
inline FileStream::FileStream(void);
inline FileStream::FileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1850 11 ~FileStream 0 4 2767 23 FileStream::~FileStream 0 0 10
/**
 *
 */
37
inline FileStream::~FileStream(void);

1851 4 open 0 4 2767 16 FileStream::open 0 1 481 10
/**
 *
 */
93
inline void FileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1852 5 close 0 4 2767 17 FileStream::close 0 1 482 10
/**
 *
 */
36
inline void FileStream::close(void);

1853 11 GlobPattern 0 4 2775 24 GlobPattern::GlobPattern 0 2 504 505 22
/**
 *
 */

/**
 *
 */
129
inline GlobPattern::GlobPattern(std::string const &pattern = string());
inline GlobPattern::GlobPattern(GlobPattern const &copy);

1854 10 operator = 0 4 2775 23 GlobPattern::operator = 0 1 506 0
61
inline void GlobPattern::operator =(GlobPattern const &copy);

1855 11 operator == 0 4 2775 24 GlobPattern::operator == 0 1 507 0
69
inline bool GlobPattern::operator ==(GlobPattern const &other) const;

1856 11 operator != 0 4 2775 24 GlobPattern::operator != 0 1 508 0
69
inline bool GlobPattern::operator !=(GlobPattern const &other) const;

1857 10 operator < 0 4 2775 23 GlobPattern::operator < 0 1 509 0
68
inline bool GlobPattern::operator <(GlobPattern const &other) const;

1858 11 set_pattern 0 4 2775 24 GlobPattern::set_pattern 0 1 510 74
/**
 * Changes the pattern string that the GlobPattern object matches.
 */
65
inline void GlobPattern::set_pattern(std::string const &pattern);

1859 11 get_pattern 0 4 2775 24 GlobPattern::get_pattern 0 1 511 74
/**
 * Returns the pattern string that the GlobPattern object matches.
 */
63
inline std::string const &GlobPattern::get_pattern(void) const;

1860 18 set_case_sensitive 0 4 2775 31 GlobPattern::set_case_sensitive 0 1 512 122
/**
 * Sets whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */
65
inline void GlobPattern::set_case_sensitive(bool case_sensitive);

1861 18 get_case_sensitive 0 4 2775 31 GlobPattern::get_case_sensitive 0 1 513 125
/**
 * Returns whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */
56
inline bool GlobPattern::get_case_sensitive(void) const;

1862 17 set_nomatch_chars 0 4 2775 30 GlobPattern::set_nomatch_chars 0 1 514 72
/**
 * Specifies a set of characters that are not matched by * or ?.
 */
77
inline void GlobPattern::set_nomatch_chars(std::string const &nomatch_chars);

1863 17 get_nomatch_chars 0 4 2775 30 GlobPattern::get_nomatch_chars 0 1 515 72
/**
 * Returns the set of characters that are not matched by * or ?.
 */
69
inline std::string const &GlobPattern::get_nomatch_chars(void) const;

1864 7 matches 0 4 2775 20 GlobPattern::matches 0 1 516 85
/**
 * Returns true if the candidate string matches the pattern, false otherwise.
 */
69
inline bool GlobPattern::matches(std::string const &candidate) const;

1865 6 output 0 4 2775 19 GlobPattern::output 0 1 517 10
/**
 *
 */
52
inline void GlobPattern::output(ostream &out) const;

1866 19 has_glob_characters 0 4 2775 32 GlobPattern::has_glob_characters 0 1 518 0
50
bool GlobPattern::has_glob_characters(void) const;

1867 16 get_const_prefix 0 4 2775 29 GlobPattern::get_const_prefix 0 1 519 0
54
std::string GlobPattern::get_const_prefix(void) const;

1868 11 match_files 0 4 2775 24 GlobPattern::match_files 0 2 520 521 0
169
int GlobPattern::match_files(vector_string &results, Filename const &cwd = Filename()) const;
PyObject *GlobPattern::match_files(Filename const &cwd = Filename()) const;

1869 12 ~GlobPattern 0 4 2775 25 GlobPattern::~GlobPattern 0 0 0
32
GlobPattern::~GlobPattern(void);

1870 14 IDecryptStream 0 4 2776 30 IDecryptStream::IDecryptStream 0 2 522 523 22
/**
 *
 */

/**
 *
 */
147
inline IDecryptStream::IDecryptStream(void);
inline IDecryptStream::IDecryptStream(istream *source, bool owns_source, std::string const &password);

1871 4 open 0 4 2776 20 IDecryptStream::open 0 1 524 10
/**
 *
 */
108
inline IDecryptStream &IDecryptStream::open(istream *source, bool owns_source, std::string const &password);

1872 5 close 0 4 2776 21 IDecryptStream::close 0 1 525 124
/**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */
51
inline IDecryptStream &IDecryptStream::close(void);

1873 13 get_algorithm 0 4 2776 29 IDecryptStream::get_algorithm 0 1 526 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &IDecryptStream::get_algorithm(void) const;

1874 14 get_key_length 0 4 2776 30 IDecryptStream::get_key_length 0 1 527 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int IDecryptStream::get_key_length(void) const;

1875 19 get_iteration_count 0 4 2776 35 IDecryptStream::get_iteration_count 0 1 528 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int IDecryptStream::get_iteration_count(void) const;

1876 15 ~IDecryptStream 0 4 2776 31 IDecryptStream::~IDecryptStream 0 0 0
38
IDecryptStream::~IDecryptStream(void);

1877 11 IFileStream 0 4 2777 24 IFileStream::IFileStream 0 2 529 530 22
/**
 *
 */

/**
 *
 */
135
inline IFileStream::IFileStream(void);
inline IFileStream::IFileStream(char const *filename, ios_base::openmode mode = ::ios_base::in);

1878 12 ~IFileStream 0 4 2777 25 IFileStream::~IFileStream 0 0 10
/**
 *
 */
39
inline IFileStream::~IFileStream(void);

1879 4 open 0 4 2777 17 IFileStream::open 0 1 531 10
/**
 *
 */
94
inline void IFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::in);

1880 5 close 0 4 2777 18 IFileStream::close 0 1 532 10
/**
 *
 */
37
inline void IFileStream::close(void);

1881 7 acquire 0 4 2779 26 StreamWrapperBase::acquire 0 1 538 572
/**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */
45
inline void StreamWrapperBase::acquire(void);

1882 7 release 0 4 2779 26 StreamWrapperBase::release 0 1 539 135
/**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */
45
inline void StreamWrapperBase::release(void);

1883 17 StreamWrapperBase 0 4 2779 36 StreamWrapperBase::StreamWrapperBase 0 1 537 10
/**
 *
 */
81
inline StreamWrapperBase::StreamWrapperBase(StreamWrapperBase const &) = default;

1884 18 ~StreamWrapperBase 0 4 2779 37 StreamWrapperBase::~StreamWrapperBase 0 0 0
44
StreamWrapperBase::~StreamWrapperBase(void);

1885 27 upcast_to_StreamWrapperBase 0 12 2778 43 IStreamWrapper::upcast_to_StreamWrapperBase 0 1 536 47
upcast from IStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *IStreamWrapper::upcast_to_StreamWrapperBase(void);

1886 14 IStreamWrapper 0 4 2778 30 IStreamWrapper::IStreamWrapper 0 2 533 534 22
/**
 *
 */

/**
 *
 */
128
inline IStreamWrapper::IStreamWrapper(istream &stream);
inline IStreamWrapper::IStreamWrapper(IStreamWrapper const &) = default;

1887 15 ~IStreamWrapper 0 4 2778 31 IStreamWrapper::~IStreamWrapper 0 0 0
38
IStreamWrapper::~IStreamWrapper(void);

1888 11 get_istream 0 4 2778 27 IStreamWrapper::get_istream 0 1 535 55
/**
 * Returns the istream this object is wrapping.
 */
56
inline istream *IStreamWrapper::get_istream(void) const;

1889 10 LineStream 0 4 2781 22 LineStream::LineStream 0 1 540 10
/**
 *
 */
36
inline LineStream::LineStream(void);

1890 17 is_text_available 0 4 2781 29 LineStream::is_text_available 0 1 541 198
/**
 * Returns true if there is at least one line of text (or even a partial line)
 * available in the LineStream object.  If this returns true, the line may
 * then be retrieved via get_line().
 */
54
inline bool LineStream::is_text_available(void) const;

1891 8 get_line 0 4 2781 20 LineStream::get_line 0 1 542 275
/**
 * Extracts and returns the next line (or partial line) of text available in
 * the LineStream object.  Once the line has been extracted, you may call
 * has_newline() to determine whether or not there was an explicit newline
 * character written following this line.
 */
46
inline std::string LineStream::get_line(void);

1892 11 has_newline 0 4 2781 23 LineStream::has_newline 0 1 543 206
/**
 * Returns true if the line of text most recently returned by get_line() was
 * written out with a terminating newline, or false if a newline character has
 * not yet been written to the LineStream.
 */
48
inline bool LineStream::has_newline(void) const;

1893 11 ~LineStream 0 4 2781 23 LineStream::~LineStream 0 0 0
30
LineStream::~LineStream(void);

1894 15 get_total_alloc 0 4 2782 32 NeverFreeMemory::get_total_alloc 0 1 545 110
/**
 * Returns the total number of bytes consumed by all the pages allocated
 * internally by this object.
 */
65
static inline std::size_t NeverFreeMemory::get_total_alloc(void);

1895 14 get_total_used 0 4 2782 31 NeverFreeMemory::get_total_used 0 1 546 114
/**
 * Returns the total number of bytes requested by the application in calls to
 * NeverFreeMemory::alloc().
 */
64
static inline std::size_t NeverFreeMemory::get_total_used(void);

1896 16 get_total_unused 0 4 2782 33 NeverFreeMemory::get_total_unused 0 1 547 178
/**
 * Returns the difference between get_total_alloc() and get_total_used().
 * This represents bytes in allocated pages that have not (yet) been used by
 * the application.
 */
66
static inline std::size_t NeverFreeMemory::get_total_unused(void);

1897 15 NeverFreeMemory 0 4 2782 32 NeverFreeMemory::NeverFreeMemory 0 1 544 0
75
inline NeverFreeMemory::NeverFreeMemory(NeverFreeMemory const &) = default;

1898 16 ~NeverFreeMemory 0 4 2782 33 NeverFreeMemory::~NeverFreeMemory 0 0 0
40
NeverFreeMemory::~NeverFreeMemory(void);

1899 6 Notify 0 4 2783 14 Notify::Notify 0 2 548 549 0
70
Notify::Notify(void);
inline Notify::Notify(Notify const &) = default;

1900 7 ~Notify 0 4 2783 15 Notify::~Notify 0 0 0
22
Notify::~Notify(void);

1901 15 set_ostream_ptr 0 4 2783 23 Notify::set_ostream_ptr 0 1 550 0
70
void Notify::set_ostream_ptr(ostream *ostream_ptr, bool delete_later);

1902 15 get_ostream_ptr 0 4 2783 23 Notify::get_ostream_ptr 0 1 551 0
45
ostream *Notify::get_ostream_ptr(void) const;

1903 18 set_assert_handler 0 4 2783 26 Notify::set_assert_handler 0 0 0
71
void Notify::set_assert_handler(Notify::AssertHandler *assert_handler);

1904 20 clear_assert_handler 0 4 2783 28 Notify::clear_assert_handler 0 1 552 0
40
void Notify::clear_assert_handler(void);

1905 18 has_assert_handler 0 4 2783 26 Notify::has_assert_handler 0 1 553 0
44
bool Notify::has_assert_handler(void) const;

1906 18 get_assert_handler 0 4 2783 26 Notify::get_assert_handler 0 1 554 0
62
Notify::AssertHandler *Notify::get_assert_handler(void) const;

1907 17 has_assert_failed 0 4 2783 25 Notify::has_assert_failed 0 1 555 637
/**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */
50
inline bool Notify::has_assert_failed(void) const;

1908 24 get_assert_error_message 0 4 2783 32 Notify::get_assert_error_message 0 1 556 100
/**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */
71
inline std::string const &Notify::get_assert_error_message(void) const;

1909 19 clear_assert_failed 0 4 2783 27 Notify::clear_assert_failed 0 1 557 114
/**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */
46
inline void Notify::clear_assert_failed(void);

1910 16 get_top_category 0 4 2783 24 Notify::get_top_category 0 1 558 0
47
NotifyCategory *Notify::get_top_category(void);

1911 12 get_category 0 4 2783 20 Notify::get_category 0 3 559 560 561 0
269
NotifyCategory *Notify::get_category(std::string const &basename, NotifyCategory *parent_category);
NotifyCategory *Notify::get_category(std::string const &basename, std::string const &parent_fullname);
NotifyCategory *Notify::get_category(std::string const &fullname);

1912 3 out 0 4 2783 11 Notify::out 0 1 562 0
34
static ostream &Notify::out(void);

1913 4 null 0 4 2783 12 Notify::null 0 1 563 0
35
static ostream &Notify::null(void);

1914 12 write_string 0 4 2783 20 Notify::write_string 0 1 564 0
57
static void Notify::write_string(std::string const &str);

1915 3 ptr 0 4 2783 11 Notify::ptr 0 1 565 0
33
static Notify *Notify::ptr(void);

1916 20 upcast_to_MemoryBase 0 12 2784 36 NotifyCategory::upcast_to_MemoryBase 0 1 588 40
upcast from NotifyCategory to MemoryBase
55
MemoryBase *NotifyCategory::upcast_to_MemoryBase(void);

1917 26 downcast_to_NotifyCategory 0 12 2715 38 MemoryBase::downcast_to_NotifyCategory 0 1 589 42
downcast from MemoryBase to NotifyCategory
61
NotifyCategory *MemoryBase::downcast_to_NotifyCategory(void);

1918 21 upcast_to_ConfigFlags 0 12 2784 37 NotifyCategory::upcast_to_ConfigFlags 0 1 590 41
upcast from NotifyCategory to ConfigFlags
57
ConfigFlags *NotifyCategory::upcast_to_ConfigFlags(void);

1919 26 downcast_to_NotifyCategory 0 12 2729 39 ConfigFlags::downcast_to_NotifyCategory 0 1 591 43
downcast from ConfigFlags to NotifyCategory
62
NotifyCategory *ConfigFlags::downcast_to_NotifyCategory(void);

1920 12 get_fullname 0 4 2784 28 NotifyCategory::get_fullname 0 1 567 10
/**
 *
 */
60
inline std::string NotifyCategory::get_fullname(void) const;

1921 12 get_basename 0 4 2784 28 NotifyCategory::get_basename 0 1 568 10
/**
 *
 */
60
inline std::string NotifyCategory::get_basename(void) const;

1922 12 get_severity 0 4 2784 28 NotifyCategory::get_severity 0 1 569 10
/**
 *
 */
63
inline NotifySeverity NotifyCategory::get_severity(void) const;

1923 12 set_severity 0 4 2784 28 NotifyCategory::set_severity 0 1 570 150
/**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */
66
inline void NotifyCategory::set_severity(NotifySeverity severity);

1924 5 is_on 0 4 2784 21 NotifyCategory::is_on 0 1 571 110
/**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */
65
inline bool NotifyCategory::is_on(NotifySeverity severity) const;

1925 7 is_spam 0 4 2784 23 NotifyCategory::is_spam 0 1 572 51
/**
 * A shorthand way to write is_on(NS_spam).
 */
48
inline bool NotifyCategory::is_spam(void) const;

1926 8 is_debug 0 4 2784 24 NotifyCategory::is_debug 0 1 573 52
/**
 * A shorthand way to write is_on(NS_debug).
 */
49
inline bool NotifyCategory::is_debug(void) const;

1927 7 is_info 0 4 2784 23 NotifyCategory::is_info 0 1 574 51
/**
 * A shorthand way to write is_on(NS_info).
 */
48
inline bool NotifyCategory::is_info(void) const;

1928 10 is_warning 0 4 2784 26 NotifyCategory::is_warning 0 1 575 54
/**
 * A shorthand way to write is_on(NS_warning).
 */
51
inline bool NotifyCategory::is_warning(void) const;

1929 8 is_error 0 4 2784 24 NotifyCategory::is_error 0 1 576 52
/**
 * A shorthand way to write is_on(NS_error).
 */
49
inline bool NotifyCategory::is_error(void) const;

1930 8 is_fatal 0 4 2784 24 NotifyCategory::is_fatal 0 1 577 52
/**
 * A shorthand way to write is_on(NS_fatal).
 */
49
inline bool NotifyCategory::is_fatal(void) const;

1931 3 out 0 4 2784 19 NotifyCategory::out 0 1 578 0
80
ostream &NotifyCategory::out(NotifySeverity severity, bool prefix = true) const;

1932 4 spam 0 4 2784 20 NotifyCategory::spam 0 1 579 49
/**
 * A shorthand way to write out(NS_spam).
 */
63
inline ostream &NotifyCategory::spam(bool prefix = true) const;

1933 5 debug 0 4 2784 21 NotifyCategory::debug 0 1 580 50
/**
 * A shorthand way to write out(NS_debug).
 */
64
inline ostream &NotifyCategory::debug(bool prefix = true) const;

1934 4 info 0 4 2784 20 NotifyCategory::info 0 1 581 49
/**
 * A shorthand way to write out(NS_info).
 */
63
inline ostream &NotifyCategory::info(bool prefix = true) const;

1935 7 warning 0 4 2784 23 NotifyCategory::warning 0 1 582 52
/**
 * A shorthand way to write out(NS_warning).
 */
66
inline ostream &NotifyCategory::warning(bool prefix = true) const;

1936 5 error 0 4 2784 21 NotifyCategory::error 0 1 583 50
/**
 * A shorthand way to write out(NS_error).
 */
64
inline ostream &NotifyCategory::error(bool prefix = true) const;

1937 5 fatal 0 4 2784 21 NotifyCategory::fatal 0 1 584 50
/**
 * A shorthand way to write out(NS_fatal).
 */
64
inline ostream &NotifyCategory::fatal(bool prefix = true) const;

1938 16 get_num_children 0 4 2784 32 NotifyCategory::get_num_children 0 1 585 0
57
std::size_t NotifyCategory::get_num_children(void) const;

1939 9 get_child 0 4 2784 25 NotifyCategory::get_child 0 1 586 0
63
NotifyCategory *NotifyCategory::get_child(std::size_t i) const;

1940 16 set_server_delta 0 4 2784 32 NotifyCategory::set_server_delta 0 1 587 0
61
static void NotifyCategory::set_server_delta(long int delta);

1941 14 NotifyCategory 0 4 2784 30 NotifyCategory::NotifyCategory 0 1 566 0
72
inline NotifyCategory::NotifyCategory(NotifyCategory const &) = default;

1942 15 ~NotifyCategory 0 4 2784 31 NotifyCategory::~NotifyCategory 0 0 0
38
NotifyCategory::~NotifyCategory(void);

1943 14 OEncryptStream 0 4 2787 30 OEncryptStream::OEncryptStream 0 2 592 593 22
/**
 *
 */

/**
 *
 */
143
inline OEncryptStream::OEncryptStream(void);
inline OEncryptStream::OEncryptStream(ostream *dest, bool owns_dest, std::string const &password);

1944 4 open 0 4 2787 20 OEncryptStream::open 0 1 594 10
/**
 *
 */
104
inline OEncryptStream &OEncryptStream::open(ostream *dest, bool owns_dest, std::string const &password);

1945 5 close 0 4 2787 21 OEncryptStream::close 0 1 595 120
/**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */
51
inline OEncryptStream &OEncryptStream::close(void);

1946 13 set_algorithm 0 4 2787 29 OEncryptStream::set_algorithm 0 1 596 383
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */
72
inline void OEncryptStream::set_algorithm(std::string const &algorithm);

1947 14 set_key_length 0 4 2787 30 OEncryptStream::set_key_length 0 1 597 347
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */
59
inline void OEncryptStream::set_key_length(int key_length);

1948 19 set_iteration_count 0 4 2787 35 OEncryptStream::set_iteration_count 0 1 598 495
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */
69
inline void OEncryptStream::set_iteration_count(int iteration_count);

1949 13 get_algorithm 0 4 2787 29 OEncryptStream::get_algorithm 0 1 599 74
/**
 * Returns the encryption algorithm that was read from the stream.
 */
68
inline std::string const &OEncryptStream::get_algorithm(void) const;

1950 14 get_key_length 0 4 2787 30 OEncryptStream::get_key_length 0 1 600 85
/**
 * Returns the encryption key length, in bits, that was read from the stream.
 */
54
inline int OEncryptStream::get_key_length(void) const;

1951 19 get_iteration_count 0 4 2787 35 OEncryptStream::get_iteration_count 0 1 601 63
/**
 * Returns the value that was was read from the stream.
 */
59
inline int OEncryptStream::get_iteration_count(void) const;

1952 15 ~OEncryptStream 0 4 2787 31 OEncryptStream::~OEncryptStream 0 0 0
38
OEncryptStream::~OEncryptStream(void);

1953 11 OFileStream 0 4 2788 24 OFileStream::OFileStream 0 2 602 603 22
/**
 *
 */

/**
 *
 */
136
inline OFileStream::OFileStream(void);
inline OFileStream::OFileStream(char const *filename, ios_base::openmode mode = ::ios_base::out);

1954 12 ~OFileStream 0 4 2788 25 OFileStream::~OFileStream 0 0 10
/**
 *
 */
39
inline OFileStream::~OFileStream(void);

1955 4 open 0 4 2788 17 OFileStream::open 0 1 604 10
/**
 *
 */
95
inline void OFileStream::open(char const *filename, ios_base::openmode mode = ::ios_base::out);

1956 5 close 0 4 2788 18 OFileStream::close 0 1 605 10
/**
 *
 */
37
inline void OFileStream::close(void);

1957 27 upcast_to_StreamWrapperBase 0 12 2789 43 OStreamWrapper::upcast_to_StreamWrapperBase 0 1 609 47
upcast from OStreamWrapper to StreamWrapperBase
69
StreamWrapperBase *OStreamWrapper::upcast_to_StreamWrapperBase(void);

1958 14 OStreamWrapper 0 4 2789 30 OStreamWrapper::OStreamWrapper 0 2 606 607 22
/**
 *
 */

/**
 *
 */
128
inline OStreamWrapper::OStreamWrapper(ostream &stream);
inline OStreamWrapper::OStreamWrapper(OStreamWrapper const &) = default;

1959 15 ~OStreamWrapper 0 4 2789 31 OStreamWrapper::~OStreamWrapper 0 0 0
38
OStreamWrapper::~OStreamWrapper(void);

1960 11 get_ostream 0 4 2789 27 OStreamWrapper::get_ostream 0 1 608 55
/**
 * Returns the ostream this object is wrapping.
 */
56
inline ostream *OStreamWrapper::get_ostream(void) const;

1961 14 PointerToArray 0 4 2792 40 PointerToArray< double >::PointerToArray 0 3 610 611 612 0
277
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

1962 11 empty_array 0 4 2792 37 PointerToArray< double >::empty_array 0 1 613 0
164
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((double const *)(0))));

1963 4 size 0 4 2792 30 PointerToArray< double >::size 0 1 614 0
68
inline unsigned long int PointerToArray< double >::size(void) const;

1964 9 push_back 0 4 2792 35 PointerToArray< double >::push_back 0 1 615 0
65
inline void PointerToArray< double >::push_back(double const &x);

1965 8 pop_back 0 4 2792 34 PointerToArray< double >::pop_back 0 1 616 0
53
inline void PointerToArray< double >::pop_back(void);

1966 11 get_element 0 4 2792 37 PointerToArray< double >::get_element 0 1 617 0
86
inline double const &PointerToArray< double >::get_element(unsigned long int n) const;

1967 11 set_element 0 4 2792 37 PointerToArray< double >::set_element 0 1 618 0
92
inline void PointerToArray< double >::set_element(unsigned long int n, double const &value);

1968 11 __getitem__ 0 4 2792 37 PointerToArray< double >::__getitem__ 0 1 619 0
79
double const &PointerToArray< double >::__getitem__(unsigned long int n) const;

1969 11 __setitem__ 0 4 2792 37 PointerToArray< double >::__setitem__ 0 1 620 0
85
void PointerToArray< double >::__setitem__(unsigned long int n, double const &value);

1970 8 get_data 0 4 2792 34 PointerToArray< double >::get_data 0 1 621 0
80
inline std::basic_string< char > PointerToArray< double >::get_data(void) const;

1971 8 set_data 0 4 2792 34 PointerToArray< double >::set_data 0 1 622 0
86
inline void PointerToArray< double >::set_data(std::basic_string< char > const &data);

1972 11 get_subdata 0 4 2792 37 PointerToArray< double >::get_subdata 0 1 623 0
123
inline std::basic_string< char > PointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

1973 11 set_subdata 0 4 2792 37 PointerToArray< double >::set_subdata 0 1 624 0
135
inline void PointerToArray< double >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1974 13 get_ref_count 0 4 2792 39 PointerToArray< double >::get_ref_count 0 1 625 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

1975 18 get_node_ref_count 0 4 2792 44 PointerToArray< double >::get_node_ref_count 0 1 626 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

1976 13 __getbuffer__ 0 4 2792 39 PointerToArray< double >::__getbuffer__ 0 1 627 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1977 17 __releasebuffer__ 0 4 2792 43 PointerToArray< double >::__releasebuffer__ 0 1 628 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1978 15 ~PointerToArray 0 4 2792 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

1979 14 PointerToArray 0 4 2794 39 PointerToArray< float >::PointerToArray 0 3 629 630 631 0
272
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

1980 11 empty_array 0 4 2794 36 PointerToArray< float >::empty_array 0 1 632 0
161
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((float const *)(0))));

1981 4 size 0 4 2794 29 PointerToArray< float >::size 0 1 633 0
67
inline unsigned long int PointerToArray< float >::size(void) const;

1982 9 push_back 0 4 2794 34 PointerToArray< float >::push_back 0 1 634 0
63
inline void PointerToArray< float >::push_back(float const &x);

1983 8 pop_back 0 4 2794 33 PointerToArray< float >::pop_back 0 1 635 0
52
inline void PointerToArray< float >::pop_back(void);

1984 11 get_element 0 4 2794 36 PointerToArray< float >::get_element 0 1 636 0
84
inline float const &PointerToArray< float >::get_element(unsigned long int n) const;

1985 11 set_element 0 4 2794 36 PointerToArray< float >::set_element 0 1 637 0
90
inline void PointerToArray< float >::set_element(unsigned long int n, float const &value);

1986 11 __getitem__ 0 4 2794 36 PointerToArray< float >::__getitem__ 0 1 638 0
77
float const &PointerToArray< float >::__getitem__(unsigned long int n) const;

1987 11 __setitem__ 0 4 2794 36 PointerToArray< float >::__setitem__ 0 1 639 0
83
void PointerToArray< float >::__setitem__(unsigned long int n, float const &value);

1988 8 get_data 0 4 2794 33 PointerToArray< float >::get_data 0 1 640 0
79
inline std::basic_string< char > PointerToArray< float >::get_data(void) const;

1989 8 set_data 0 4 2794 33 PointerToArray< float >::set_data 0 1 641 0
85
inline void PointerToArray< float >::set_data(std::basic_string< char > const &data);

1990 11 get_subdata 0 4 2794 36 PointerToArray< float >::get_subdata 0 1 642 0
122
inline std::basic_string< char > PointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

1991 11 set_subdata 0 4 2794 36 PointerToArray< float >::set_subdata 0 1 643 0
134
inline void PointerToArray< float >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1992 13 get_ref_count 0 4 2794 38 PointerToArray< float >::get_ref_count 0 1 644 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

1993 18 get_node_ref_count 0 4 2794 43 PointerToArray< float >::get_node_ref_count 0 1 645 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

1994 13 __getbuffer__ 0 4 2794 38 PointerToArray< float >::__getbuffer__ 0 1 646 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1995 17 __releasebuffer__ 0 4 2794 42 PointerToArray< float >::__releasebuffer__ 0 1 647 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1996 15 ~PointerToArray 0 4 2794 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

1997 14 PointerToArray 0 4 2796 37 PointerToArray< int >::PointerToArray 0 3 648 649 650 0
262
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

1998 11 empty_array 0 4 2796 34 PointerToArray< int >::empty_array 0 1 651 0
155
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((int const *)(0))));

1999 4 size 0 4 2796 27 PointerToArray< int >::size 0 1 652 0
65
inline unsigned long int PointerToArray< int >::size(void) const;

2000 9 push_back 0 4 2796 32 PointerToArray< int >::push_back 0 1 653 0
59
inline void PointerToArray< int >::push_back(int const &x);

2001 8 pop_back 0 4 2796 31 PointerToArray< int >::pop_back 0 1 654 0
50
inline void PointerToArray< int >::pop_back(void);

2002 11 get_element 0 4 2796 34 PointerToArray< int >::get_element 0 1 655 0
80
inline int const &PointerToArray< int >::get_element(unsigned long int n) const;

2003 11 set_element 0 4 2796 34 PointerToArray< int >::set_element 0 1 656 0
86
inline void PointerToArray< int >::set_element(unsigned long int n, int const &value);

2004 11 __getitem__ 0 4 2796 34 PointerToArray< int >::__getitem__ 0 1 657 0
73
int const &PointerToArray< int >::__getitem__(unsigned long int n) const;

2005 11 __setitem__ 0 4 2796 34 PointerToArray< int >::__setitem__ 0 1 658 0
79
void PointerToArray< int >::__setitem__(unsigned long int n, int const &value);

2006 8 get_data 0 4 2796 31 PointerToArray< int >::get_data 0 1 659 0
77
inline std::basic_string< char > PointerToArray< int >::get_data(void) const;

2007 8 set_data 0 4 2796 31 PointerToArray< int >::set_data 0 1 660 0
83
inline void PointerToArray< int >::set_data(std::basic_string< char > const &data);

2008 11 get_subdata 0 4 2796 34 PointerToArray< int >::get_subdata 0 1 661 0
120
inline std::basic_string< char > PointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

2009 11 set_subdata 0 4 2796 34 PointerToArray< int >::set_subdata 0 1 662 0
132
inline void PointerToArray< int >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

2010 13 get_ref_count 0 4 2796 36 PointerToArray< int >::get_ref_count 0 1 663 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

2011 18 get_node_ref_count 0 4 2796 41 PointerToArray< int >::get_node_ref_count 0 1 664 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

2012 13 __getbuffer__ 0 4 2796 36 PointerToArray< int >::__getbuffer__ 0 1 665 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

2013 17 __releasebuffer__ 0 4 2796 40 PointerToArray< int >::__releasebuffer__ 0 1 666 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

2014 15 ~PointerToArray 0 4 2796 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

2015 14 PointerToArray 0 4 2798 47 PointerToArray< unsigned char >::PointerToArray 0 3 667 668 669 0
312
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

2016 11 empty_array 0 4 2798 44 PointerToArray< unsigned char >::empty_array 0 1 670 0
185
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((unsigned char const *)(0))));

2017 4 size 0 4 2798 37 PointerToArray< unsigned char >::size 0 1 671 0
75
inline unsigned long int PointerToArray< unsigned char >::size(void) const;

2018 9 push_back 0 4 2798 42 PointerToArray< unsigned char >::push_back 0 1 672 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

2019 8 pop_back 0 4 2798 41 PointerToArray< unsigned char >::pop_back 0 1 673 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

2020 11 get_element 0 4 2798 44 PointerToArray< unsigned char >::get_element 0 1 674 0
100
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long int n) const;

2021 11 set_element 0 4 2798 44 PointerToArray< unsigned char >::set_element 0 1 675 0
106
inline void PointerToArray< unsigned char >::set_element(unsigned long int n, unsigned char const &value);

2022 11 __getitem__ 0 4 2798 44 PointerToArray< unsigned char >::__getitem__ 0 1 676 0
93
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

2023 11 __setitem__ 0 4 2798 44 PointerToArray< unsigned char >::__setitem__ 0 1 677 0
99
void PointerToArray< unsigned char >::__setitem__(unsigned long int n, unsigned char const &value);

2024 8 get_data 0 4 2798 41 PointerToArray< unsigned char >::get_data 0 1 678 0
87
inline std::basic_string< char > PointerToArray< unsigned char >::get_data(void) const;

2025 8 set_data 0 4 2798 41 PointerToArray< unsigned char >::set_data 0 1 679 0
93
inline void PointerToArray< unsigned char >::set_data(std::basic_string< char > const &data);

2026 11 get_subdata 0 4 2798 44 PointerToArray< unsigned char >::get_subdata 0 1 680 0
130
inline std::basic_string< char > PointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

2027 11 set_subdata 0 4 2798 44 PointerToArray< unsigned char >::set_subdata 0 1 681 0
142
inline void PointerToArray< unsigned char >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

2028 13 get_ref_count 0 4 2798 46 PointerToArray< unsigned char >::get_ref_count 0 1 682 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

2029 18 get_node_ref_count 0 4 2798 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 683 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

2030 13 __getbuffer__ 0 4 2798 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 684 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

2031 17 __releasebuffer__ 0 4 2798 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 685 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

2032 15 ~PointerToArray 0 4 2798 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

2033 18 get_version_string 0 4 2799 31 PandaSystem::get_version_string 0 1 686 0
57
static std::string PandaSystem::get_version_string(void);

2034 26 get_package_version_string 0 4 2799 39 PandaSystem::get_package_version_string 0 1 687 0
65
static std::string PandaSystem::get_package_version_string(void);

2035 20 get_package_host_url 0 4 2799 33 PandaSystem::get_package_host_url 0 1 688 0
59
static std::string PandaSystem::get_package_host_url(void);

2036 30 get_p3d_coreapi_version_string 0 4 2799 43 PandaSystem::get_p3d_coreapi_version_string 0 1 689 0
69
static std::string PandaSystem::get_p3d_coreapi_version_string(void);

2037 17 get_major_version 0 4 2799 30 PandaSystem::get_major_version 0 1 690 0
48
static int PandaSystem::get_major_version(void);

2038 17 get_minor_version 0 4 2799 30 PandaSystem::get_minor_version 0 1 691 0
48
static int PandaSystem::get_minor_version(void);

2039 20 get_sequence_version 0 4 2799 33 PandaSystem::get_sequence_version 0 1 692 0
51
static int PandaSystem::get_sequence_version(void);

2040 19 is_official_version 0 4 2799 32 PandaSystem::is_official_version 0 1 693 0
51
static bool PandaSystem::is_official_version(void);

2041 15 get_distributor 0 4 2799 28 PandaSystem::get_distributor 0 1 694 0
54
static std::string PandaSystem::get_distributor(void);

2042 12 get_compiler 0 4 2799 25 PandaSystem::get_compiler 0 1 695 0
51
static std::string PandaSystem::get_compiler(void);

2043 14 get_build_date 0 4 2799 27 PandaSystem::get_build_date 0 1 696 0
53
static std::string PandaSystem::get_build_date(void);

2044 14 get_git_commit 0 4 2799 27 PandaSystem::get_git_commit 0 1 697 0
53
static std::string PandaSystem::get_git_commit(void);

2045 12 get_platform 0 4 2799 25 PandaSystem::get_platform 0 1 698 0
51
static std::string PandaSystem::get_platform(void);

2046 10 has_system 0 4 2799 23 PandaSystem::has_system 0 1 699 0
62
bool PandaSystem::has_system(std::string const &system) const;

2047 15 get_num_systems 0 4 2799 28 PandaSystem::get_num_systems 0 1 700 0
53
std::size_t PandaSystem::get_num_systems(void) const;

2048 10 get_system 0 4 2799 23 PandaSystem::get_system 0 1 701 0
57
std::string PandaSystem::get_system(std::size_t n) const;

2049 14 get_system_tag 0 4 2799 27 PandaSystem::get_system_tag 0 1 702 0
97
std::string PandaSystem::get_system_tag(std::string const &system, std::string const &tag) const;

2050 10 add_system 0 4 2799 23 PandaSystem::add_system 0 1 703 0
56
void PandaSystem::add_system(std::string const &system);

2051 14 set_system_tag 0 4 2799 27 PandaSystem::set_system_tag 0 1 704 0
110
void PandaSystem::set_system_tag(std::string const &system, std::string const &tag, std::string const &value);

2052 9 heap_trim 0 4 2799 22 PandaSystem::heap_trim 0 1 705 0
45
bool PandaSystem::heap_trim(std::size_t pad);

2053 6 output 0 4 2799 19 PandaSystem::output 0 1 706 0
45
void PandaSystem::output(ostream &out) const;

2054 5 write 0 4 2799 18 PandaSystem::write 0 1 707 0
44
void PandaSystem::write(ostream &out) const;

2055 14 get_global_ptr 0 4 2799 27 PandaSystem::get_global_ptr 0 1 708 0
54
static PandaSystem *PandaSystem::get_global_ptr(void);

2056 14 get_class_type 0 4 2799 27 PandaSystem::get_class_type 0 1 709 0
52
static TypeHandle PandaSystem::get_class_type(void);

2057 12 StreamReader 0 4 2800 26 StreamReader::StreamReader 0 2 710 711 189
/**
 *
 */

/**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */
126
inline StreamReader::StreamReader(istream *in, bool owns_stream);
inline StreamReader::StreamReader(StreamReader const &copy);

2058 10 operator = 0 4 2800 24 StreamReader::operator = 0 1 712 0
63
inline void StreamReader::operator =(StreamReader const &copy);

2059 13 ~StreamReader 0 4 2800 27 StreamReader::~StreamReader 0 0 10
/**
 *
 */
41
inline StreamReader::~StreamReader(void);

2060 11 get_istream 0 4 2800 25 StreamReader::get_istream 0 1 713 37
/**
 * Returns the stream in use.
 */
54
inline istream *StreamReader::get_istream(void) const;

2061 8 get_bool 0 4 2800 22 StreamReader::get_bool 0 1 714 36
/**
 * Extracts a boolean value.
 */
41
inline bool StreamReader::get_bool(void);

2062 8 get_int8 0 4 2800 22 StreamReader::get_int8 0 1 715 43
/**
 * Extracts a signed 8-bit integer.
 */
43
inline int8_t StreamReader::get_int8(void);

2063 9 get_uint8 0 4 2800 23 StreamReader::get_uint8 0 1 716 46
/**
 * Extracts an unsigned 8-bit integer.
 */
45
inline uint8_t StreamReader::get_uint8(void);

2064 9 get_int16 0 4 2800 23 StreamReader::get_int16 0 1 717 44
/**
 * Extracts a signed 16-bit integer.
 */
45
inline int16_t StreamReader::get_int16(void);

2065 9 get_int32 0 4 2800 23 StreamReader::get_int32 0 1 718 44
/**
 * Extracts a signed 32-bit integer.
 */
45
inline int32_t StreamReader::get_int32(void);

2066 9 get_int64 0 4 2800 23 StreamReader::get_int64 0 1 719 44
/**
 * Extracts a signed 64-bit integer.
 */
45
inline int64_t StreamReader::get_int64(void);

2067 10 get_uint16 0 4 2800 24 StreamReader::get_uint16 0 1 720 47
/**
 * Extracts an unsigned 16-bit integer.
 */
47
inline uint16_t StreamReader::get_uint16(void);

2068 10 get_uint32 0 4 2800 24 StreamReader::get_uint32 0 1 721 47
/**
 * Extracts an unsigned 32-bit integer.
 */
47
inline uint32_t StreamReader::get_uint32(void);

2069 10 get_uint64 0 4 2800 24 StreamReader::get_uint64 0 1 722 47
/**
 * Extracts an unsigned 64-bit integer.
 */
47
inline uint64_t StreamReader::get_uint64(void);

2070 11 get_float32 0 4 2800 25 StreamReader::get_float32 0 1 723 186
/**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */
45
inline float StreamReader::get_float32(void);

2071 11 get_float64 0 4 2800 25 StreamReader::get_float64 0 1 724 51
/**
 * Extracts a 64-bit floating-point number.
 */
50
inline PN_float64 StreamReader::get_float64(void);

2072 12 get_be_int16 0 4 2800 26 StreamReader::get_be_int16 0 1 725 55
/**
 * Extracts a signed big-endian 16-bit integer.
 */
48
inline int16_t StreamReader::get_be_int16(void);

2073 12 get_be_int32 0 4 2800 26 StreamReader::get_be_int32 0 1 726 55
/**
 * Extracts a signed big-endian 32-bit integer.
 */
48
inline int32_t StreamReader::get_be_int32(void);

2074 12 get_be_int64 0 4 2800 26 StreamReader::get_be_int64 0 1 727 55
/**
 * Extracts a signed big-endian 64-bit integer.
 */
48
inline int64_t StreamReader::get_be_int64(void);

2075 13 get_be_uint16 0 4 2800 27 StreamReader::get_be_uint16 0 1 728 58
/**
 * Extracts an unsigned big-endian 16-bit integer.
 */
50
inline uint16_t StreamReader::get_be_uint16(void);

2076 13 get_be_uint32 0 4 2800 27 StreamReader::get_be_uint32 0 1 729 58
/**
 * Extracts an unsigned big-endian 32-bit integer.
 */
50
inline uint32_t StreamReader::get_be_uint32(void);

2077 13 get_be_uint64 0 4 2800 27 StreamReader::get_be_uint64 0 1 730 58
/**
 * Extracts an unsigned big-endian 64-bit integer.
 */
50
inline uint64_t StreamReader::get_be_uint64(void);

2078 14 get_be_float32 0 4 2800 28 StreamReader::get_be_float32 0 1 731 197
/**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
48
inline float StreamReader::get_be_float32(void);

2079 14 get_be_float64 0 4 2800 28 StreamReader::get_be_float64 0 1 732 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
53
inline PN_float64 StreamReader::get_be_float64(void);

2080 10 get_string 0 4 2800 24 StreamReader::get_string 0 1 733 0
43
std::string StreamReader::get_string(void);

2081 12 get_string32 0 4 2800 26 StreamReader::get_string32 0 1 734 0
45
std::string StreamReader::get_string32(void);

2082 12 get_z_string 0 4 2800 26 StreamReader::get_z_string 0 1 735 0
45
std::string StreamReader::get_z_string(void);

2083 16 get_fixed_string 0 4 2800 30 StreamReader::get_fixed_string 0 1 736 0
61
std::string StreamReader::get_fixed_string(std::size_t size);

2084 10 skip_bytes 0 4 2800 24 StreamReader::skip_bytes 0 1 737 0
48
void StreamReader::skip_bytes(std::size_t size);

2085 13 extract_bytes 0 4 2800 27 StreamReader::extract_bytes 0 1 738 0
136
std::size_t StreamReader::extract_bytes(unsigned char *into, std::size_t size);
PyObject *StreamReader::extract_bytes(std::size_t size);

2086 8 readline 0 4 2800 22 StreamReader::readline 0 1 739 0
39
PyObject *StreamReader::readline(void);

2087 9 readlines 0 4 2800 23 StreamReader::readlines 0 1 740 0
40
PyObject *StreamReader::readlines(void);

2088 24 upcast_to_IStreamWrapper 0 12 2801 39 StreamWrapper::upcast_to_IStreamWrapper 0 1 744 43
upcast from StreamWrapper to IStreamWrapper
62
IStreamWrapper *StreamWrapper::upcast_to_IStreamWrapper(void);

2089 25 downcast_to_StreamWrapper 0 12 2778 41 IStreamWrapper::downcast_to_StreamWrapper 0 1 745 45
downcast from IStreamWrapper to StreamWrapper
63
StreamWrapper *IStreamWrapper::downcast_to_StreamWrapper(void);

2090 24 upcast_to_OStreamWrapper 0 12 2801 39 StreamWrapper::upcast_to_OStreamWrapper 0 1 746 43
upcast from StreamWrapper to OStreamWrapper
62
OStreamWrapper *StreamWrapper::upcast_to_OStreamWrapper(void);

2091 25 downcast_to_StreamWrapper 0 12 2789 41 OStreamWrapper::downcast_to_StreamWrapper 0 1 747 45
downcast from OStreamWrapper to StreamWrapper
63
StreamWrapper *OStreamWrapper::downcast_to_StreamWrapper(void);

2092 13 StreamWrapper 0 4 2801 28 StreamWrapper::StreamWrapper 0 2 741 742 22
/**
 *
 */

/**
 *
 */
124
inline StreamWrapper::StreamWrapper(iostream &stream);
inline StreamWrapper::StreamWrapper(StreamWrapper const &) = default;

2093 14 ~StreamWrapper 0 4 2801 29 StreamWrapper::~StreamWrapper 0 0 0
36
StreamWrapper::~StreamWrapper(void);

2094 12 get_iostream 0 4 2801 27 StreamWrapper::get_iostream 0 1 743 56
/**
 * Returns the iostream this object is wrapping.
 */
57
inline iostream *StreamWrapper::get_iostream(void) const;

2095 12 StreamWriter 0 4 2803 26 StreamWriter::StreamWriter 0 2 748 749 94
/**
 *
 */

/**
 *
 */

/**
 * The copy constructor does not copy ownership of the stream.
 */
127
inline StreamWriter::StreamWriter(ostream *out, bool owns_stream);
inline StreamWriter::StreamWriter(StreamWriter const &copy);

2096 10 operator = 0 4 2803 24 StreamWriter::operator = 0 1 750 0
63
inline void StreamWriter::operator =(StreamWriter const &copy);

2097 13 ~StreamWriter 0 4 2803 27 StreamWriter::~StreamWriter 0 0 10
/**
 *
 */
41
inline StreamWriter::~StreamWriter(void);

2098 11 get_ostream 0 4 2803 25 StreamWriter::get_ostream 0 1 751 37
/**
 * Returns the stream in use.
 */
54
inline ostream *StreamWriter::get_ostream(void) const;

2099 8 add_bool 0 4 2803 22 StreamWriter::add_bool 0 1 752 46
/**
 * Adds a boolean value to the stream.
 */
47
inline void StreamWriter::add_bool(bool value);

2100 8 add_int8 0 4 2803 22 StreamWriter::add_int8 0 1 753 53
/**
 * Adds a signed 8-bit integer to the stream.
 */
49
inline void StreamWriter::add_int8(int8_t value);

2101 9 add_uint8 0 4 2803 23 StreamWriter::add_uint8 0 1 754 56
/**
 * Adds an unsigned 8-bit integer to the stream.
 */
51
inline void StreamWriter::add_uint8(uint8_t value);

2102 9 add_int16 0 4 2803 23 StreamWriter::add_int16 0 1 755 104
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the stream.
 */
51
inline void StreamWriter::add_int16(int16_t value);

2103 9 add_int32 0 4 2803 23 StreamWriter::add_int32 0 1 756 54
/**
 * Adds a signed 32-bit integer to the stream.
 */
51
inline void StreamWriter::add_int32(int32_t value);

2104 9 add_int64 0 4 2803 23 StreamWriter::add_int64 0 1 757 54
/**
 * Adds a signed 64-bit integer to the stream.
 */
51
inline void StreamWriter::add_int64(int64_t value);

2105 10 add_uint16 0 4 2803 24 StreamWriter::add_uint16 0 1 758 57
/**
 * Adds an unsigned 16-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint16(uint16_t value);

2106 10 add_uint32 0 4 2803 24 StreamWriter::add_uint32 0 1 759 57
/**
 * Adds an unsigned 32-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint32(uint32_t value);

2107 10 add_uint64 0 4 2803 24 StreamWriter::add_uint64 0 1 760 57
/**
 * Adds an unsigned 64-bit integer to the stream.
 */
53
inline void StreamWriter::add_uint64(uint64_t value);

2108 11 add_float32 0 4 2803 25 StreamWriter::add_float32 0 1 761 196
/**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
51
inline void StreamWriter::add_float32(float value);

2109 11 add_float64 0 4 2803 25 StreamWriter::add_float64 0 1 762 61
/**
 * Adds a 64-bit floating-point number to the stream.
 */
56
inline void StreamWriter::add_float64(PN_float64 value);

2110 12 add_be_int16 0 4 2803 26 StreamWriter::add_be_int16 0 1 763 140
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int16(int16_t value);

2111 12 add_be_int32 0 4 2803 26 StreamWriter::add_be_int32 0 1 764 71
/**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int32(int32_t value);

2112 12 add_be_int64 0 4 2803 26 StreamWriter::add_be_int64 0 1 765 71
/**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */
54
inline void StreamWriter::add_be_int64(int64_t value);

2113 13 add_be_uint16 0 4 2803 27 StreamWriter::add_be_uint16 0 1 766 74
/**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint16(uint16_t value);

2114 13 add_be_uint32 0 4 2803 27 StreamWriter::add_be_uint32 0 1 767 74
/**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint32(uint32_t value);

2115 13 add_be_uint64 0 4 2803 27 StreamWriter::add_be_uint64 0 1 768 74
/**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */
56
inline void StreamWriter::add_be_uint64(uint64_t value);

2116 14 add_be_float32 0 4 2803 28 StreamWriter::add_be_float32 0 1 769 207
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */
54
inline void StreamWriter::add_be_float32(float value);

2117 14 add_be_float64 0 4 2803 28 StreamWriter::add_be_float64 0 1 770 78
/**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */
59
inline void StreamWriter::add_be_float64(PN_float64 value);

2118 10 add_string 0 4 2803 24 StreamWriter::add_string 0 1 771 107
/**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */
61
inline void StreamWriter::add_string(std::string const &str);

2119 12 add_string32 0 4 2803 26 StreamWriter::add_string32 0 1 772 84
/**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */
63
inline void StreamWriter::add_string32(std::string const &str);

2120 12 add_z_string 0 4 2803 26 StreamWriter::add_z_string 0 1 773 84
/**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */
56
inline void StreamWriter::add_z_string(std::string str);

2121 16 add_fixed_string 0 4 2803 30 StreamWriter::add_fixed_string 0 1 774 236
/**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
85
inline void StreamWriter::add_fixed_string(std::string const &str, std::size_t size);

2122 9 pad_bytes 0 4 2803 23 StreamWriter::pad_bytes 0 1 775 0
47
void StreamWriter::pad_bytes(std::size_t size);

2123 11 append_data 0 4 2803 25 StreamWriter::append_data 0 1 776 140
/**
 * Appends some more raw data to the end of the streamWriter.
 */

/**
 * Appends some more raw data to the end of the streamWriter.
 */
47
void StreamWriter::append_data(PyObject *data);

2124 5 flush 0 4 2803 19 StreamWriter::flush 0 1 777 50
/**
 * Calls flush() on the underlying stream.
 */
38
inline void StreamWriter::flush(void);

2125 5 write 0 4 2803 19 StreamWriter::write 0 1 778 132
/**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */
56
inline void StreamWriter::write(std::string const &str);

2126 13 get_softspace 0 20 2803 27 StreamWriter::get_softspace 0 1 780 39
getter for int StreamWriter::softspace;
44
int StreamWriter::get_softspace(void) const;

2127 13 set_softspace 0 36 2803 27 StreamWriter::set_softspace 0 1 779 39
setter for int StreamWriter::softspace;
44
void StreamWriter::set_softspace(int value);

2128 11 TextEncoder 0 4 2804 24 TextEncoder::TextEncoder 0 2 781 782 22
/**
 *
 */

/**
 *
 */
96
inline TextEncoder::TextEncoder(void);
inline TextEncoder::TextEncoder(TextEncoder const &copy);

2129 12 set_encoding 0 4 2804 25 TextEncoder::set_encoding 0 1 783 374
/**
 * Specifies how the string set via set_text() is to be interpreted.  The
 * default, E_iso8859, means a standard string with one-byte characters (i.e.
 * ASCII).  Other encodings are possible to take advantage of character sets
 * with more than 256 characters.
 *
 * This affects only future calls to set_text(); it does not change text that
 * was set previously.
 */
70
inline void TextEncoder::set_encoding(TextEncoder::Encoding encoding);

2130 12 get_encoding 0 4 2804 25 TextEncoder::get_encoding 0 1 784 116
/**
 * Returns the encoding by which the string set via set_text() is to be
 * interpreted.  See set_encoding().
 */
67
inline TextEncoder::Encoding TextEncoder::get_encoding(void) const;

2131 20 set_default_encoding 0 4 2804 33 TextEncoder::set_default_encoding 0 1 785 126
/**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */
85
static inline void TextEncoder::set_default_encoding(TextEncoder::Encoding encoding);

2132 20 get_default_encoding 0 4 2804 33 TextEncoder::get_default_encoding 0 1 786 126
/**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */
76
static inline TextEncoder::Encoding TextEncoder::get_default_encoding(void);

2133 8 set_text 0 4 2804 21 TextEncoder::set_text 0 2 787 788 562
/**
 * Changes the text that is stored in the encoder.  The text should be encoded
 * according to the method indicated by set_encoding().  Subsequent calls to
 * get_text() will return this same string, while get_wtext() will return the
 * decoded version of the string.
 */

/**
 * The two-parameter version of set_text() accepts an explicit encoding; the
 * text is immediately decoded and stored as a wide-character string.
 * Subsequent calls to get_text() will return the same text re-encoded using
 * whichever encoding is specified by set_encoding().
 */
151
inline void TextEncoder::set_text(std::string const &text);
inline void TextEncoder::set_text(std::string const &text, TextEncoder::Encoding encoding);

2134 10 clear_text 0 4 2804 23 TextEncoder::clear_text 0 1 789 49
/**
 * Removes the text from the TextEncoder.
 */
42
inline void TextEncoder::clear_text(void);

2135 8 has_text 0 4 2804 21 TextEncoder::has_text 0 1 790 10
/**
 *
 */
46
inline bool TextEncoder::has_text(void) const;

2136 10 make_upper 0 4 2804 23 TextEncoder::make_upper 0 1 791 0
35
void TextEncoder::make_upper(void);

2137 10 make_lower 0 4 2804 23 TextEncoder::make_lower 0 1 792 0
35
void TextEncoder::make_lower(void);

2138 8 get_text 0 4 2804 21 TextEncoder::get_text 0 2 793 794 164
/**
 * Returns the current text, as encoded via the current encoding system.
 */

/**
 * Returns the current text, as encoded via the indicated encoding system.
 */
133
inline std::string TextEncoder::get_text(void) const;
inline std::string TextEncoder::get_text(TextEncoder::Encoding encoding) const;

2139 11 append_text 0 4 2804 24 TextEncoder::append_text 0 1 795 70
/**
 * Appends the indicates string to the end of the stored text.
 */
62
inline void TextEncoder::append_text(std::string const &text);

2140 19 append_unicode_char 0 4 2804 32 TextEncoder::append_unicode_char 0 1 796 128
/**
 * Appends a single character to the end of the stored text.  This may be a
 * wide character, up to 16 bits in Unicode.
 */
60
inline void TextEncoder::append_unicode_char(int character);

2141 13 get_num_chars 0 4 2804 26 TextEncoder::get_num_chars 0 1 797 169
/**
 * Returns the number of characters in the stored text.  This is a count of
 * wide characters, after the string has been decoded according to
 * set_encoding().
 */
58
inline std::size_t TextEncoder::get_num_chars(void) const;

2142 16 get_unicode_char 0 4 2804 29 TextEncoder::get_unicode_char 0 1 798 196
/**
 * Returns the Unicode value of the nth character in the stored text.  This
 * may be a wide character (greater than 255), after the string has been
 * decoded according to set_encoding().
 */
66
inline int TextEncoder::get_unicode_char(std::size_t index) const;

2143 16 set_unicode_char 0 4 2804 29 TextEncoder::set_unicode_char 0 1 799 193
/**
 * Sets the Unicode value of the nth character in the stored text.  This may
 * be a wide character (greater than 255), after the string has been decoded
 * according to set_encoding().
 */
76
inline void TextEncoder::set_unicode_char(std::size_t index, int character);

2144 16 get_encoded_char 0 4 2804 29 TextEncoder::get_encoded_char 0 2 800 801 204
/**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */

/**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */
181
inline std::string TextEncoder::get_encoded_char(std::size_t index) const;
inline std::string TextEncoder::get_encoded_char(std::size_t index, TextEncoder::Encoding encoding) const;

2145 17 get_text_as_ascii 0 4 2804 30 TextEncoder::get_text_as_ascii 0 1 802 723
/**
 * Returns the text associated with the node, converted as nearly as possible
 * to a fully-ASCII representation.  This means replacing accented letters
 * with their unaccented ASCII equivalents.
 *
 * It is possible that some characters in the string cannot be converted to
 * ASCII.  (The string may involve symbols like the copyright symbol, for
 * instance, or it might involve letters in some other alphabet such as Greek
 * or Cyrillic, or even Latin letters like thorn or eth that are not part of
 * the ASCII character set.)  In this case, as much of the string as possible
 * will be converted to ASCII, and the nonconvertible characters will remain
 * encoded in the encoding specified by set_encoding().
 */
62
inline std::string TextEncoder::get_text_as_ascii(void) const;

2146 13 reencode_text 0 4 2804 26 TextEncoder::reencode_text 0 1 803 277
/**
 * Given the indicated text string, which is assumed to be encoded via the
 * encoding "from", decodes it and then reencodes it into the encoding "to",
 * and returns the newly encoded string.  This does not change or affect any
 * properties on the TextEncoder itself.
 */
132
static inline std::string TextEncoder::reencode_text(std::string const &text, TextEncoder::Encoding from, TextEncoder::Encoding to);

2147 15 unicode_isalpha 0 4 2804 28 TextEncoder::unicode_isalpha 0 1 804 152
/**
 * Returns true if the indicated character is an alphabetic letter, false
 * otherwise.  This is akin to ctype's isalpha(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isalpha(int character);

2148 15 unicode_isdigit 0 4 2804 28 TextEncoder::unicode_isdigit 0 1 805 147
/**
 * Returns true if the indicated character is a numeric digit, false
 * otherwise.  This is akin to ctype's isdigit(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isdigit(int character);

2149 15 unicode_ispunct 0 4 2804 28 TextEncoder::unicode_ispunct 0 1 806 150
/**
 * Returns true if the indicated character is a punctuation mark, false
 * otherwise.  This is akin to ctype's ispunct(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_ispunct(int character);

2150 15 unicode_islower 0 4 2804 28 TextEncoder::unicode_islower 0 1 807 150
/**
 * Returns true if the indicated character is a lowercase letter, false
 * otherwise.  This is akin to ctype's islower(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_islower(int character);

2151 15 unicode_isupper 0 4 2804 28 TextEncoder::unicode_isupper 0 1 808 151
/**
 * Returns true if the indicated character is an uppercase letter, false
 * otherwise.  This is akin to ctype's isupper(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isupper(int character);

2152 15 unicode_isspace 0 4 2804 28 TextEncoder::unicode_isspace 0 1 809 151
/**
 * Returns true if the indicated character is a whitespace letter, false
 * otherwise.  This is akin to ctype's isspace(), extended to Unicode.
 */
63
static inline bool TextEncoder::unicode_isspace(int character);

2153 15 unicode_toupper 0 4 2804 28 TextEncoder::unicode_toupper 0 1 810 135
/**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's toupper(), extended to Unicode.
 */
62
static inline int TextEncoder::unicode_toupper(int character);

2154 15 unicode_tolower 0 4 2804 28 TextEncoder::unicode_tolower 0 1 811 135
/**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's tolower(), extended to Unicode.
 */
62
static inline int TextEncoder::unicode_tolower(int character);

2155 5 upper 0 4 2804 18 TextEncoder::upper 0 2 812 813 210
/**
 * Converts the string to uppercase, assuming the string is encoded in the
 * default encoding.
 */

/**
 * Converts the string to uppercase, assuming the string is encoded in the
 * indicated encoding.
 */
177
static inline std::string TextEncoder::upper(std::string const &source);
static inline std::string TextEncoder::upper(std::string const &source, TextEncoder::Encoding encoding);

2156 5 lower 0 4 2804 18 TextEncoder::lower 0 2 814 815 210
/**
 * Converts the string to lowercase, assuming the string is encoded in the
 * default encoding.
 */

/**
 * Converts the string to lowercase, assuming the string is encoded in the
 * indicated encoding.
 */
177
static inline std::string TextEncoder::lower(std::string const &source);
static inline std::string TextEncoder::lower(std::string const &source, TextEncoder::Encoding encoding);

2157 9 set_wtext 0 4 2804 22 TextEncoder::set_wtext 0 1 816 303
// Direct support for wide-character strings.  Now publishable with the new
// wstring support in interrogate.

/**
 * Changes the text that is stored in the encoder.  Subsequent calls to
 * get_wtext() will return this same string, while get_text() will return the
 * encoded version of the string.
 */
62
inline void TextEncoder::set_wtext(std::wstring const &wtext);

2158 9 get_wtext 0 4 2804 22 TextEncoder::get_wtext 0 1 817 91
/**
 * Returns the text associated with the TextEncoder, as a wide-character
 * string.
 */
62
inline std::wstring const &TextEncoder::get_wtext(void) const;

2159 12 append_wtext 0 4 2804 25 TextEncoder::append_wtext 0 1 818 85
/**
 * Appends the indicates string to the end of the stored wide-character text.
 */
64
inline void TextEncoder::append_wtext(std::wstring const &text);

2160 18 get_wtext_as_ascii 0 4 2804 31 TextEncoder::get_wtext_as_ascii 0 1 819 0
57
std::wstring TextEncoder::get_wtext_as_ascii(void) const;

2161 8 is_wtext 0 4 2804 21 TextEncoder::is_wtext 0 1 820 0
39
bool TextEncoder::is_wtext(void) const;

2162 12 encode_wchar 0 4 2804 25 TextEncoder::encode_wchar 0 1 821 0
89
static std::string TextEncoder::encode_wchar(wchar_t ch, TextEncoder::Encoding encoding);

2163 12 encode_wtext 0 4 2804 25 TextEncoder::encode_wtext 0 2 822 823 102
/**
 * Encodes a wide-text string into a single-char string, according to the
 * current encoding.
 */
183
inline std::string TextEncoder::encode_wtext(std::wstring const &wtext) const;
static std::string TextEncoder::encode_wtext(std::wstring const &wtext, TextEncoder::Encoding encoding);

2164 11 decode_text 0 4 2804 24 TextEncoder::decode_text 0 2 824 825 105
/**
 * Returns the given wstring decoded to a single-byte string, via the current
 * encoding system.
 */
179
inline std::wstring TextEncoder::decode_text(std::string const &text) const;
static std::wstring TextEncoder::decode_text(std::string const &text, TextEncoder::Encoding encoding);

2165 12 ~TextEncoder 0 4 2804 25 TextEncoder::~TextEncoder 0 0 0
32
TextEncoder::~TextEncoder(void);

2166 4 make 0 4 2806 16 TypeHandle::make 0 1 828 0
59
static TypeHandle TypeHandle::make(PyTypeObject *classobj);

2167 11 operator == 0 4 2806 23 TypeHandle::operator == 0 1 829 0
67
inline bool TypeHandle::operator ==(TypeHandle const &other) const;

2168 11 operator != 0 4 2806 23 TypeHandle::operator != 0 1 830 0
67
inline bool TypeHandle::operator !=(TypeHandle const &other) const;

2169 10 operator < 0 4 2806 22 TypeHandle::operator < 0 1 831 0
66
inline bool TypeHandle::operator <(TypeHandle const &other) const;

2170 11 operator <= 0 4 2806 23 TypeHandle::operator <= 0 1 832 0
67
inline bool TypeHandle::operator <=(TypeHandle const &other) const;

2171 10 operator > 0 4 2806 22 TypeHandle::operator > 0 1 833 0
66
inline bool TypeHandle::operator >(TypeHandle const &other) const;

2172 11 operator >= 0 4 2806 23 TypeHandle::operator >= 0 1 834 0
67
inline bool TypeHandle::operator >=(TypeHandle const &other) const;

2173 10 compare_to 0 4 2806 22 TypeHandle::compare_to 0 1 835 207
/**
 * Sorts TypeHandles arbitrarily (according to <, >, etc.).  Returns a number
 * less than 0 if this type sorts before the other one, greater than zero if
 * it sorts after, 0 if they are equivalent.
 */
65
inline int TypeHandle::compare_to(TypeHandle const &other) const;

2174 8 get_hash 0 4 2806 20 TypeHandle::get_hash 0 1 836 54
/**
 * Returns a hash code suitable for phash_map.
 */
52
inline std::size_t TypeHandle::get_hash(void) const;

2175 8 get_name 0 4 2806 20 TypeHandle::get_name 0 1 837 216
/**
 * Returns the name of the type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
88
inline std::string TypeHandle::get_name(TypedObject *object = (TypedObject *)(0)) const;

2176 15 is_derived_from 0 4 2806 27 TypeHandle::is_derived_from 0 1 838 268
/**
 * Returns true if this type is derived from the indicated type, false
 * otherwise.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
107
inline bool TypeHandle::is_derived_from(TypeHandle parent, TypedObject *object = (TypedObject *)(0)) const;

2177 22 get_num_parent_classes 0 4 2806 34 TypeHandle::get_num_parent_classes 0 1 839 506
/**
 * Returns the number of parent classes that this type is known to have.  This
 * may then be used to index into get_parent_class().  The result will be 0 if
 * this class does not inherit from any other classes, 1 if normal, single
 * inheritance is in effect, or greater than one if multiple inheritance is in
 * effect.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
94
inline int TypeHandle::get_num_parent_classes(TypedObject *object = (TypedObject *)(0)) const;

2178 16 get_parent_class 0 4 2806 28 TypeHandle::get_parent_class 0 1 840 129
/**
 * Returns the nth parent class of this type.  The index should be in the
 * range 0 <= index < get_num_parent_classes().
 */
64
inline TypeHandle TypeHandle::get_parent_class(int index) const;

2179 21 get_num_child_classes 0 4 2806 33 TypeHandle::get_num_child_classes 0 1 841 314
/**
 * Returns the number of child classes that this type is known to have.  This
 * may then be used to index into get_child_class().
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
93
inline int TypeHandle::get_num_child_classes(TypedObject *object = (TypedObject *)(0)) const;

2180 15 get_child_class 0 4 2806 27 TypeHandle::get_child_class 0 1 842 127
/**
 * Returns the nth child class of this type.  The index should be in the range
 * 0 <= index < get_num_child_classes().
 */
63
inline TypeHandle TypeHandle::get_child_class(int index) const;

2181 18 get_parent_towards 0 4 2806 30 TypeHandle::get_parent_towards 0 1 843 577
/**
 * Returns the parent class that is in a direct line of inheritance to the
 * indicated ancestor class.  This is useful in the presence of multiple
 * inheritance to try to determine what properties an unknown type may have.
 *
 * The return value is TypeHandle::none() if the type does not inherit from
 * the ancestor.  If ancestor is the same as this type, the return value is
 * this type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */
118
inline TypeHandle TypeHandle::get_parent_towards(TypeHandle ancestor, TypedObject *object = (TypedObject *)(0)) const;

2182 24 get_best_parent_from_Set 0 4 2806 36 TypeHandle::get_best_parent_from_Set 0 1 844 0
77
int TypeHandle::get_best_parent_from_Set(set< int > const &legal_vals) const;

2183 16 get_memory_usage 0 4 2806 28 TypeHandle::get_memory_usage 0 1 845 0
85
std::size_t TypeHandle::get_memory_usage(TypeHandle::MemoryClass memory_class) const;

2184 16 inc_memory_usage 0 4 2806 28 TypeHandle::inc_memory_usage 0 1 846 0
90
void TypeHandle::inc_memory_usage(TypeHandle::MemoryClass memory_class, std::size_t size);

2185 16 dec_memory_usage 0 4 2806 28 TypeHandle::dec_memory_usage 0 1 847 0
90
void TypeHandle::dec_memory_usage(TypeHandle::MemoryClass memory_class, std::size_t size);

2186 9 get_index 0 4 2806 21 TypeHandle::get_index 0 1 848 354
/**
 * Returns the integer index associated with this TypeHandle.  Each different
 * TypeHandle will have a different index.  However, you probably shouldn't be
 * using this method; you should just treat the TypeHandles as opaque classes.
 * This is provided for the convenience of non-C++ scripting languages to
 * build a hashtable of TypeHandles.
 */
45
inline int TypeHandle::get_index(void) const;

2187 6 output 0 4 2806 18 TypeHandle::output 0 1 849 10
/**
 *
 */
51
inline void TypeHandle::output(ostream &out) const;

2188 4 none 0 4 2806 16 TypeHandle::none 0 1 850 85
/**
 * Returns a special zero-valued TypeHandle that is used to indicate no type.
 */
48
static inline TypeHandle TypeHandle::none(void);

2189 22 operator typecast bool 0 132 2806 34 TypeHandle::operator typecast bool 0 1 851 0
59
inline bool TypeHandle::operator typecast bool(void) const;

2190 10 TypeHandle 0 4 2806 22 TypeHandle::TypeHandle 0 2 826 827 0
107
inline TypeHandle::TypeHandle(void) = default;
inline TypeHandle::TypeHandle(TypeHandle const &) = default;

2191 11 ~TypeHandle 0 4 2806 23 TypeHandle::~TypeHandle 0 0 0
30
TypeHandle::~TypeHandle(void);

2192 21 register_dynamic_type 0 4 2808 35 TypeRegistry::register_dynamic_type 0 1 853 0
72
TypeHandle TypeRegistry::register_dynamic_type(std::string const &name);

2193 17 record_derivation 0 4 2808 31 TypeRegistry::record_derivation 0 1 854 0
74
void TypeRegistry::record_derivation(TypeHandle child, TypeHandle parent);

2194 21 record_alternate_name 0 4 2808 35 TypeRegistry::record_alternate_name 0 1 855 0
83
void TypeRegistry::record_alternate_name(TypeHandle type, std::string const &name);

2195 9 find_type 0 4 2808 23 TypeRegistry::find_type 0 1 856 0
66
TypeHandle TypeRegistry::find_type(std::string const &name) const;

2196 15 find_type_by_id 0 4 2808 29 TypeRegistry::find_type_by_id 0 1 857 0
55
TypeHandle TypeRegistry::find_type_by_id(int id) const;

2197 8 get_name 0 4 2808 22 TypeRegistry::get_name 0 1 858 0
79
std::string TypeRegistry::get_name(TypeHandle type, TypedObject *object) const;

2198 15 is_derived_from 0 4 2808 29 TypeRegistry::is_derived_from 0 1 859 0
97
bool TypeRegistry::is_derived_from(TypeHandle child, TypeHandle base, TypedObject *child_object);

2199 19 get_num_typehandles 0 4 2808 33 TypeRegistry::get_num_typehandles 0 1 860 0
44
int TypeRegistry::get_num_typehandles(void);

2200 14 get_typehandle 0 4 2808 28 TypeRegistry::get_typehandle 0 1 861 0
47
TypeHandle TypeRegistry::get_typehandle(int n);

2201 20 get_num_root_classes 0 4 2808 34 TypeRegistry::get_num_root_classes 0 1 862 0
45
int TypeRegistry::get_num_root_classes(void);

2202 14 get_root_class 0 4 2808 28 TypeRegistry::get_root_class 0 1 863 0
47
TypeHandle TypeRegistry::get_root_class(int n);

2203 22 get_num_parent_classes 0 4 2808 36 TypeRegistry::get_num_parent_classes 0 1 864 0
92
int TypeRegistry::get_num_parent_classes(TypeHandle child, TypedObject *child_object) const;

2204 16 get_parent_class 0 4 2808 30 TypeRegistry::get_parent_class 0 1 865 0
77
TypeHandle TypeRegistry::get_parent_class(TypeHandle child, int index) const;

2205 21 get_num_child_classes 0 4 2808 35 TypeRegistry::get_num_child_classes 0 1 866 0
91
int TypeRegistry::get_num_child_classes(TypeHandle child, TypedObject *child_object) const;

2206 15 get_child_class 0 4 2808 29 TypeRegistry::get_child_class 0 1 867 0
76
TypeHandle TypeRegistry::get_child_class(TypeHandle child, int index) const;

2207 18 get_parent_towards 0 4 2808 32 TypeRegistry::get_parent_towards 0 1 868 0
106
TypeHandle TypeRegistry::get_parent_towards(TypeHandle child, TypeHandle base, TypedObject *child_object);

2208 16 reregister_types 0 4 2808 30 TypeRegistry::reregister_types 0 1 869 0
49
static void TypeRegistry::reregister_types(void);

2209 5 write 0 4 2808 19 TypeRegistry::write 0 1 870 0
45
void TypeRegistry::write(ostream &out) const;

2210 3 ptr 0 4 2808 17 TypeRegistry::ptr 0 1 871 63
// ptr() returns the pointer to the global TypeRegistry object.
45
static TypeRegistry *TypeRegistry::ptr(void);

2211 12 TypeRegistry 0 4 2808 26 TypeRegistry::TypeRegistry 0 1 852 0
66
inline TypeRegistry::TypeRegistry(TypeRegistry const &) = default;

2212 13 ~TypeRegistry 0 4 2808 27 TypeRegistry::~TypeRegistry 0 0 0
34
TypeRegistry::~TypeRegistry(void);

2213 20 upcast_to_MemoryBase 0 12 2809 33 TypedObject::upcast_to_MemoryBase 0 1 877 37
upcast from TypedObject to MemoryBase
52
MemoryBase *TypedObject::upcast_to_MemoryBase(void);

2214 23 downcast_to_TypedObject 0 12 2715 35 MemoryBase::downcast_to_TypedObject 0 1 878 39
downcast from MemoryBase to TypedObject
55
TypedObject *MemoryBase::downcast_to_TypedObject(void);

2215 12 ~TypedObject 0 6 2809 25 TypedObject::~TypedObject 0 0 44
// A virtual destructor is just a good idea.
40
virtual TypedObject::~TypedObject(void);

2216 8 get_type 0 6 2809 21 TypedObject::get_type 0 1 872 154
// Derived classes should override this function to return get_class_type().

// Derived classes should override this function to return get_class_type().
57
virtual TypeHandle TypedObject::get_type(void) const = 0;

2217 14 get_type_index 0 4 2809 27 TypedObject::get_type_index 0 1 873 180
/**
 * Returns the internal index number associated with this object's TypeHandle,
 * a unique number for each different type.  This is equivalent to
 * get_type().get_index().
 */
51
inline int TypedObject::get_type_index(void) const;

2218 10 is_of_type 0 4 2809 23 TypedObject::is_of_type 0 1 874 84
/**
 * Returns true if the current object is or derives from the indicated type.
 */
61
inline bool TypedObject::is_of_type(TypeHandle handle) const;

2219 13 is_exact_type 0 4 2809 26 TypedObject::is_exact_type 0 1 875 76
/**
 * Returns true if the current object is the indicated type exactly.
 */
64
inline bool TypedObject::is_exact_type(TypeHandle handle) const;

2220 14 get_class_type 0 4 2809 27 TypedObject::get_class_type 0 1 876 0
52
static TypeHandle TypedObject::get_class_type(void);

2221 7 fstream 0 4 2810 16 fstream::fstream 0 1 879 0
23
fstream::fstream(void);

2222 5 close 0 4 2810 14 fstream::close 0 1 880 0
26
void fstream::close(void);

2223 8 ~fstream 0 4 2810 17 fstream::~fstream 0 0 0
24
fstream::~fstream(void);

2224 8 ifstream 0 4 2811 18 ifstream::ifstream 0 1 881 0
25
ifstream::ifstream(void);

2225 5 close 0 4 2811 15 ifstream::close 0 1 882 0
27
void ifstream::close(void);

2226 9 ~ifstream 0 4 2811 19 ifstream::~ifstream 0 0 0
26
ifstream::~ifstream(void);

2227 8 ofstream 0 4 2812 18 ofstream::ofstream 0 1 883 0
25
ofstream::ofstream(void);

2228 5 close 0 4 2812 15 ofstream::close 0 1 884 0
27
void ofstream::close(void);

2229 9 ~ofstream 0 4 2812 19 ofstream::~ofstream 0 0 0
26
ofstream::~ofstream(void);

2230 11 is_tracking 0 4 2813 24 MemoryUsage::is_tracking 0 1 885 125
/**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */
50
static inline bool MemoryUsage::is_tracking(void);

2231 11 is_counting 0 4 2813 24 MemoryUsage::is_counting 0 1 886 168
/**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */
50
static inline bool MemoryUsage::is_counting(void);

2232 20 get_current_cpp_size 0 4 2813 33 MemoryUsage::get_current_cpp_size 0 1 887 136
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */
66
static inline std::size_t MemoryUsage::get_current_cpp_size(void);

2233 18 get_total_cpp_size 0 4 2813 31 MemoryUsage::get_total_cpp_size 0 1 888 132
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */
64
static inline std::size_t MemoryUsage::get_total_cpp_size(void);

2234 26 get_panda_heap_single_size 0 4 2813 39 MemoryUsage::get_panda_heap_single_size 0 1 889 119
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */
72
static inline std::size_t MemoryUsage::get_panda_heap_single_size(void);

2235 25 get_panda_heap_array_size 0 4 2813 38 MemoryUsage::get_panda_heap_array_size 0 1 890 107
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */
71
static inline std::size_t MemoryUsage::get_panda_heap_array_size(void);

2236 23 get_panda_heap_overhead 0 4 2813 36 MemoryUsage::get_panda_heap_overhead 0 1 891 190
/**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */
69
static inline std::size_t MemoryUsage::get_panda_heap_overhead(void);

2237 19 get_panda_mmap_size 0 4 2813 32 MemoryUsage::get_panda_mmap_size 0 1 892 110
/**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */
65
static inline std::size_t MemoryUsage::get_panda_mmap_size(void);

2238 17 get_external_size 0 4 2813 30 MemoryUsage::get_external_size 0 1 893 496
/**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */
63
static inline std::size_t MemoryUsage::get_external_size(void);

2239 14 get_total_size 0 4 2813 27 MemoryUsage::get_total_size 0 1 894 113
/**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */
60
static inline std::size_t MemoryUsage::get_total_size(void);

2240 16 get_num_pointers 0 4 2813 29 MemoryUsage::get_num_pointers 0 1 895 59
/**
 * Returns the number of pointers currently active.
 */
54
static inline int MemoryUsage::get_num_pointers(void);

2241 12 get_pointers 0 4 2813 25 MemoryUsage::get_pointers 0 1 896 100
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

2242 20 get_pointers_of_type 0 4 2813 33 MemoryUsage::get_pointers_of_type 0 1 897 122
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

2243 19 get_pointers_of_age 0 4 2813 32 MemoryUsage::get_pointers_of_age 0 1 898 159
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

2244 28 get_pointers_with_zero_count 0 4 2813 41 MemoryUsage::get_pointers_with_zero_count 0 1 899 852
/**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

2245 6 freeze 0 4 2813 19 MemoryUsage::freeze 0 1 900 285
/**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */
45
static inline void MemoryUsage::freeze(void);

2246 18 show_current_types 0 4 2813 31 MemoryUsage::show_current_types 0 1 901 70
/**
 * Shows the breakdown of types of all of the active pointers.
 */
57
static inline void MemoryUsage::show_current_types(void);

2247 16 show_trend_types 0 4 2813 29 MemoryUsage::show_trend_types 0 1 902 118
/**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */
55
static inline void MemoryUsage::show_trend_types(void);

2248 17 show_current_ages 0 4 2813 30 MemoryUsage::show_current_ages 0 1 903 69
/**
 * Shows the breakdown of ages of all of the active pointers.
 */
56
static inline void MemoryUsage::show_current_ages(void);

2249 15 show_trend_ages 0 4 2813 28 MemoryUsage::show_trend_ages 0 1 904 117
/**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */
54
static inline void MemoryUsage::show_trend_ages(void);

2250 12 ~MemoryUsage 0 4 2813 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

2251 18 get_config_express 0 1 0 18 get_config_express 0 1 1360 92
// Returns the configure object for accessing config variables from a
// scripting language.
34
DConfig &get_config_express(void);

2252 20 upcast_to_MemoryBase 0 12 2815 36 ReferenceCount::upcast_to_MemoryBase 0 1 911 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

2253 26 downcast_to_ReferenceCount 0 12 2715 38 MemoryBase::downcast_to_ReferenceCount 0 1 912 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

2254 15 ~ReferenceCount 0 6 2815 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

2255 13 get_ref_count 0 4 2815 29 ReferenceCount::get_ref_count 0 1 905 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

2256 3 ref 0 4 2815 19 ReferenceCount::ref 0 1 906 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

2257 5 unref 0 6 2815 21 ReferenceCount::unref 0 1 907 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

2258 24 test_ref_count_integrity 0 4 2815 40 ReferenceCount::test_ref_count_integrity 0 1 908 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

2259 22 test_ref_count_nonzero 0 4 2815 38 ReferenceCount::test_ref_count_nonzero 0 1 909 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

2260 14 get_class_type 0 4 2815 30 ReferenceCount::get_class_type 0 1 910 0
55
static TypeHandle ReferenceCount::get_class_type(void);

2261 10 get_length 0 4 2816 18 Buffer::get_length 0 1 914 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

2262 6 Buffer 0 4 2816 14 Buffer::Buffer 0 1 913 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

2263 15 compress_string 0 1 0 15 compress_string 0 1 1361 0
78
std::string compress_string(std::string const &source, int compression_level);

2264 17 decompress_string 0 1 0 17 decompress_string 0 1 1362 0
57
std::string decompress_string(std::string const &source);

2265 13 compress_file 0 1 0 13 compress_file 0 1 1363 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

2266 15 decompress_file 0 1 0 15 decompress_file 0 1 1364 0
67
bool decompress_file(Filename const &source, Filename const &dest);

2267 15 compress_stream 0 1 0 15 compress_stream 0 1 1365 0
76
bool compress_stream(istream &source, ostream &dest, int compression_level);

2268 17 decompress_stream 0 1 0 17 decompress_stream 0 1 1366 0
55
bool decompress_stream(istream &source, ostream &dest);

2269 11 copy_stream 0 1 0 11 copy_stream 0 1 1367 0
49
bool copy_stream(istream &source, ostream &dest);

2270 9 add_level 0 6 2817 36 PStatCollectorForwardBase::add_level 0 1 915 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

2271 18 get_node_ref_count 0 4 2818 38 NodeReferenceCount::get_node_ref_count 0 1 916 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

2272 8 node_ref 0 4 2818 28 NodeReferenceCount::node_ref 0 1 917 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

2273 10 node_unref 0 4 2818 30 NodeReferenceCount::node_unref 0 1 918 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

2274 24 test_ref_count_integrity 0 4 2818 44 NodeReferenceCount::test_ref_count_integrity 0 1 919 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

2275 15 node_unref_only 0 4 2818 35 NodeReferenceCount::node_unref_only 0 1 920 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

2276 14 get_class_type 0 4 2818 34 NodeReferenceCount::get_class_type 0 1 921 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

2277 8 Datagram 0 4 2819 18 Datagram::Datagram 0 3 922 923 924 184
/**
 * Constructs an empty datagram.
 */

/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */

/**
 *
 */
196
inline Datagram::Datagram(void);
inline Datagram::Datagram(void const *data, std::size_t size);
inline Datagram::Datagram(std::string const &data);
inline Datagram::Datagram(Datagram const &copy);

2278 10 operator = 0 4 2819 20 Datagram::operator = 0 1 925 0
55
inline void Datagram::operator =(Datagram const &copy);

2279 5 clear 0 6 2819 15 Datagram::clear 0 1 926 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

2280 8 dump_hex 0 4 2819 18 Datagram::dump_hex 0 1 927 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
69
void Datagram::dump_hex(ostream &out, unsigned int indent = 0) const;

2281 8 add_bool 0 4 2819 18 Datagram::add_bool 0 1 928 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

2282 8 add_int8 0 4 2819 18 Datagram::add_int8 0 1 929 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

2283 9 add_uint8 0 4 2819 19 Datagram::add_uint8 0 1 930 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

2284 9 add_int16 0 4 2819 19 Datagram::add_int16 0 1 931 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

2285 9 add_int32 0 4 2819 19 Datagram::add_int32 0 1 932 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

2286 9 add_int64 0 4 2819 19 Datagram::add_int64 0 1 933 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

2287 10 add_uint16 0 4 2819 20 Datagram::add_uint16 0 1 934 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

2288 10 add_uint32 0 4 2819 20 Datagram::add_uint32 0 1 935 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

2289 10 add_uint64 0 4 2819 20 Datagram::add_uint64 0 1 936 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

2290 11 add_float32 0 4 2819 21 Datagram::add_float32 0 1 937 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

2291 11 add_float64 0 4 2819 21 Datagram::add_float64 0 1 938 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

2292 12 add_stdfloat 0 4 2819 22 Datagram::add_stdfloat 0 1 939 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

2293 12 add_be_int16 0 4 2819 22 Datagram::add_be_int16 0 1 940 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

2294 12 add_be_int32 0 4 2819 22 Datagram::add_be_int32 0 1 941 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

2295 12 add_be_int64 0 4 2819 22 Datagram::add_be_int64 0 1 942 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

2296 13 add_be_uint16 0 4 2819 23 Datagram::add_be_uint16 0 1 943 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

2297 13 add_be_uint32 0 4 2819 23 Datagram::add_be_uint32 0 1 944 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

2298 13 add_be_uint64 0 4 2819 23 Datagram::add_be_uint64 0 1 945 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

2299 14 add_be_float32 0 4 2819 24 Datagram::add_be_float32 0 1 946 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

2300 14 add_be_float64 0 4 2819 24 Datagram::add_be_float64 0 1 947 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

2301 10 add_string 0 4 2819 20 Datagram::add_string 0 1 948 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

2302 12 add_string32 0 4 2819 22 Datagram::add_string32 0 1 949 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

2303 12 add_z_string 0 4 2819 22 Datagram::add_z_string 0 1 950 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
52
inline void Datagram::add_z_string(std::string str);

2304 16 add_fixed_string 0 4 2819 26 Datagram::add_fixed_string 0 1 951 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

2305 11 add_wstring 0 4 2819 21 Datagram::add_wstring 0 1 952 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

2306 9 pad_bytes 0 4 2819 19 Datagram::pad_bytes 0 1 953 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

2307 11 append_data 0 4 2819 21 Datagram::append_data 0 1 954 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
123
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(std::string const &data);

2308 6 assign 0 4 2819 16 Datagram::assign 0 0 65
/**
 * Replaces the datagram's data with the indicated block.
 */
58
void Datagram::assign(void const *data, std::size_t size);

2309 11 get_message 0 4 2819 21 Datagram::get_message 0 1 955 51
/**
 * Returns the datagram's data as a string.
 */
53
inline std::string Datagram::get_message(void) const;

2310 8 get_data 0 4 2819 18 Datagram::get_data 0 1 956 69
/**
 * Returns a pointer to the beginning of the datagram's data.
 */
50
inline void const *Datagram::get_data(void) const;

2311 10 get_length 0 4 2819 20 Datagram::get_length 0 1 957 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

2312 9 set_array 0 4 2819 19 Datagram::set_array 0 1 958 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

2313 10 copy_array 0 4 2819 20 Datagram::copy_array 0 1 959 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

2314 9 get_array 0 4 2819 19 Datagram::get_array 0 1 960 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

2315 12 modify_array 0 4 2819 22 Datagram::modify_array 0 1 961 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

2316 19 set_stdfloat_double 0 4 2819 29 Datagram::set_stdfloat_double 0 1 962 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

2317 19 get_stdfloat_double 0 4 2819 29 Datagram::get_stdfloat_double 0 1 963 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

2318 11 operator == 0 4 2819 21 Datagram::operator == 0 1 964 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

2319 11 operator != 0 4 2819 21 Datagram::operator != 0 1 965 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

2320 10 operator < 0 4 2819 20 Datagram::operator < 0 1 966 0
62
inline bool Datagram::operator <(Datagram const &other) const;

2321 6 output 0 4 2819 16 Datagram::output 0 1 967 67
/**
 * Write a string representation of this instance to <out>.
 */
42
void Datagram::output(ostream &out) const;

2322 5 write 0 4 2819 15 Datagram::write 0 1 968 67
/**
 * Write a string representation of this instance to <out>.
 */
66
void Datagram::write(ostream &out, unsigned int indent = 0) const;

2323 14 get_class_type 0 4 2819 24 Datagram::get_class_type 0 1 969 0
49
static TypeHandle Datagram::get_class_type(void);

2324 18 ~DatagramGenerator 0 6 2820 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

2325 12 get_datagram 0 6 2820 31 DatagramGenerator::get_datagram 0 1 970 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

2326 13 save_datagram 0 6 2820 32 DatagramGenerator::save_datagram 0 1 971 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

2327 6 is_eof 0 6 2820 25 DatagramGenerator::is_eof 0 1 972 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

2328 8 is_error 0 6 2820 27 DatagramGenerator::is_error 0 1 973 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

2329 12 get_filename 0 6 2820 31 DatagramGenerator::get_filename 0 1 974 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

2330 13 get_timestamp 0 6 2820 32 DatagramGenerator::get_timestamp 0 1 975 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

2331 8 get_file 0 6 2820 27 DatagramGenerator::get_file 0 1 976 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

2332 9 get_vfile 0 6 2820 28 DatagramGenerator::get_vfile 0 1 977 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

2333 12 get_file_pos 0 6 2820 31 DatagramGenerator::get_file_pos 0 1 978 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
56
virtual streamoff DatagramGenerator::get_file_pos(void);

2334 16 DatagramIterator 0 4 2821 34 DatagramIterator::DatagramIterator 0 3 979 980 981 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
214
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &copy);

2335 10 operator = 0 4 2821 28 DatagramIterator::operator = 0 1 982 0
71
inline void DatagramIterator::operator =(DatagramIterator const &copy);

2336 17 ~DatagramIterator 0 4 2821 35 DatagramIterator::~DatagramIterator 0 0 10
/**
 *
 */
49
inline DatagramIterator::~DatagramIterator(void);

2337 8 get_bool 0 4 2821 26 DatagramIterator::get_bool 0 1 983 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

2338 8 get_int8 0 4 2821 26 DatagramIterator::get_int8 0 1 984 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

2339 9 get_uint8 0 4 2821 27 DatagramIterator::get_uint8 0 1 985 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

2340 9 get_int16 0 4 2821 27 DatagramIterator::get_int16 0 1 986 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

2341 9 get_int32 0 4 2821 27 DatagramIterator::get_int32 0 1 987 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

2342 9 get_int64 0 4 2821 27 DatagramIterator::get_int64 0 1 988 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

2343 10 get_uint16 0 4 2821 28 DatagramIterator::get_uint16 0 1 989 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

2344 10 get_uint32 0 4 2821 28 DatagramIterator::get_uint32 0 1 990 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

2345 10 get_uint64 0 4 2821 28 DatagramIterator::get_uint64 0 1 991 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

2346 11 get_float32 0 4 2821 29 DatagramIterator::get_float32 0 1 992 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

2347 11 get_float64 0 4 2821 29 DatagramIterator::get_float64 0 1 993 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

2348 12 get_stdfloat 0 4 2821 30 DatagramIterator::get_stdfloat 0 1 994 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

2349 12 get_be_int16 0 4 2821 30 DatagramIterator::get_be_int16 0 1 995 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

2350 12 get_be_int32 0 4 2821 30 DatagramIterator::get_be_int32 0 1 996 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

2351 12 get_be_int64 0 4 2821 30 DatagramIterator::get_be_int64 0 1 997 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

2352 13 get_be_uint16 0 4 2821 31 DatagramIterator::get_be_uint16 0 1 998 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

2353 13 get_be_uint32 0 4 2821 31 DatagramIterator::get_be_uint32 0 1 999 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

2354 13 get_be_uint64 0 4 2821 31 DatagramIterator::get_be_uint64 0 1 1000 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

2355 14 get_be_float32 0 4 2821 32 DatagramIterator::get_be_float32 0 1 1001 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

2356 14 get_be_float64 0 4 2821 32 DatagramIterator::get_be_float64 0 1 1002 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

2357 10 get_string 0 4 2821 28 DatagramIterator::get_string 0 1 1003 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

2358 12 get_string32 0 4 2821 30 DatagramIterator::get_string32 0 1 1004 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

2359 12 get_z_string 0 4 2821 30 DatagramIterator::get_z_string 0 1 1005 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

2360 16 get_fixed_string 0 4 2821 34 DatagramIterator::get_fixed_string 0 1 1006 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

2361 11 get_wstring 0 4 2821 29 DatagramIterator::get_wstring 0 1 1007 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

2362 10 skip_bytes 0 4 2821 28 DatagramIterator::skip_bytes 0 1 1008 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

2363 13 extract_bytes 0 4 2821 31 DatagramIterator::extract_bytes 0 1 1009 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
146
std::string DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

2364 19 get_remaining_bytes 0 4 2821 37 DatagramIterator::get_remaining_bytes 0 1 1010 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
69
inline std::string DatagramIterator::get_remaining_bytes(void) const;

2365 18 get_remaining_size 0 4 2821 36 DatagramIterator::get_remaining_size 0 1 1011 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

2366 12 get_datagram 0 4 2821 30 DatagramIterator::get_datagram 0 1 1012 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

2367 17 get_current_index 0 4 2821 35 DatagramIterator::get_current_index 0 1 1013 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

2368 6 output 0 4 2821 24 DatagramIterator::output 0 1 1014 67
/**
 * Write a string representation of this instance to <out>.
 */
50
void DatagramIterator::output(ostream &out) const;

2369 5 write 0 4 2821 23 DatagramIterator::write 0 1 1015 67
/**
 * Write a string representation of this instance to <out>.
 */
74
void DatagramIterator::write(ostream &out, unsigned int indent = 0) const;

2370 14 get_class_type 0 4 2821 32 DatagramIterator::get_class_type 0 1 1016 0
57
static TypeHandle DatagramIterator::get_class_type(void);

2371 13 ~DatagramSink 0 6 2822 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

2372 12 put_datagram 0 6 2822 26 DatagramSink::put_datagram 0 1 1017 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

2373 13 copy_datagram 0 6 2822 27 DatagramSink::copy_datagram 0 2 1018 1019 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

2374 8 is_error 0 6 2822 22 DatagramSink::is_error 0 1 1020 0
46
virtual bool DatagramSink::is_error(void) = 0;

2375 5 flush 0 6 2822 19 DatagramSink::flush 0 1 1021 0
43
virtual void DatagramSink::flush(void) = 0;

2376 12 get_filename 0 6 2822 26 DatagramSink::get_filename 0 1 1022 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

2377 8 get_file 0 6 2822 22 DatagramSink::get_file 0 1 1023 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

2378 12 get_file_pos 0 6 2822 26 DatagramSink::get_file_pos 0 1 1024 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
51
virtual streamoff DatagramSink::get_file_pos(void);

2379 14 encrypt_string 0 1 0 14 encrypt_string 0 1 1368 0
171
std::string encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2380 14 decrypt_string 0 1 0 14 decrypt_string 0 1 1369 0
83
std::string decrypt_string(std::string const &source, std::string const &password);

2381 12 encrypt_file 0 1 0 12 encrypt_file 0 1 1370 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2382 12 decrypt_file 0 1 0 12 decrypt_file 0 1 1371 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

2383 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 1372 0
169
bool encrypt_stream(istream &source, ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

2384 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 1373 0
81
bool decrypt_stream(istream &source, ostream &dest, std::string const &password);

2385 13 error_to_text 0 1 0 13 error_to_text 0 1 1374 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

2386 15 get_write_error 0 1 0 15 get_write_error 0 1 1375 0
26
int get_write_error(void);

2387 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 1376 10
/**
 *
 */
38
std::string handle_socket_error(void);

2388 17 get_network_error 0 1 0 17 get_network_error 0 1 1377 0
28
int get_network_error(void);

2389 21 upcast_to_TypedObject 0 12 2824 42 TypedReferenceCount::upcast_to_TypedObject 0 1 1026 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

2390 31 downcast_to_TypedReferenceCount 0 12 2809 44 TypedObject::downcast_to_TypedReferenceCount 0 1 1027 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

2391 24 upcast_to_ReferenceCount 0 12 2824 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 1028 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

2392 31 downcast_to_TypedReferenceCount 0 12 2815 47 ReferenceCount::downcast_to_TypedReferenceCount 0 1 1029 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

2393 14 get_class_type 0 4 2824 35 TypedReferenceCount::get_class_type 0 1 1025 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

2394 20 ~TypedReferenceCount 0 4 2824 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

2395 13 FileReference 0 4 2825 28 FileReference::FileReference 0 2 1030 1031 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

2396 12 get_filename 0 4 2825 27 FileReference::get_filename 0 1 1032 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

2397 14 get_class_type 0 4 2825 29 FileReference::get_class_type 0 1 1033 0
54
static TypeHandle FileReference::get_class_type(void);

2398 14 ~FileReference 0 4 2825 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

2399 7 Ramfile 0 4 2826 16 Ramfile::Ramfile 0 2 1034 1035 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

2400 4 seek 0 4 2826 13 Ramfile::seek 0 1 1036 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

2401 4 tell 0 4 2826 13 Ramfile::tell 0 1 1037 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

2402 4 read 0 4 2826 13 Ramfile::read 0 1 1038 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

2403 8 readline 0 4 2826 17 Ramfile::readline 0 1 1039 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

2404 9 readlines 0 4 2826 18 Ramfile::readlines 0 1 1040 0
35
PyObject *Ramfile::readlines(void);

2405 8 get_data 0 4 2826 17 Ramfile::get_data 0 1 1041 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

2406 13 get_data_size 0 4 2826 22 Ramfile::get_data_size 0 1 1042 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

2407 5 clear 0 4 2826 14 Ramfile::clear 0 1 1043 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

2408 8 ~Ramfile 0 4 2826 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

2409 7 HashVal 0 4 2827 16 HashVal::HashVal 0 2 1044 1045 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

2410 10 operator = 0 4 2827 19 HashVal::operator = 0 1 1046 0
53
inline void HashVal::operator =(HashVal const &copy);

2411 11 operator == 0 4 2827 20 HashVal::operator == 0 1 1047 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

2412 11 operator != 0 4 2827 20 HashVal::operator != 0 1 1048 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

2413 10 operator < 0 4 2827 19 HashVal::operator < 0 1 1049 0
60
inline bool HashVal::operator <(HashVal const &other) const;

2414 10 compare_to 0 4 2827 19 HashVal::compare_to 0 1 1050 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

2415 10 merge_with 0 4 2827 19 HashVal::merge_with 0 1 1051 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

2416 10 output_dec 0 4 2827 19 HashVal::output_dec 0 1 1052 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
52
inline void HashVal::output_dec(ostream &out) const;

2417 9 input_dec 0 4 2827 18 HashVal::input_dec 0 1 1053 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
44
inline void HashVal::input_dec(istream &in);

2418 10 output_hex 0 4 2827 19 HashVal::output_hex 0 1 1054 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
45
void HashVal::output_hex(ostream &out) const;

2419 9 input_hex 0 4 2827 18 HashVal::input_hex 0 1 1055 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
37
void HashVal::input_hex(istream &in);

2420 13 output_binary 0 4 2827 22 HashVal::output_binary 0 1 1056 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
48
void HashVal::output_binary(ostream &out) const;

2421 12 input_binary 0 4 2827 21 HashVal::input_binary 0 1 1057 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
40
void HashVal::input_binary(istream &in);

2422 6 output 0 4 2827 15 HashVal::output 0 1 1058 10
/**
 *
 */
48
inline void HashVal::output(ostream &out) const;

2423 6 as_dec 0 4 2827 15 HashVal::as_dec 0 1 1059 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

2424 12 set_from_dec 0 4 2827 21 HashVal::set_from_dec 0 1 1060 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

2425 6 as_hex 0 4 2827 15 HashVal::as_hex 0 1 1061 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

2426 12 set_from_hex 0 4 2827 21 HashVal::set_from_hex 0 1 1062 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

2427 6 as_bin 0 4 2827 15 HashVal::as_bin 0 1 1063 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
40
std::string HashVal::as_bin(void) const;

2428 12 set_from_bin 0 4 2827 21 HashVal::set_from_bin 0 1 1064 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
52
bool HashVal::set_from_bin(std::string const &text);

2429 14 write_datagram 0 4 2827 23 HashVal::write_datagram 0 1 1065 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

2430 13 read_datagram 0 4 2827 22 HashVal::read_datagram 0 1 1066 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

2431 12 write_stream 0 4 2827 21 HashVal::write_stream 0 1 1067 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

2432 11 read_stream 0 4 2827 20 HashVal::read_stream 0 1 1068 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

2433 9 hash_file 0 4 2827 18 HashVal::hash_file 0 1 1069 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
50
bool HashVal::hash_file(Filename const &filename);

2434 11 hash_stream 0 4 2827 20 HashVal::hash_stream 0 1 1070 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
43
bool HashVal::hash_stream(istream &stream);

2435 12 hash_ramfile 0 4 2827 21 HashVal::hash_ramfile 0 1 1071 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

2436 11 hash_string 0 4 2827 20 HashVal::hash_string 0 1 1072 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_string(std::string const &data);

2437 10 hash_bytes 0 4 2827 19 HashVal::hash_bytes 0 1 1073 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
70
inline void HashVal::hash_bytes(pvector< unsigned char > const &data);

2438 11 hash_buffer 0 4 2827 20 HashVal::hash_buffer 0 1 1074 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
void HashVal::hash_buffer(char const *buffer, int length);

2439 8 ~HashVal 0 4 2827 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

2440 19 MemoryUsagePointers 0 4 2828 40 MemoryUsagePointers::MemoryUsagePointers 0 2 1075 1076 10
/**
 *
 */
135
MemoryUsagePointers::MemoryUsagePointers(void);
inline MemoryUsagePointers::MemoryUsagePointers(MemoryUsagePointers const &) = default;

2441 20 ~MemoryUsagePointers 0 4 2828 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 10
/**
 *
 */
48
MemoryUsagePointers::~MemoryUsagePointers(void);

2442 16 get_num_pointers 0 4 2828 37 MemoryUsagePointers::get_num_pointers 0 1 1077 53
/**
 * Returns the number of pointers in the set.
 */
62
std::size_t MemoryUsagePointers::get_num_pointers(void) const;

2443 11 get_pointer 0 4 2828 32 MemoryUsagePointers::get_pointer 0 1 1078 46
/**
 * Returns the nth pointer of the set.
 */
70
ReferenceCount *MemoryUsagePointers::get_pointer(std::size_t n) const;

2444 17 get_typed_pointer 0 4 2828 38 MemoryUsagePointers::get_typed_pointer 0 1 1079 172
/**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * NULL.
 */
73
TypedObject *MemoryUsagePointers::get_typed_pointer(std::size_t n) const;

2445 8 get_type 0 4 2828 29 MemoryUsagePointers::get_type 0 1 1080 70
/**
 * Returns the actual type of the nth pointer, if it is known.
 */
62
TypeHandle MemoryUsagePointers::get_type(std::size_t n) const;

2446 13 get_type_name 0 4 2828 34 MemoryUsagePointers::get_type_name 0 1 1081 68
/**
 * Returns the type name of the nth pointer, if it is known.
 */
68
std::string MemoryUsagePointers::get_type_name(std::size_t n) const;

2447 7 get_age 0 4 2828 28 MemoryUsagePointers::get_age 0 1 1082 197
/**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */
57
double MemoryUsagePointers::get_age(std::size_t n) const;

2448 18 get_python_pointer 0 4 2828 39 MemoryUsagePointers::get_python_pointer 0 1 1083 0
71
PyObject *MemoryUsagePointers::get_python_pointer(std::size_t n) const;

2449 5 clear 0 4 2828 26 MemoryUsagePointers::clear 0 1 1084 39
/**
 * Empties the set of pointers.
 */
38
void MemoryUsagePointers::clear(void);

2450 6 output 0 4 2828 27 MemoryUsagePointers::output 0 1 1085 10
/**
 *
 */
53
void MemoryUsagePointers::output(ostream &out) const;

2451 10 ISubStream 0 4 2829 22 ISubStream::ISubStream 0 2 1086 1087 22
/**
 *
 */

/**
 *
 */
123
inline ISubStream::ISubStream(void);
inline ISubStream::ISubStream(IStreamWrapper *source, streamoff start, streamoff end);

2452 4 open 0 4 2829 16 ISubStream::open 0 1 1088 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
92
inline ISubStream &ISubStream::open(IStreamWrapper *source, streamoff start, streamoff end);

2453 5 close 0 4 2829 17 ISubStream::close 0 1 1089 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

2454 11 ~ISubStream 0 4 2829 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

2455 10 OSubStream 0 4 2830 22 OSubStream::OSubStream 0 2 1090 1091 22
/**
 *
 */

/**
 *
 */
142
inline OSubStream::OSubStream(void);
inline OSubStream::OSubStream(OStreamWrapper *dest, streamoff start, streamoff end, bool append = false);

2456 4 open 0 4 2830 16 OSubStream::open 0 1 1092 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
111
inline OSubStream &OSubStream::open(OStreamWrapper *dest, streamoff start, streamoff end, bool append = false);

2457 5 close 0 4 2830 17 OSubStream::close 0 1 1093 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

2458 11 ~OSubStream 0 4 2830 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

2459 9 SubStream 0 4 2831 20 SubStream::SubStream 0 2 1094 1095 22
/**
 *
 */

/**
 *
 */
139
inline SubStream::SubStream(void);
inline SubStream::SubStream(StreamWrapper *nested, streamoff start, streamoff end, bool append = false);

2460 4 open 0 4 2831 15 SubStream::open 0 1 1096 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
110
inline SubStream &SubStream::open(StreamWrapper *nested, streamoff start, streamoff end, bool append = false);

2461 5 close 0 4 2831 16 SubStream::close 0 1 1097 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

2462 10 ~SubStream 0 4 2831 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

2463 18 clear_certificates 0 4 2832 34 OpenSSLWrapper::clear_certificates 0 1 1098 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

2464 17 load_certificates 0 4 2832 33 OpenSSLWrapper::load_certificates 0 1 1099 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

2465 30 load_certificates_from_pem_ram 0 4 2832 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 1100 1101 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

2466 30 load_certificates_from_der_ram 0 4 2832 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 1102 1103 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

2467 14 get_x509_store 0 4 2832 30 OpenSSLWrapper::get_x509_store 0 1 1104 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

2468 17 notify_ssl_errors 0 4 2832 33 OpenSSLWrapper::notify_ssl_errors 0 1 1105 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

2469 23 notify_debug_ssl_errors 0 4 2832 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 1106 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

2470 14 get_global_ptr 0 4 2832 30 OpenSSLWrapper::get_global_ptr 0 1 1107 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

2471 9 Multifile 0 4 2833 20 Multifile::Multifile 0 1 1108 52
/**
 *
 */

/**
 * Don't try to copy Multifiles.
 */
27
Multifile::Multifile(void);

2472 9 open_read 0 4 2833 20 Multifile::open_read 0 2 1109 1110 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
204
bool Multifile::open_read(Filename const &multifile_name, streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, streamoff const &offset = 0);

2473 10 open_write 0 4 2833 21 Multifile::open_write 0 2 1111 1112 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
141
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(ostream *multifile_stream, bool owns_pointer = false);

2474 15 open_read_write 0 4 2833 26 Multifile::open_read_write 0 2 1113 1114 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
152
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(iostream *multifile_stream, bool owns_pointer = false);

2475 5 close 0 4 2833 16 Multifile::close 0 1 1115 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

2476 18 get_multifile_name 0 4 2833 29 Multifile::get_multifile_name 0 1 1116 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

2477 18 set_multifile_name 0 4 2833 29 Multifile::set_multifile_name 0 1 1117 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

2478 13 is_read_valid 0 4 2833 24 Multifile::is_read_valid 0 1 1118 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

2479 14 is_write_valid 0 4 2833 25 Multifile::is_write_valid 0 1 1119 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

2480 12 needs_repack 0 4 2833 23 Multifile::needs_repack 0 1 1120 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

2481 13 get_timestamp 0 4 2833 24 Multifile::get_timestamp 0 1 1121 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

2482 20 set_record_timestamp 0 4 2833 31 Multifile::set_record_timestamp 0 1 1122 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

2483 20 get_record_timestamp 0 4 2833 31 Multifile::get_record_timestamp 0 1 1123 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

2484 16 set_scale_factor 0 4 2833 27 Multifile::set_scale_factor 0 1 1124 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

2485 16 get_scale_factor 0 4 2833 27 Multifile::get_scale_factor 0 1 1125 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

2486 19 set_encryption_flag 0 4 2833 30 Multifile::set_encryption_flag 0 1 1126 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

2487 19 get_encryption_flag 0 4 2833 30 Multifile::get_encryption_flag 0 1 1127 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

2488 23 set_encryption_password 0 4 2833 34 Multifile::set_encryption_password 0 1 1128 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
87
inline void Multifile::set_encryption_password(std::string const &encryption_password);

2489 23 get_encryption_password 0 4 2833 34 Multifile::get_encryption_password 0 1 1129 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
73
inline std::string const &Multifile::get_encryption_password(void) const;

2490 24 set_encryption_algorithm 0 4 2833 35 Multifile::set_encryption_algorithm 0 1 1130 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

2491 24 get_encryption_algorithm 0 4 2833 35 Multifile::get_encryption_algorithm 0 1 1131 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

2492 25 set_encryption_key_length 0 4 2833 36 Multifile::set_encryption_key_length 0 1 1132 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

2493 25 get_encryption_key_length 0 4 2833 36 Multifile::get_encryption_key_length 0 1 1133 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

2494 30 set_encryption_iteration_count 0 4 2833 41 Multifile::set_encryption_iteration_count 0 1 1134 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

2495 30 get_encryption_iteration_count 0 4 2833 41 Multifile::get_encryption_iteration_count 0 1 1135 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

2496 11 add_subfile 0 4 2833 22 Multifile::add_subfile 0 2 1136 1137 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
232
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, istream *subfile_data, int compression_level);

2497 14 update_subfile 0 4 2833 25 Multifile::update_subfile 0 1 1138 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

2498 13 add_signature 0 4 2833 24 Multifile::add_signature 0 2 1139 1140 4034
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * If chain is non-NULL, it represents the certificate chain that validates
 * the certificate.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

2499 18 get_num_signatures 0 4 2833 29 Multifile::get_num_signatures 0 1 1141 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

2500 26 get_signature_subject_name 0 4 2833 37 Multifile::get_signature_subject_name 0 1 1142 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

2501 27 get_signature_friendly_name 0 4 2833 38 Multifile::get_signature_friendly_name 0 1 1143 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

2502 24 get_signature_public_key 0 4 2833 35 Multifile::get_signature_public_key 0 1 1144 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

2503 27 print_signature_certificate 0 4 2833 38 Multifile::print_signature_certificate 0 1 1145 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
71
void Multifile::print_signature_certificate(int n, ostream &out) const;

2504 27 write_signature_certificate 0 4 2833 38 Multifile::write_signature_certificate 0 1 1146 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
71
void Multifile::write_signature_certificate(int n, ostream &out) const;

2505 30 validate_signature_certificate 0 4 2833 41 Multifile::validate_signature_certificate 0 1 1147 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

2506 5 flush 0 4 2833 16 Multifile::flush 0 1 1148 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

2507 6 repack 0 4 2833 17 Multifile::repack 0 1 1149 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

2508 16 get_num_subfiles 0 4 2833 27 Multifile::get_num_subfiles 0 1 1150 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

2509 12 find_subfile 0 4 2833 23 Multifile::find_subfile 0 1 1151 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

2510 13 has_directory 0 4 2833 24 Multifile::has_directory 0 1 1152 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

2511 14 scan_directory 0 4 2833 25 Multifile::scan_directory 0 1 1153 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

2512 14 remove_subfile 0 4 2833 25 Multifile::remove_subfile 0 2 1154 1155 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

2513 16 get_subfile_name 0 4 2833 27 Multifile::get_subfile_name 0 1 1156 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

2514 18 get_subfile_length 0 4 2833 29 Multifile::get_subfile_length 0 1 1157 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

2515 21 get_subfile_timestamp 0 4 2833 32 Multifile::get_subfile_timestamp 0 1 1158 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

2516 21 is_subfile_compressed 0 4 2833 32 Multifile::is_subfile_compressed 0 1 1159 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

2517 20 is_subfile_encrypted 0 4 2833 31 Multifile::is_subfile_encrypted 0 1 1160 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

2518 15 is_subfile_text 0 4 2833 26 Multifile::is_subfile_text 0 1 1161 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

2519 13 get_index_end 0 4 2833 24 Multifile::get_index_end 0 1 1162 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
47
streamoff Multifile::get_index_end(void) const;

2520 26 get_subfile_internal_start 0 4 2833 37 Multifile::get_subfile_internal_start 0 1 1163 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
65
streamoff Multifile::get_subfile_internal_start(int index) const;

2521 27 get_subfile_internal_length 0 4 2833 38 Multifile::get_subfile_internal_length 0 1 1164 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

2522 12 read_subfile 0 4 2833 23 Multifile::read_subfile 0 1 1165 247
/**
 * Returns a string that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
54
inline std::string Multifile::read_subfile(int index);

2523 17 open_read_subfile 0 4 2833 28 Multifile::open_read_subfile 0 1 1166 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
49
istream *Multifile::open_read_subfile(int index);

2524 18 close_read_subfile 0 4 2833 29 Multifile::close_read_subfile 0 1 1167 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
59
static void Multifile::close_read_subfile(istream *stream);

2525 15 extract_subfile 0 4 2833 26 Multifile::extract_subfile 0 1 1168 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

2526 18 extract_subfile_to 0 4 2833 29 Multifile::extract_subfile_to 0 1 1169 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
60
bool Multifile::extract_subfile_to(int index, ostream &out);

2527 15 compare_subfile 0 4 2833 26 Multifile::compare_subfile 0 1 1170 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

2528 6 output 0 4 2833 17 Multifile::output 0 1 1171 10
/**
 *
 */
43
void Multifile::output(ostream &out) const;

2529 2 ls 0 4 2833 13 Multifile::ls 0 1 1172 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
48
void Multifile::ls(ostream &out = ::cout) const;

2530 16 get_magic_number 0 4 2833 27 Multifile::get_magic_number 0 1 1173 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

2531 17 set_header_prefix 0 4 2833 28 Multifile::set_header_prefix 0 1 1174 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

2532 17 get_header_prefix 0 4 2833 28 Multifile::get_header_prefix 0 1 1175 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

2533 7 Namable 0 4 2834 16 Namable::Namable 0 2 1176 1177 22
/**
 *
 */

/**
 *
 */
117
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &copy);

2534 10 operator = 0 4 2834 19 Namable::operator = 0 1 1178 10
/**
 *
 */
58
inline Namable &Namable::operator =(Namable const &other);

2535 8 set_name 0 4 2834 17 Namable::set_name 0 1 1179 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

2536 10 clear_name 0 4 2834 19 Namable::clear_name 0 1 1180 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

2537 8 has_name 0 4 2834 17 Namable::has_name 0 1 1181 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

2538 8 get_name 0 4 2834 17 Namable::get_name 0 1 1182 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

2539 6 output 0 4 2834 15 Namable::output 0 1 1183 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
48
inline void Namable::output(ostream &out) const;

2540 14 get_class_type 0 4 2834 23 Namable::get_class_type 0 1 1184 0
48
static TypeHandle Namable::get_class_type(void);

2541 8 ~Namable 0 4 2834 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

2542 11 SubfileInfo 0 4 2835 24 SubfileInfo::SubfileInfo 0 4 1185 1186 1187 1188 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
283
inline SubfileInfo::SubfileInfo(void);
inline SubfileInfo::SubfileInfo(FileReference const *file, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(Filename const &filename, streamoff start, streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

2543 10 operator = 0 4 2835 23 SubfileInfo::operator = 0 1 1189 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

2544 8 is_empty 0 4 2835 21 SubfileInfo::is_empty 0 1 1190 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

2545 8 get_file 0 4 2835 21 SubfileInfo::get_file 0 1 1191 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

2546 12 get_filename 0 4 2835 25 SubfileInfo::get_filename 0 1 1192 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

2547 9 get_start 0 4 2835 22 SubfileInfo::get_start 0 1 1193 77
/**
 * Returns the offset within the file at which this file data begins.
 */
52
inline streamoff SubfileInfo::get_start(void) const;

2548 8 get_size 0 4 2835 21 SubfileInfo::get_size 0 1 1194 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
52
inline streamsize SubfileInfo::get_size(void) const;

2549 6 output 0 4 2835 19 SubfileInfo::output 0 1 1195 10
/**
 *
 */
45
void SubfileInfo::output(ostream &out) const;

2550 12 ~SubfileInfo 0 4 2835 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

2551 15 get_file_system 0 6 2836 28 VirtualFile::get_file_system 0 1 1196 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

2552 12 get_filename 0 6 2836 25 VirtualFile::get_filename 0 1 1197 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

2553 21 get_original_filename 0 4 2836 34 VirtualFile::get_original_filename 0 1 1198 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

2554 8 has_file 0 6 2836 21 VirtualFile::has_file 0 1 1199 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

2555 12 is_directory 0 6 2836 25 VirtualFile::is_directory 0 1 1200 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

2556 15 is_regular_file 0 6 2836 28 VirtualFile::is_regular_file 0 1 1201 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

2557 11 is_writable 0 6 2836 24 VirtualFile::is_writable 0 1 1202 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

2558 11 delete_file 0 6 2836 24 VirtualFile::delete_file 0 1 1203 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

2559 11 rename_file 0 6 2836 24 VirtualFile::rename_file 0 1 1204 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

2560 9 copy_file 0 6 2836 22 VirtualFile::copy_file 0 1 1205 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

2561 14 scan_directory 0 4 2836 27 VirtualFile::scan_directory 0 1 1206 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

2562 6 output 0 4 2836 19 VirtualFile::output 0 1 1207 10
/**
 *
 */
45
void VirtualFile::output(ostream &out) const;

2563 2 ls 0 4 2836 15 VirtualFile::ls 0 1 1208 66
/**
 * If the file represents a directory, lists its contents.
 */
50
void VirtualFile::ls(ostream &out = ::cout) const;

2564 6 ls_all 0 4 2836 19 VirtualFile::ls_all 0 1 1209 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
54
void VirtualFile::ls_all(ostream &out = ::cout) const;

2565 9 read_file 0 4 2836 22 VirtualFile::read_file 0 1 1210 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

2566 14 open_read_file 0 6 2836 27 VirtualFile::open_read_file 0 1 1211 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
69
virtual istream *VirtualFile::open_read_file(bool auto_unwrap) const;

2567 15 close_read_file 0 6 2836 28 VirtualFile::close_read_file 0 1 1212 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_read_file(istream *stream) const;

2568 19 was_read_successful 0 6 2836 32 VirtualFile::was_read_successful 0 1 1213 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

2569 10 write_file 0 4 2836 23 VirtualFile::write_file 0 1 1214 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

2570 15 open_write_file 0 6 2836 28 VirtualFile::open_write_file 0 1 1215 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
77
virtual ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

2571 16 open_append_file 0 6 2836 29 VirtualFile::open_append_file 0 1 1216 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
53
virtual ostream *VirtualFile::open_append_file(void);

2572 16 close_write_file 0 6 2836 29 VirtualFile::close_write_file 0 1 1217 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
60
virtual void VirtualFile::close_write_file(ostream *stream);

2573 20 open_read_write_file 0 6 2836 33 VirtualFile::open_read_write_file 0 1 1218 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
67
virtual iostream *VirtualFile::open_read_write_file(bool truncate);

2574 21 open_read_append_file 0 6 2836 34 VirtualFile::open_read_append_file 0 1 1219 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
59
virtual iostream *VirtualFile::open_read_append_file(void);

2575 21 close_read_write_file 0 6 2836 34 VirtualFile::close_read_write_file 0 1 1220 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
66
virtual void VirtualFile::close_read_write_file(iostream *stream);

2576 13 get_file_size 0 6 2836 26 VirtualFile::get_file_size 0 2 1221 1222 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
128
virtual streamsize VirtualFile::get_file_size(istream *stream) const;
virtual streamsize VirtualFile::get_file_size(void) const;

2577 13 get_timestamp 0 6 2836 26 VirtualFile::get_timestamp 0 1 1223 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

2578 15 get_system_info 0 6 2836 28 VirtualFile::get_system_info 0 1 1224 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

2579 14 get_class_type 0 4 2836 27 VirtualFile::get_class_type 0 1 1225 0
52
static TypeHandle VirtualFile::get_class_type(void);

2580 12 ~VirtualFile 0 4 2836 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

2581 14 get_class_type 0 4 2837 36 VirtualFileComposite::get_class_type 0 1 1226 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

2582 21 ~VirtualFileComposite 0 4 2837 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

2583 15 get_file_system 0 4 2838 33 VirtualFileMount::get_file_system 0 1 1227 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

2584 15 get_mount_point 0 4 2838 33 VirtualFileMount::get_mount_point 0 1 1228 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

2585 15 get_mount_flags 0 4 2838 33 VirtualFileMount::get_mount_flags 0 1 1229 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

2586 6 output 0 6 2838 24 VirtualFileMount::output 0 1 1230 10
/**
 *
 */
58
virtual void VirtualFileMount::output(ostream &out) const;

2587 5 write 0 6 2838 23 VirtualFileMount::write 0 1 1231 10
/**
 *
 */
57
virtual void VirtualFileMount::write(ostream &out) const;

2588 14 get_class_type 0 4 2838 32 VirtualFileMount::get_class_type 0 1 1232 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

2589 25 VirtualFileMountMultifile 0 4 2839 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 1233 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

2590 13 get_multifile 0 4 2839 40 VirtualFileMountMultifile::get_multifile 0 1 1234 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

2591 14 get_class_type 0 4 2839 41 VirtualFileMountMultifile::get_class_type 0 1 1235 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

2592 23 VirtualFileMountRamdisk 0 4 2840 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 1236 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

2593 14 get_class_type 0 4 2840 39 VirtualFileMountRamdisk::get_class_type 0 1 1237 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

2594 24 ~VirtualFileMountRamdisk 0 4 2840 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

2595 22 VirtualFileMountSystem 0 4 2841 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 1238 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

2596 21 get_physical_filename 0 4 2841 45 VirtualFileMountSystem::get_physical_filename 0 1 1239 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

2597 14 get_class_type 0 4 2841 38 VirtualFileMountSystem::get_class_type 0 1 1240 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

2598 23 ~VirtualFileMountSystem 0 4 2841 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

2599 9 get_mount 0 4 2842 28 VirtualFileSimple::get_mount 0 1 1241 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

2600 19 is_implicit_pz_file 0 4 2842 38 VirtualFileSimple::is_implicit_pz_file 0 1 1242 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

2601 14 get_class_type 0 4 2842 33 VirtualFileSimple::get_class_type 0 1 1243 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

2602 18 ~VirtualFileSimple 0 4 2842 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

2603 13 TemporaryFile 0 4 2843 28 TemporaryFile::TemporaryFile 0 2 1244 1245 10
/**
 *
 */
132
inline TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

2604 14 get_class_type 0 4 2843 29 TemporaryFile::get_class_type 0 1 1246 0
54
static TypeHandle TemporaryFile::get_class_type(void);

2605 17 IDecompressStream 0 4 2844 36 IDecompressStream::IDecompressStream 0 2 1247 1248 22
/**
 *
 */

/**
 *
 */
130
inline IDecompressStream::IDecompressStream(void);
inline IDecompressStream::IDecompressStream(istream *source, bool owns_source);

2606 4 open 0 4 2844 23 IDecompressStream::open 0 1 1249 10
/**
 *
 */
85
inline IDecompressStream &IDecompressStream::open(istream *source, bool owns_source);

2607 5 close 0 4 2844 24 IDecompressStream::close 0 1 1250 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

2608 18 ~IDecompressStream 0 4 2844 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

2609 15 OCompressStream 0 4 2845 32 OCompressStream::OCompressStream 0 2 1251 1252 22
/**
 *
 */

/**
 *
 */
145
inline OCompressStream::OCompressStream(void);
inline OCompressStream::OCompressStream(ostream *dest, bool owns_dest, int compression_level = 6);

2610 4 open 0 4 2845 21 OCompressStream::open 0 1 1253 10
/**
 *
 */
104
inline OCompressStream &OCompressStream::open(ostream *dest, bool owns_dest, int compression_level = 6);

2611 5 close 0 4 2845 22 OCompressStream::close 0 1 1254 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

2612 16 ~OCompressStream 0 4 2845 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

2613 13 get_num_files 0 4 2846 30 VirtualFileList::get_num_files 0 1 1256 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

2614 8 get_file 0 4 2846 25 VirtualFileList::get_file 0 1 1257 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

2615 11 operator [] 0 4 2846 28 VirtualFileList::operator [] 0 1 1258 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

2616 4 size 0 4 2846 21 VirtualFileList::size 0 1 1259 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

2617 11 operator += 0 4 2846 28 VirtualFileList::operator += 0 1 1260 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

2618 10 operator + 0 4 2846 27 VirtualFileList::operator + 0 1 1261 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

2619 15 VirtualFileList 0 4 2846 32 VirtualFileList::VirtualFileList 0 1 1255 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

2620 17 VirtualFileSystem 0 4 2847 36 VirtualFileSystem::VirtualFileSystem 0 2 1262 1263 10
/**
 *
 */
125
VirtualFileSystem::VirtualFileSystem(void);
inline VirtualFileSystem::VirtualFileSystem(VirtualFileSystem const &) = default;

2621 18 ~VirtualFileSystem 0 4 2847 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

2622 5 mount 0 4 2847 24 VirtualFileSystem::mount 0 3 1264 1265 1266 1288
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function that the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
328
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

2623 10 mount_loop 0 4 2847 29 VirtualFileSystem::mount_loop 0 1 1267 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

2624 7 unmount 0 4 2847 26 VirtualFileSystem::unmount 0 3 1268 1269 1270 419
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

2625 13 unmount_point 0 4 2847 32 VirtualFileSystem::unmount_point 0 1 1271 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

2626 11 unmount_all 0 4 2847 30 VirtualFileSystem::unmount_all 0 1 1272 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

2627 14 get_num_mounts 0 4 2847 33 VirtualFileSystem::get_num_mounts 0 1 1273 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

2628 9 get_mount 0 4 2847 28 VirtualFileSystem::get_mount 0 1 1274 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

2629 5 clear 0 4 2850 40 PointerToBase< VirtualFileMount >::clear 0 1 1313 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

2630 6 output 0 4 2850 41 PointerToBase< VirtualFileMount >::output 0 1 1314 0
67
void PointerToBase< VirtualFileMount >::output(ostream &out) const;

2631 9 PointerTo 0 4 2849 40 PointerTo< VirtualFileMount >::PointerTo 0 3 1305 1306 1307 0
228
inline PointerTo< VirtualFileMount >::PointerTo(void) = default;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr);
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

2632 10 ~PointerTo 0 4 2849 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
55
inline PointerTo< VirtualFileMount >::~PointerTo(void);

2633 1 p 0 4 2849 32 PointerTo< VirtualFileMount >::p 0 1 1308 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
70
inline VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const;

2634 10 operator = 0 4 2849 41 PointerTo< VirtualFileMount >::operator = 0 2 1309 1310 0
227
inline PointerTo< VirtualFileMount > &PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline PointerTo< VirtualFileMount > &PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

2635 7 is_null 0 4 2849 38 PointerTo< VirtualFileMount >::is_null 0 1 1311 259
// These functions normally wouldn't need to be redefined here, but we do so
// anyway just to help out interrogate (which doesn't seem to want to
// automatically export the PointerToBase class).  When this works again in
// interrogate, we can remove these.
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

2636 5 clear 0 4 2849 36 PointerTo< VirtualFileMount >::clear 0 1 1312 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

2637 5 chdir 0 4 2847 24 VirtualFileSystem::chdir 0 1 1275 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

2638 7 get_cwd 0 4 2847 26 VirtualFileSystem::get_cwd 0 1 1276 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

2639 14 make_directory 0 4 2847 33 VirtualFileSystem::make_directory 0 1 1277 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

2640 19 make_directory_full 0 4 2847 38 VirtualFileSystem::make_directory_full 0 1 1278 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

2641 8 get_file 0 4 2847 27 VirtualFileSystem::get_file 0 1 1279 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

2642 11 create_file 0 4 2847 30 VirtualFileSystem::create_file 0 1 1280 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

2643 9 find_file 0 4 2847 28 VirtualFileSystem::find_file 0 1 1281 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

2644 11 delete_file 0 4 2847 30 VirtualFileSystem::delete_file 0 1 1282 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

2645 11 rename_file 0 4 2847 30 VirtualFileSystem::rename_file 0 1 1283 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

2646 9 copy_file 0 4 2847 28 VirtualFileSystem::copy_file 0 1 1284 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

2647 16 resolve_filename 0 4 2847 35 VirtualFileSystem::resolve_filename 0 1 1285 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

2648 14 find_all_files 0 4 2847 33 VirtualFileSystem::find_all_files 0 1 1286 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

2649 6 exists 0 4 2847 25 VirtualFileSystem::exists 0 1 1287 71
/**
 * Convenience function; returns true if the named file exists.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

2650 12 is_directory 0 4 2847 31 VirtualFileSystem::is_directory 0 1 1288 93
/**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

2651 15 is_regular_file 0 4 2847 34 VirtualFileSystem::is_regular_file 0 1 1289 96
/**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

2652 14 scan_directory 0 4 2847 33 VirtualFileSystem::scan_directory 0 1 1290 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

2653 2 ls 0 4 2847 21 VirtualFileSystem::ls 0 1 1291 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

2654 6 ls_all 0 4 2847 25 VirtualFileSystem::ls_all 0 1 1292 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

2655 5 write 0 4 2847 24 VirtualFileSystem::write 0 1 1293 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
50
void VirtualFileSystem::write(ostream &out) const;

2656 14 get_global_ptr 0 4 2847 33 VirtualFileSystem::get_global_ptr 0 1 1294 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

2657 9 read_file 0 4 2847 28 VirtualFileSystem::read_file 0 1 1295 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

2658 14 open_read_file 0 4 2847 33 VirtualFileSystem::open_read_file 0 1 1296 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
93
istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

2659 15 close_read_file 0 4 2847 34 VirtualFileSystem::close_read_file 0 1 1297 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void VirtualFileSystem::close_read_file(istream *stream);

2660 10 write_file 0 4 2847 29 VirtualFileSystem::write_file 0 1 1298 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

2661 15 open_write_file 0 4 2847 34 VirtualFileSystem::open_write_file 0 1 1299 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
101
ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

2662 16 open_append_file 0 4 2847 35 VirtualFileSystem::open_append_file 0 1 1300 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
71
ostream *VirtualFileSystem::open_append_file(Filename const &filename);

2663 16 close_write_file 0 4 2847 35 VirtualFileSystem::close_write_file 0 1 1301 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
static void VirtualFileSystem::close_write_file(ostream *stream);

2664 20 open_read_write_file 0 4 2847 39 VirtualFileSystem::open_read_write_file 0 1 1302 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
91
iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

2665 21 open_read_append_file 0 4 2847 40 VirtualFileSystem::open_read_append_file 0 1 1303 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
77
iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

2666 21 close_read_write_file 0 4 2847 40 VirtualFileSystem::close_read_write_file 0 1 1304 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
static void VirtualFileSystem::close_read_write_file(iostream *stream);

2667 13 get_long_time 0 4 2851 24 TrueClock::get_long_time 0 1 1315 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

2668 14 get_short_time 0 4 2851 25 TrueClock::get_short_time 0 1 1316 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

2669 18 get_short_raw_time 0 4 2851 29 TrueClock::get_short_raw_time 0 1 1317 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

2670 15 get_error_count 0 4 2851 26 TrueClock::get_error_count 0 1 1318 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

2671 14 get_global_ptr 0 4 2851 25 TrueClock::get_global_ptr 0 1 1319 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

2672 16 set_cpu_affinity 0 4 2851 27 TrueClock::set_cpu_affinity 0 1 1320 0
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

2673 9 Patchfile 0 4 2852 20 Patchfile::Patchfile 0 2 1321 1322 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
77
Patchfile::Patchfile(void);
Patchfile::Patchfile(PointerTo< Buffer > buffer);

2674 10 ~Patchfile 0 4 2852 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

2675 5 build 0 4 2852 16 Patchfile::build 0 1 1323 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

2676 11 read_header 0 4 2852 22 Patchfile::read_header 0 1 1324 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

2677 8 initiate 0 4 2852 19 Patchfile::initiate 0 2 1325 1326 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

2678 3 run 0 4 2852 14 Patchfile::run 0 1 1327 350
/**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

2679 5 apply 0 4 2852 16 Patchfile::apply 0 2 1328 1329 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

2680 12 get_progress 0 4 2852 23 Patchfile::get_progress 0 1 1330 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

2681 19 set_allow_multifile 0 4 2852 30 Patchfile::set_allow_multifile 0 1 1331 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

2682 19 get_allow_multifile 0 4 2852 30 Patchfile::get_allow_multifile 0 1 1332 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

2683 20 set_footprint_length 0 4 2852 31 Patchfile::set_footprint_length 0 1 1333 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

2684 20 get_footprint_length 0 4 2852 31 Patchfile::get_footprint_length 0 1 1334 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

2685 22 reset_footprint_length 0 4 2852 33 Patchfile::reset_footprint_length 0 1 1335 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

2686 15 has_source_hash 0 4 2852 26 Patchfile::has_source_hash 0 1 1336 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

2687 15 get_source_hash 0 4 2852 26 Patchfile::get_source_hash 0 1 1337 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

2688 15 get_result_hash 0 4 2852 26 Patchfile::get_result_hash 0 1 1338 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

2689 13 password_hash 0 1 0 13 password_hash 0 1 1378 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

2690 12 ProfileTimer 0 4 2856 26 ProfileTimer::ProfileTimer 0 2 1339 1340 0
127
ProfileTimer::ProfileTimer(char const *name = 0, int maxEntries = 4096);
ProfileTimer::ProfileTimer(ProfileTimer const &other);

2691 13 ~ProfileTimer 0 4 2856 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

2692 4 init 0 4 2856 18 ProfileTimer::init 0 1 1341 0
65
void ProfileTimer::init(char const *name, int maxEntries = 4096);

2693 2 on 0 4 2856 16 ProfileTimer::on 0 1 1342 0
28
void ProfileTimer::on(void);

2694 4 mark 0 4 2856 18 ProfileTimer::mark 0 1 1343 0
41
void ProfileTimer::mark(char const *tag);

2695 3 off 0 4 2856 17 ProfileTimer::off 0 2 1344 1345 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

2696 12 getTotalTime 0 4 2856 26 ProfileTimer::getTotalTime 0 1 1346 110
// Don't call any of the following during timing: (Because they are slow,
// not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

2697 16 consolidateAllTo 0 4 2856 30 ProfileTimer::consolidateAllTo 0 1 1347 0
66
static void ProfileTimer::consolidateAllTo(ostream &out = ::cout);

2698 13 consolidateTo 0 4 2856 27 ProfileTimer::consolidateTo 0 1 1348 0
62
void ProfileTimer::consolidateTo(ostream &out = ::cout) const;

2699 10 printAllTo 0 4 2856 24 ProfileTimer::printAllTo 0 1 1349 0
60
static void ProfileTimer::printAllTo(ostream &out = ::cout);

2700 7 printTo 0 4 2856 21 ProfileTimer::printTo 0 1 1350 0
56
void ProfileTimer::printTo(ostream &out = ::cout) const;

2701 11 was_deleted 0 4 2857 30 WeakPointerToVoid::was_deleted 0 1 1351 94
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

2702 16 is_valid_pointer 0 4 2857 35 WeakPointerToVoid::is_valid_pointer 0 1 1352 90
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

2703 16 set_string_value 0 4 2858 33 WindowsRegistry::set_string_value 0 1 1355 302
/**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */
183
static bool WindowsRegistry::set_string_value(std::string const &key, std::string const &name, std::string const &value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2704 13 set_int_value 0 4 2858 30 WindowsRegistry::set_int_value 0 1 1356 142
/**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */
165
static bool WindowsRegistry::set_int_value(std::string const &key, std::string const &name, int value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2705 12 get_key_type 0 4 2858 29 WindowsRegistry::get_key_type 0 1 1357 115
/**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */
170
static WindowsRegistry::Type WindowsRegistry::get_key_type(std::string const &key, std::string const &name, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2706 16 get_string_value 0 4 2858 33 WindowsRegistry::get_string_value 0 1 1358 291
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */
198
static std::string WindowsRegistry::get_string_value(std::string const &key, std::string const &name, std::string const &default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2707 13 get_int_value 0 4 2858 30 WindowsRegistry::get_int_value 0 1 1359 206
/**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */
172
static int WindowsRegistry::get_int_value(std::string const &key, std::string const &name, int default_value, WindowsRegistry::RegLevel rl = ::WindowsRegistry::rl_machine);

2708 15 WindowsRegistry 0 4 2858 32 WindowsRegistry::WindowsRegistry 0 2 1353 1354 0
132
inline WindowsRegistry::WindowsRegistry(void) = default;
inline WindowsRegistry::WindowsRegistry(WindowsRegistry const &) = default;

2709 16 ~WindowsRegistry 0 4 2858 33 WindowsRegistry::~WindowsRegistry 0 0 0
40
WindowsRegistry::~WindowsRegistry(void);

1378
1 0 0 7 12 2865 1394 0 0 1 4 copy 1 2863  
2 0 0 7 12 2865 1394 0 0 1 4 copy 1 2866  
3 0 0 7 12 2865 1394 0 0 1 6 source 1 2868  
4 0 0 6 13 2871 0 0 0 1 4 this 3 2863  
5 0 0 6 14 2749 0 0 0 2 4 this 3 2863  1 n 1 2871  
6 0 0 6 15 2749 0 0 0 2 4 this 3 2863  1 n 1 2871  
7 0 0 6 16 2872 0 0 0 1 4 this 3 2863  
8 0 0 6 17 2872 0 0 0 3 4 this 3 2863  1 n 1 2871  5 count 1 2871  
9 0 0 6 18 2738 0 0 0 1 4 this 3 2863  
10 0 0 6 19 2738 0 0 0 1 4 this 3 2863  
11 0 0 6 20 2738 0 0 0 3 4 this 3 2863  4 view 1 2873  5 flags 1 2738  
12 0 0 4 21 2876 0 0 0 2 4 this 3 2863  4 view 1 2873  
13 0 0 4 9 2876 0 0 0 1 4 this 3 2877  
14 0 0 4 10 2876 0 0 0 2 4 this 3 2878  3 out 1 2790  
15 0 0 6 7 2737 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 2880  
16 0 0 6 8 2882 0 0 10 /**
 *
 */ 1 4 this 3 2880  
17 0 0 7 30 2885 1408 0 0 1 4 copy 1 2883  
18 0 0 7 30 2885 1408 0 0 1 4 copy 1 2886  
19 0 0 7 30 2885 1408 0 0 1 6 source 1 2868  
20 0 0 6 31 2871 0 0 0 1 4 this 3 2883  
21 0 0 6 32 2854 0 0 0 2 4 this 3 2883  1 n 1 2871  
22 0 0 6 33 2854 0 0 0 2 4 this 3 2883  1 n 1 2871  
23 0 0 6 34 2872 0 0 0 1 4 this 3 2883  
24 0 0 6 35 2872 0 0 0 3 4 this 3 2883  1 n 1 2871  5 count 1 2871  
25 0 0 6 36 2738 0 0 0 1 4 this 3 2883  
26 0 0 6 37 2738 0 0 0 1 4 this 3 2883  
27 0 0 6 38 2738 0 0 0 3 4 this 3 2883  4 view 1 2873  5 flags 1 2738  
28 0 0 4 39 2876 0 0 0 2 4 this 3 2883  4 view 1 2873  
29 0 0 4 27 2876 0 0 0 1 4 this 3 2888  
30 0 0 4 28 2876 0 0 0 2 4 this 3 2889  3 out 1 2790  
31 0 0 7 48 2893 1422 0 0 1 4 copy 1 2891  
32 0 0 7 48 2893 1422 0 0 1 4 copy 1 2894  
33 0 0 7 48 2893 1422 0 0 1 6 source 1 2868  
34 0 0 6 49 2871 0 0 0 1 4 this 3 2891  
35 0 0 6 50 2738 0 0 0 2 4 this 3 2891  1 n 1 2871  
36 0 0 6 51 2738 0 0 0 2 4 this 3 2891  1 n 1 2871  
37 0 0 6 52 2872 0 0 0 1 4 this 3 2891  
38 0 0 6 53 2872 0 0 0 3 4 this 3 2891  1 n 1 2871  5 count 1 2871  
39 0 0 6 54 2738 0 0 0 1 4 this 3 2891  
40 0 0 6 55 2738 0 0 0 1 4 this 3 2891  
41 0 0 6 56 2738 0 0 0 3 4 this 3 2891  4 view 1 2873  5 flags 1 2738  
42 0 0 4 57 2876 0 0 0 2 4 this 3 2891  4 view 1 2873  
43 0 0 4 45 2876 0 0 0 1 4 this 3 2896  
44 0 0 4 46 2876 0 0 0 2 4 this 3 2897  3 out 1 2790  
45 0 0 7 66 2901 1436 0 0 1 4 copy 1 2899  
46 0 0 7 66 2901 1436 0 0 1 4 copy 1 2902  
47 0 0 7 66 2901 1436 0 0 1 6 source 1 2868  
48 0 0 6 67 2871 0 0 0 1 4 this 3 2899  
49 0 0 6 68 2904 0 0 0 2 4 this 3 2899  1 n 1 2871  
50 0 0 6 69 2904 0 0 0 2 4 this 3 2899  1 n 1 2871  
51 0 0 6 70 2872 0 0 0 1 4 this 3 2899  
52 0 0 6 71 2872 0 0 0 3 4 this 3 2899  1 n 1 2871  5 count 1 2871  
53 0 0 6 72 2738 0 0 0 1 4 this 3 2899  
54 0 0 6 73 2738 0 0 0 1 4 this 3 2899  
55 0 0 6 74 2738 0 0 0 3 4 this 3 2899  4 view 1 2873  5 flags 1 2738  
56 0 0 4 75 2876 0 0 0 2 4 this 3 2899  4 view 1 2873  
57 0 0 4 63 2876 0 0 0 1 4 this 3 2905  
58 0 0 4 64 2876 0 0 0 2 4 this 3 2906  3 out 1 2790  
59 0 0 6 83 2732 0 0 67 /**
 * Returns the page on which this declaration can be found.
 */ 1 4 this 3 2742  
60 0 0 6 84 2740 0 0 148 /**
 * Returns the variable that this declaration names.  This variable may or may
 * not have been defined by the time the declaration is read.
 */ 1 4 this 3 2742  
61 0 0 6 176 2872 0 0 186 /**
 * Returns the value assigned to this variable.  This is the original one-line
 * text defined for the variable in the .prc file (or passed to
 * ConfigPage::make_declaration()).
 */ 1 4 this 3 2742  
62 0 0 4 177 2876 0 0 55 /**
 * Changes the value assigned to this variable.
 */ 2 4 this 3 2739  5 value 1 2872  
63 0 0 6 178 2882 0 0 156 /**
 * Returns the number of words in the declaration's value.  A word is defined
 * as a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 2742  
64 0 0 6 179 2737 0 0 184 /**
 * Returns true if the declaration's value has a valid string value for the
 * nth word.  This is really the same thing as asking if there are at least n
 * words in the value.
 */ 2 4 this 3 2742  1 n 1 2882  
65 0 0 6 180 2737 0 0 97 /**
 * Returns true if the declaration's value has a valid boolean value for the
 * nth word.
 */ 2 4 this 3 2742  1 n 1 2882  
66 0 0 6 181 2737 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 2742  1 n 1 2882  
67 0 0 6 182 2737 0 0 95 /**
 * Returns true if the declaration's value has a valid int64 value for the nth
 * word.
 */ 2 4 this 3 2742  1 n 1 2882  
68 0 0 6 183 2737 0 0 97 /**
 * Returns true if the declaration's value has a valid integer value for the
 * nth word.
 */ 2 4 this 3 2742  1 n 1 2882  
69 0 0 6 184 2872 0 0 153 /**
 * Returns the string value of the nth word of the declaration's value, or
 * empty string if there is no nth value.  See also has_string_word().
 */ 2 4 this 3 2742  1 n 1 2882  
70 0 0 6 185 2737 0 0 145 /**
 * Returns the boolean value of the nth word of the declaration's value, or
 * false if there is no nth value.  See also has_bool_word().
 */ 2 4 this 3 2742  1 n 1 2882  
71 0 0 6 186 2738 0 0 140 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_int_word().
 */ 2 4 this 3 2742  1 n 1 2882  
72 0 0 6 187 2755 0 0 140 /**
 * Returns the int64 value of the nth word of the declaration's value, or 0 if
 * there is no nth value.  See also has_int64_word().
 */ 2 4 this 3 2742  1 n 1 2882  
73 0 0 6 188 2749 0 0 143 /**
 * Returns the integer value of the nth word of the declaration's value, or 0
 * if there is no nth value.  See also has_double_word().
 */ 2 4 this 3 2742  1 n 1 2882  
74 0 0 4 189 2876 0 0 0 3 4 this 3 2739  1 n 1 2882  5 value 1 2872  
75 0 0 4 190 2876 0 0 0 3 4 this 3 2739  1 n 1 2882  5 value 1 2737  
76 0 0 4 191 2876 0 0 0 3 4 this 3 2739  1 n 1 2882  5 value 1 2738  
77 0 0 4 192 2876 0 0 0 3 4 this 3 2739  1 n 1 2882  5 value 1 2755  
78 0 0 4 193 2876 0 0 0 3 4 this 3 2739  1 n 1 2882  5 value 1 2749  
79 0 0 6 194 2738 0 0 254 /**
 * Returns the sequence number of the declaration within the page.  Sequence
 * numbers are assigned as each declaration is created; each declaration is
 * given a higher sequence number than all the declarations created in the
 * page before it.
 */ 1 4 this 3 2742  
80 0 0 4 195 2876 0 0 0 2 4 this 3 2742  3 out 1 2790  
81 0 0 4 196 2876 0 0 0 2 4 this 3 2742  3 out 1 2790  
82 0 0 7 81 2908 1438 0 0 0 
83 0 0 7 81 2908 1438 0 0 1 6 param0 0 2909  
84 0 0 6 88 2732 0 0 0 0 
85 0 0 6 89 2732 0 0 0 0 
86 0 0 6 90 2872 0 0 115 /**
 * Returns the name of the page.  If the page was loaded from a .prc file,
 * this is usually the filename.
 */ 1 4 this 3 2911  
87 0 0 6 95 2737 0 0 248 /**
 * Returns true if this is the special "default" or "local" page, or false if
 * it is an ordinary page, e.g.  an implicit page loaded from a prc file at
 * startup, or an explicit page created by
 * ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 2911  
88 0 0 6 96 2737 0 0 180 /**
 * Returns true if the page was loaded by implicitly searching the config path
 * on startup, or false if it was explicitly loaded by dynamic code after
 * initial startup.
 */ 1 4 this 3 2911  
89 0 0 4 100 2876 0 0 0 2 4 this 3 2732  4 sort 1 2738  
90 0 0 6 101 2738 0 0 93 /**
 * Returns the explicit sort order of this particular ConfigPage.  See
 * set_sort().
 */ 1 4 this 3 2911  
91 0 0 6 104 2738 0 0 413 /**
 * Returns the sequence number of the page.
 *
 * Sequence numbers for a particular class (implicit vs.  explicit) of pages
 * are assigned as each page is loaded; each page is given a higher sequence
 * number than all the pages loaded before it.
 *
 * The implicit_load pages, which are discovered in the file system
 * automatically, have a different set of sequence numbers than the explicit
 * pages.
 */ 1 4 this 3 2911  
92 0 0 6 105 2738 0 0 302 /**
 * Returns the trust level associated with this page.  An untrusted page is
 * trust level 0; if the page was loaded from a signed .prc file, its trust
 * level is the index number of the certificate that signed it.  Generally, a
 * higher trust level value represents a greater level of trust.
 */ 1 4 this 3 2911  
93 0 0 4 106 2876 0 0 195 /**
 * Explicitly sets the trust level on this particular page.  Note that any
 * subsequent changes to the page, or to any variable declarations on it, will
 * reset the trust level to zero.
 */ 2 4 this 3 2732  11 trust_level 1 2738  
94 0 0 6 107 2872 0 0 153 /**
 * Returns the raw binary signature that was found in the prc file, if any.
 * This method is probably not terribly useful for most applications.
 */ 1 4 this 3 2911  
95 0 0 4 111 2876 0 0 0 1 4 this 3 2732  
96 0 0 6 112 2737 0 0 0 2 4 this 3 2732  2 in 1 2780  
97 0 0 6 113 2737 0 0 0 3 4 this 3 2732  2 in 1 2780  8 password 1 2872  
98 0 0 6 114 2739 0 0 0 3 4 this 3 2732  8 variable 1 2740  5 value 1 2872  
99 0 0 6 114 2739 0 0 0 3 4 this 3 2732  8 variable 1 2872  5 value 1 2872  
100 0 0 6 115 2737 0 0 0 2 4 this 3 2732  4 decl 1 2739  
101 0 0 6 116 2882 0 0 0 1 4 this 3 2911  
102 0 0 6 117 2742 0 0 0 2 4 this 3 2911  1 n 1 2882  
103 0 0 6 118 2739 0 0 0 2 4 this 3 2732  1 n 1 2882  
104 0 0 6 119 2872 0 0 0 2 4 this 3 2911  1 n 1 2882  
105 0 0 6 120 2872 0 0 0 2 4 this 3 2911  1 n 1 2882  
106 0 0 6 121 2737 0 0 0 2 4 this 3 2911  1 n 1 2882  
107 0 0 4 124 2876 0 0 0 2 4 this 3 2911  3 out 1 2790  
108 0 0 4 125 2876 0 0 0 2 4 this 3 2911  3 out 1 2790  
109 0 0 4 126 2876 0 0 0 2 4 this 3 2911  3 out 1 2790  
110 0 0 6 130 2872 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 2913  
111 0 0 6 131 2737 0 0 118 /**
 * Returns true if the variable has been referenced by a ConfigVariable
 * somewhere in code, false otherwise.
 */ 1 4 this 3 2913  
112 0 0 6 132 2730 0 0 125 /**
 * Returns the stated type of this variable.  If the variable has not yet been
 * defined, this will be VT_undefined.
 */ 1 4 this 3 2913  
113 0 0 6 133 2872 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 2913  
114 0 0 6 134 2738 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 2913  
115 0 0 6 135 2737 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2913  
116 0 0 6 136 2738 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2913  
117 0 0 6 137 2737 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 2913  
118 0 0 6 138 2742 0 0 137 /**
 * Returns the default variable specified for this variable.  If the variable
 * has not yet been defined, this will return NULL.
 */ 1 4 this 3 2913  
119 0 0 4 139 2876 0 0 0 2 4 this 3 2740  10 value_type 1 2730  
120 0 0 4 140 2876 0 0 0 2 4 this 3 2740  5 flags 1 2738  
121 0 0 4 141 2876 0 0 0 2 4 this 3 2740  11 description 1 2872  
122 0 0 4 142 2876 0 0 0 2 4 this 3 2740  13 default_value 1 2872  
123 0 0 4 143 2876 0 0 75 /**
 * Marks that the variable has been "declared" by a ConfigVariable.
 */ 1 4 this 3 2740  
124 0 0 6 144 2739 0 0 0 1 4 this 3 2740  
125 0 0 6 145 2737 0 0 0 1 4 this 3 2740  
126 0 0 6 146 2737 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 2913  
127 0 0 6 147 2737 0 0 0 1 4 this 3 2913  
128 0 0 6 148 2882 0 0 0 1 4 this 3 2913  
129 0 0 6 149 2742 0 0 0 2 4 this 3 2913  1 n 1 2882  
130 0 0 6 151 2882 0 0 157 /**
 * Returns the number of prc files that reference this variable.  This is not
 * exactly the same as the number of declarations; see get_reference().
 */ 1 4 this 3 2913  
131 0 0 6 152 2742 0 0 335 /**
 * Returns the nth declaration in a prc file that references this variable.
 * This is similar, but not identical to, get_declaration().  The difference
 * is that this will list *only* true references in a prc file, and will not
 * list default values or locally-assigned values; it also will list even the
 * untrusted files.
 */ 2 4 this 3 2913  1 n 1 2882  
132 0 0 6 154 2882 0 0 115 /**
 * Returns the number of trusted prc files that reference this variable.  See
 * also get_num_references().
 */ 1 4 this 3 2913  
133 0 0 6 155 2742 0 0 428 /**
 * Returns the nth declaration in a trusted prc file that references this
 * variable.  This is similar, but not identical to, get_declaration().  The
 * difference is that this will list *only* true references in a prc file, and
 * will not list default values or locally-assigned values.
 *
 * This is also similar to get_reference(), except that it only lists the
 * trusted declarations, omitting the untrusted ones.
 */ 2 4 this 3 2913  1 n 1 2882  
134 0 0 6 157 2882 0 0 107 /**
 * Returns the number of trusted, unique (by string value) values there exist
 * for this variable.
 */ 1 4 this 3 2913  
135 0 0 6 158 2742 0 0 157 /**
 * Returns the nth trusted, unique value for this variable.  This is similar
 * to get_trusted_reference(), except that duplicate values are removed.
 */ 2 4 this 3 2913  1 n 1 2882  
136 0 0 4 163 2876 0 0 0 2 4 this 3 2913  3 out 1 2790  
137 0 0 4 164 2876 0 0 0 2 4 this 3 2913  3 out 1 2790  
138 0 0 6 198 2737 0 0 155 /**
 * Returns true if the implicit *.prc files have already been loaded, false
 * otherwise.  Normally this will only be false briefly before startup.
 */ 1 4 this 3 2915  
139 0 0 4 199 2876 0 0 250 /**
 * Searches the PRC_DIR and/or PRC_PATH directories for *.prc files and loads
 * them in as pages.  This is normally called automatically at startup time,
 * when the first variable's value is referenced.  See also
 * reload_implicit_pages().
 */ 1 4 this 3 2917  
140 0 0 4 200 2876 0 0 0 1 4 this 3 2917  
141 0 0 6 201 2918 0 0 274 /**
 * Returns the search path used to locate implicit .prc files.  This is
 * determined by the PRC_DIR and PRC_PATH environment variables.  The object
 * returned by this method may be modified to change the path at runtime, and
 * then reload_implicit_pages() called.
 */ 1 4 this 3 2917  
142 0 0 6 202 2882 0 0 270 /**
 * Returns the number of patterns, like "*.prc", that are compiled in that
 * will be searched for as default config filenames.  Normally there is only
 * one pattern, and it is "*.prc", but others may be specified with the
 * PRC_FILENAME variable in Config.pp.
 */ 1 4 this 3 2915  
143 0 0 6 203 2872 0 0 131 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * config file.  See get_num_prc_patterns().
 */ 2 4 this 3 2915  1 n 1 2882  
144 0 0 6 204 2882 0 0 170 /**
 * Returns the number of patterns, like "*.pre", that are compiled in that
 * will be searched for as special config files that are understood to be
 * encrypted.
 */ 1 4 this 3 2915  
145 0 0 6 205 2872 0 0 151 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * encrypted config file.  See get_num_prc_encrypted_patterns().
 */ 2 4 this 3 2915  1 n 1 2882  
146 0 0 6 206 2882 0 0 232 /**
 * Returns the number of patterns, like "*.exe", that are compiled in that
 * will be searched for as special config files that are to be executed as a
 * program, and their output taken to be input.  This is normally empty.
 */ 1 4 this 3 2915  
147 0 0 6 207 2872 0 0 159 /**
 * Returns the nth filename pattern that will be considered a match as a valid
 * executable-style config file.  See get_num_prc_executable_patterns().
 */ 2 4 this 3 2915  1 n 1 2882  
148 0 0 6 208 2732 0 0 0 2 4 this 3 2917  4 name 1 2872  
149 0 0 6 209 2737 0 0 0 2 4 this 3 2917  4 page 1 2732  
150 0 0 6 210 2882 0 0 174 /**
 * Returns the current number of implicitly-loaded ConfigPages in the world.
 * These represent files that were automatically discovered on the disk as
 * .prc files.
 */ 1 4 this 3 2915  
151 0 0 6 211 2732 0 0 94 /**
 * Returns the nth implicit ConfigPage in the world.  See
 * get_num_implicit_pages().
 */ 2 4 this 3 2915  1 n 1 2882  
152 0 0 6 212 2882 0 0 214 /**
 * Returns the current number of explicitly-loaded ConfigPages in the world.
 * These represent pages that were loaded dynamically at runtime by explicit
 * calls to ConfigPageManager::make_explicit_page().
 */ 1 4 this 3 2915  
153 0 0 6 213 2732 0 0 94 /**
 * Returns the nth explicit ConfigPage in the world.  See
 * get_num_explicit_pages().
 */ 2 4 this 3 2915  1 n 1 2882  
154 0 0 4 214 2876 0 0 0 2 4 this 3 2915  3 out 1 2790  
155 0 0 4 215 2876 0 0 0 2 4 this 3 2915  3 out 1 2790  
156 0 0 6 216 2917 0 0 0 0 
157 0 0 7 237 2921 1547 0 0 1 6 param0 0 2919  
158 0 0 7 237 2921 1547 0 230 /**
 * Use this constructor to make a ConfigVariable of an unspecified type.
 * Usually you'd want to do this just to reference a previously-defined
 * ConfigVariable of a specific type, without having to know what type it is.
 */ 1 4 name 1 2872  
159 0 0 6 239 2872 0 0 77 /**
 * Returns the toplevel value of the variable, formatted as a string.
 */ 1 4 this 3 2919  
160 0 0 4 240 2876 0 0 177 /**
 * Changes the value assigned to this variable.  This creates a local value
 * that shadows any values defined in the .prc files, until
 * clear_local_value() is called.
 */ 2 4 this 3 2921  5 value 1 2872  
161 0 0 4 241 2876 0 0 129 /**
 * Removes the value assigned to this variable, and lets its original value
 * (as read from the prc files) show through.
 */ 1 4 this 3 2921  
162 0 0 6 242 2882 0 0 153 /**
 * Returns the number of words in the variable's value.  A word is defined as
 * a sequence of non-whitespace characters delimited by whitespace.
 */ 1 4 this 3 2919  
163 0 0 6 219 2872 0 0 44 /**
 * Returns the name of the variable.
 */ 1 4 this 3 2922  
164 0 0 6 220 2730 0 0 132 /**
 * Returns the stated type of this variable.  This should be VT_list, unless a
 * later variable declaration has changed it.
 */ 1 4 this 3 2922  
165 0 0 6 221 2872 0 0 82 /**
 * Returns the brief description of this variable, if it has been defined.
 */ 1 4 this 3 2922  
166 0 0 6 222 2738 0 0 250 /**
 * Returns the flags value as set by set_flags().  This includes the trust
 * level and some other settings.  See the individual methods is_closed(),
 * get_trust_level(), etc.  to pull out the semantic meaning of these flags
 * individually.
 */ 1 4 this 3 2922  
167 0 0 6 223 2737 0 0 413 /**
 * Returns true if the variable is not trusted by any prc file (and hence
 * cannot be modified from its compiled-in default value), or false for the
 * normal case, in which the variable can be modified by any prc file at or
 * above its trust level (see get_trust_level()).
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2922  
168 0 0 6 224 2738 0 0 479 /**
 * Returns the minimum trust_level a prc file must demonstrate in order to
 * redefine the value for this variable.  Arguably, this should be called the
 * "mistrust level", since the larger the value, the more suspicious we are of
 * prc files.  This value is not used if is_closed() returns true, which
 * indicates no file may be trusted.
 *
 * This value only has effect in a release build (specifically, when
 * PRC_RESPECT_TRUST_LEVEL is defined true in Config.pp).
 */ 1 4 this 3 2922  
169 0 0 6 225 2737 0 0 232 /**
 * Returns true if the variable was indicated as "dynamic" by its constructor,
 * indicating that its name was dynamically generated, possibly from a large
 * pool, and it should not be listed along with the other variables.
 */ 1 4 this 3 2922  
170 0 0 6 232 2737 0 0 240 /**
 * Removes the local value defined for this variable, and allows its value to
 * be once again retrieved from the .prc files.
 *
 * Returns true if the value was successfully removed, false if it did not
 * exist in the first place.
 */ 1 4 this 3 2924  
171 0 0 6 233 2737 0 0 148 /**
 * Returns true if this variable's value has been shadowed by a local
 * assignment (as created via make_local_value()), or false otherwise.
 */ 1 4 this 3 2922  
172 0 0 6 234 2737 0 0 149 /**
 * Returns true if this variable has an explicit value, either from a prc file
 * or locally set, or false if variable has its default value.
 */ 1 4 this 3 2922  
173 0 0 4 235 2876 0 0 10 /**
 *
 */ 2 4 this 3 2922  3 out 1 2790  
174 0 0 4 236 2876 0 0 10 /**
 *
 */ 2 4 this 3 2922  3 out 1 2790  
175 0 0 7 244 2927 1562 0 0 1 6 param0 0 2925  
176 0 0 7 244 2927 1562 0 10 /**
 *
 */ 1 4 name 1 2872  
177 0 0 7 244 2927 1562 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2737  11 description 1 2872  5 flags 1 2738  
178 0 0 7 244 2927 1562 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
179 0 0 6 245 2927 0 0 0 2 4 this 3 2927  5 value 1 2737  
180 0 0 6 247 2882 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2925  
181 0 0 6 248 2737 0 0 0 2 4 this 3 2925  1 n 1 2882  
182 0 0 4 249 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2927  5 value 1 2737  
183 0 0 6 250 2737 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2925  
184 0 0 6 251 2737 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2925  
185 0 0 6 254 2737 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2925  1 n 1 2882  
186 0 0 4 255 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2927  1 n 1 2882  5 value 1 2737  
187 0 0 6 246 2737 0 0 0 1 4 this 3 2925  
188 0 0 7 258 2930 1573 0 0 1 6 param0 0 2928  
189 0 0 7 258 2930 1573 0 10 /**
 *
 */ 1 4 name 1 2872  
190 0 0 7 258 2930 1573 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2749  11 description 1 2872  5 flags 1 2738  
191 0 0 7 258 2930 1573 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
192 0 0 6 259 2930 0 0 0 2 4 this 3 2930  5 value 1 2749  
193 0 0 6 261 2882 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2928  
194 0 0 6 262 2749 0 0 0 2 4 this 3 2928  1 n 1 2882  
195 0 0 4 263 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2930  5 value 1 2749  
196 0 0 6 264 2749 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2928  
197 0 0 6 265 2749 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2928  
198 0 0 6 269 2749 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2928  1 n 1 2882  
199 0 0 4 270 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2930  1 n 1 2882  5 value 1 2749  
200 0 0 6 260 2749 0 0 0 1 4 this 3 2928  
201 0 0 7 273 2933 1697 0 0 1 6 param0 0 2931  
202 0 0 7 273 2933 1697 0 10 /**
 *
 */ 1 4 name 1 2872  
203 0 0 7 273 2933 1697 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2934  11 description 1 2872  5 flags 1 2738  
204 0 0 6 274 2933 0 0 0 2 4 this 3 2933  5 value 1 2934  
205 0 0 6 276 2872 0 0 76 // These methods help the ConfigVariableFilename act like a Filename object. 1 4 this 3 2931  
206 0 0 6 277 2737 0 0 10 /**
 *
 */ 1 4 this 3 2931  
207 0 0 6 278 2882 0 0 10 /**
 *
 */ 1 4 this 3 2931  
208 0 0 6 279 2935 0 0 0 2 4 this 3 2931  1 n 1 2882  
209 0 0 6 280 2872 0 0 183 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator, so this function is a
 * little redundant.
 */ 1 4 this 3 2931  
210 0 0 6 281 2872 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 2931  
211 0 0 6 282 2872 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 2931  
212 0 0 6 283 2872 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 2931  
213 0 0 6 284 2872 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 2931  
214 0 0 6 285 2872 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 2931  
215 0 0 6 286 2737 0 0 34 // Comparison operators are handy. 2 4 this 3 2931  5 other 1 2934  
216 0 0 6 287 2737 0 0 0 2 4 this 3 2931  5 other 1 2934  
217 0 0 6 288 2737 0 0 0 2 4 this 3 2931  5 other 1 2934  
218 0 0 4 289 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2933  5 value 1 2934  
219 0 0 7 290 2936 1694 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2931  
220 0 0 7 291 2936 1694 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2931  
221 0 0 7 398 2936 1694 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2931  1 n 1 2882  
222 0 0 4 399 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2933  1 n 1 2882  5 value 1 2934  
223 0 0 6 275 2934 0 0 0 1 4 this 3 2931  
224 0 0 7 295 2936 1694 0 37 /**
 * Creates an empty Filename.
 */ 0 
225 0 0 7 295 2936 1694 0 0 2 7 dirname 1 2934  8 basename 1 2934  
226 0 0 7 295 2936 1694 0 0 1 4 path 1 2868  
227 0 0 6 296 2868 0 0 0 1 4 this 3 2934  
228 0 0 7 297 2936 1694 0 168 // Static constructors to explicitly create a filename that refers to a text
// or binary file.  This is in lieu of calling set_text() or set_binary() or
// set_type(). 1 8 filename 1 2934  
229 0 0 7 297 2936 1694 0 10 /**
 *
 */ 1 8 filename 1 2872  
230 0 0 7 298 2936 1694 0 10 /**
 *
 */ 1 8 filename 1 2934  
231 0 0 7 298 2936 1694 0 10 /**
 *
 */ 1 8 filename 1 2872  
232 0 0 7 299 2936 1694 0 10 /**
 *
 */ 1 8 filename 1 2872  
233 0 0 7 300 2936 1694 0 10 /**
 *
 */ 1 8 filename 1 2872  
234 0 0 7 301 2936 1694 0 101 /**
 * Constructs a filename that represents a sequence of numbered files.  See
 * set_pattern().
 */ 1 8 filename 1 2872  
235 0 0 7 302 2936 1694 0 0 2 11 os_specific 1 2872  4 type 1 2752  
236 0 0 7 303 2936 1694 0 0 2 11 os_specific 1 2872  4 type 1 2752  
237 0 0 7 304 2936 1694 0 0 2 11 user_string 1 2872  4 type 1 2752  
238 0 0 7 305 2936 1694 0 0 4 7 dirname 1 2872  6 prefix 1 2872  6 suffix 1 2872  4 type 1 2752  
239 0 0 6 306 2934 0 0 0 0 
240 0 0 6 307 2934 0 0 0 0 
241 0 0 6 308 2934 0 0 0 0 
242 0 0 6 309 2934 0 0 0 0 
243 0 0 6 310 2936 0 0 10 /**
 *
 */ 2 4 this 3 2936  4 copy 1 2934  
244 0 0 6 310 2936 0 0 10 /**
 *
 */ 2 4 this 3 2936  8 filename 1 2872  
245 0 0 6 310 2936 0 0 36 // Assignment is via the = operator. 2 4 this 3 2936  8 filename 1 2872  
246 0 0 6 310 2936 0 0 10 /**
 *
 */ 2 4 this 3 2936  8 filename 1 2872  
247 0 0 6 312 2872 0 0 10 /**
 *
 */ 1 4 this 3 2934  
248 0 0 6 313 2737 0 0 10 /**
 *
 */ 1 4 this 3 2934  
249 0 0 6 314 2882 0 0 10 /**
 *
 */ 1 4 this 3 2934  
250 0 0 6 315 2935 0 0 0 2 4 this 3 2934  1 n 1 2882  
251 0 0 6 316 2868 0 0 0 1 4 this 3 2934  
252 0 0 6 317 2868 0 0 0 1 4 this 3 2934  
253 0 0 6 318 2872 0 0 10 /**
 *
 */ 2 4 this 3 2934  5 begin 1 2882  
254 0 0 6 318 2872 0 0 10 /**
 *
 */ 3 4 this 3 2934  5 begin 1 2882  3 end 1 2882  
255 0 0 6 319 2936 0 0 0 2 4 this 3 2936  5 other 1 2872  
256 0 0 7 320 2936 1694 0 0 2 4 this 3 2934  5 other 1 2872  
257 0 0 7 321 2936 1694 0 0 2 4 this 3 2934  5 other 1 2934  
258 0 0 6 322 2872 0 0 140 /**
 * Returns the entire filename: directory, basename, extension.  This is the
 * same thing returned by the string typecast operator.
 */ 1 4 this 3 2934  
259 0 0 6 323 2872 0 0 66 /**
 * Returns the entire filename as a wide-character string.
 */ 1 4 this 3 2934  
260 0 0 6 324 2872 0 0 139 /**
 * Returns the directory part of the filename.  This is everything in the
 * filename up to, but not including the rightmost slash.
 */ 1 4 this 3 2934  
261 0 0 6 325 2872 0 0 145 /**
 * Returns the basename part of the filename.  This is everything in the
 * filename after the rightmost slash, including any extensions.
 */ 1 4 this 3 2934  
262 0 0 6 326 2872 0 0 96 /**
 * Returns the full filename--directory and basename parts--except for the
 * extension.
 */ 1 4 this 3 2934  
263 0 0 6 327 2872 0 0 81 /**
 * Returns the basename part of the filename, without the file extension.
 */ 1 4 this 3 2934  
264 0 0 6 328 2872 0 0 140 /**
 * Returns the file extension.  This is everything after the rightmost dot, if
 * there is one, or the empty string if there is not.
 */ 1 4 this 3 2934  
265 0 0 4 329 2876 0 0 68 // You can also use any of these to reassign pieces of the filename. 2 4 this 3 2936  1 s 1 2872  
266 0 0 4 330 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
267 0 0 4 331 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
268 0 0 4 332 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
269 0 0 4 333 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
270 0 0 4 334 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
271 0 0 4 335 2876 0 0 235 // Setting these flags appropriately is helpful when opening or searching
// for a file; it helps the Filename resolve OS-specific conventions (for
// instance, that dynamic library names should perhaps be changed from .so
// to .dll). 1 4 this 3 2936  
272 0 0 4 336 2876 0 0 190 /**
 * Indicates that the filename represents a text file.  This is primarily
 * relevant to the read_file() and write_file() methods, so they can set the
 * appropriate flags to the OS.
 */ 1 4 this 3 2936  
273 0 0 6 337 2737 0 0 256 /**
 * Returns true if the Filename has been indicated to represent a binary file
 * via a previous call to set_binary().  It is possible that neither
 * is_binary() nor is_text() will be true, if neither set_binary() nor
 * set_text() was ever called.
 */ 1 4 this 3 2934  
274 0 0 6 338 2737 0 0 252 /**
 * Returns true if the Filename has been indicated to represent a text file
 * via a previous call to set_text().  It is possible that neither is_binary()
 * nor is_text() will be true, if neither set_binary() nor set_text() was ever
 * called.
 */ 1 4 this 3 2934  
275 0 0 6 339 2737 0 0 198 /**
 * Returns true either is_binary() or is_text() is true; that is, that the
 * filename has been specified as either binary or text.  If this is false,
 * the filename has not been specified.
 */ 1 4 this 3 2934  
276 0 0 4 340 2876 0 0 350 /**
 * Sets the type of the file represented by the filename.  This is useful for
 * to_os_specific(), resolve_filename(), test_existence(), and all such real-
 * world access functions.  It helps the Filename know how to map the internal
 * filename to the OS-specific filename (for instance, maybe executables
 * should have an .exe extension).
 */ 2 4 this 3 2936  4 type 1 2752  
277 0 0 6 341 2752 0 0 104 /**
 * Returns the type of the file represented by the filename, as previously set
 * by set_type().
 */ 1 4 this 3 2934  
278 0 0 4 342 2876 0 0 688 /**
 * Sets the flag indicating whether this is a filename pattern.  When this is
 * true, the filename is understood to be a placeholder for a numbered
 * sequence of filename, such as an image sequence.  In this case, a sequence
 * of one or more hash characters ("#") should appear in the filename string;
 * these characters will be filled in with the corresponding number (or more)
 * of digits representing the sequence number.  Sequence numbers always begin
 * counting at 0.
 *
 * When this is true, methods like has_hash() and get_hash_to_end() and
 * get_filename_index() may be called.  Methods like is_exists() will
 * implicitly test for existance of filename sequence 0.
 */ 2 4 this 3 2936  7 pattern 1 2737  
279 0 0 6 343 2737 0 0 97 /**
 * Returns the flag indicating whether this is a filename pattern.  See
 * set_pattern().
 */ 1 4 this 3 2934  
280 0 0 6 344 2737 0 0 354 /**
 * Returns true if the filename is indicated to be a filename pattern (that
 * is, set_pattern(true) was called), and the filename pattern did include a
 * sequence of hash marks, or false if it was not a filename pattern or did
 * not include hash marks.  If this is true, then get_filename_index() will
 * return a different filename each time.
 */ 1 4 this 3 2934  
281 0 0 7 345 2936 1694 0 0 2 4 this 3 2934  5 index 1 2738  
282 0 0 6 346 2872 0 0 130 /**
 * Returns the part of the filename beginning at the hash sequence (if any),
 * and continuing to the end of the filename.
 */ 1 4 this 3 2934  
283 0 0 4 347 2876 0 0 0 2 4 this 3 2936  1 s 1 2872  
284 0 0 4 348 2876 0 0 0 2 4 this 3 2934  10 components 1 2937  
285 0 0 4 349 2876 0 0 0 1 4 this 3 2936  
286 0 0 6 350 2737 0 0 146 /**
 * Returns true if the filename is local, e.g.  does not begin with a slash,
 * or false if the filename is fully specified from the root.
 */ 1 4 this 3 2934  
287 0 0 6 351 2737 0 0 444 /**
 * Returns true if the filename is fully qualified, e.g.  begins with a slash.
 * This is almost, but not quite, the same thing as !is_local().  It's not
 * exactly the same because a special case is made for filenames that begin
 * with a single dot followed by a slash--these are considered to be fully
 * qualified (they are explicitly relative to the current directory, and do
 * not refer to a filename on a search path somewhere).
 */ 1 4 this 3 2934  
288 0 0 4 352 2876 0 0 0 1 4 this 3 2936  
289 0 0 4 352 2876 0 0 0 2 4 this 3 2936  15 start_directory 1 2934  
290 0 0 6 353 2737 0 0 0 1 4 this 3 2936  
291 0 0 6 354 2737 0 0 0 1 4 this 3 2936  
292 0 0 6 355 2872 0 0 0 1 4 this 3 2934  
293 0 0 6 356 2872 0 0 0 1 4 this 3 2934  
294 0 0 6 357 2872 0 0 0 1 4 this 3 2934  
295 0 0 6 358 2872 0 0 0 1 4 this 3 2934  
296 0 0 6 359 2872 0 0 0 1 4 this 3 2934  
297 0 0 6 360 2737 0 0 0 1 4 this 3 2934  
298 0 0 6 361 2737 0 0 0 1 4 this 3 2934  
299 0 0 6 362 2737 0 0 0 1 4 this 3 2934  
300 0 0 6 363 2737 0 0 0 1 4 this 3 2934  
301 0 0 6 364 2737 0 0 0 1 4 this 3 2934  
302 0 0 6 365 2738 0 0 0 4 4 this 3 2934  5 other 1 2934  19 this_missing_is_old 1 2737  20 other_missing_is_old 1 2737  
303 0 0 6 366 2940 0 0 0 1 4 this 3 2934  
304 0 0 6 367 2940 0 0 0 1 4 this 3 2934  
305 0 0 6 368 2942 0 0 0 1 4 this 3 2934  
306 0 0 6 369 2737 0 0 0 3 4 this 3 2936  10 searchpath 1 2943  17 default_extension 1 2872  
307 0 0 6 370 2737 0 0 0 3 4 this 3 2936  9 directory 1 2936  13 allow_backups 1 2737  
308 0 0 6 371 2738 0 0 0 2 4 this 3 2936  10 searchpath 1 2943  
309 0 0 6 372 2868 0 0 0 1 4 this 3 2934  
310 0 0 6 372 2737 0 0 0 2 4 this 3 2934  8 contents 1 2937  
311 0 0 6 373 2737 0 0 0 2 4 this 3 2934  6 stream 1 2944  
312 0 0 6 373 2737 0 0 0 2 4 this 3 2934  6 stream 1 2945  
313 0 0 6 374 2737 0 0 0 3 4 this 3 2934  6 stream 1 2947  8 truncate 1 2737  
314 0 0 6 374 2737 0 0 0 3 4 this 3 2934  6 stream 1 2948  8 truncate 1 2737  
315 0 0 6 375 2737 0 0 0 2 4 this 3 2934  6 stream 1 2947  
316 0 0 6 375 2737 0 0 0 2 4 this 3 2934  6 stream 1 2948  
317 0 0 6 376 2737 0 0 0 3 4 this 3 2934  6 stream 1 2950  8 truncate 1 2737  
318 0 0 6 376 2737 0 0 0 3 4 this 3 2934  6 stream 1 2951  8 truncate 1 2737  
319 0 0 6 377 2737 0 0 0 2 4 this 3 2934  6 stream 1 2950  
320 0 0 6 377 2737 0 0 0 2 4 this 3 2934  6 stream 1 2951  
321 0 0 6 378 2737 0 0 0 1 4 this 3 2934  
322 0 0 6 379 2737 0 0 0 1 4 this 3 2934  
323 0 0 6 380 2737 0 0 0 1 4 this 3 2934  
324 0 0 6 381 2737 0 0 0 2 4 this 3 2934  5 other 1 2934  
325 0 0 6 382 2737 0 0 0 2 4 this 3 2934  5 other 1 2934  
326 0 0 6 383 2737 0 0 0 1 4 this 3 2934  
327 0 0 6 384 2737 0 0 0 1 4 this 3 2934  
328 0 0 6 385 2737 0 0 0 1 4 this 3 2934  
329 0 0 6 386 2737 0 0 34 // Comparison operators are handy. 2 4 this 3 2934  5 other 1 2872  
330 0 0 6 387 2737 0 0 0 2 4 this 3 2934  5 other 1 2872  
331 0 0 6 388 2737 0 0 0 2 4 this 3 2934  5 other 1 2872  
332 0 0 6 389 2738 0 0 10 /**
 *
 */ 2 4 this 3 2934  5 other 1 2934  
333 0 0 6 390 2737 0 0 349 /**
 * Returns true if the Filename is valid (not empty), or false if it is an
 * empty string.
 *
 * This implements the Python equivalent to operator bool.  Defining an actual
 * operator bool method for C++ use would work too, but it seems to cause too
 * many ambiguities for the C++ compiler, so we use this Python-only approach
 * instead.
 */ 1 4 this 3 2934  
334 0 0 6 391 2738 0 0 0 1 4 this 3 2934  
335 0 0 4 392 2876 0 0 10 /**
 *
 */ 2 4 this 3 2934  3 out 1 2790  
336 0 0 4 393 2876 0 0 266 /**
 * Specifies the default encoding to be used for all subsequent Filenames.
 * This is used to represent wide-character (Unicode) filenames internally.
 * On non-Windows-based systems, the encoded filename is also passed to the
 * underlying operating system.
 */ 1 8 encoding 1 2805  
337 0 0 6 394 2805 0 0 125 /**
 * Specifies the default encoding to be used for all subsequent Filenames
 * objects.  See set_filesystem_encoding().
 */ 0 
338 0 0 7 395 2953 2191 0 0 0 
339 0 0 6 311 2872 0 0 60 // And retrieval is by any of the classic string operations. 1 4 this 3 2934  
340 0 0 7 402 2956 1708 0 0 1 6 param0 0 2954  
341 0 0 7 402 2956 1708 0 10 /**
 *
 */ 1 4 name 1 2872  
342 0 0 7 402 2956 1708 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2738  11 description 1 2872  5 flags 1 2738  
343 0 0 7 402 2956 1708 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
344 0 0 6 403 2956 0 0 0 2 4 this 3 2956  5 value 1 2738  
345 0 0 6 405 2882 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2954  
346 0 0 6 406 2738 0 0 0 2 4 this 3 2954  1 n 1 2882  
347 0 0 4 407 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2956  5 value 1 2738  
348 0 0 6 408 2738 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2954  
349 0 0 6 409 2738 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2954  
350 0 0 6 412 2738 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2954  1 n 1 2882  
351 0 0 4 413 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2956  1 n 1 2882  5 value 1 2738  
352 0 0 6 404 2738 0 0 0 1 4 this 3 2954  
353 0 0 7 416 2959 1719 0 0 1 6 param0 0 2957  
354 0 0 7 416 2959 1719 0 10 /**
 *
 */ 1 4 name 1 2872  
355 0 0 7 416 2959 1719 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2755  11 description 1 2872  5 flags 1 2738  
356 0 0 7 416 2959 1719 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
357 0 0 6 417 2959 0 0 0 2 4 this 3 2959  5 value 1 2755  
358 0 0 6 419 2882 0 0 62 /**
 * Returns the number of unique words in the variable.
 */ 1 4 this 3 2957  
359 0 0 6 420 2755 0 0 0 2 4 this 3 2957  1 n 1 2882  
360 0 0 4 421 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2959  5 value 1 2755  
361 0 0 6 422 2755 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2957  
362 0 0 6 423 2755 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2957  
363 0 0 6 428 2755 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2957  1 n 1 2882  
364 0 0 4 429 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2959  1 n 1 2882  5 value 1 2755  
365 0 0 6 418 2755 0 0 0 1 4 this 3 2957  
366 0 0 7 432 2962 1721 0 0 1 6 param0 0 2960  
367 0 0 7 432 2962 1721 0 10 /**
 *
 */ 3 4 name 1 2872  11 description 1 2872  5 flags 1 2738  
368 0 0 6 434 2882 0 0 56 /**
 * Returns the number of values in the variable.
 */ 1 4 this 3 2960  
369 0 0 6 435 2872 0 0 49 /**
 * Returns the nth value of the variable.
 */ 2 4 this 3 2960  1 n 1 2882  
370 0 0 6 436 2882 0 0 63 /**
 * Returns the number of unique values in the variable.
 */ 1 4 this 3 2960  
371 0 0 6 437 2872 0 0 56 /**
 * Returns the nth unique value of the variable.
 */ 2 4 this 3 2960  1 n 1 2882  
372 0 0 6 438 2882 0 0 63 /**
 * Returns the number of unique values of the variable.
 */ 1 4 this 3 2960  
373 0 0 6 439 2872 0 0 0 2 4 this 3 2960  1 n 1 2882  
374 0 0 4 440 2876 0 0 0 2 4 this 3 2960  3 out 1 2790  
375 0 0 4 441 2876 0 0 0 2 4 this 3 2960  3 out 1 2790  
376 0 0 6 443 2740 0 0 0 2 4 this 3 2963  4 name 1 2872  
377 0 0 6 444 2740 0 0 0 6 4 this 3 2963  7 pattern 1 2872  4 type 1 2730  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
378 0 0 6 445 2882 0 0 81 /**
 * Returns the current number of active ConfigVariableCores in the world.
 */ 1 4 this 3 2964  
379 0 0 6 446 2740 0 0 66 /**
 * Returns the nth active ConfigVariableCore in the world.
 */ 2 4 this 3 2964  1 n 1 2882  
380 0 0 6 448 2872 0 0 0 2 4 this 3 2964  1 n 1 2882  
381 0 0 6 449 2737 0 0 0 2 4 this 3 2964  1 n 1 2882  
382 0 0 4 451 2876 0 0 0 2 4 this 3 2964  3 out 1 2790  
383 0 0 4 452 2876 0 0 0 2 4 this 3 2964  3 out 1 2790  
384 0 0 4 453 2876 0 0 0 2 4 this 3 2964  3 out 1 2790  
385 0 0 4 454 2876 0 0 0 1 4 this 3 2964  
386 0 0 4 455 2876 0 0 0 1 4 this 3 2964  
387 0 0 4 456 2876 0 0 0 1 4 this 3 2964  
388 0 0 6 457 2963 0 0 0 0 
389 0 0 7 459 2968 1744 0 0 1 6 param0 0 2966  
390 0 0 7 459 2968 1744 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2943  11 description 1 2872  5 flags 1 2738  
391 0 0 7 459 2968 1744 0 10 /**
 *
 */ 3 4 name 1 2872  11 description 1 2872  5 flags 1 2738  
392 0 0 7 459 2968 1744 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
393 0 0 6 462 2943 0 0 10 /**
 *
 */ 1 4 this 3 2966  
394 0 0 6 463 2943 0 0 10 /**
 *
 */ 1 4 this 3 2966  
395 0 0 6 498 2737 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 2968  
396 0 0 4 499 2876 0 0 113 /**
 * Removes all the directories locally added to the search list, and restores
 * it to its original form.
 */ 1 4 this 3 2968  
397 0 0 4 500 2876 0 0 62 /**
 * Adds a new directory to the end of the search list.
 */ 2 4 this 3 2968  9 directory 1 2934  
398 0 0 4 501 2876 0 0 64 /**
 * Adds a new directory to the front of the search list.
 */ 2 4 this 3 2968  9 directory 1 2934  
399 0 0 4 502 2876 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 2 4 this 3 2968  4 path 1 2943  
400 0 0 4 502 2876 0 0 98 /**
 * Adds all of the directories listed in the search path to the end of the
 * search list.
 */ 3 4 this 3 2968  4 path 1 2872  9 separator 1 2872  
401 0 0 4 503 2876 0 0 104 /**
 * Adds all of the directories listed in the search path to the beginning of
 * the search list.
 */ 2 4 this 3 2968  4 path 1 2943  
402 0 0 6 504 2737 0 0 69 /**
 * Returns true if the search list is empty, false otherwise.
 */ 1 4 this 3 2966  
403 0 0 6 505 2882 0 0 64 /**
 * Returns the number of directories on the search list.
 */ 1 4 this 3 2966  
404 0 0 6 506 2934 0 0 56 /**
 * Returns the nth directory on the search list.
 */ 2 4 this 3 2966  1 n 1 2882  
405 0 0 7 509 2936 1694 0 197 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Returns the full matching pathname of the first match if found, or
 * the empty string if not found.
 */ 2 4 this 3 2966  8 filename 1 2934  
406 0 0 7 510 2969 1750 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 2966  8 filename 1 2934  
407 0 0 6 510 2882 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 3 4 this 3 2966  8 filename 1 2934  7 results 1 2969  
408 0 0 4 511 2876 0 0 10 /**
 *
 */ 2 4 this 3 2966  3 out 1 2790  
409 0 0 4 512 2876 0 0 10 /**
 *
 */ 2 4 this 3 2966  3 out 1 2790  
410 0 0 6 461 2943 0 0 0 1 4 this 3 2966  
411 0 0 7 478 2918 1760 0 0 0 
412 0 0 7 478 2918 1760 0 0 1 4 copy 1 2943  
413 0 0 7 478 2918 1760 0 0 1 9 directory 1 2934  
414 0 0 7 478 2918 1760 0 0 2 4 path 1 2872  9 separator 1 2872  
415 0 0 6 479 2918 0 0 0 2 4 this 3 2918  4 copy 1 2943  
416 0 0 4 481 2876 0 0 0 1 4 this 3 2918  
417 0 0 4 482 2876 0 0 0 2 4 this 3 2918  9 directory 1 2934  
418 0 0 4 483 2876 0 0 0 2 4 this 3 2918  9 directory 1 2934  
419 0 0 4 484 2876 0 0 0 2 4 this 3 2918  4 path 1 2943  
420 0 0 4 484 2876 0 0 0 3 4 this 3 2918  4 path 1 2872  9 separator 1 2872  
421 0 0 4 485 2876 0 0 0 2 4 this 3 2918  4 path 1 2943  
422 0 0 6 486 2737 0 0 0 1 4 this 3 2943  
423 0 0 6 487 2882 0 0 0 1 4 this 3 2943  
424 0 0 6 488 2934 0 0 0 2 4 this 3 2943  1 n 1 2882  
425 0 0 7 492 2936 1694 0 0 2 4 this 3 2943  8 filename 1 2934  
426 0 0 7 493 2969 1750 0 184 /**
 * This variant of find_all_files() returns the new Results object, instead of
 * filling on in on the parameter list.  This is a little more convenient to
 * call from Python.
 */ 2 4 this 3 2943  8 filename 1 2934  
427 0 0 6 493 2882 0 0 0 3 4 this 3 2943  8 filename 1 2934  7 results 1 2969  
428 0 0 7 494 2936 1694 0 251 /**
 * A quick-and-easy way to search a searchpath for a file when you don't feel
 * like building or keeping around a DSearchPath object.  This simply
 * constructs a temporary DSearchPath based on the indicated path string, and
 * searches that.
 */ 3 8 filename 1 2934  4 path 1 2872  9 separator 1 2872  
429 0 0 4 495 2876 0 0 0 3 4 this 3 2943  3 out 1 2790  9 separator 1 2872  
430 0 0 4 496 2876 0 0 0 3 4 this 3 2943  3 out 1 2790  12 indent_level 1 2738  
431 0 0 7 468 2969 1750 0 0 0 
432 0 0 7 468 2969 1750 0 0 1 4 copy 1 2970  
433 0 0 6 469 2969 0 0 0 2 4 this 3 2969  4 copy 1 2970  
434 0 0 4 471 2876 0 0 0 1 4 this 3 2969  
435 0 0 6 472 2882 0 0 0 1 4 this 3 2970  
436 0 0 6 473 2934 0 0 0 2 4 this 3 2970  1 n 1 2882  
437 0 0 7 474 2936 1694 0 0 2 4 this 3 2970  1 n 1 2882  
438 0 0 6 475 2882 0 0 136 /**
 * Returns the num of filenames in the set.  This method is defined to make
 * the Results object appear to be a list in Python.
 */ 1 4 this 3 2970  
439 0 0 4 476 2876 0 0 0 2 4 this 3 2970  3 out 1 2790  
440 0 0 4 477 2876 0 0 0 3 4 this 3 2970  3 out 1 2790  12 indent_level 1 2738  
441 0 0 7 514 2974 1802 0 0 1 6 param0 0 2972  
442 0 0 7 514 2974 1802 0 10 /**
 *
 */ 1 4 name 1 2872  
443 0 0 7 514 2974 1802 0 10 /**
 *
 */ 4 4 name 1 2872  13 default_value 1 2872  11 description 1 2872  5 flags 1 2738  
444 0 0 6 515 2974 0 0 0 2 4 this 3 2974  5 value 1 2872  
445 0 0 6 517 2872 0 0 76 // These methods help the ConfigVariableString act like a C++ string object. 1 4 this 3 2972  
446 0 0 6 518 2737 0 0 10 /**
 *
 */ 1 4 this 3 2972  
447 0 0 6 519 2882 0 0 10 /**
 *
 */ 1 4 this 3 2972  
448 0 0 6 520 2935 0 0 0 2 4 this 3 2972  1 n 1 2882  
449 0 0 6 521 2737 0 0 34 // Comparison operators are handy. 2 4 this 3 2972  5 other 1 2872  
450 0 0 6 522 2737 0 0 0 2 4 this 3 2972  5 other 1 2872  
451 0 0 6 523 2737 0 0 0 2 4 this 3 2972  5 other 1 2872  
452 0 0 4 524 2876 0 0 48 /**
 * Reassigns the variable's local value.
 */ 2 4 this 3 2974  5 value 1 2872  
453 0 0 6 525 2872 0 0 40 /**
 * Returns the variable's value.
 */ 1 4 this 3 2972  
454 0 0 6 526 2872 0 0 48 /**
 * Returns the variable's default value.
 */ 1 4 this 3 2972  
455 0 0 6 529 2872 0 0 44 /**
 * Returns the variable's nth value.
 */ 2 4 this 3 2972  1 n 1 2882  
456 0 0 4 530 2876 0 0 107 /**
 * Reassigns the variable's nth value.  This makes a local copy of the
 * variable's overall value.
 */ 3 4 this 3 2974  1 n 1 2882  5 value 1 2872  
457 0 0 6 516 2872 0 0 0 1 4 this 3 2972  
458 0 0 7 538 2975 1809 0 0 0 
459 0 0 7 538 2975 1809 0 0 1 6 param0 0 2976  
460 0 0 6 533 2737 0 0 0 2 3 sym 1 2872  3 def 1 2737  
461 0 0 6 534 2738 0 0 0 2 3 sym 1 2872  3 def 1 2738  
462 0 0 6 535 2854 0 0 0 2 3 sym 1 2872  3 def 1 2854  
463 0 0 6 536 2749 0 0 0 2 3 sym 1 2872  3 def 1 2749  
464 0 0 6 537 2872 0 0 0 2 3 sym 1 2872  3 def 1 2872  
465 0 0 7 554 2980 1824 0 0 1 6 param0 0 2978  
466 0 0 6 541 2737 0 0 73 /**
 * Returns true if the indicated environment variable is defined.
 */ 1 3 var 1 2872  
467 0 0 6 542 2872 0 0 125 /**
 * Returns the definition of the indicated environment variable, or the empty
 * string if the variable is undefined.
 */ 1 3 var 1 2872  
468 0 0 4 543 2876 0 0 72 /**
 * Changes the definition of the indicated environment variable.
 */ 2 3 var 1 2872  5 value 1 2872  
469 0 0 4 544 2876 0 0 269 /**
 * Changes the apparent definition of the indicated environment variable by
 * masking it within this class with a new value.  This does not change the
 * actual environment variable, but future calls to get_environment_variable()
 * will return this new value.
 */ 2 3 var 1 2872  5 value 1 2872  
470 0 0 4 545 2876 0 0 140 /**
 * Removes a value set by a previous call to shadow_environment_variable(),
 * and lets the actual value of the variable show again.
 */ 1 3 var 1 2872  
471 0 0 6 546 2872 0 0 0 1 3 str 1 2872  
472 0 0 6 547 2882 0 0 106 /**
 * Returns the number of command-line arguments available, not counting arg 0,
 * the binary name.
 */ 0 
473 0 0 6 548 2872 0 0 194 /**
 * Returns the nth command-line argument.  The index n must be in the range [0
 * .. get_num_args()).  The first parameter, n == 0, is the first actual
 * parameter, not the binary name.
 */ 1 1 n 1 2882  
474 0 0 6 549 2872 0 0 107 /**
 * Returns the name of the binary executable that started this program, if it
 * can be determined.
 */ 0 
475 0 0 6 550 2872 0 0 105 /**
 * Returns the name of the libdtool DLL that is used in this program, if it
 * can be determined.
 */ 0 
476 0 0 4 551 2876 0 0 22 /**
 * Do not use.
 */ 1 4 name 1 2872  
477 0 0 4 552 2876 0 0 22 /**
 * Do not use.
 */ 1 4 name 1 2872  
478 0 0 7 553 2936 1694 0 0 0 
479 0 0 7 588 2981 1850 0 10 /**
 *
 */ 0 
480 0 0 7 588 2981 1850 0 10 /**
 *
 */ 2 8 filename 1 2872  4 mode 1 2773  
481 0 0 4 590 2876 0 0 10 /**
 *
 */ 3 4 this 3 2981  8 filename 1 2872  4 mode 1 2773  
482 0 0 4 591 2876 0 0 10 /**
 *
 */ 1 4 this 3 2981  
483 0 0 4 586 2876 0 0 0 1 4 this 3 2802  
484 0 0 6 575 2780 0 0 0 1 4 this 3 2802  
485 0 0 6 576 2802 0 0 0 1 4 this 3 2780  
486 0 0 6 571 2738 0 0 0 1 4 this 3 2780  
487 0 0 6 572 2982 0 0 0 1 4 this 3 2780  
488 0 0 4 573 2876 0 0 0 2 4 this 3 2780  3 pos 1 2982  
489 0 0 4 573 2876 0 0 0 3 4 this 3 2780  3 off 1 2982  3 dir 1 2772  
490 0 0 6 570 2983 0 0 0 1 4 this 3 2780  
491 0 0 6 584 2790 0 0 0 1 4 this 3 2802  
492 0 0 6 585 2802 0 0 0 1 4 this 3 2790  
493 0 0 4 579 2876 0 0 0 2 4 this 3 2790  1 c 1 2935  
494 0 0 4 580 2876 0 0 0 1 4 this 3 2790  
495 0 0 6 581 2982 0 0 0 1 4 this 3 2790  
496 0 0 4 582 2876 0 0 0 2 4 this 3 2790  3 pos 1 2982  
497 0 0 4 582 2876 0 0 0 3 4 this 3 2790  3 off 1 2982  3 dir 1 2772  
498 0 0 6 578 2983 0 0 0 1 4 this 3 2790  
499 0 0 6 564 2737 0 0 0 1 4 this 3 2984  
500 0 0 6 565 2737 0 0 0 1 4 this 3 2984  
501 0 0 6 566 2737 0 0 0 1 4 this 3 2984  
502 0 0 6 567 2737 0 0 0 1 4 this 3 2984  
503 0 0 4 568 2876 0 0 0 1 4 this 3 2983  
504 0 0 7 593 2988 1869 0 10 /**
 *
 */ 1 4 copy 1 2986  
505 0 0 7 593 2988 1869 0 10 /**
 *
 */ 1 7 pattern 1 2872  
506 0 0 6 594 2988 0 0 0 2 4 this 3 2988  4 copy 1 2986  
507 0 0 6 595 2737 0 0 0 2 4 this 3 2986  5 other 1 2986  
508 0 0 6 596 2737 0 0 0 2 4 this 3 2986  5 other 1 2986  
509 0 0 6 597 2737 0 0 0 2 4 this 3 2986  5 other 1 2986  
510 0 0 4 598 2876 0 0 74 /**
 * Changes the pattern string that the GlobPattern object matches.
 */ 2 4 this 3 2988  7 pattern 1 2872  
511 0 0 6 599 2872 0 0 74 /**
 * Returns the pattern string that the GlobPattern object matches.
 */ 1 4 this 3 2986  
512 0 0 4 601 2876 0 0 122 /**
 * Sets whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */ 2 4 this 3 2988  14 case_sensitive 1 2737  
513 0 0 6 602 2737 0 0 125 /**
 * Returns whether the match is case sensitive (true) or case insensitive
 * (false).  The default is case sensitive.
 */ 1 4 this 3 2986  
514 0 0 4 604 2876 0 0 72 /**
 * Specifies a set of characters that are not matched by * or ?.
 */ 2 4 this 3 2988  13 nomatch_chars 1 2872  
515 0 0 6 605 2872 0 0 72 /**
 * Returns the set of characters that are not matched by * or ?.
 */ 1 4 this 3 2986  
516 0 0 6 607 2737 0 0 85 /**
 * Returns true if the candidate string matches the pattern, false otherwise.
 */ 2 4 this 3 2986  9 candidate 1 2872  
517 0 0 4 608 2876 0 0 10 /**
 *
 */ 2 4 this 3 2986  3 out 1 2790  
518 0 0 6 609 2737 0 0 0 1 4 this 3 2986  
519 0 0 6 610 2872 0 0 0 1 4 this 3 2986  
520 0 0 6 611 2868 0 0 0 2 4 this 3 2986  3 cwd 1 2934  
521 0 0 6 611 2738 0 0 0 3 4 this 3 2986  7 results 1 2937  3 cwd 1 2934  
522 0 0 7 614 2989 1876 0 10 /**
 *
 */ 0 
523 0 0 7 614 2989 1876 0 10 /**
 *
 */ 3 6 source 1 2780  11 owns_source 1 2737  8 password 1 2872  
524 0 0 6 615 2989 0 0 10 /**
 *
 */ 4 4 this 3 2989  6 source 1 2780  11 owns_source 1 2737  8 password 1 2872  
525 0 0 6 616 2989 0 0 124 /**
 * Resets the EncryptStream to empty, but does not actually close the source
 * istream unless owns_source was true.
 */ 1 4 this 3 2989  
526 0 0 6 617 2872 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 2990  
527 0 0 6 618 2738 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 2990  
528 0 0 6 619 2738 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 2990  
529 0 0 7 625 2992 1878 0 10 /**
 *
 */ 0 
530 0 0 7 625 2992 1878 0 10 /**
 *
 */ 2 8 filename 1 2872  4 mode 1 2773  
531 0 0 4 627 2876 0 0 10 /**
 *
 */ 3 4 this 3 2992  8 filename 1 2872  4 mode 1 2773  
532 0 0 4 628 2876 0 0 10 /**
 *
 */ 1 4 this 3 2992  
533 0 0 7 636 2995 1887 0 0 1 6 param0 0 2993  
534 0 0 7 636 2995 1887 0 10 /**
 *
 */ 1 6 stream 1 2780  
535 0 0 6 638 2780 0 0 55 /**
 * Returns the istream this object is wrapping.
 */ 1 4 this 3 2993  
536 0 0 6 635 2996 0 0 0 1 4 this 3 2995  
537 0 0 7 633 2996 1884 0 0 1 6 param0 0 2997  
538 0 0 4 631 2876 0 0 572 /**
 * Acquires the internal lock.
 *
 * User code should call this to take temporary possession of the stream and
 * perform direct I/O operations on it, for instance to make several
 * sequential atomic reads.  You may not call any of the StreamWrapper methods
 * while the lock is held, other than release().
 *
 * Use with extreme caution!  This is a very low-level, non-recursive lock.
 * You must call acquire() only once, and you must later call release()
 * exactly once.  Failing to do so may result in a hard deadlock with no
 * available debugging features.
 */ 1 4 this 3 2996  
539 0 0 4 632 2876 0 0 135 /**
 * Releases the internal lock.  Must be called exactly once following a call
 * to acquire().  See the cautions with acquire().
 */ 1 4 this 3 2996  
540 0 0 7 642 2999 1893 0 10 /**
 *
 */ 0 
541 0 0 6 643 2737 0 0 198 /**
 * Returns true if there is at least one line of text (or even a partial line)
 * available in the LineStream object.  If this returns true, the line may
 * then be retrieved via get_line().
 */ 1 4 this 3 3000  
542 0 0 6 644 2872 0 0 275 /**
 * Extracts and returns the next line (or partial line) of text available in
 * the LineStream object.  Once the line has been extracted, you may call
 * has_newline() to determine whether or not there was an explicit newline
 * character written following this line.
 */ 1 4 this 3 2999  
543 0 0 6 645 2737 0 0 206 /**
 * Returns true if the line of text most recently returned by get_line() was
 * written out with a terminating newline, or false if a newline character has
 * not yet been written to the LineStream.
 */ 1 4 this 3 3000  
544 0 0 7 651 3004 1898 0 0 1 6 param0 0 3002  
545 0 0 6 648 2882 0 0 110 /**
 * Returns the total number of bytes consumed by all the pages allocated
 * internally by this object.
 */ 0 
546 0 0 6 649 2882 0 0 114 /**
 * Returns the total number of bytes requested by the application in calls to
 * NeverFreeMemory::alloc().
 */ 0 
547 0 0 6 650 2882 0 0 178 /**
 * Returns the difference between get_total_alloc() and get_total_used().
 * This represents bytes in allocated pages that have not (yet) been used by
 * the application.
 */ 0 
548 0 0 7 654 3005 1900 0 0 0 
549 0 0 7 654 3005 1900 0 0 1 6 param0 0 3006  
550 0 0 4 656 2876 0 0 0 3 4 this 3 3005  11 ostream_ptr 1 2790  12 delete_later 1 2737  
551 0 0 6 657 2790 0 0 0 1 4 this 3 3006  
552 0 0 4 659 2876 0 0 0 1 4 this 3 3005  
553 0 0 6 660 2737 0 0 0 1 4 this 3 3006  
554 0 0 4 661 2876 0 0 0 1 4 this 3 3006  
555 0 0 6 662 2737 0 0 637 /**
 * Returns true if an assertion test has failed (and not been ignored) since
 * the last call to clear_assert_failed().
 *
 * When an assertion test fails, the assert handler may decide either to
 * abort, return, or ignore the assertion.  Naturally, if it decides to abort,
 * this flag is irrelevant.  If it chooses to ignore the assertion, the flag
 * is not set.  However, if the assert handler chooses to return out of the
 * function (the normal case), it will also set this flag to indicate that an
 * assertion failure has occurred.
 *
 * This will also be the behavior in the absence of a user-defined assert
 * handler.
 */ 1 4 this 3 3006  
556 0 0 6 663 2872 0 0 100 /**
 * Returns the error message that corresponds to the assertion that most
 * recently failed.
 */ 1 4 this 3 3006  
557 0 0 4 664 2876 0 0 114 /**
 * Resets the assert_failed flag that is set whenever an assertion test fails.
 * See has_assert_failed().
 */ 1 4 this 3 3005  
558 0 0 6 665 2786 0 0 0 1 4 this 3 3005  
559 0 0 6 666 2786 0 0 0 2 4 this 3 3005  8 fullname 1 2872  
560 0 0 6 666 2786 0 0 0 3 4 this 3 3005  8 basename 1 2872  15 parent_category 1 2786  
561 0 0 6 666 2786 0 0 0 3 4 this 3 3005  8 basename 1 2872  15 parent_fullname 1 2872  
562 0 0 6 667 2790 0 0 0 0 
563 0 0 6 668 2790 0 0 0 0 
564 0 0 4 669 2876 0 0 0 1 3 str 1 2872  
565 0 0 6 670 3005 0 0 0 0 
566 0 0 7 704 2786 1942 0 0 1 6 param0 0 3008  
567 0 0 6 676 2872 0 0 10 /**
 *
 */ 1 4 this 3 3008  
568 0 0 6 677 2872 0 0 10 /**
 *
 */ 1 4 this 3 3008  
569 0 0 6 678 2785 0 0 10 /**
 *
 */ 1 4 this 3 3008  
570 0 0 4 679 2876 0 0 150 /**
 * Sets the severity level of messages that will be reported from this
 * Category.  This allows any message of this severity level or higher.
 */ 2 4 this 3 2786  8 severity 1 2785  
571 0 0 6 684 2737 0 0 110 /**
 * Returns true if messages of the indicated severity level ought to be
 * reported for this Category.
 */ 2 4 this 3 3008  8 severity 1 2785  
572 0 0 6 685 2737 0 0 51 /**
 * A shorthand way to write is_on(NS_spam).
 */ 1 4 this 3 3008  
573 0 0 6 686 2737 0 0 52 /**
 * A shorthand way to write is_on(NS_debug).
 */ 1 4 this 3 3008  
574 0 0 6 687 2737 0 0 51 /**
 * A shorthand way to write is_on(NS_info).
 */ 1 4 this 3 3008  
575 0 0 6 688 2737 0 0 54 /**
 * A shorthand way to write is_on(NS_warning).
 */ 1 4 this 3 3008  
576 0 0 6 689 2737 0 0 52 /**
 * A shorthand way to write is_on(NS_error).
 */ 1 4 this 3 3008  
577 0 0 6 690 2737 0 0 52 /**
 * A shorthand way to write is_on(NS_fatal).
 */ 1 4 this 3 3008  
578 0 0 6 691 2790 0 0 0 3 4 this 3 3008  8 severity 1 2785  6 prefix 1 2737  
579 0 0 6 692 2790 0 0 49 /**
 * A shorthand way to write out(NS_spam).
 */ 2 4 this 3 3008  6 prefix 1 2737  
580 0 0 6 693 2790 0 0 50 /**
 * A shorthand way to write out(NS_debug).
 */ 2 4 this 3 3008  6 prefix 1 2737  
581 0 0 6 694 2790 0 0 49 /**
 * A shorthand way to write out(NS_info).
 */ 2 4 this 3 3008  6 prefix 1 2737  
582 0 0 6 695 2790 0 0 52 /**
 * A shorthand way to write out(NS_warning).
 */ 2 4 this 3 3008  6 prefix 1 2737  
583 0 0 6 696 2790 0 0 50 /**
 * A shorthand way to write out(NS_error).
 */ 2 4 this 3 3008  6 prefix 1 2737  
584 0 0 6 697 2790 0 0 50 /**
 * A shorthand way to write out(NS_fatal).
 */ 2 4 this 3 3008  6 prefix 1 2737  
585 0 0 6 698 2882 0 0 0 1 4 this 3 3008  
586 0 0 6 699 2786 0 0 0 2 4 this 3 3008  1 i 1 2882  
587 0 0 4 703 2876 0 0 0 1 5 delta 1 2941  
588 0 0 6 672 3010 0 0 0 1 4 this 3 2786  
589 0 0 6 673 2786 0 0 0 1 4 this 3 3010  
590 0 0 6 674 2908 0 0 0 1 4 this 3 2786  
591 0 0 6 675 2786 0 0 0 1 4 this 3 2908  
592 0 0 7 707 3011 1952 0 10 /**
 *
 */ 0 
593 0 0 7 707 3011 1952 0 10 /**
 *
 */ 3 4 dest 1 2790  9 owns_dest 1 2737  8 password 1 2872  
594 0 0 6 708 3011 0 0 10 /**
 *
 */ 4 4 this 3 3011  4 dest 1 2790  9 owns_dest 1 2737  8 password 1 2872  
595 0 0 6 709 3011 0 0 120 /**
 * Resets the EncryptStream to empty, but does not actually close the dest
 * ostream unless owns_dest was true.
 */ 1 4 this 3 3011  
596 0 0 4 710 2876 0 0 383 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * open().  The default is whatever is specified by the encryption-algorithm
 * config variable.  The complete set of available algorithms is defined by
 * the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but open() will fail.
 */ 2 4 this 3 3011  9 algorithm 1 2872  
597 0 0 4 711 2876 0 0 347 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to open().  The default is whatever is specified
 * by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but open() will fail.
 */ 2 4 this 3 3011  10 key_length 1 2738  
598 0 0 4 712 2876 0 0 495 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to open().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the encryption-iteration-count
 * config variable.
 */ 2 4 this 3 3011  15 iteration_count 1 2738  
599 0 0 6 714 2872 0 0 74 /**
 * Returns the encryption algorithm that was read from the stream.
 */ 1 4 this 3 3012  
600 0 0 6 716 2738 0 0 85 /**
 * Returns the encryption key length, in bits, that was read from the stream.
 */ 1 4 this 3 3012  
601 0 0 6 718 2738 0 0 63 /**
 * Returns the value that was was read from the stream.
 */ 1 4 this 3 3012  
602 0 0 7 721 3014 1954 0 10 /**
 *
 */ 0 
603 0 0 7 721 3014 1954 0 10 /**
 *
 */ 2 8 filename 1 2872  4 mode 1 2773  
604 0 0 4 723 2876 0 0 10 /**
 *
 */ 3 4 this 3 3014  8 filename 1 2872  4 mode 1 2773  
605 0 0 4 724 2876 0 0 10 /**
 *
 */ 1 4 this 3 3014  
606 0 0 7 727 3017 1959 0 0 1 6 param0 0 3015  
607 0 0 7 727 3017 1959 0 10 /**
 *
 */ 1 6 stream 1 2790  
608 0 0 6 729 2790 0 0 55 /**
 * Returns the ostream this object is wrapping.
 */ 1 4 this 3 3015  
609 0 0 6 726 2996 0 0 0 1 4 this 3 3017  
610 0 0 7 734 3018 1978 0 0 1 4 copy 1 2866  
611 0 0 7 734 3018 1978 0 0 1 6 source 1 2868  
612 0 0 7 734 3018 1978 0 0 1 11 type_handle 1 2953  
613 0 0 7 735 3018 1978 0 0 2 1 n 1 2871  11 type_handle 1 2953  
614 0 0 6 736 2871 0 0 0 1 4 this 3 2866  
615 0 0 4 737 2876 0 0 0 2 4 this 3 3018  1 x 1 2749  
616 0 0 4 738 2876 0 0 0 1 4 this 3 3018  
617 0 0 6 739 2749 0 0 0 2 4 this 3 2866  1 n 1 2871  
618 0 0 4 740 2876 0 0 0 3 4 this 3 3018  1 n 1 2871  5 value 1 2749  
619 0 0 6 741 2749 0 0 0 2 4 this 3 2866  1 n 1 2871  
620 0 0 4 742 2876 0 0 0 3 4 this 3 3018  1 n 1 2871  5 value 1 2749  
621 0 0 6 743 2872 0 0 0 1 4 this 3 2866  
622 0 0 4 744 2876 0 0 0 2 4 this 3 3018  4 data 1 2872  
623 0 0 6 745 2872 0 0 0 3 4 this 3 2866  1 n 1 2871  5 count 1 2871  
624 0 0 4 746 2876 0 0 0 4 4 this 3 3018  1 n 1 2871  5 count 1 2871  4 data 1 2872  
625 0 0 6 747 2738 0 0 0 1 4 this 3 2866  
626 0 0 6 748 2738 0 0 0 1 4 this 3 2866  
627 0 0 6 749 2738 0 0 0 3 4 this 3 3018  4 view 1 2873  5 flags 1 2738  
628 0 0 4 750 2876 0 0 0 2 4 this 3 2866  4 view 1 2873  
629 0 0 7 754 3019 1996 0 0 1 4 copy 1 2886  
630 0 0 7 754 3019 1996 0 0 1 6 source 1 2868  
631 0 0 7 754 3019 1996 0 0 1 11 type_handle 1 2953  
632 0 0 7 755 3019 1996 0 0 2 1 n 1 2871  11 type_handle 1 2953  
633 0 0 6 756 2871 0 0 0 1 4 this 3 2886  
634 0 0 4 757 2876 0 0 0 2 4 this 3 3019  1 x 1 2854  
635 0 0 4 758 2876 0 0 0 1 4 this 3 3019  
636 0 0 6 759 2854 0 0 0 2 4 this 3 2886  1 n 1 2871  
637 0 0 4 760 2876 0 0 0 3 4 this 3 3019  1 n 1 2871  5 value 1 2854  
638 0 0 6 761 2854 0 0 0 2 4 this 3 2886  1 n 1 2871  
639 0 0 4 762 2876 0 0 0 3 4 this 3 3019  1 n 1 2871  5 value 1 2854  
640 0 0 6 763 2872 0 0 0 1 4 this 3 2886  
641 0 0 4 764 2876 0 0 0 2 4 this 3 3019  4 data 1 2872  
642 0 0 6 765 2872 0 0 0 3 4 this 3 2886  1 n 1 2871  5 count 1 2871  
643 0 0 4 766 2876 0 0 0 4 4 this 3 3019  1 n 1 2871  5 count 1 2871  4 data 1 2872  
644 0 0 6 767 2738 0 0 0 1 4 this 3 2886  
645 0 0 6 768 2738 0 0 0 1 4 this 3 2886  
646 0 0 6 769 2738 0 0 0 3 4 this 3 3019  4 view 1 2873  5 flags 1 2738  
647 0 0 4 770 2876 0 0 0 2 4 this 3 2886  4 view 1 2873  
648 0 0 7 774 3020 2014 0 0 1 4 copy 1 2894  
649 0 0 7 774 3020 2014 0 0 1 6 source 1 2868  
650 0 0 7 774 3020 2014 0 0 1 11 type_handle 1 2953  
651 0 0 7 775 3020 2014 0 0 2 1 n 1 2871  11 type_handle 1 2953  
652 0 0 6 776 2871 0 0 0 1 4 this 3 2894  
653 0 0 4 777 2876 0 0 0 2 4 this 3 3020  1 x 1 2738  
654 0 0 4 778 2876 0 0 0 1 4 this 3 3020  
655 0 0 6 779 2738 0 0 0 2 4 this 3 2894  1 n 1 2871  
656 0 0 4 780 2876 0 0 0 3 4 this 3 3020  1 n 1 2871  5 value 1 2738  
657 0 0 6 781 2738 0 0 0 2 4 this 3 2894  1 n 1 2871  
658 0 0 4 782 2876 0 0 0 3 4 this 3 3020  1 n 1 2871  5 value 1 2738  
659 0 0 6 783 2872 0 0 0 1 4 this 3 2894  
660 0 0 4 784 2876 0 0 0 2 4 this 3 3020  4 data 1 2872  
661 0 0 6 785 2872 0 0 0 3 4 this 3 2894  1 n 1 2871  5 count 1 2871  
662 0 0 4 786 2876 0 0 0 4 4 this 3 3020  1 n 1 2871  5 count 1 2871  4 data 1 2872  
663 0 0 6 787 2738 0 0 0 1 4 this 3 2894  
664 0 0 6 788 2738 0 0 0 1 4 this 3 2894  
665 0 0 6 789 2738 0 0 0 3 4 this 3 3020  4 view 1 2873  5 flags 1 2738  
666 0 0 4 790 2876 0 0 0 2 4 this 3 2894  4 view 1 2873  
667 0 0 7 794 3021 2032 0 0 1 4 copy 1 2902  
668 0 0 7 794 3021 2032 0 0 1 6 source 1 2868  
669 0 0 7 794 3021 2032 0 0 1 11 type_handle 1 2953  
670 0 0 7 795 3021 2032 0 0 2 1 n 1 2871  11 type_handle 1 2953  
671 0 0 6 796 2871 0 0 0 1 4 this 3 2902  
672 0 0 4 797 2876 0 0 0 2 4 this 3 3021  1 x 1 2904  
673 0 0 4 798 2876 0 0 0 1 4 this 3 3021  
674 0 0 6 799 2904 0 0 0 2 4 this 3 2902  1 n 1 2871  
675 0 0 4 800 2876 0 0 0 3 4 this 3 3021  1 n 1 2871  5 value 1 2904  
676 0 0 6 801 2904 0 0 0 2 4 this 3 2902  1 n 1 2871  
677 0 0 4 802 2876 0 0 0 3 4 this 3 3021  1 n 1 2871  5 value 1 2904  
678 0 0 6 803 2872 0 0 0 1 4 this 3 2902  
679 0 0 4 804 2876 0 0 0 2 4 this 3 3021  4 data 1 2872  
680 0 0 6 805 2872 0 0 0 3 4 this 3 2902  1 n 1 2871  5 count 1 2871  
681 0 0 4 806 2876 0 0 0 4 4 this 3 3021  1 n 1 2871  5 count 1 2871  4 data 1 2872  
682 0 0 6 807 2738 0 0 0 1 4 this 3 2902  
683 0 0 6 808 2738 0 0 0 1 4 this 3 2902  
684 0 0 6 809 2738 0 0 0 3 4 this 3 3021  4 view 1 2873  5 flags 1 2738  
685 0 0 4 810 2876 0 0 0 2 4 this 3 2902  4 view 1 2873  
686 0 0 6 813 2872 0 0 0 0 
687 0 0 6 814 2872 0 0 0 0 
688 0 0 6 815 2872 0 0 0 0 
689 0 0 6 816 2872 0 0 0 0 
690 0 0 6 817 2738 0 0 0 0 
691 0 0 6 818 2738 0 0 0 0 
692 0 0 6 819 2738 0 0 0 0 
693 0 0 6 820 2737 0 0 0 0 
694 0 0 6 821 2872 0 0 0 0 
695 0 0 6 822 2872 0 0 0 0 
696 0 0 6 823 2872 0 0 0 0 
697 0 0 6 824 2872 0 0 0 0 
698 0 0 6 825 2872 0 0 0 0 
699 0 0 6 826 2737 0 0 0 2 4 this 3 3022  6 system 1 2872  
700 0 0 6 827 2882 0 0 0 1 4 this 3 3022  
701 0 0 6 828 2872 0 0 0 2 4 this 3 3022  1 n 1 2882  
702 0 0 6 831 2872 0 0 0 3 4 this 3 3022  6 system 1 2872  3 tag 1 2872  
703 0 0 4 832 2876 0 0 0 2 4 this 3 3024  6 system 1 2872  
704 0 0 4 833 2876 0 0 0 4 4 this 3 3024  6 system 1 2872  3 tag 1 2872  5 value 1 2872  
705 0 0 6 834 2737 0 0 0 2 4 this 3 3024  3 pad 1 2882  
706 0 0 4 835 2876 0 0 0 2 4 this 3 3022  3 out 1 2790  
707 0 0 4 836 2876 0 0 0 2 4 this 3 3022  3 out 1 2790  
708 0 0 6 837 3024 0 0 0 0 
709 0 0 7 838 2953 2191 0 0 0 
710 0 0 7 840 3027 2059 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 3025  
711 0 0 7 840 3027 2059 0 105 /**
 * If owns_stream is true, the stream pointer will be deleted when the
 * StreamReader destructs.
 */ 2 2 in 1 2780  11 owns_stream 1 2737  
712 0 0 6 841 3027 0 0 0 2 4 this 3 3027  4 copy 1 3025  
713 0 0 6 843 2780 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 3025  
714 0 0 6 845 2737 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 3027  
715 0 0 6 846 3028 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 3027  
716 0 0 6 847 3030 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 3027  
717 0 0 6 848 3031 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 3027  
718 0 0 6 849 3033 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 3027  
719 0 0 6 850 2755 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 3027  
720 0 0 6 851 3034 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 3027  
721 0 0 6 852 3036 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 3027  
722 0 0 6 853 3038 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 3027  
723 0 0 6 854 2854 0 0 186 /**
 * Extracts a 32-bit single-precision floating-point number.  Since this kind
 * of float is not necessarily portable across different architectures,
 * special care is required.
 */ 1 4 this 3 3027  
724 0 0 6 855 3040 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 3027  
725 0 0 6 856 3031 0 0 55 /**
 * Extracts a signed big-endian 16-bit integer.
 */ 1 4 this 3 3027  
726 0 0 6 857 3033 0 0 55 /**
 * Extracts a signed big-endian 32-bit integer.
 */ 1 4 this 3 3027  
727 0 0 6 858 2755 0 0 55 /**
 * Extracts a signed big-endian 64-bit integer.
 */ 1 4 this 3 3027  
728 0 0 6 859 3034 0 0 58 /**
 * Extracts an unsigned big-endian 16-bit integer.
 */ 1 4 this 3 3027  
729 0 0 6 860 3036 0 0 58 /**
 * Extracts an unsigned big-endian 32-bit integer.
 */ 1 4 this 3 3027  
730 0 0 6 861 3038 0 0 58 /**
 * Extracts an unsigned big-endian 64-bit integer.
 */ 1 4 this 3 3027  
731 0 0 6 862 2854 0 0 197 /**
 * Extracts a 32-bit single-precision big-endian floating-point number.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 1 4 this 3 3027  
732 0 0 6 863 3040 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 3027  
733 0 0 6 864 2872 0 0 0 1 4 this 3 3027  
734 0 0 6 865 2872 0 0 0 1 4 this 3 3027  
735 0 0 6 866 2872 0 0 0 1 4 this 3 3027  
736 0 0 6 867 2872 0 0 0 2 4 this 3 3027  4 size 1 2882  
737 0 0 4 868 2876 0 0 0 2 4 this 3 3027  4 size 1 2882  
738 0 0 6 869 2868 0 0 0 2 4 this 3 3027  4 size 1 2882  
739 0 0 6 870 2868 0 0 0 1 4 this 3 3027  
740 0 0 6 871 2868 0 0 0 1 4 this 3 3027  
741 0 0 7 877 3043 2093 0 0 1 6 param0 0 3041  
742 0 0 7 877 3043 2093 0 10 /**
 *
 */ 1 6 stream 1 2802  
743 0 0 6 879 2802 0 0 56 /**
 * Returns the iostream this object is wrapping.
 */ 1 4 this 3 3041  
744 0 0 6 873 2995 0 0 0 1 4 this 3 3043  
745 0 0 6 874 3043 0 0 0 1 4 this 3 2995  
746 0 0 6 875 3017 0 0 0 1 4 this 3 3043  
747 0 0 6 876 3043 0 0 0 1 4 this 3 3017  
748 0 0 7 883 3046 2097 0 70 /**
 * The copy constructor does not copy ownership of the stream.
 */ 1 4 copy 1 3044  
749 0 0 7 883 3046 2097 0 10 /**
 *
 */ 2 3 out 1 2790  11 owns_stream 1 2737  
750 0 0 6 884 3046 0 0 0 2 4 this 3 3046  4 copy 1 3044  
751 0 0 6 886 2790 0 0 37 /**
 * Returns the stream in use.
 */ 1 4 this 3 3044  
752 0 0 4 888 2876 0 0 46 /**
 * Adds a boolean value to the stream.
 */ 2 4 this 3 3046  5 value 1 2737  
753 0 0 4 889 2876 0 0 53 /**
 * Adds a signed 8-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3028  
754 0 0 4 890 2876 0 0 56 /**
 * Adds an unsigned 8-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3030  
755 0 0 4 891 2876 0 0 54 /**
 * Adds a signed 16-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3031  
756 0 0 4 892 2876 0 0 54 /**
 * Adds a signed 32-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3033  
757 0 0 4 893 2876 0 0 54 /**
 * Adds a signed 64-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 2755  
758 0 0 4 894 2876 0 0 57 /**
 * Adds an unsigned 16-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3034  
759 0 0 4 895 2876 0 0 57 /**
 * Adds an unsigned 32-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3036  
760 0 0 4 896 2876 0 0 57 /**
 * Adds an unsigned 64-bit integer to the stream.
 */ 2 4 this 3 3046  5 value 1 3038  
761 0 0 4 897 2876 0 0 196 /**
 * Adds a 32-bit single-precision floating-point number to the stream.  Since
 * this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 3046  5 value 1 2854  
762 0 0 4 898 2876 0 0 61 /**
 * Adds a 64-bit floating-point number to the stream.
 */ 2 4 this 3 3046  5 value 1 3040  
763 0 0 4 899 2876 0 0 71 /**
 * Adds a signed 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3031  
764 0 0 4 900 2876 0 0 71 /**
 * Adds a signed 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3033  
765 0 0 4 901 2876 0 0 71 /**
 * Adds a signed 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 2755  
766 0 0 4 902 2876 0 0 74 /**
 * Adds an unsigned 16-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3034  
767 0 0 4 903 2876 0 0 74 /**
 * Adds an unsigned 32-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3036  
768 0 0 4 904 2876 0 0 74 /**
 * Adds an unsigned 64-bit big-endian integer to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3038  
769 0 0 4 905 2876 0 0 207 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * stream.  Since this kind of float is not necessarily portable across
 * different architectures, special care is required.
 */ 2 4 this 3 3046  5 value 1 2854  
770 0 0 4 906 2876 0 0 78 /**
 * Adds a 64-bit big-endian floating-point number to the streamWriter.
 */ 2 4 this 3 3046  5 value 1 3040  
771 0 0 4 907 2876 0 0 107 /**
 * Adds a variable-length string to the stream.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 3046  3 str 1 2872  
772 0 0 4 908 2876 0 0 84 /**
 * Adds a variable-length string to the stream, using a 32-bit length field.
 */ 2 4 this 3 3046  3 str 1 2872  
773 0 0 4 909 2876 0 0 84 /**
 * Adds a variable-length string to the stream, as a NULL-terminated string.
 */ 2 4 this 3 3046  3 str 1 2872  
774 0 0 4 910 2876 0 0 236 /**
 * Adds a fixed-length string to the stream.  If the string given is less than
 * the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 3046  3 str 1 2872  4 size 1 2882  
775 0 0 4 911 2876 0 0 0 2 4 this 3 3046  4 size 1 2882  
776 0 0 4 912 2876 0 0 0 2 4 this 3 3046  4 data 1 2868  
777 0 0 4 913 2876 0 0 50 /**
 * Calls flush() on the underlying stream.
 */ 1 4 this 3 3046  
778 0 0 4 914 2876 0 0 132 /**
 * A synonym of append_data().  This is useful when assigning the StreamWriter
 * to sys.stderr and/or sys.stdout in Python.
 */ 2 4 this 3 3046  3 str 1 2872  
779 0 0 4 916 2876 0 0 0 2 4 this 3 3046  5 value 1 2738  
780 0 0 6 915 2738 0 0 0 1 4 this 3 3044  
781 0 0 7 920 3047 2165 0 10 /**
 *
 */ 0 
782 0 0 7 920 3047 2165 0 10 /**
 *
 */ 1 4 copy 1 3048  
783 0 0 4 921 2876 0 0 374 /**
 * Specifies how the string set via set_text() is to be interpreted.  The
 * default, E_iso8859, means a standard string with one-byte characters (i.e.
 * ASCII).  Other encodings are possible to take advantage of character sets
 * with more than 256 characters.
 *
 * This affects only future calls to set_text(); it does not change text that
 * was set previously.
 */ 2 4 this 3 3047  8 encoding 1 2805  
784 0 0 6 922 2805 0 0 116 /**
 * Returns the encoding by which the string set via set_text() is to be
 * interpreted.  See set_encoding().
 */ 1 4 this 3 3048  
785 0 0 4 923 2876 0 0 126 /**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */ 1 8 encoding 1 2805  
786 0 0 6 924 2805 0 0 126 /**
 * Specifies the default encoding to be used for all subsequently created
 * TextEncoder objects.  See set_encoding().
 */ 0 
787 0 0 4 925 2876 0 0 275 /**
 * Changes the text that is stored in the encoder.  The text should be encoded
 * according to the method indicated by set_encoding().  Subsequent calls to
 * get_text() will return this same string, while get_wtext() will return the
 * decoded version of the string.
 */ 2 4 this 3 3047  4 text 1 2872  
788 0 0 4 925 2876 0 0 285 /**
 * The two-parameter version of set_text() accepts an explicit encoding; the
 * text is immediately decoded and stored as a wide-character string.
 * Subsequent calls to get_text() will return the same text re-encoded using
 * whichever encoding is specified by set_encoding().
 */ 3 4 this 3 3047  4 text 1 2872  8 encoding 1 2805  
789 0 0 4 926 2876 0 0 49 /**
 * Removes the text from the TextEncoder.
 */ 1 4 this 3 3047  
790 0 0 6 927 2737 0 0 10 /**
 *
 */ 1 4 this 3 3048  
791 0 0 4 928 2876 0 0 0 1 4 this 3 3047  
792 0 0 4 929 2876 0 0 0 1 4 this 3 3047  
793 0 0 6 930 2872 0 0 80 /**
 * Returns the current text, as encoded via the current encoding system.
 */ 1 4 this 3 3048  
794 0 0 6 930 2872 0 0 82 /**
 * Returns the current text, as encoded via the indicated encoding system.
 */ 2 4 this 3 3048  8 encoding 1 2805  
795 0 0 4 931 2876 0 0 70 /**
 * Appends the indicates string to the end of the stored text.
 */ 2 4 this 3 3047  4 text 1 2872  
796 0 0 4 932 2876 0 0 128 /**
 * Appends a single character to the end of the stored text.  This may be a
 * wide character, up to 16 bits in Unicode.
 */ 2 4 this 3 3047  9 character 1 2738  
797 0 0 6 933 2882 0 0 169 /**
 * Returns the number of characters in the stored text.  This is a count of
 * wide characters, after the string has been decoded according to
 * set_encoding().
 */ 1 4 this 3 3048  
798 0 0 6 934 2738 0 0 196 /**
 * Returns the Unicode value of the nth character in the stored text.  This
 * may be a wide character (greater than 255), after the string has been
 * decoded according to set_encoding().
 */ 2 4 this 3 3048  5 index 1 2882  
799 0 0 4 935 2876 0 0 193 /**
 * Sets the Unicode value of the nth character in the stored text.  This may
 * be a wide character (greater than 255), after the string has been decoded
 * according to set_encoding().
 */ 3 4 this 3 3047  5 index 1 2882  9 character 1 2738  
800 0 0 6 936 2872 0 0 101 /**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */ 2 4 this 3 3048  5 index 1 2882  
801 0 0 6 936 2872 0 0 101 /**
 * Returns the nth char of the stored text, as a one-, two-, or three-byte
 * encoded string.
 */ 3 4 this 3 3048  5 index 1 2882  8 encoding 1 2805  
802 0 0 6 937 2872 0 0 723 /**
 * Returns the text associated with the node, converted as nearly as possible
 * to a fully-ASCII representation.  This means replacing accented letters
 * with their unaccented ASCII equivalents.
 *
 * It is possible that some characters in the string cannot be converted to
 * ASCII.  (The string may involve symbols like the copyright symbol, for
 * instance, or it might involve letters in some other alphabet such as Greek
 * or Cyrillic, or even Latin letters like thorn or eth that are not part of
 * the ASCII character set.)  In this case, as much of the string as possible
 * will be converted to ASCII, and the nonconvertible characters will remain
 * encoded in the encoding specified by set_encoding().
 */ 1 4 this 3 3048  
803 0 0 6 938 2872 0 0 277 /**
 * Given the indicated text string, which is assumed to be encoded via the
 * encoding "from", decodes it and then reencodes it into the encoding "to",
 * and returns the newly encoded string.  This does not change or affect any
 * properties on the TextEncoder itself.
 */ 3 4 text 1 2872  4 from 1 2805  2 to 1 2805  
804 0 0 6 939 2737 0 0 152 /**
 * Returns true if the indicated character is an alphabetic letter, false
 * otherwise.  This is akin to ctype's isalpha(), extended to Unicode.
 */ 1 9 character 1 2738  
805 0 0 6 940 2737 0 0 147 /**
 * Returns true if the indicated character is a numeric digit, false
 * otherwise.  This is akin to ctype's isdigit(), extended to Unicode.
 */ 1 9 character 1 2738  
806 0 0 6 941 2737 0 0 150 /**
 * Returns true if the indicated character is a punctuation mark, false
 * otherwise.  This is akin to ctype's ispunct(), extended to Unicode.
 */ 1 9 character 1 2738  
807 0 0 6 942 2737 0 0 150 /**
 * Returns true if the indicated character is a lowercase letter, false
 * otherwise.  This is akin to ctype's islower(), extended to Unicode.
 */ 1 9 character 1 2738  
808 0 0 6 943 2737 0 0 151 /**
 * Returns true if the indicated character is an uppercase letter, false
 * otherwise.  This is akin to ctype's isupper(), extended to Unicode.
 */ 1 9 character 1 2738  
809 0 0 6 944 2737 0 0 151 /**
 * Returns true if the indicated character is a whitespace letter, false
 * otherwise.  This is akin to ctype's isspace(), extended to Unicode.
 */ 1 9 character 1 2738  
810 0 0 6 945 2738 0 0 135 /**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's toupper(), extended to Unicode.
 */ 1 9 character 1 2738  
811 0 0 6 946 2738 0 0 135 /**
 * Returns the uppercase equivalent of the given Unicode character.  This is
 * akin to ctype's tolower(), extended to Unicode.
 */ 1 9 character 1 2738  
812 0 0 6 947 2872 0 0 103 /**
 * Converts the string to uppercase, assuming the string is encoded in the
 * default encoding.
 */ 1 6 source 1 2872  
813 0 0 6 947 2872 0 0 105 /**
 * Converts the string to uppercase, assuming the string is encoded in the
 * indicated encoding.
 */ 2 6 source 1 2872  8 encoding 1 2805  
814 0 0 6 948 2872 0 0 103 /**
 * Converts the string to lowercase, assuming the string is encoded in the
 * default encoding.
 */ 1 6 source 1 2872  
815 0 0 6 948 2872 0 0 105 /**
 * Converts the string to lowercase, assuming the string is encoded in the
 * indicated encoding.
 */ 2 6 source 1 2872  8 encoding 1 2805  
816 0 0 4 949 2876 0 0 191 /**
 * Changes the text that is stored in the encoder.  Subsequent calls to
 * get_wtext() will return this same string, while get_text() will return the
 * encoded version of the string.
 */ 2 4 this 3 3047  5 wtext 1 2872  
817 0 0 6 950 2872 0 0 91 /**
 * Returns the text associated with the TextEncoder, as a wide-character
 * string.
 */ 1 4 this 3 3048  
818 0 0 4 951 2876 0 0 85 /**
 * Appends the indicates string to the end of the stored wide-character text.
 */ 2 4 this 3 3047  4 text 1 2872  
819 0 0 6 952 2872 0 0 0 1 4 this 3 3048  
820 0 0 6 953 2737 0 0 0 1 4 this 3 3048  
821 0 0 6 954 2872 0 0 0 2 2 ch 1 3050  8 encoding 1 2805  
822 0 0 6 955 2872 0 0 102 /**
 * Encodes a wide-text string into a single-char string, according to the
 * current encoding.
 */ 2 4 this 3 3048  5 wtext 1 2872  
823 0 0 6 955 2872 0 0 0 2 5 wtext 1 2872  8 encoding 1 2805  
824 0 0 6 956 2872 0 0 105 /**
 * Returns the given wstring decoded to a single-byte string, via the current
 * encoding system.
 */ 2 4 this 3 3048  4 text 1 2872  
825 0 0 6 956 2872 0 0 0 2 4 text 1 2872  8 encoding 1 2805  
826 0 0 7 988 2953 2191 0 0 0 
827 0 0 7 988 2953 2191 0 0 1 6 param0 0 3051  
828 0 0 7 960 2953 2191 0 0 1 8 classobj 1 3053  
829 0 0 6 961 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
830 0 0 6 962 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
831 0 0 6 963 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
832 0 0 6 964 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
833 0 0 6 965 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
834 0 0 6 966 2737 0 0 0 2 4 this 3 3051  5 other 1 3051  
835 0 0 6 967 2738 0 0 207 /**
 * Sorts TypeHandles arbitrarily (according to <, >, etc.).  Returns a number
 * less than 0 if this type sorts before the other one, greater than zero if
 * it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 3051  5 other 1 3051  
836 0 0 6 968 2882 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 3051  
837 0 0 6 969 2872 0 0 216 /**
 * Returns the name of the type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 3051  6 object 1 3056  
838 0 0 6 970 2737 0 0 268 /**
 * Returns true if this type is derived from the indicated type, false
 * otherwise.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 3 4 this 3 3051  6 parent 1 2953  6 object 1 3056  
839 0 0 6 971 2738 0 0 506 /**
 * Returns the number of parent classes that this type is known to have.  This
 * may then be used to index into get_parent_class().  The result will be 0 if
 * this class does not inherit from any other classes, 1 if normal, single
 * inheritance is in effect, or greater than one if multiple inheritance is in
 * effect.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 3051  6 object 1 3056  
840 0 0 7 972 2953 2191 0 129 /**
 * Returns the nth parent class of this type.  The index should be in the
 * range 0 <= index < get_num_parent_classes().
 */ 2 4 this 3 3051  5 index 1 2738  
841 0 0 6 973 2738 0 0 314 /**
 * Returns the number of child classes that this type is known to have.  This
 * may then be used to index into get_child_class().
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 2 4 this 3 3051  6 object 1 3056  
842 0 0 7 974 2953 2191 0 127 /**
 * Returns the nth child class of this type.  The index should be in the range
 * 0 <= index < get_num_child_classes().
 */ 2 4 this 3 3051  5 index 1 2738  
843 0 0 7 975 2953 2191 0 577 /**
 * Returns the parent class that is in a direct line of inheritance to the
 * indicated ancestor class.  This is useful in the presence of multiple
 * inheritance to try to determine what properties an unknown type may have.
 *
 * The return value is TypeHandle::none() if the type does not inherit from
 * the ancestor.  If ancestor is the same as this type, the return value is
 * this type.
 *
 * The "object" pointer is an optional pointer to the TypedObject class that
 * owns this TypeHandle.  It is only used in case the TypeHandle is
 * inadvertantly undefined.
 */ 3 4 this 3 3051  8 ancestor 1 2953  6 object 1 3056  
844 0 0 6 976 2738 0 0 0 2 4 this 3 3051  10 legal_vals 1 3057  
845 0 0 6 977 2882 0 0 0 2 4 this 3 3051  12 memory_class 1 2807  
846 0 0 4 978 2876 0 0 0 3 4 this 3 2953  12 memory_class 1 2807  4 size 1 2882  
847 0 0 4 979 2876 0 0 0 3 4 this 3 2953  12 memory_class 1 2807  4 size 1 2882  
848 0 0 6 980 2738 0 0 354 /**
 * Returns the integer index associated with this TypeHandle.  Each different
 * TypeHandle will have a different index.  However, you probably shouldn't be
 * using this method; you should just treat the TypeHandles as opaque classes.
 * This is provided for the convenience of non-C++ scripting languages to
 * build a hashtable of TypeHandles.
 */ 1 4 this 3 3051  
849 0 0 4 981 2876 0 0 10 /**
 *
 */ 2 4 this 3 3051  3 out 1 2790  
850 0 0 7 982 2953 2191 0 85 /**
 * Returns a special zero-valued TypeHandle that is used to indicate no type.
 */ 0 
851 0 0 6 983 2737 0 0 0 1 4 this 3 3051  
852 0 0 7 1014 3062 2212 0 0 1 6 param0 0 3060  
853 0 0 7 991 2953 2191 0 0 2 4 this 3 3062  4 name 1 2872  
854 0 0 4 992 2876 0 0 0 3 4 this 3 3062  5 child 1 2953  6 parent 1 2953  
855 0 0 4 993 2876 0 0 0 3 4 this 3 3062  4 type 1 2953  4 name 1 2872  
856 0 0 7 994 2953 2191 0 0 2 4 this 3 3060  4 name 1 2872  
857 0 0 7 995 2953 2191 0 0 2 4 this 3 3060  2 id 1 2738  
858 0 0 6 996 2872 0 0 0 3 4 this 3 3060  4 type 1 2953  6 object 1 3056  
859 0 0 6 997 2737 0 0 0 4 4 this 3 3062  5 child 1 2953  4 base 1 2953  12 child_object 1 3056  
860 0 0 6 998 2738 0 0 0 1 4 this 3 3062  
861 0 0 7 999 2953 2191 0 0 2 4 this 3 3062  1 n 1 2738  
862 0 0 6 1001 2738 0 0 0 1 4 this 3 3062  
863 0 0 7 1002 2953 2191 0 0 2 4 this 3 3062  1 n 1 2738  
864 0 0 6 1004 2738 0 0 0 3 4 this 3 3060  5 child 1 2953  12 child_object 1 3056  
865 0 0 7 1005 2953 2191 0 0 3 4 this 3 3060  5 child 1 2953  5 index 1 2738  
866 0 0 6 1006 2738 0 0 0 3 4 this 3 3060  5 child 1 2953  12 child_object 1 3056  
867 0 0 7 1007 2953 2191 0 0 3 4 this 3 3060  5 child 1 2953  5 index 1 2738  
868 0 0 7 1008 2953 2191 0 0 4 4 this 3 3062  5 child 1 2953  4 base 1 2953  12 child_object 1 3056  
869 0 0 4 1009 2876 0 0 0 0 
870 0 0 4 1010 2876 0 0 0 2 4 this 3 3060  3 out 1 2790  
871 0 0 6 1011 3062 0 0 63 // ptr() returns the pointer to the global TypeRegistry object. 0 
872 0 0 7 1020 2953 2191 0 76 // Derived classes should override this function to return get_class_type(). 1 4 this 3 3063  
873 0 0 6 1022 2738 0 0 180 /**
 * Returns the internal index number associated with this object's TypeHandle,
 * a unique number for each different type.  This is equivalent to
 * get_type().get_index().
 */ 1 4 this 3 3063  
874 0 0 6 1023 2737 0 0 84 /**
 * Returns true if the current object is or derives from the indicated type.
 */ 2 4 this 3 3063  6 handle 1 2953  
875 0 0 6 1024 2737 0 0 76 /**
 * Returns true if the current object is the indicated type exactly.
 */ 2 4 this 3 3063  6 handle 1 2953  
876 0 0 7 1025 2953 2191 0 0 0 
877 0 0 6 1017 3010 0 0 0 1 4 this 3 3056  
878 0 0 6 1018 3056 0 0 0 1 4 this 3 3010  
879 0 0 7 1027 2950 2223 0 0 0 
880 0 0 4 1028 2876 0 0 0 1 4 this 3 2950  
881 0 0 7 1031 2944 2226 0 0 0 
882 0 0 4 1032 2876 0 0 0 1 4 this 3 2944  
883 0 0 7 1035 2947 2229 0 0 0 
884 0 0 4 1036 2876 0 0 0 1 4 this 3 2947  
885 0 0 6 1040 2737 0 0 125 /**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */ 0 
886 0 0 6 1041 2737 0 0 168 /**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */ 0 
887 0 0 6 1042 2882 0 0 136 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */ 0 
888 0 0 6 1043 2882 0 0 132 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */ 0 
889 0 0 6 1044 2882 0 0 119 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */ 0 
890 0 0 6 1045 2882 0 0 107 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */ 0 
891 0 0 6 1046 2882 0 0 190 /**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */ 0 
892 0 0 6 1047 2882 0 0 110 /**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */ 0 
893 0 0 6 1048 2882 0 0 496 /**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */ 0 
894 0 0 6 1049 2882 0 0 113 /**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */ 0 
895 0 0 6 1050 2738 0 0 59 /**
 * Returns the number of pointers currently active.
 */ 0 
896 0 0 4 1051 2876 0 0 100 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */ 1 6 result 1 3065  
897 0 0 4 1052 2876 0 0 122 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */ 2 6 result 1 3065  4 type 1 2953  
898 0 0 4 1053 2876 0 0 159 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */ 3 6 result 1 3065  4 from 1 2749  2 to 1 2749  
899 0 0 4 1054 2876 0 0 852 /**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */ 1 6 result 1 3065  
900 0 0 4 1055 2876 0 0 285 /**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */ 0 
901 0 0 4 1056 2876 0 0 70 /**
 * Shows the breakdown of types of all of the active pointers.
 */ 0 
902 0 0 4 1057 2876 0 0 118 /**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
903 0 0 4 1058 2876 0 0 69 /**
 * Shows the breakdown of ages of all of the active pointers.
 */ 0 
904 0 0 4 1059 2876 0 0 117 /**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
905 0 0 6 1066 2738 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 3066  
906 0 0 4 1067 2876 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 3066  
907 0 0 6 1068 2737 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 3066  
908 0 0 6 1070 2737 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 3066  
909 0 0 6 1071 2737 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 3066  
910 0 0 7 1072 2953 2191 0 0 0 
911 0 0 6 1063 3010 0 0 0 1 4 this 3 3068  
912 0 0 7 1064 3068 2254 0 0 1 4 this 3 3010  
913 0 0 7 1075 3071 2254 0 0 1 6 param0 0 3069  
914 0 0 6 1074 2738 0 0 10 /**
 *
 */ 1 4 this 3 3069  
915 0 0 4 1084 2876 0 0 0 2 4 this 3 3072  5 level 1 2749  
916 0 0 6 1086 2738 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 3073  
917 0 0 4 1087 2876 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 3073  
918 0 0 6 1088 2737 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 3073  
919 0 0 6 1089 2737 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 3073  
920 0 0 4 1090 2876 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 3073  
921 0 0 7 1091 2953 2191 0 0 0 
922 0 0 7 1093 3075 2215 0 40 /**
 * Constructs an empty datagram.
 */ 0 
923 0 0 7 1093 3075 2215 0 10 /**
 *
 */ 1 4 copy 1 3076  
924 0 0 7 1093 3075 2215 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 2872  
925 0 0 6 1094 3075 0 0 0 2 4 this 3 3075  4 copy 1 3076  
926 0 0 4 1095 2876 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 3075  
927 0 0 4 1096 2876 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 3076  3 out 1 2790  6 indent 1 3037  
928 0 0 4 1097 2876 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 3075  5 value 1 2737  
929 0 0 4 1098 2876 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3028  
930 0 0 4 1099 2876 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3030  
931 0 0 4 1100 2876 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3031  
932 0 0 4 1101 2876 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3033  
933 0 0 4 1102 2876 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 2755  
934 0 0 4 1103 2876 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3034  
935 0 0 4 1104 2876 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3036  
936 0 0 4 1105 2876 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3038  
937 0 0 4 1106 2876 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 3075  5 value 1 3078  
938 0 0 4 1107 2876 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 3075  5 value 1 3040  
939 0 0 4 1108 2876 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 3075  5 value 1 2853  
940 0 0 4 1109 2876 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 3075  5 value 1 3031  
941 0 0 4 1110 2876 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3033  
942 0 0 4 1111 2876 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 2755  
943 0 0 4 1112 2876 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3034  
944 0 0 4 1113 2876 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3036  
945 0 0 4 1114 2876 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 3075  5 value 1 3038  
946 0 0 4 1115 2876 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 3075  5 value 1 3078  
947 0 0 4 1116 2876 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 3075  5 value 1 3040  
948 0 0 4 1117 2876 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 3075  3 str 1 2872  
949 0 0 4 1118 2876 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 3075  3 str 1 2872  
950 0 0 4 1119 2876 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 3075  3 str 1 2872  
951 0 0 4 1120 2876 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 3075  3 str 1 2872  4 size 1 2882  
952 0 0 4 1121 2876 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 3075  3 str 1 2872  
953 0 0 4 1122 2876 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 3075  4 size 1 2882  
954 0 0 4 1123 2876 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 3075  4 data 1 2872  
955 0 0 6 1125 2872 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 3076  
956 0 0 4 1126 2876 0 0 69 /**
 * Returns a pointer to the beginning of the datagram's data.
 */ 1 4 this 3 3076  
957 0 0 6 1127 2882 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 3076  
958 0 0 4 1128 2876 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 3075  4 data 1 3079  
959 0 0 4 1129 2876 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 3075  4 data 1 3080  
960 0 0 7 1130 3080 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 3076  
961 0 0 7 1131 3079 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 3075  
962 0 0 4 1132 2876 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 3075  15 stdfloat_double 1 2737  
963 0 0 6 1133 2737 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 3076  
964 0 0 6 1134 2737 0 0 0 2 4 this 3 3076  5 other 1 3076  
965 0 0 6 1135 2737 0 0 0 2 4 this 3 3076  5 other 1 3076  
966 0 0 6 1136 2737 0 0 0 2 4 this 3 3076  5 other 1 3076  
967 0 0 4 1137 2876 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 3076  3 out 1 2790  
968 0 0 4 1138 2876 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 3076  3 out 1 2790  6 indent 1 3037  
969 0 0 7 1139 2953 2191 0 0 0 
970 0 0 6 1142 2737 0 0 0 2 4 this 3 3081  4 data 1 3075  
971 0 0 6 1143 2737 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 3081  4 info 1 3082  
972 0 0 6 1144 2737 0 0 0 1 4 this 3 3081  
973 0 0 6 1145 2737 0 0 0 1 4 this 3 3081  
974 0 0 6 1146 2934 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 3081  
975 0 0 6 1147 2940 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 3083  
976 0 0 7 1148 3086 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 3081  
977 0 0 7 1149 3087 2580 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 3081  
978 0 0 6 1150 2982 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 3081  
979 0 0 7 1152 3088 2336 0 10 /**
 *
 */ 0 
980 0 0 7 1152 3088 2336 0 10 /**
 *
 */ 2 8 datagram 1 3076  6 offset 1 2882  
981 0 0 7 1152 3088 2336 0 10 /**
 *
 */ 1 4 copy 1 3089  
982 0 0 6 1153 3088 0 0 0 2 4 this 3 3088  4 copy 1 3089  
983 0 0 6 1155 2737 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 3088  
984 0 0 6 1156 3028 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 3088  
985 0 0 6 1157 3030 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 3088  
986 0 0 6 1158 3031 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 3088  
987 0 0 6 1159 3033 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 3088  
988 0 0 6 1160 2755 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 3088  
989 0 0 6 1161 3034 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 3088  
990 0 0 6 1162 3036 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 3088  
991 0 0 6 1163 3038 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 3088  
992 0 0 6 1164 3078 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 3088  
993 0 0 6 1165 3040 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 3088  
994 0 0 6 1166 2853 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 3088  
995 0 0 6 1167 3031 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 3088  
996 0 0 6 1168 3033 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 3088  
997 0 0 6 1169 2755 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 3088  
998 0 0 6 1170 3034 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 3088  
999 0 0 6 1171 3036 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 3088  
1000 0 0 6 1172 3038 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 3088  
1001 0 0 6 1173 3078 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 3088  
1002 0 0 6 1174 3040 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 3088  
1003 0 0 6 1175 2872 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 3088  
1004 0 0 6 1176 2872 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 3088  
1005 0 0 6 1177 2872 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 3088  
1006 0 0 6 1178 2872 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 3088  4 size 1 2882  
1007 0 0 6 1179 2872 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 3088  
1008 0 0 4 1180 2876 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 3088  4 size 1 2882  
1009 0 0 6 1181 2872 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 3088  4 size 1 2882  
1010 0 0 6 1182 2872 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 3089  
1011 0 0 6 1183 2882 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 3089  
1012 0 0 6 1184 3076 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 3089  
1013 0 0 6 1185 2882 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 3089  
1014 0 0 4 1186 2876 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 3089  3 out 1 2790  
1015 0 0 4 1187 2876 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 3089  3 out 1 2790  6 indent 1 3037  
1016 0 0 7 1188 2953 2191 0 0 0 
1017 0 0 6 1191 2737 0 0 0 2 4 this 3 3091  4 data 1 3076  
1018 0 0 6 1192 2737 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 3091  6 result 1 3082  8 filename 1 2934  
1019 0 0 6 1192 2737 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 3091  6 result 1 3082  6 source 1 3092  
1020 0 0 6 1193 2737 0 0 0 1 4 this 3 3091  
1021 0 0 4 1194 2876 0 0 0 1 4 this 3 3091  
1022 0 0 6 1195 2934 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 3091  
1023 0 0 7 1196 3086 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 3091  
1024 0 0 6 1197 2982 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 3091  
1025 0 0 7 1214 2953 2191 0 0 0 
1026 0 0 6 1210 3056 0 0 0 1 4 this 3 3094  
1027 0 0 7 1211 3094 2394 0 0 1 4 this 3 3056  
1028 0 0 7 1212 3068 2254 0 0 1 4 this 3 3094  
1029 0 0 7 1213 3094 2394 0 0 1 4 this 3 3068  
1030 0 0 7 1217 3095 2398 0 0 1 6 param0 0 3086  
1031 0 0 7 1217 3095 2398 0 10 /**
 *
 */ 1 8 filename 1 2934  
1032 0 0 6 1218 2934 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 3086  
1033 0 0 7 1219 2953 2191 0 0 0 
1034 0 0 7 1222 3096 2408 0 10 /**
 *
 */ 0 
1035 0 0 7 1222 3096 2408 0 0 1 6 param0 0 3097  
1036 0 0 4 1223 2876 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 3096  3 pos 1 2882  
1037 0 0 6 1224 2882 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 3097  
1038 0 0 6 1225 2868 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 3096  6 length 1 2882  
1039 0 0 6 1226 2868 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 3096  
1040 0 0 6 1227 2868 0 0 0 1 4 this 3 3096  
1041 0 0 6 1228 2868 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 3097  
1042 0 0 6 1229 2882 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 3097  
1043 0 0 4 1230 2876 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 3096  
1044 0 0 7 1233 3099 2439 0 10 /**
 *
 */ 0 
1045 0 0 7 1233 3099 2439 0 10 /**
 *
 */ 1 4 copy 1 3100  
1046 0 0 6 1234 3099 0 0 0 2 4 this 3 3099  4 copy 1 3100  
1047 0 0 6 1235 2737 0 0 0 2 4 this 3 3100  5 other 1 3100  
1048 0 0 6 1236 2737 0 0 0 2 4 this 3 3100  5 other 1 3100  
1049 0 0 6 1237 2737 0 0 0 2 4 this 3 3100  5 other 1 3100  
1050 0 0 6 1238 2738 0 0 10 /**
 *
 */ 2 4 this 3 3100  5 other 1 3100  
1051 0 0 4 1239 2876 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 3099  5 other 1 3100  
1052 0 0 4 1240 2876 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 3100  3 out 1 2790  
1053 0 0 4 1241 2876 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 3099  2 in 1 2780  
1054 0 0 4 1242 2876 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 3100  3 out 1 2790  
1055 0 0 4 1243 2876 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 3099  2 in 1 2780  
1056 0 0 4 1244 2876 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 3100  3 out 1 2790  
1057 0 0 4 1245 2876 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 3099  2 in 1 2780  
1058 0 0 4 1246 2876 0 0 10 /**
 *
 */ 2 4 this 3 3100  3 out 1 2790  
1059 0 0 6 1247 2872 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 3100  
1060 0 0 6 1248 2737 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 3099  4 text 1 2872  
1061 0 0 6 1249 2872 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 3100  
1062 0 0 6 1250 2737 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 3099  4 text 1 2872  
1063 0 0 6 1251 2872 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 3100  
1064 0 0 6 1252 2737 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 3099  4 text 1 2872  
1065 0 0 4 1253 2876 0 0 10 /**
 *
 */ 2 4 this 3 3100  11 destination 1 3075  
1066 0 0 4 1254 2876 0 0 10 /**
 *
 */ 2 4 this 3 3099  6 source 1 3088  
1067 0 0 4 1255 2876 0 0 10 /**
 *
 */ 2 4 this 3 3100  11 destination 1 3046  
1068 0 0 4 1256 2876 0 0 10 /**
 *
 */ 2 4 this 3 3099  6 source 1 3027  
1069 0 0 6 1257 2737 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 3099  8 filename 1 2934  
1070 0 0 6 1258 2737 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 3099  6 stream 1 2780  
1071 0 0 4 1259 2876 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3099  7 ramfile 1 3097  
1072 0 0 4 1260 2876 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3099  4 data 1 2872  
1073 0 0 4 1261 2876 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 3099  4 data 1 3101  
1074 0 0 4 1262 2876 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 3 4 this 3 3099  6 buffer 1 2872  6 length 1 2738  
1075 0 0 7 1265 3065 2441 0 10 /**
 *
 */ 0 
1076 0 0 7 1265 3065 2441 0 0 1 6 param0 0 3102  
1077 0 0 6 1267 2882 0 0 53 /**
 * Returns the number of pointers in the set.
 */ 1 4 this 3 3102  
1078 0 0 7 1268 3068 2254 0 46 /**
 * Returns the nth pointer of the set.
 */ 2 4 this 3 3102  1 n 1 2882  
1079 0 0 6 1270 3056 0 0 172 /**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * NULL.
 */ 2 4 this 3 3102  1 n 1 2882  
1080 0 0 7 1272 2953 2191 0 70 /**
 * Returns the actual type of the nth pointer, if it is known.
 */ 2 4 this 3 3102  1 n 1 2882  
1081 0 0 6 1273 2872 0 0 68 /**
 * Returns the type name of the nth pointer, if it is known.
 */ 2 4 this 3 3102  1 n 1 2882  
1082 0 0 6 1274 2749 0 0 197 /**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */ 2 4 this 3 3102  1 n 1 2882  
1083 0 0 6 1275 2868 0 0 0 2 4 this 3 3102  1 n 1 2882  
1084 0 0 4 1276 2876 0 0 39 /**
 * Empties the set of pointers.
 */ 1 4 this 3 3065  
1085 0 0 4 1277 2876 0 0 10 /**
 *
 */ 2 4 this 3 3102  3 out 1 2790  
1086 0 0 7 1279 3104 2454 0 10 /**
 *
 */ 0 
1087 0 0 7 1279 3104 2454 0 10 /**
 *
 */ 3 6 source 1 2995  5 start 1 2982  3 end 1 2982  
1088 0 0 6 1280 3104 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 3104  6 source 1 2995  5 start 1 2982  3 end 1 2982  
1089 0 0 6 1281 3104 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 3104  
1090 0 0 7 1284 3105 2458 0 10 /**
 *
 */ 0 
1091 0 0 7 1284 3105 2458 0 10 /**
 *
 */ 4 4 dest 1 3017  5 start 1 2982  3 end 1 2982  6 append 1 2737  
1092 0 0 6 1285 3105 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 3105  4 dest 1 3017  5 start 1 2982  3 end 1 2982  6 append 1 2737  
1093 0 0 6 1286 3105 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 3105  
1094 0 0 7 1289 3106 2462 0 10 /**
 *
 */ 0 
1095 0 0 7 1289 3106 2462 0 10 /**
 *
 */ 4 6 nested 1 3043  5 start 1 2982  3 end 1 2982  6 append 1 2737  
1096 0 0 6 1290 3106 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 3106  6 nested 1 3043  5 start 1 2982  3 end 1 2982  6 append 1 2737  
1097 0 0 6 1291 3106 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 3106  
1098 0 0 4 1294 2876 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 3107  
1099 0 0 6 1295 2738 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3107  8 filename 1 2934  
1100 0 0 6 1296 2738 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 3107  4 data 1 2872  9 data_size 1 2882  
1101 0 0 6 1296 2738 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3107  4 data 1 2872  
1102 0 0 6 1297 2738 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 3107  4 data 1 2872  9 data_size 1 2882  
1103 0 0 6 1297 2738 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 3107  4 data 1 2872  
1104 0 0 6 1298 3108 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 3107  
1105 0 0 4 1299 2876 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 3107  
1106 0 0 4 1300 2876 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 3107  
1107 0 0 6 1301 3107 0 0 10 /**
 *
 */ 0 
1108 0 0 7 1303 3110 2254 0 10 /**
 *
 */ 0 
1109 0 0 6 1304 2737 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 3110  14 multifile_name 1 2934  6 offset 1 2982  
1110 0 0 6 1304 2737 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 3110  16 multifile_stream 1 2995  12 owns_pointer 1 2737  6 offset 1 2982  
1111 0 0 6 1305 2737 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 3110  14 multifile_name 1 2934  
1112 0 0 6 1305 2737 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 3110  16 multifile_stream 1 2790  12 owns_pointer 1 2737  
1113 0 0 6 1306 2737 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 3110  14 multifile_name 1 2934  
1114 0 0 6 1306 2737 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 3110  16 multifile_stream 1 2802  12 owns_pointer 1 2737  
1115 0 0 4 1307 2876 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 3110  
1116 0 0 6 1308 2934 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 3111  
1117 0 0 4 1309 2876 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 3110  14 multifile_name 1 2934  
1118 0 0 6 1310 2737 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 3111  
1119 0 0 6 1311 2737 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 3111  
1120 0 0 6 1312 2737 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 3111  
1121 0 0 6 1313 2940 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 3111  
1122 0 0 4 1314 2876 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 3110  16 record_timestamp 1 2737  
1123 0 0 6 1315 2737 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 3111  
1124 0 0 4 1316 2876 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 3110  12 scale_factor 1 2882  
1125 0 0 6 1317 2882 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 3111  
1126 0 0 4 1318 2876 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 3110  4 flag 1 2737  
1127 0 0 6 1319 2737 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 3111  
1128 0 0 4 1320 2876 0 0 369 /**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */ 2 4 this 3 3110  19 encryption_password 1 2872  
1129 0 0 6 1321 2872 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 3111  
1130 0 0 4 1322 2876 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 3110  20 encryption_algorithm 1 2872  
1131 0 0 6 1323 2872 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 3111  
1132 0 0 4 1324 2876 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 3110  21 encryption_key_length 1 2738  
1133 0 0 6 1325 2738 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 3111  
1134 0 0 4 1326 2876 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 3110  26 encryption_iteration_count 1 2738  
1135 0 0 6 1327 2738 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 3111  
1136 0 0 6 1328 2872 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 3110  12 subfile_name 1 2872  8 filename 1 2934  17 compression_level 1 2738  
1137 0 0 6 1328 2872 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 3110  12 subfile_name 1 2872  12 subfile_data 1 2780  17 compression_level 1 2738  
1138 0 0 6 1329 2872 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 3110  12 subfile_name 1 2872  8 filename 1 2934  17 compression_level 1 2738  
1139 0 0 6 1330 2737 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 3110  11 certificate 1 2934  5 chain 1 2934  4 pkey 1 2934  8 password 1 2872  
1140 0 0 6 1330 2737 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 3110  9 composite 1 2934  8 password 1 2872  
1141 0 0 6 1331 2738 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 3111  
1142 0 0 6 1332 2872 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 3111  1 n 1 2738  
1143 0 0 6 1333 2872 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 3111  1 n 1 2738  
1144 0 0 6 1334 2872 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 3111  1 n 1 2738  
1145 0 0 4 1335 2876 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 3111  1 n 1 2738  3 out 1 2790  
1146 0 0 4 1336 2876 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 3111  1 n 1 2738  3 out 1 2790  
1147 0 0 6 1337 2738 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 3111  1 n 1 2738  
1148 0 0 6 1338 2737 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 3110  
1149 0 0 6 1339 2737 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 3110  
1150 0 0 6 1340 2738 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 3111  
1151 0 0 6 1341 2738 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 3111  12 subfile_name 1 2872  
1152 0 0 6 1342 2737 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 3111  12 subfile_name 1 2872  
1153 0 0 6 1343 2737 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 3111  8 contents 1 2937  12 subfile_name 1 2872  
1154 0 0 4 1344 2876 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 3110  5 index 1 2738  
1155 0 0 6 1344 2737 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 3110  12 subfile_name 1 2872  
1156 0 0 6 1345 2872 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 3111  5 index 1 2738  
1157 0 0 6 1347 2882 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 3111  5 index 1 2738  
1158 0 0 6 1348 2940 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 3111  5 index 1 2738  
1159 0 0 6 1349 2737 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 3111  5 index 1 2738  
1160 0 0 6 1350 2737 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 3111  5 index 1 2738  
1161 0 0 6 1351 2737 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 3111  5 index 1 2738  
1162 0 0 6 1352 2982 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 3111  
1163 0 0 6 1353 2982 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 3111  5 index 1 2738  
1164 0 0 6 1354 2882 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 3111  5 index 1 2738  
1165 0 0 6 1355 2872 0 0 90 /**
 * Returns a string that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 3110  5 index 1 2738  
1166 0 0 6 1356 2780 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 3110  5 index 1 2738  
1167 0 0 4 1357 2876 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2780  
1168 0 0 6 1358 2737 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 3110  5 index 1 2738  8 filename 1 2934  
1169 0 0 6 1359 2737 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 3110  5 index 1 2738  3 out 1 2790  
1170 0 0 6 1360 2737 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 3110  5 index 1 2738  8 filename 1 2934  
1171 0 0 4 1361 2876 0 0 10 /**
 *
 */ 2 4 this 3 3111  3 out 1 2790  
1172 0 0 4 1362 2876 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 3111  3 out 1 2790  
1173 0 0 6 1363 2872 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
1174 0 0 4 1364 2876 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 3110  13 header_prefix 1 2872  
1175 0 0 6 1365 2872 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 3111  
1176 0 0 7 1367 3115 2541 0 10 /**
 *
 */ 1 4 copy 1 3113  
1177 0 0 7 1367 3115 2541 0 10 /**
 *
 */ 1 12 initial_name 1 2872  
1178 0 0 6 1368 3115 0 0 10 /**
 *
 */ 2 4 this 3 3115  5 other 1 3113  
1179 0 0 4 1369 2876 0 0 10 /**
 *
 */ 2 4 this 3 3115  4 name 1 2872  
1180 0 0 4 1370 2876 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 3115  
1181 0 0 6 1371 2737 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 3113  
1182 0 0 6 1372 2872 0 0 10 /**
 *
 */ 1 4 this 3 3113  
1183 0 0 4 1374 2876 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 3113  3 out 1 2790  
1184 0 0 7 1375 2953 2191 0 0 0 
1185 0 0 7 1378 3082 2550 0 10 /**
 *
 */ 0 
1186 0 0 7 1378 3082 2550 0 10 /**
 *
 */ 3 4 file 1 3086  5 start 1 2982  4 size 1 2942  
1187 0 0 7 1378 3082 2550 0 10 /**
 *
 */ 3 8 filename 1 2934  5 start 1 2982  4 size 1 2942  
1188 0 0 7 1378 3082 2550 0 10 /**
 *
 */ 1 4 copy 1 3092  
1189 0 0 6 1379 3082 0 0 0 2 4 this 3 3082  4 copy 1 3092  
1190 0 0 6 1380 2737 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 3092  
1191 0 0 7 1381 3086 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 3092  
1192 0 0 6 1382 2934 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 3092  
1193 0 0 6 1383 2982 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 3092  
1194 0 0 6 1384 2942 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 3092  
1195 0 0 4 1385 2876 0 0 10 /**
 *
 */ 2 4 this 3 3092  3 out 1 2790  
1196 0 0 6 1388 3118 0 0 0 1 4 this 3 3116  
1197 0 0 7 1389 2936 1694 0 0 1 4 this 3 3116  
1198 0 0 6 1390 2934 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 3116  
1199 0 0 6 1391 2737 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 3116  
1200 0 0 6 1392 2737 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 3116  
1201 0 0 6 1393 2737 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 3116  
1202 0 0 6 1394 2737 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 3116  
1203 0 0 6 1395 2737 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 3087  
1204 0 0 6 1396 2737 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 3087  8 new_file 1 3087  
1205 0 0 6 1397 2737 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 3087  8 new_file 1 3087  
1206 0 0 7 1398 3119 2254 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 3116  
1207 0 0 4 1399 2876 0 0 10 /**
 *
 */ 2 4 this 3 3116  3 out 1 2790  
1208 0 0 4 1400 2876 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 3116  3 out 1 2790  
1209 0 0 4 1401 2876 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 3116  3 out 1 2790  
1210 0 0 6 1402 2868 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 3116  11 auto_unwrap 1 2737  
1211 0 0 6 1403 2780 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 3116  11 auto_unwrap 1 2737  
1212 0 0 4 1404 2876 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3116  6 stream 1 2780  
1213 0 0 6 1405 2737 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 3116  
1214 0 0 6 1406 2868 0 0 0 3 4 this 3 3087  4 data 1 2868  9 auto_wrap 1 2737  
1215 0 0 6 1407 2790 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 3087  9 auto_wrap 1 2737  8 truncate 1 2737  
1216 0 0 6 1408 2790 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 3087  
1217 0 0 4 1409 2876 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3087  6 stream 1 2790  
1218 0 0 6 1410 2802 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 3087  8 truncate 1 2737  
1219 0 0 6 1411 2802 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 3087  
1220 0 0 4 1412 2876 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 3087  6 stream 1 2802  
1221 0 0 6 1413 2942 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 3116  
1222 0 0 6 1413 2942 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 3116  6 stream 1 2780  
1223 0 0 6 1414 2940 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 3116  
1224 0 0 6 1415 2737 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 3087  4 info 1 3082  
1225 0 0 7 1416 2953 2191 0 0 0 
1226 0 0 7 1419 2953 2191 0 0 0 
1227 0 0 6 1422 3118 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 3120  
1228 0 0 6 1423 2934 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 3120  
1229 0 0 6 1424 2738 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 3120  
1230 0 0 4 1425 2876 0 0 10 /**
 *
 */ 2 4 this 3 3120  3 out 1 2790  
1231 0 0 4 1426 2876 0 0 10 /**
 *
 */ 2 4 this 3 3120  3 out 1 2790  
1232 0 0 7 1427 2953 2191 0 0 0 
1233 0 0 7 1429 3122 2394 0 10 /**
 *
 */ 1 9 multifile 1 3110  
1234 0 0 7 1430 3110 2254 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 3123  
1235 0 0 7 1431 2953 2191 0 0 0 
1236 0 0 7 1433 3125 2594 0 10 /**
 *
 */ 0 
1237 0 0 7 1434 2953 2191 0 0 0 
1238 0 0 7 1437 3126 2598 0 10 /**
 *
 */ 1 17 physical_filename 1 2934  
1239 0 0 6 1438 2934 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 3127  
1240 0 0 7 1439 2953 2191 0 0 0 
1241 0 0 7 1442 3131 2394 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 3129  
1242 0 0 6 1443 2737 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 3129  
1243 0 0 7 1444 2953 2191 0 0 0 
1244 0 0 7 1447 3132 2398 0 10 /**
 *
 */ 1 8 filename 1 2934  
1245 0 0 7 1447 3132 2398 0 0 1 6 param0 0 3133  
1246 0 0 7 1448 2953 2191 0 0 0 
1247 0 0 7 1450 3135 2608 0 10 /**
 *
 */ 0 
1248 0 0 7 1450 3135 2608 0 10 /**
 *
 */ 2 6 source 1 2780  11 owns_source 1 2737  
1249 0 0 6 1451 3135 0 0 10 /**
 *
 */ 3 4 this 3 3135  6 source 1 2780  11 owns_source 1 2737  
1250 0 0 6 1452 3135 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 3135  
1251 0 0 7 1455 3136 2612 0 10 /**
 *
 */ 0 
1252 0 0 7 1455 3136 2612 0 10 /**
 *
 */ 3 4 dest 1 2790  9 owns_dest 1 2737  17 compression_level 1 2738  
1253 0 0 6 1456 3136 0 0 10 /**
 *
 */ 4 4 this 3 3136  4 dest 1 2790  9 owns_dest 1 2737  17 compression_level 1 2738  
1254 0 0 6 1457 3136 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 3136  
1255 0 0 7 1467 3119 2254 0 0 1 6 param0 0 3137  
1256 0 0 6 1460 2882 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 3137  
1257 0 0 7 1461 3087 2580 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 3137  1 n 1 2882  
1258 0 0 7 1463 3087 2580 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 3137  1 n 1 2882  
1259 0 0 6 1464 2882 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 3137  
1260 0 0 7 1465 3119 2254 0 0 2 4 this 3 3119  5 other 1 3137  
1261 0 0 7 1466 3119 2254 0 0 2 4 this 3 3137  5 other 1 3137  
1262 0 0 7 1469 3118 2621 0 10 /**
 *
 */ 0 
1263 0 0 7 1469 3118 2621 0 0 1 6 param0 0 3139  
1264 0 0 6 1472 2737 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 3118  17 physical_filename 1 2934  11 mount_point 1 2934  5 flags 1 2738  8 password 1 2872  
1265 0 0 6 1472 2737 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 3118  9 multifile 1 3110  11 mount_point 1 2934  5 flags 1 2738  
1266 0 0 6 1472 2737 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function that the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 3118  5 mount 1 3131  11 mount_point 1 2934  5 flags 1 2738  
1267 0 0 6 1473 2737 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 3118  16 virtual_filename 1 2934  11 mount_point 1 2934  5 flags 1 2738  8 password 1 2872  
1268 0 0 6 1474 2738 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 3118  17 physical_filename 1 2934  
1269 0 0 6 1474 2738 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 3118  9 multifile 1 3110  
1270 0 0 6 1474 2738 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 3118  5 mount 1 3131  
1271 0 0 6 1475 2738 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 3118  11 mount_point 1 2934  
1272 0 0 6 1476 2738 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 3118  
1273 0 0 6 1477 2738 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 3139  
1274 0 0 7 1478 3131 2394 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 3139  1 n 1 2738  
1275 0 0 6 1491 2737 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 3118  13 new_directory 1 2934  
1276 0 0 7 1492 2936 1694 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 3139  
1277 0 0 6 1493 2737 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 3118  8 filename 1 2934  
1278 0 0 6 1494 2737 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 3118  8 filename 1 2934  
1279 0 0 7 1495 3087 2580 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 3139  8 filename 1 2934  11 status_only 1 2737  
1280 0 0 7 1496 3087 2580 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 3118  8 filename 1 2934  
1281 0 0 7 1497 3087 2580 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 3139  8 filename 1 2934  10 searchpath 1 2943  11 status_only 1 2737  
1282 0 0 6 1498 2737 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 3118  8 filename 1 2934  
1283 0 0 6 1499 2737 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 3118  13 orig_filename 1 2934  12 new_filename 1 2934  
1284 0 0 6 1500 2737 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 3118  13 orig_filename 1 2934  12 new_filename 1 2934  
1285 0 0 6 1501 2737 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 3139  8 filename 1 2936  10 searchpath 1 2943  17 default_extension 1 2872  
1286 0 0 6 1502 2738 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 3139  8 filename 1 2934  10 searchpath 1 2943  7 results 1 2969  
1287 0 0 6 1503 2737 0 0 71 /**
 * Convenience function; returns true if the named file exists.
 */ 2 4 this 3 3139  8 filename 1 2934  
1288 0 0 6 1504 2737 0 0 93 /**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */ 2 4 this 3 3139  8 filename 1 2934  
1289 0 0 6 1505 2737 0 0 96 /**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */ 2 4 this 3 3139  8 filename 1 2934  
1290 0 0 7 1506 3119 2254 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 3139  8 filename 1 2934  
1291 0 0 4 1507 2876 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 3139  8 filename 1 2934  
1292 0 0 4 1508 2876 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 3139  8 filename 1 2934  
1293 0 0 4 1509 2876 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 3139  3 out 1 2790  
1294 0 0 6 1510 3118 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
1295 0 0 6 1511 2868 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 3139  8 filename 1 2934  11 auto_unwrap 1 2737  
1296 0 0 6 1512 2780 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 3139  8 filename 1 2934  11 auto_unwrap 1 2737  
1297 0 0 4 1513 2876 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2780  
1298 0 0 6 1514 2868 0 0 0 4 4 this 3 3118  8 filename 1 2934  4 data 1 2868  9 auto_wrap 1 2737  
1299 0 0 6 1515 2790 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 3118  8 filename 1 2934  9 auto_wrap 1 2737  8 truncate 1 2737  
1300 0 0 6 1516 2790 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 3118  8 filename 1 2934  
1301 0 0 4 1517 2876 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2790  
1302 0 0 6 1518 2802 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 3118  8 filename 1 2934  8 truncate 1 2737  
1303 0 0 6 1519 2802 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 3118  8 filename 1 2934  
1304 0 0 4 1520 2876 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 2802  
1305 0 0 7 1485 3141 2632 0 0 0 
1306 0 0 7 1485 3141 2632 0 0 1 4 copy 1 3131  
1307 0 0 7 1485 3141 2632 0 0 1 3 ptr 1 3131  
1308 0 0 7 1487 3131 2394 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 3142  
1309 0 0 6 1488 3141 0 0 0 2 4 this 3 3141  4 copy 1 3131  
1310 0 0 6 1488 3141 0 0 0 2 4 this 3 3141  3 ptr 1 3131  
1311 0 0 6 1489 2737 0 0 259 // These functions normally wouldn't need to be redefined here, but we do so
// anyway just to help out interrogate (which doesn't seem to want to
// automatically export the PointerToBase class).  When this works again in
// interrogate, we can remove these. 1 4 this 3 3142  
1312 0 0 4 1490 2876 0 0 0 1 4 this 3 3141  
1313 0 0 4 1483 2876 0 0 0 1 4 this 3 3144  
1314 0 0 4 1484 2876 0 0 0 2 4 this 3 3145  3 out 1 2790  
1315 0 0 6 1522 2749 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 3147  
1316 0 0 6 1524 2749 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 3147  
1317 0 0 6 1526 2749 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 3147  
1318 0 0 6 1528 2738 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 3148  
1319 0 0 6 1530 3147 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
1320 0 0 6 1531 2737 0 0 0 2 4 this 3 3148  4 mask 1 3036  
1321 0 0 7 1533 3150 2674 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
1322 0 0 7 1533 3150 2674 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 3071  
1323 0 0 6 1535 2737 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 3150  9 file_orig 1 2936  8 file_new 1 2936  10 patch_name 1 2936  
1324 0 0 6 1536 2738 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 3150  10 patch_file 1 2934  
1325 0 0 6 1537 2738 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 3150  10 patch_file 1 2934  4 file 1 2934  
1326 0 0 6 1537 2738 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 3150  10 patch_file 1 2934  9 orig_file 1 2934  11 target_file 1 2934  
1327 0 0 6 1538 2738 0 0 350 /**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 3150  
1328 0 0 6 1539 2737 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 3150  10 patch_file 1 2936  4 file 1 2936  
1329 0 0 6 1539 2737 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 3150  10 patch_file 1 2936  9 orig_file 1 2936  11 target_file 1 2934  
1330 0 0 6 1540 2853 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 3151  
1331 0 0 4 1544 2876 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 3150  15 allow_multifile 1 2737  
1332 0 0 6 1545 2737 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 3150  
1333 0 0 4 1547 2876 0 0 10 /**
 *
 */ 2 4 this 3 3150  6 length 1 2738  
1334 0 0 6 1548 2738 0 0 10 /**
 *
 */ 1 4 this 3 3150  
1335 0 0 4 1549 2876 0 0 10 /**
 *
 */ 1 4 this 3 3150  
1336 0 0 6 1551 2737 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 3151  
1337 0 0 6 1552 3100 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 3151  
1338 0 0 6 1553 3100 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 3151  
1339 0 0 7 1559 3155 2691 0 0 1 5 other 1 3153  
1340 0 0 7 1559 3155 2691 0 0 2 4 name 1 2872  10 maxEntries 1 2738  
1341 0 0 4 1561 2876 0 0 0 3 4 this 3 3155  4 name 1 2872  10 maxEntries 1 2738  
1342 0 0 4 1562 2876 0 0 0 1 4 this 3 3155  
1343 0 0 4 1563 2876 0 0 0 2 4 this 3 3155  3 tag 1 2872  
1344 0 0 4 1564 2876 0 0 0 1 4 this 3 3155  
1345 0 0 4 1564 2876 0 0 0 2 4 this 3 3155  3 tag 1 2872  
1346 0 0 6 1565 2749 0 0 110 // Don't call any of the following during timing: (Because they are slow,
// not because anything will break). 1 4 this 3 3153  
1347 0 0 4 1566 2876 0 0 0 1 3 out 1 2790  
1348 0 0 4 1567 2876 0 0 0 2 4 this 3 3153  3 out 1 2790  
1349 0 0 4 1568 2876 0 0 0 1 3 out 1 2790  
1350 0 0 4 1569 2876 0 0 0 2 4 this 3 3153  3 out 1 2790  
1351 0 0 6 1571 2737 0 0 94 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.
 */ 1 4 this 3 3156  
1352 0 0 6 1572 2737 0 0 90 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.
 */ 1 4 this 3 3156  
1353 0 0 7 1581 3158 2709 0 0 0 
1354 0 0 7 1581 3158 2709 0 0 1 6 param0 0 3159  
1355 0 0 6 1575 2737 0 0 302 /**
 * Sets the registry key to the indicated value as a string.  The supplied
 * string value is automatically converted from whatever encoding is set by
 * TextEncoder::set_default_encoding() and written as a Unicode string.  The
 * registry key must already exist prior to calling this function.
 */ 4 3 key 1 2872  4 name 1 2872  5 value 1 2872  2 rl 1 2859  
1356 0 0 6 1576 2737 0 0 142 /**
 * Sets the registry key to the indicated value as an integer.  The registry
 * key must already exist prior to calling this function.
 */ 4 3 key 1 2872  4 name 1 2872  5 value 1 2738  2 rl 1 2859  
1357 0 0 6 1578 2860 0 0 115 /**
 * Returns the type of the indicated key, or T_none if the key is not known or
 * is some unsupported type.
 */ 3 3 key 1 2872  4 name 1 2872  2 rl 1 2859  
1358 0 0 6 1579 2872 0 0 291 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is a string value.  The string value is automatically encoded using
 * TextEncoder::get_default_encoding().  If the key is not defined or is not a
 * string type value, default_value is returned instead.
 */ 4 3 key 1 2872  4 name 1 2872  13 default_value 1 2872  2 rl 1 2859  
1359 0 0 6 1580 2738 0 0 206 /**
 * Returns the value associated with the indicated registry key, assuming it
 * is an integer value.  If the key is not defined or is not an integer type
 * value, default_value is returned instead.
 */ 4 3 key 1 2872  4 name 1 2872  13 default_value 1 2738  2 rl 1 2859  
1360 0 0 6 1061 2975 0 0 92 // Returns the configure object for accessing config variables from a
// scripting language. 0 
1361 0 0 6 1076 2872 0 0 0 2 6 source 1 2872  17 compression_level 1 2738  
1362 0 0 6 1077 2872 0 0 0 1 6 source 1 2872  
1363 0 0 6 1078 2737 0 0 0 3 6 source 1 2934  4 dest 1 2934  17 compression_level 1 2738  
1364 0 0 6 1079 2737 0 0 0 2 6 source 1 2934  4 dest 1 2934  
1365 0 0 6 1080 2737 0 0 0 3 6 source 1 2780  4 dest 1 2790  17 compression_level 1 2738  
1366 0 0 6 1081 2737 0 0 0 2 6 source 1 2780  4 dest 1 2790  
1367 0 0 6 1082 2737 0 0 0 2 6 source 1 2780  4 dest 1 2790  
1368 0 0 6 1198 2872 0 0 0 5 6 source 1 2872  8 password 1 2872  9 algorithm 1 2872  10 key_length 1 2738  15 iteration_count 1 2738  
1369 0 0 6 1199 2872 0 0 0 2 6 source 1 2872  8 password 1 2872  
1370 0 0 6 1200 2737 0 0 0 6 6 source 1 2934  4 dest 1 2934  8 password 1 2872  9 algorithm 1 2872  10 key_length 1 2738  15 iteration_count 1 2738  
1371 0 0 6 1201 2737 0 0 0 3 6 source 1 2934  4 dest 1 2934  8 password 1 2872  
1372 0 0 6 1202 2737 0 0 0 6 6 source 1 2780  4 dest 1 2790  8 password 1 2872  9 algorithm 1 2872  10 key_length 1 2738  15 iteration_count 1 2738  
1373 0 0 6 1203 2737 0 0 0 3 6 source 1 2780  4 dest 1 2790  8 password 1 2872  
1374 0 0 6 1205 2872 0 0 10 /**
 *
 */ 1 3 err 1 2823  
1375 0 0 6 1206 2738 0 0 0 0 
1376 0 0 6 1207 2872 0 0 10 /**
 *
 */ 0 
1377 0 0 6 1208 2738 0 0 0 0 
1378 0 0 6 1557 2872 0 0 0 4 8 password 1 2872  4 salt 1 2872  5 iters 1 2738  6 keylen 1 2738  
451
2710 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 2711 0 0 0 0 0 0 0 0 0 0

2711 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 1384 1394 0 9 1385 1386 1387 1388 1389 1390 1391 1392 1393 0 0 1 0 2712 0 0 0 0 0

2712 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 1383 0 0 0 0 1 0 2713 0 0 0 0 0

2713 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 1381 1382 0 0 1 0 2714 0 0 0 0 0

2714 13 PointerToVoid 0 43009 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 2 1379 1380 0 0 1 0 2715 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

2715 10 MemoryBase 0 2049 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

2716 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 2717 0 0 0 0 0 0 0 0 0 0

2717 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 1398 1408 0 9 1399 1400 1401 1402 1403 1404 1405 1406 1407 0 0 1 0 2718 0 0 0 0 0

2718 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 1397 0 0 0 0 1 0 2719 0 0 0 0 0

2719 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 1395 1396 0 0 1 0 2714 0 0 0 0 0

2720 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 2721 0 0 0 0 0 0 0 0 0 0

2721 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 1412 1422 0 9 1413 1414 1415 1416 1417 1418 1419 1420 1421 0 0 1 0 2722 0 0 0 0 0

2722 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 1411 0 0 0 0 1 0 2723 0 0 0 0 0

2723 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 1409 1410 0 0 1 0 2714 0 0 0 0 0

2724 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 2725 0 0 0 0 0 0 0 0 0 0

2725 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 1426 1436 0 9 1427 1428 1429 1430 1431 1432 1433 1434 1435 0 0 1 0 2726 0 0 0 0 0

2726 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 1425 0 0 0 0 1 0 2727 0 0 0 0 0

2727 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 1423 1424 0 0 1 0 2714 0 0 0 0 0

2728 17 ConfigDeclaration 0 43009 17 ConfigDeclaration 17 ConfigDeclaration 0 0 0 0 0 2 3161 3170 23 1439 1440 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 0 0 1 0 2729 0 0 0 0 249
/**
 * A single declaration of a config variable, typically defined as one line in
 * a .prc file, e.g.  "show-frame-rate-meter 1".  This is really just a
 * pairing of a string name (actually, a ConfigVariableCore pointer) to a
 * string value.
 */

2729 11 ConfigFlags 0 141313 11 ConfigFlags 11 ConfigFlags 0 0 0 1 1437 1438 0 0 0 0 0 0 2 2730 2731 195
/**
 * This class is the base class of both ConfigVariable and ConfigVariableCore.
 * It exists only to provide a convenient name scoping for some enumerated
 * values common to both classes.
 */

2730 9 ValueType 0 794624 22 ConfigFlags::ValueType 22 ConfigFlags::ValueType 2729 0 0 0 0 0 0 0 0 0 11 12 VT_undefined 25 ConfigFlags::VT_undefined 0
0 7 VT_list 20 ConfigFlags::VT_list 0
1 9 VT_string 22 ConfigFlags::VT_string 0
2 11 VT_filename 24 ConfigFlags::VT_filename 0
3 7 VT_bool 20 ConfigFlags::VT_bool 0
4 6 VT_int 19 ConfigFlags::VT_int 0
5 9 VT_double 22 ConfigFlags::VT_double 0
6 7 VT_enum 20 ConfigFlags::VT_enum 0
7 14 VT_search_path 27 ConfigFlags::VT_search_path 0
8 8 VT_int64 21 ConfigFlags::VT_int64 0
9 8 VT_color 21 ConfigFlags::VT_color 0
10 0 0

2731 13 VariableFlags 0 794624 26 ConfigFlags::VariableFlags 26 ConfigFlags::VariableFlags 2729 0 0 0 0 0 0 0 0 0 5 18 F_trust_level_mask 31 ConfigFlags::F_trust_level_mask 138
// Trust level.  We have the bottom twelve bits reserved for a trust level
// indicator; then the open and closed bits are a special case.
4095 6 F_open 19 ConfigFlags::F_open 0
4096 8 F_closed 21 ConfigFlags::F_closed 0
8192 9 F_dynamic 22 ConfigFlags::F_dynamic 171
// F_dynamic means that the variable name is generated dynamically
// (possibly from a very large pool) and should not be included in the
// normal list of variable names.
16384 9 F_dconfig 22 ConfigFlags::F_dconfig 162
// F_dconfig means that the variable was constructed from the legacy
// DConfig system, rather than directly by the user.  You shouldn't pass
// this in directly.
32768 0 0

2732 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2733 0 0 0 0 0 0 0 0 0 0

2733 10 ConfigPage 0 43009 10 ConfigPage 10 ConfigPage 0 0 0 0 0 8 3162 3163 3164 3165 3166 3167 3168 3169 25 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2734 12 string const 0 8832 17 std::string const 17 std::string const 0 0 2735 0 0 0 0 0 0 0 0 0 0

2735 6 string 0 2105344 11 std::string 11 std::string 0 0 2736 0 0 0 0 0 0 0 0 0 0

2736 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

2737 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

2738 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

2739 19 ConfigDeclaration * 0 8576 19 ConfigDeclaration * 19 ConfigDeclaration * 0 0 2728 0 0 0 0 0 0 0 0 0 0

2740 20 ConfigVariableCore * 0 8576 20 ConfigVariableCore * 20 ConfigVariableCore * 0 0 2741 0 0 0 0 0 0 0 0 0 0

2741 18 ConfigVariableCore 0 43009 18 ConfigVariableCore 18 ConfigVariableCore 0 0 0 0 0 12 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 28 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 4 3245 3246 3247 3248 0 1 0 2729 0 0 0 0 345
/**
 * The internal definition of a ConfigVariable.  This object is shared between
 * all instances of a ConfigVariable that use the same variable name.
 *
 * You cannot create a ConfigVariableCore instance directly; instead, use the
 * make() method, which may return a shared instance.  Once created, these
 * objects are never destructed.
 */

2742 25 ConfigDeclaration const * 0 8576 25 ConfigDeclaration const * 25 ConfigDeclaration const * 0 0 2743 0 0 0 0 0 0 0 0 0 0

2743 23 ConfigDeclaration const 0 8832 23 ConfigDeclaration const 23 ConfigDeclaration const 0 0 2728 0 0 0 0 0 0 0 0 0 0

2744 17 ConfigPageManager 0 43009 17 ConfigPageManager 17 ConfigPageManager 0 0 0 0 0 0 19 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 0 0 1 0 2729 0 0 0 0 124
/**
 * A global object that maintains the set of ConfigPages everywhere in the
 * world, and keeps them in sorted order.
 */

2745 14 ConfigVariable 0 26625 14 ConfigVariable 14 ConfigVariable 0 0 0 1 1546 1547 0 4 1548 1549 1550 1551 0 0 1 0 2746 0 0 0 0 415
/**
 * This is a generic, untyped ConfigVariable.  It is also the base class for
 * the typed ConfigVariables, and contains all of the code common to
 * ConfigVariables of all types (except ConfigVariableList, which is a bit of
 * a special case).
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

2746 18 ConfigVariableBase 0 43009 18 ConfigVariableBase 18 ConfigVariableBase 0 0 0 0 0 6 3183 3184 3185 3186 3187 3188 12 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 0 0 1 0 2729 0 0 0 0 417
/**
 * This class is the base class for both ConfigVariableList and ConfigVariable
 * (and hence for all of the ConfigVariableBool, ConfigVaribleString, etc.
 * classes).  It collects together the common interface for all generic
 * ConfigVariables.
 *
 * Mostly, this class serves as a thin wrapper around ConfigVariableCore
 * and/or ConfigDeclaration, more or less duplicating the interface presented
 * there.
 */

2747 18 ConfigVariableBool 0 141313 18 ConfigVariableBool 18 ConfigVariableBool 0 0 0 1 1552 1562 2 3189 3190 8 1553 1555 1556 1557 1558 1559 1560 1561 0 1 1554 1 0 2745 0 0 0 0 86
/**
 * This is a convenience class to specialize ConfigVariable as a boolean type.
 */

2748 20 ConfigVariableDouble 0 141313 20 ConfigVariableDouble 20 ConfigVariableDouble 0 0 0 1 1563 1573 2 3191 3192 8 1564 1566 1567 1568 1569 1570 1571 1572 0 1 1565 1 0 2745 0 0 0 0 97
/**
 * This is a convenience class to specialize ConfigVariable as a floating-
 * point type.
 */

2749 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

2750 22 ConfigVariableFilename 0 141313 22 ConfigVariableFilename 22 ConfigVariableFilename 0 0 0 1 1574 1697 2 3193 3194 19 1575 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1695 1696 0 1 1576 1 0 2745 0 0 0 0 327
/**
 * This is a convenience class to specialize ConfigVariable as a Filename
 * type.  It is almost the same thing as ConfigVariableString, except it
 * handles an implicit Filename::expand_from() operation so that the user may
 * put OS-specific filenames, or filenames based on environment variables, in
 * the prc file.
 */

2751 8 Filename 0 141313 8 Filename 8 Filename 0 0 0 1 1593 1694 0 99 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 0 1 1609 0 0 1 2752 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

2752 4 Type 0 794624 14 Filename::Type 14 Filename::Type 2751 0 0 0 0 0 0 0 0 0 3 9 T_general 19 Filename::T_general 74
// These type values must fit within the bits allocated for F_type, below.
0 5 T_dso 15 Filename::T_dso 0
1 12 T_executable 22 Filename::T_executable 0
2 0 0

2753 17 ConfigVariableInt 0 141313 17 ConfigVariableInt 17 ConfigVariableInt 0 0 0 1 1698 1708 2 3195 3196 8 1699 1701 1702 1703 1704 1705 1706 1707 0 1 1700 1 0 2745 0 0 0 0 90
/**
 * This is a convenience class to specialize ConfigVariable as an integer
 * type.
 */

2754 19 ConfigVariableInt64 0 141313 19 ConfigVariableInt64 19 ConfigVariableInt64 0 0 0 1 1709 1719 2 3197 3198 8 1710 1712 1713 1714 1715 1716 1717 1718 0 1 1711 1 0 2745 0 0 0 0 96
/**
 * This is a convenience class to specialize ConfigVariable as a 64-bit
 * integer type.
 */

2755 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 2756 0 0 0 0 0 0 0 0 0 0

2756 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2757 18 ConfigVariableList 0 26625 18 ConfigVariableList 18 ConfigVariableList 0 0 0 1 1720 1721 0 8 1722 1723 1724 1725 1726 1727 1728 1729 0 0 1 0 2746 0 0 0 0 481
/**
 * This class is similar to ConfigVariable, but it reports its value as a list
 * of strings.  In this special case, all of the declarations of the variable
 * are returned as the elements of this list, in order.
 *
 * Note that this is different from a normal ConfigVariableString, which just
 * returns its topmost value, which can optionally be treated as a number of
 * discrete words by dividing it at the spaces.
 *
 * A ConfigVariableList cannot be modified locally.
 */

2758 21 ConfigVariableManager 0 43009 21 ConfigVariableManager 21 ConfigVariableManager 0 0 0 0 0 1 3199 13 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1 3249 0 0 0 0 163
/**
 * A global object that maintains the set of ConfigVariables (actually,
 * ConfigVariableCores) everywhere in the world, and keeps them in sorted
 * order.
 */

2759 24 ConfigVariableSearchPath 0 26625 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 1 1743 1744 3 3200 3202 3203 15 1746 1747 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1 3251 1 1745 1 0 2746 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2760 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 2761 0 0 0 0 0 0 0 0 0 0

2761 11 DSearchPath 0 26625 11 DSearchPath 11 DSearchPath 0 0 0 1 1758 1760 1 3201 14 1759 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1 3250 0 0 0 1 2762 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

2762 7 Results 0 288769 20 DSearchPath::Results 20 DSearchPath::Results 2761 0 0 1 1748 1750 0 8 1749 1751 1752 1753 1754 1755 1756 1757 0 0 0 0 0 0

2763 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 2751 0 0 0 0 0 0 0 0 0 0

2764 20 ConfigVariableString 0 141313 20 ConfigVariableString 20 ConfigVariableString 0 0 0 1 1787 1802 2 3204 3205 13 1788 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 0 1 1789 1 0 2745 0 0 0 0 85
/**
 * This is a convenience class to specialize ConfigVariable as a string type.
 */

2765 7 DConfig 0 141313 7 DConfig 7 DConfig 0 0 0 1 1808 1809 0 5 1803 1804 1805 1806 1807 0 0 0 0 0 290
/**
 * This class emulates the old dconfig-style interface to our Panda config
 * system.  It exists only to provide backward-compatible support, and it is
 * used primarily by Python code.  For modern code, use the new
 * ConfigVariable* interface instead of this deprecated interface.
 */

2766 20 ExecutionEnvironment 0 141313 20 ExecutionEnvironment 20 ExecutionEnvironment 0 0 0 1 1823 1824 0 13 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 0 0 0 0 0 232
/**
 * Encapsulates access to the environment variables and command-line arguments
 * at the time of execution.  This is encapsulated to support accessing these
 * things during static init time, which seems to be risky at best.
 */

2767 10 FileStream 0 26625 10 FileStream 10 FileStream 0 0 0 1 1849 1850 0 2 1851 1852 0 0 1 0 2768 0 0 0 0 324
/**
 * Implements a C++ stream object suitable for reading from and/or writing to
 * files on disk.  This is similar to fstream, but it provides low-level
 * support for Panda's simple-threading implementation (using this interface
 * will block only the current thread, rather than the entire process, on I/O
 * waits).
 */

2768 8 iostream 0 141313 8 iostream 8 iostream 0 0 0 0 1848 0 1 1847 0 0 2 3 2769 1837 1838 3 2774 1845 1846 0 0 0

2769 7 istream 0 141313 7 istream 7 istream 0 0 0 0 1836 0 3 1833 1834 1835 0 0 1 5 2770 1832 0 0 0 0

2770 3 ios 0 141313 3 ios 3 ios 0 0 0 0 1831 0 5 1826 1827 1828 1829 1830 0 0 1 0 2771 0 0 0 0 0

2771 8 ios_base 0 141313 8 ios_base 8 ios_base 0 0 0 0 1825 0 0 0 0 0 0 2 2772 2773 144
// We need to expose one method in each class to force it to publish.
// But we'd like to expose some of these methods anyway, so no
// problem.

2772 7 seekdir 0 794624 17 ios_base::seekdir 17 ios_base::seekdir 2771 0 0 0 0 0 0 0 0 0 3 3 beg 13 ios_base::beg 0
0 3 cur 13 ios_base::cur 0
1 3 end 13 ios_base::end 0
2 0 0

2773 8 openmode 0 794624 18 ios_base::openmode 18 ios_base::openmode 2771 0 0 0 0 0 0 0 0 0 0 0 0

2774 7 ostream 0 141313 7 ostream 7 ostream 0 0 0 0 1844 0 4 1840 1841 1842 1843 0 0 1 5 2770 1839 0 0 0 0

2775 11 GlobPattern 0 141313 11 GlobPattern 11 GlobPattern 0 0 0 1 1853 1869 3 3206 3207 3208 15 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 0 0 0 0 0 538
/**
 * This class can be used to test for string matches against standard Unix-
 * shell filename globbing conventions.  It serves as a portable standin for
 * the Posix fnmatch() call.
 *
 * A GlobPattern is given a pattern string, which can contain operators like
 * *, ?, and [].  Then it can be tested against any number of candidate
 * strings; for each candidate, it will indicate whether the string matches
 * the pattern or not.  It can be used, for example, to scan a directory for
 * all files matching a particular pattern.
 */

2776 14 IDecryptStream 0 141313 14 IDecryptStream 14 IDecryptStream 0 0 0 1 1870 1876 3 3209 3210 3211 5 1871 1872 1873 1874 1875 0 0 1 0 2769 0 0 0 0 340
/**
 * An input stream object that uses OpenSSL to decrypt the input from another
 * source stream on-the-fly.
 *
 * Attach an IDecryptStream to an existing istream that provides encrypted
 * data, as generated by an OEncryptStream, and read the corresponding
 * unencrypted data from the IDecryptStream.
 *
 * Seeking is not supported.
 */

2777 11 IFileStream 0 26625 11 IFileStream 11 IFileStream 0 0 0 1 1877 1878 0 2 1879 1880 0 0 1 0 2769 0 0 0 0 303
/**
 * Implements a C++ stream object suitable for reading from files on disk.
 * This is similar to ifstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

2778 14 IStreamWrapper 0 26625 14 IStreamWrapper 14 IStreamWrapper 0 0 0 1 1886 1887 1 3212 1 1888 0 0 1 5 2779 1885 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

2779 17 StreamWrapperBase 0 141313 17 StreamWrapperBase 17 StreamWrapperBase 0 0 0 1 1883 1884 0 2 1881 1882 0 0 0 0 0 116
/**
 * The base class for both IStreamWrapper and OStreamWrapper, this provides
 * the common locking interface.
 */

2780 9 istream * 0 8576 9 istream * 9 istream * 0 0 2769 0 0 0 0 0 0 0 0 0 0

2781 10 LineStream 0 141313 10 LineStream 10 LineStream 0 0 0 1 1889 1893 0 3 1890 1891 1892 0 0 1 0 2774 0 0 0 0 454
/**
 * This is a special ostream that writes to a memory buffer, like ostrstream.
 * However, its contents can be continuously extracted as a sequence of lines
 * of text.
 *
 * Unlike ostrstream, which can only be extracted from once (and then the
 * buffer freezes and it can no longer be written to), the LineStream is not
 * otherwise affected when a line of text is extracted.  More text can still
 * be written to it and continuously extracted.
 */

2782 15 NeverFreeMemory 0 141313 15 NeverFreeMemory 15 NeverFreeMemory 0 0 0 1 1897 1898 0 3 1894 1895 1896 0 0 0 0 0 505
/**
 * This class is used to allocate bytes of memory from a pool that is never
 * intended to be freed.  It is particularly useful to support DeletedChain,
 * which allocates memory in just such a fashion.
 *
 * When it is known that memory will not be freed, it is preferable to use
 * this instead of the standard malloc() (or global_operator_new()) call,
 * since this will help reduce fragmentation problems in the dynamic heap.
 * Also, memory allocated from here will exhibit less wasted space.
 */

2783 6 Notify 0 26625 6 Notify 6 Notify 0 0 0 1 1899 1900 0 15 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 0 0 0 0 0 529
/**
 * An object that handles general error reporting to the user.  It contains a
 * pointer to an ostream, initially cerr, which can be reset at will to point
 * to different output devices, according to the needs of the application.
 * All output generated within Panda should vector through the Notify ostream.
 *
 * This also includes a collection of Categories and Severities, which may be
 * independently enabled or disabled, so that error messages may be squelched
 * or respected according to the wishes of the user.
 */

2784 14 NotifyCategory 0 141313 14 NotifyCategory 14 NotifyCategory 0 0 0 1 1941 1942 4 3213 3214 3215 3216 21 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1 3252 0 2 3 2715 1916 1917 3 2729 1918 1919 0 0 284
/**
 * A particular category of error messages.  Typically there will be one of
 * these per package, so that we can turn on or off error messages at least at
 * a package level; further nested categories can be created within a package
 * if a finer grain of control is required.
 */

2785 14 NotifySeverity 0 532481 14 NotifySeverity 14 NotifySeverity 0 0 0 0 0 0 0 0 0 0 7 14 NS_unspecified 14 NS_unspecified 41
// Never used, a special case internally.
0 7 NS_spam 7 NS_spam 0
1 8 NS_debug 8 NS_debug 0
2 7 NS_info 7 NS_info 0
3 10 NS_warning 10 NS_warning 0
4 8 NS_error 8 NS_error 37
// Specifically, a recoverable error.
5 8 NS_fatal 8 NS_fatal 55
// A nonrecoverable error--expect abort() or core dump.
6 0 0

2786 16 NotifyCategory * 0 8576 16 NotifyCategory * 16 NotifyCategory * 0 0 2784 0 0 0 0 0 0 0 0 0 0

2787 14 OEncryptStream 0 141313 14 OEncryptStream 14 OEncryptStream 0 0 0 1 1943 1952 3 3217 3218 3219 5 1944 1945 1946 1947 1948 0 0 1 0 2774 0 0 0 0 296
/**
 * An input stream object that uses OpenSSL to encrypt data to another
 * destination stream on-the-fly.
 *
 * Attach an OEncryptStream to an existing ostream that will accept encrypted
 * data, and write your unencrypted source data to the OEncryptStream.
 *
 * Seeking is not supported.
 */

2788 11 OFileStream 0 26625 11 OFileStream 11 OFileStream 0 0 0 1 1953 1954 0 2 1955 1956 0 0 1 0 2774 0 0 0 0 302
/**
 * Implements a C++ stream object suitable for writing to files on disk.  This
 * is similar to ofstream, but it provides low-level support for Panda's
 * simple-threading implementation (using this interface will block only the
 * current thread, rather than the entire process, on I/O waits).
 */

2789 14 OStreamWrapper 0 26625 14 OStreamWrapper 14 OStreamWrapper 0 0 0 1 1958 1959 1 3220 1 1960 0 0 1 5 2779 1957 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

2790 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 2774 0 0 0 0 0 0 0 0 0 0

2791 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 2792 0 0 0 0 0 0 0 0 0 0

2792 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 1961 1978 0 16 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 0 0 1 0 2712 0 0 0 0 0

2793 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 2794 0 0 0 0 0 0 0 0 0 0

2794 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 1979 1996 0 16 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 0 0 1 0 2718 0 0 0 0 0

2795 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 2796 0 0 0 0 0 0 0 0 0 0

2796 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 1997 2014 0 16 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 0 0 1 0 2722 0 0 0 0 0

2797 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 2798 0 0 0 0 0 0 0 0 0 0

2798 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 2015 2032 0 16 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 0 0 1 0 2726 0 0 0 0 0

2799 11 PandaSystem 0 43009 11 PandaSystem 11 PandaSystem 0 0 0 0 0 1 3221 24 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 1 3253 0 0 0 0 217
/**
 * This class is used as a namespace to group several global properties of
 * Panda.  Application developers can use this class to query the runtime
 * version or capabilities of the current Panda environment.
 */

2800 12 StreamReader 0 26625 12 StreamReader 12 StreamReader 0 0 0 1 2057 2059 1 3222 29 2058 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

2801 13 StreamWrapper 0 26625 13 StreamWrapper 13 StreamWrapper 0 0 0 1 2092 2093 1 3223 1 2094 0 0 2 3 2778 2088 2089 3 2789 2090 2091 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

2802 10 iostream * 0 8576 10 iostream * 10 iostream * 0 0 2768 0 0 0 0 0 0 0 0 0 0

2803 12 StreamWriter 0 26625 12 StreamWriter 12 StreamWriter 0 0 0 1 2095 2097 2 3224 3225 29 2096 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

2804 11 TextEncoder 0 141313 11 TextEncoder 11 TextEncoder 0 0 0 1 2128 2165 0 36 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 0 0 0 0 1 2805 400
/**
 * This class can be used to convert text between multiple representations,
 * e.g.  utf-8 to Unicode.  You may use it as a static class object, passing
 * the encoding each time, or you may create an instance and use that object,
 * which will record the current encoding and retain the current string.
 *
 * This class is also a base class of TextNode, which inherits this
 * functionality.
 */

2805 8 Encoding 0 794624 21 TextEncoder::Encoding 21 TextEncoder::Encoding 2804 0 0 0 0 0 0 0 0 0 3 9 E_iso8859 22 TextEncoder::E_iso8859 0
0 6 E_utf8 19 TextEncoder::E_utf8 0
1 9 E_unicode 22 TextEncoder::E_unicode 0
2 0 0

2806 10 TypeHandle 0 141313 10 TypeHandle 10 TypeHandle 0 0 0 1 2190 2191 4 3226 3227 3228 3229 23 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 0 1 2189 0 0 1 2807 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

2807 11 MemoryClass 0 794624 23 TypeHandle::MemoryClass 23 TypeHandle::MemoryClass 2806 0 0 0 0 0 0 0 0 0 5 12 MC_singleton 24 TypeHandle::MC_singleton 0
0 8 MC_array 20 TypeHandle::MC_array 0
1 23 MC_deleted_chain_active 35 TypeHandle::MC_deleted_chain_active 0
2 25 MC_deleted_chain_inactive 37 TypeHandle::MC_deleted_chain_inactive 0
3 8 MC_limit 20 TypeHandle::MC_limit 70
// Not a real value, just a placeholder for the maximum
// enum value.
4 0 0

2808 12 TypeRegistry 0 141313 12 TypeRegistry 12 TypeRegistry 0 0 0 1 2211 2212 2 3230 3231 19 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2 3254 3255 0 1 0 2715 0 0 0 0 324
/**
 * The TypeRegistry class maintains all the assigned TypeHandles in a given
 * system.  There should be only one TypeRegistry class during the lifetime of
 * the application.  It will be created on the local heap initially, and it
 * should be migrated to shared memory as soon as shared memory becomes
 * available.
 */

2809 11 TypedObject 0 26625 11 TypedObject 11 TypedObject 0 0 0 0 2215 1 3232 5 2216 2217 2218 2219 2220 0 0 1 3 2715 2213 2214 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

2810 7 fstream 0 141313 7 fstream 7 fstream 0 0 0 1 2221 2223 0 1 2222 0 0 1 0 2768 0 0 0 0 0

2811 8 ifstream 0 141313 8 ifstream 8 ifstream 0 0 0 1 2224 2226 0 1 2225 0 0 1 0 2769 0 0 0 0 0

2812 8 ofstream 0 141313 8 ofstream 8 ofstream 0 0 0 1 2227 2229 0 1 2228 0 0 1 0 2774 0 0 0 0 0

2813 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 0 2250 0 20 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 0 0 1 0 2814 0 0 0 0 293
/**
 * This class is used strictly for debugging purposes, specifically for
 * tracking memory leaks of reference-counted objects: it keeps a record of
 * every such object currently allocated.
 *
 * When compiled with NDEBUG set, this entire class does nothing and compiles
 * to nothing.
 */

2814 10 MemoryHook 0 2049 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 641
/**
 * This class provides a wrapper around the various possible malloc schemes
 * Panda might employ.  It also exists to allow the MemoryUsage class in Panda
 * to insert callback hooks to track the size of allocated pointers.
 *
 * The PANDA_MALLOC_* and PANDA_FREE_* macros are defined to vector through
 * through this class (except in production builds) to facilitate that.  Every
 * memory allocation call in Panda should therefore use these macros instead
 * of direct calls to malloc or free.  (C++ new and delete operators may be
 * employed for classes which inherit from MemoryBase; otherwise, use the
 * PANDA_MALLOC macros.)
 */

2815 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 2254 1 3233 6 2255 2256 2257 2258 2259 2260 0 0 1 3 2715 2252 2253 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

2816 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 2262 2254 0 1 2261 0 0 1 0 2815 0 0 0 0 10
/**
 *
 */

2817 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 2254 0 1 2270 0 0 1 0 2815 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

2818 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 2271 2272 2273 2274 2275 2276 0 0 1 0 2815 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

2819 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 2277 2215 0 46 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 0 0 1 0 2809 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

2820 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 2324 0 9 2325 2326 2327 2328 2329 2330 2331 2332 2333 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

2821 16 DatagramIterator 0 26625 16 DatagramIterator 16 DatagramIterator 0 0 0 1 2334 2336 0 35 2335 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

2822 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 2371 0 7 2372 2373 2374 2375 2376 2377 2378 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

2823 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

2824 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 2394 0 1 2393 0 0 2 3 2809 2389 2390 3 2815 2391 2392 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

2825 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 2395 2398 0 2 2396 2397 0 0 1 0 2824 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2826 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 2399 2408 0 8 2400 2401 2402 2403 2404 2405 2406 2407 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

2827 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 2409 2439 0 29 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

2828 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 2440 2441 0 9 2442 2443 2444 2445 2446 2447 2448 2449 2450 2 3256 3257 0 0 0 0 785
/**
 * This is a list of pointers returned by a MemoryUsage object in response to
 * some query.
 *
 * Warning: once pointers are stored in a MemoryUsagePointers object, they are
 * reference-counted, and will not be freed until the MemoryUsagePointers
 * object is freed (or clear() is called on the object).  However, they may
 * not even be freed then; pointers may leak once they have been added to this
 * structure.  This is because we don't store enough information in this
 * structure to correctly free the pointers that have been added.  Since this
 * is intended primarily as a debugging tool, this is not a major issue.
 *
 * This class is just a user interface to talk about pointers stored in a
 * MemoryUsage object.  It doesn't even exist when compiled with NDEBUG.
 */

2829 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 2451 2454 0 2 2452 2453 0 0 1 0 2769 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

2830 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 2455 2458 0 2 2456 2457 0 0 1 0 2774 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

2831 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 2459 2462 0 2 2460 2461 0 0 1 0 2768 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

2832 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 2463 2464 2465 2466 2467 2468 2469 2470 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

2833 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 2471 2254 0 61 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 1 3258 0 1 0 2815 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

2834 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 2533 2541 1 3234 7 2534 2535 2536 2537 2538 2539 2540 0 0 1 0 2715 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

2835 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 2542 2550 0 7 2543 2544 2545 2546 2547 2548 2549 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

2836 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 2580 0 29 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 0 0 1 0 2824 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

2837 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 2582 0 1 2581 0 0 1 0 2836 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

2838 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 2394 0 6 2583 2584 2585 2586 2587 2588 0 0 1 0 2824 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

2839 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 2589 2394 0 2 2590 2591 0 0 1 0 2838 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

2840 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 2592 2594 0 1 2593 0 0 1 0 2838 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

2841 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 2595 2598 0 2 2596 2597 0 0 1 0 2838 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

2842 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 2602 0 3 2599 2600 2601 0 0 1 0 2836 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

2843 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 2603 2398 0 1 2604 0 0 1 0 2825 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

2844 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 2605 2608 0 2 2606 2607 0 0 1 0 2769 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

2845 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 2609 2612 0 2 2610 2611 0 0 1 0 2774 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

2846 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 2619 2254 0 6 2613 2614 2615 2616 2617 2618 1 3259 0 1 0 2815 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

2847 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 2620 2621 1 3235 37 2622 2623 2624 2625 2626 2627 2628 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 1 3260 0 0 0 1 2848 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

2848 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 2847 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

2849 29 PointerTo< VirtualFileMount > 0 26625 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 2631 2632 0 4 2633 2634 2635 2636 0 0 1 0 2850 0 0 0 0 0

2850 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 2629 2630 0 0 1 0 2714 0 0 0 0 0

2851 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 3236 3237 3238 3239 6 2667 2668 2669 2670 2671 2672 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

2852 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 2673 2674 5 3240 3241 3242 3243 3244 14 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 0 0 0 0 0 10
/**
 *
 */

2853 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2854 0 0 0 0 0 0 0 0 0 0

2854 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2855 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 2827 0 0 0 0 0 0 0 0 0 0

2856 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 2690 2691 0 9 2692 2693 2694 2695 2696 2697 2698 2699 2700 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

2857 17 WeakPointerToVoid 0 43009 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 0 0 2 2701 2702 0 0 1 0 2714 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

2858 15 WindowsRegistry 0 141313 15 WindowsRegistry 15 WindowsRegistry 0 0 0 1 2708 2709 0 5 2703 2704 2705 2706 2707 0 0 0 0 2 2859 2860 249
/**
 * This class provides a hook to Python to read and write strings and integers
 * to the windows registry.  It automatically converts strings from utf-8
 * encoding and stores them in Unicode (and conversely reconverts them on
 * retrieval).
 */

2859 8 RegLevel 0 794624 25 WindowsRegistry::RegLevel 25 WindowsRegistry::RegLevel 2858 0 0 0 0 0 0 0 0 0 2 10 rl_machine 27 WindowsRegistry::rl_machine 0
0 7 rl_user 24 WindowsRegistry::rl_user 0
1 0 0

2860 4 Type 0 794624 21 WindowsRegistry::Type 21 WindowsRegistry::Type 2858 0 0 0 0 0 0 0 0 0 3 6 T_none 23 WindowsRegistry::T_none 0
0 5 T_int 22 WindowsRegistry::T_int 0
1 8 T_string 25 WindowsRegistry::T_string 0
2 0 0

2861 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 2793 0 0 0 0 0 0 0 0 0 0

2862 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 2716 0 0 0 0 0 0 0 0 0 0

2863 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 2864 0 0 0 0 0 0 0 0 0 0

2864 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 2711 0 0 0 0 0 0 0 0 0 0

2865 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 2711 0 0 0 0 0 0 0 0 0 0

2866 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 2867 0 0 0 0 0 0 0 0 0 0

2867 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 2792 0 0 0 0 0 0 0 0 0 0

2868 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 2869 0 0 0 0 0 0 0 0 0 0

2869 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 2870 0 0 0 0 0 0 0 0 0 0

2870 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

2871 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2872 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

2873 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 2874 0 0 0 0 0 0 0 0 0 0

2874 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 2875 0 0 0 0 0 0 0 0 0 0

2875 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

2876 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

2877 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 2713 0 0 0 0 0 0 0 0 0 0

2878 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 2879 0 0 0 0 0 0 0 0 0 0

2879 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 2713 0 0 0 0 0 0 0 0 0 0

2880 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 2881 0 0 0 0 0 0 0 0 0 0

2881 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 2714 0 0 0 0 0 0 0 0 0 0

2882 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 2871 0 0 0 0 0 0 0 0 0 0

2883 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 2884 0 0 0 0 0 0 0 0 0 0

2884 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 2717 0 0 0 0 0 0 0 0 0 0

2885 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 2717 0 0 0 0 0 0 0 0 0 0

2886 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 2887 0 0 0 0 0 0 0 0 0 0

2887 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 2794 0 0 0 0 0 0 0 0 0 0

2888 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 2719 0 0 0 0 0 0 0 0 0 0

2889 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 2890 0 0 0 0 0 0 0 0 0 0

2890 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 2719 0 0 0 0 0 0 0 0 0 0

2891 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 2892 0 0 0 0 0 0 0 0 0 0

2892 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 2721 0 0 0 0 0 0 0 0 0 0

2893 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 2721 0 0 0 0 0 0 0 0 0 0

2894 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 2895 0 0 0 0 0 0 0 0 0 0

2895 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 2796 0 0 0 0 0 0 0 0 0 0

2896 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 2723 0 0 0 0 0 0 0 0 0 0

2897 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 2898 0 0 0 0 0 0 0 0 0 0

2898 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 2723 0 0 0 0 0 0 0 0 0 0

2899 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 2900 0 0 0 0 0 0 0 0 0 0

2900 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 2725 0 0 0 0 0 0 0 0 0 0

2901 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 2725 0 0 0 0 0 0 0 0 0 0

2902 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 2903 0 0 0 0 0 0 0 0 0 0

2903 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 2798 0 0 0 0 0 0 0 0 0 0

2904 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

2905 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 2727 0 0 0 0 0 0 0 0 0 0

2906 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 2907 0 0 0 0 0 0 0 0 0 0

2907 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 2727 0 0 0 0 0 0 0 0 0 0

2908 13 ConfigFlags * 0 8576 13 ConfigFlags * 13 ConfigFlags * 0 0 2729 0 0 0 0 0 0 0 0 0 0

2909 19 ConfigFlags const * 0 8576 19 ConfigFlags const * 19 ConfigFlags const * 0 0 2910 0 0 0 0 0 0 0 0 0 0

2910 17 ConfigFlags const 0 8832 17 ConfigFlags const 17 ConfigFlags const 0 0 2729 0 0 0 0 0 0 0 0 0 0

2911 18 ConfigPage const * 0 8576 18 ConfigPage const * 18 ConfigPage const * 0 0 2912 0 0 0 0 0 0 0 0 0 0

2912 16 ConfigPage const 0 8832 16 ConfigPage const 16 ConfigPage const 0 0 2733 0 0 0 0 0 0 0 0 0 0

2913 26 ConfigVariableCore const * 0 8576 26 ConfigVariableCore const * 26 ConfigVariableCore const * 0 0 2914 0 0 0 0 0 0 0 0 0 0

2914 24 ConfigVariableCore const 0 8832 24 ConfigVariableCore const 24 ConfigVariableCore const 0 0 2741 0 0 0 0 0 0 0 0 0 0

2915 25 ConfigPageManager const * 0 8576 25 ConfigPageManager const * 25 ConfigPageManager const * 0 0 2916 0 0 0 0 0 0 0 0 0 0

2916 23 ConfigPageManager const 0 8832 23 ConfigPageManager const 23 ConfigPageManager const 0 0 2744 0 0 0 0 0 0 0 0 0 0

2917 19 ConfigPageManager * 0 8576 19 ConfigPageManager * 19 ConfigPageManager * 0 0 2744 0 0 0 0 0 0 0 0 0 0

2918 13 DSearchPath * 0 8576 13 DSearchPath * 13 DSearchPath * 0 0 2761 0 0 0 0 0 0 0 0 0 0

2919 22 ConfigVariable const * 0 8576 22 ConfigVariable const * 22 ConfigVariable const * 0 0 2920 0 0 0 0 0 0 0 0 0 0

2920 20 ConfigVariable const 0 8832 20 ConfigVariable const 20 ConfigVariable const 0 0 2745 0 0 0 0 0 0 0 0 0 0

2921 16 ConfigVariable * 0 8576 16 ConfigVariable * 16 ConfigVariable * 0 0 2745 0 0 0 0 0 0 0 0 0 0

2922 26 ConfigVariableBase const * 0 8576 26 ConfigVariableBase const * 26 ConfigVariableBase const * 0 0 2923 0 0 0 0 0 0 0 0 0 0

2923 24 ConfigVariableBase const 0 8832 24 ConfigVariableBase const 24 ConfigVariableBase const 0 0 2746 0 0 0 0 0 0 0 0 0 0

2924 20 ConfigVariableBase * 0 8576 20 ConfigVariableBase * 20 ConfigVariableBase * 0 0 2746 0 0 0 0 0 0 0 0 0 0

2925 26 ConfigVariableBool const * 0 8576 26 ConfigVariableBool const * 26 ConfigVariableBool const * 0 0 2926 0 0 0 0 0 0 0 0 0 0

2926 24 ConfigVariableBool const 0 8832 24 ConfigVariableBool const 24 ConfigVariableBool const 0 0 2747 0 0 0 0 0 0 0 0 0 0

2927 20 ConfigVariableBool * 0 8576 20 ConfigVariableBool * 20 ConfigVariableBool * 0 0 2747 0 0 0 0 0 0 0 0 0 0

2928 28 ConfigVariableDouble const * 0 8576 28 ConfigVariableDouble const * 28 ConfigVariableDouble const * 0 0 2929 0 0 0 0 0 0 0 0 0 0

2929 26 ConfigVariableDouble const 0 8832 26 ConfigVariableDouble const 26 ConfigVariableDouble const 0 0 2748 0 0 0 0 0 0 0 0 0 0

2930 22 ConfigVariableDouble * 0 8576 22 ConfigVariableDouble * 22 ConfigVariableDouble * 0 0 2748 0 0 0 0 0 0 0 0 0 0

2931 30 ConfigVariableFilename const * 0 8576 30 ConfigVariableFilename const * 30 ConfigVariableFilename const * 0 0 2932 0 0 0 0 0 0 0 0 0 0

2932 28 ConfigVariableFilename const 0 8832 28 ConfigVariableFilename const 28 ConfigVariableFilename const 0 0 2750 0 0 0 0 0 0 0 0 0 0

2933 24 ConfigVariableFilename * 0 8576 24 ConfigVariableFilename * 24 ConfigVariableFilename * 0 0 2750 0 0 0 0 0 0 0 0 0 0

2934 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 2763 0 0 0 0 0 0 0 0 0 0

2935 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

2936 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 2751 0 0 0 0 0 0 0 0 0 0

2937 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 2938 0 0 0 0 0 0 0 0 0 0

2938 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 2939 0 0 0 0 0 0 0 0 0 0

2939 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

2940 6 time_t 0 2105344 6 time_t 6 time_t 0 0 2941 0 0 0 0 0 0 0 0 0 0

2941 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

2942 10 streamsize 0 2105344 10 streamsize 10 streamsize 0 0 2738 0 0 0 0 0 0 0 0 0 0

2943 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 2760 0 0 0 0 0 0 0 0 0 0

2944 10 ifstream * 0 8576 10 ifstream * 10 ifstream * 0 0 2811 0 0 0 0 0 0 0 0 0 0

2945 11 pifstream * 0 8576 11 pifstream * 11 pifstream * 0 0 2946 0 0 0 0 0 0 0 0 0 0

2946 9 pifstream 0 2105344 9 pifstream 9 pifstream 0 0 2777 0 0 0 0 0 0 0 0 0 0

2947 10 ofstream * 0 8576 10 ofstream * 10 ofstream * 0 0 2812 0 0 0 0 0 0 0 0 0 0

2948 11 pofstream * 0 8576 11 pofstream * 11 pofstream * 0 0 2949 0 0 0 0 0 0 0 0 0 0

2949 9 pofstream 0 2105344 9 pofstream 9 pofstream 0 0 2788 0 0 0 0 0 0 0 0 0 0

2950 9 fstream * 0 8576 9 fstream * 9 fstream * 0 0 2810 0 0 0 0 0 0 0 0 0 0

2951 10 pfstream * 0 8576 10 pfstream * 10 pfstream * 0 0 2952 0 0 0 0 0 0 0 0 0 0

2952 8 pfstream 0 2105344 8 pfstream 8 pfstream 0 0 2767 0 0 0 0 0 0 0 0 0 0

2953 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 2806 0 0 0 0 0 0 0 0 0 0

2954 25 ConfigVariableInt const * 0 8576 25 ConfigVariableInt const * 25 ConfigVariableInt const * 0 0 2955 0 0 0 0 0 0 0 0 0 0

2955 23 ConfigVariableInt const 0 8832 23 ConfigVariableInt const 23 ConfigVariableInt const 0 0 2753 0 0 0 0 0 0 0 0 0 0

2956 19 ConfigVariableInt * 0 8576 19 ConfigVariableInt * 19 ConfigVariableInt * 0 0 2753 0 0 0 0 0 0 0 0 0 0

2957 27 ConfigVariableInt64 const * 0 8576 27 ConfigVariableInt64 const * 27 ConfigVariableInt64 const * 0 0 2958 0 0 0 0 0 0 0 0 0 0

2958 25 ConfigVariableInt64 const 0 8832 25 ConfigVariableInt64 const 25 ConfigVariableInt64 const 0 0 2754 0 0 0 0 0 0 0 0 0 0

2959 21 ConfigVariableInt64 * 0 8576 21 ConfigVariableInt64 * 21 ConfigVariableInt64 * 0 0 2754 0 0 0 0 0 0 0 0 0 0

2960 26 ConfigVariableList const * 0 8576 26 ConfigVariableList const * 26 ConfigVariableList const * 0 0 2961 0 0 0 0 0 0 0 0 0 0

2961 24 ConfigVariableList const 0 8832 24 ConfigVariableList const 24 ConfigVariableList const 0 0 2757 0 0 0 0 0 0 0 0 0 0

2962 20 ConfigVariableList * 0 8576 20 ConfigVariableList * 20 ConfigVariableList * 0 0 2757 0 0 0 0 0 0 0 0 0 0

2963 23 ConfigVariableManager * 0 8576 23 ConfigVariableManager * 23 ConfigVariableManager * 0 0 2758 0 0 0 0 0 0 0 0 0 0

2964 29 ConfigVariableManager const * 0 8576 29 ConfigVariableManager const * 29 ConfigVariableManager const * 0 0 2965 0 0 0 0 0 0 0 0 0 0

2965 27 ConfigVariableManager const 0 8832 27 ConfigVariableManager const 27 ConfigVariableManager const 0 0 2758 0 0 0 0 0 0 0 0 0 0

2966 32 ConfigVariableSearchPath const * 0 8576 32 ConfigVariableSearchPath const * 32 ConfigVariableSearchPath const * 0 0 2967 0 0 0 0 0 0 0 0 0 0

2967 30 ConfigVariableSearchPath const 0 8832 30 ConfigVariableSearchPath const 30 ConfigVariableSearchPath const 0 0 2759 0 0 0 0 0 0 0 0 0 0

2968 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2759 0 0 0 0 0 0 0 0 0 0

2969 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 2762 0 0 0 0 0 0 0 0 0 0

2970 15 Results const * 0 8576 28 DSearchPath::Results const * 28 DSearchPath::Results const * 0 0 2971 0 0 0 0 0 0 0 0 0 0

2971 13 Results const 0 8832 26 DSearchPath::Results const 26 DSearchPath::Results const 0 0 2762 0 0 0 0 0 0 0 0 0 0

2972 28 ConfigVariableString const * 0 8576 28 ConfigVariableString const * 28 ConfigVariableString const * 0 0 2973 0 0 0 0 0 0 0 0 0 0

2973 26 ConfigVariableString const 0 8832 26 ConfigVariableString const 26 ConfigVariableString const 0 0 2764 0 0 0 0 0 0 0 0 0 0

2974 22 ConfigVariableString * 0 8576 22 ConfigVariableString * 22 ConfigVariableString * 0 0 2764 0 0 0 0 0 0 0 0 0 0

2975 9 DConfig * 0 8576 9 DConfig * 9 DConfig * 0 0 2765 0 0 0 0 0 0 0 0 0 0

2976 15 DConfig const * 0 8576 15 DConfig const * 15 DConfig const * 0 0 2977 0 0 0 0 0 0 0 0 0 0

2977 13 DConfig const 0 8832 13 DConfig const 13 DConfig const 0 0 2765 0 0 0 0 0 0 0 0 0 0

2978 28 ExecutionEnvironment const * 0 8576 28 ExecutionEnvironment const * 28 ExecutionEnvironment const * 0 0 2979 0 0 0 0 0 0 0 0 0 0

2979 26 ExecutionEnvironment const 0 8832 26 ExecutionEnvironment const 26 ExecutionEnvironment const 0 0 2766 0 0 0 0 0 0 0 0 0 0

2980 22 ExecutionEnvironment * 0 8576 22 ExecutionEnvironment * 22 ExecutionEnvironment * 0 0 2766 0 0 0 0 0 0 0 0 0 0

2981 12 FileStream * 0 8576 12 FileStream * 12 FileStream * 0 0 2767 0 0 0 0 0 0 0 0 0 0

2982 9 streamoff 0 2105344 9 streamoff 9 streamoff 0 0 2941 0 0 0 0 0 0 0 0 0 0

2983 5 ios * 0 8576 5 ios * 5 ios * 0 0 2770 0 0 0 0 0 0 0 0 0 0

2984 11 ios const * 0 8576 11 ios const * 11 ios const * 0 0 2985 0 0 0 0 0 0 0 0 0 0

2985 9 ios const 0 8832 9 ios const 9 ios const 0 0 2770 0 0 0 0 0 0 0 0 0 0

2986 19 GlobPattern const * 0 8576 19 GlobPattern const * 19 GlobPattern const * 0 0 2987 0 0 0 0 0 0 0 0 0 0

2987 17 GlobPattern const 0 8832 17 GlobPattern const 17 GlobPattern const 0 0 2775 0 0 0 0 0 0 0 0 0 0

2988 13 GlobPattern * 0 8576 13 GlobPattern * 13 GlobPattern * 0 0 2775 0 0 0 0 0 0 0 0 0 0

2989 16 IDecryptStream * 0 8576 16 IDecryptStream * 16 IDecryptStream * 0 0 2776 0 0 0 0 0 0 0 0 0 0

2990 22 IDecryptStream const * 0 8576 22 IDecryptStream const * 22 IDecryptStream const * 0 0 2991 0 0 0 0 0 0 0 0 0 0

2991 20 IDecryptStream const 0 8832 20 IDecryptStream const 20 IDecryptStream const 0 0 2776 0 0 0 0 0 0 0 0 0 0

2992 13 IFileStream * 0 8576 13 IFileStream * 13 IFileStream * 0 0 2777 0 0 0 0 0 0 0 0 0 0

2993 22 IStreamWrapper const * 0 8576 22 IStreamWrapper const * 22 IStreamWrapper const * 0 0 2994 0 0 0 0 0 0 0 0 0 0

2994 20 IStreamWrapper const 0 8832 20 IStreamWrapper const 20 IStreamWrapper const 0 0 2778 0 0 0 0 0 0 0 0 0 0

2995 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 2778 0 0 0 0 0 0 0 0 0 0

2996 19 StreamWrapperBase * 0 8576 19 StreamWrapperBase * 19 StreamWrapperBase * 0 0 2779 0 0 0 0 0 0 0 0 0 0

2997 25 StreamWrapperBase const * 0 8576 25 StreamWrapperBase const * 25 StreamWrapperBase const * 0 0 2998 0 0 0 0 0 0 0 0 0 0

2998 23 StreamWrapperBase const 0 8832 23 StreamWrapperBase const 23 StreamWrapperBase const 0 0 2779 0 0 0 0 0 0 0 0 0 0

2999 12 LineStream * 0 8576 12 LineStream * 12 LineStream * 0 0 2781 0 0 0 0 0 0 0 0 0 0

3000 18 LineStream const * 0 8576 18 LineStream const * 18 LineStream const * 0 0 3001 0 0 0 0 0 0 0 0 0 0

3001 16 LineStream const 0 8832 16 LineStream const 16 LineStream const 0 0 2781 0 0 0 0 0 0 0 0 0 0

3002 23 NeverFreeMemory const * 0 8576 23 NeverFreeMemory const * 23 NeverFreeMemory const * 0 0 3003 0 0 0 0 0 0 0 0 0 0

3003 21 NeverFreeMemory const 0 8832 21 NeverFreeMemory const 21 NeverFreeMemory const 0 0 2782 0 0 0 0 0 0 0 0 0 0

3004 17 NeverFreeMemory * 0 8576 17 NeverFreeMemory * 17 NeverFreeMemory * 0 0 2782 0 0 0 0 0 0 0 0 0 0

3005 8 Notify * 0 8576 8 Notify * 8 Notify * 0 0 2783 0 0 0 0 0 0 0 0 0 0

3006 14 Notify const * 0 8576 14 Notify const * 14 Notify const * 0 0 3007 0 0 0 0 0 0 0 0 0 0

3007 12 Notify const 0 8832 12 Notify const 12 Notify const 0 0 2783 0 0 0 0 0 0 0 0 0 0

3008 22 NotifyCategory const * 0 8576 22 NotifyCategory const * 22 NotifyCategory const * 0 0 3009 0 0 0 0 0 0 0 0 0 0

3009 20 NotifyCategory const 0 8832 20 NotifyCategory const 20 NotifyCategory const 0 0 2784 0 0 0 0 0 0 0 0 0 0

3010 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 2715 0 0 0 0 0 0 0 0 0 0

3011 16 OEncryptStream * 0 8576 16 OEncryptStream * 16 OEncryptStream * 0 0 2787 0 0 0 0 0 0 0 0 0 0

3012 22 OEncryptStream const * 0 8576 22 OEncryptStream const * 22 OEncryptStream const * 0 0 3013 0 0 0 0 0 0 0 0 0 0

3013 20 OEncryptStream const 0 8832 20 OEncryptStream const 20 OEncryptStream const 0 0 2787 0 0 0 0 0 0 0 0 0 0

3014 13 OFileStream * 0 8576 13 OFileStream * 13 OFileStream * 0 0 2788 0 0 0 0 0 0 0 0 0 0

3015 22 OStreamWrapper const * 0 8576 22 OStreamWrapper const * 22 OStreamWrapper const * 0 0 3016 0 0 0 0 0 0 0 0 0 0

3016 20 OStreamWrapper const 0 8832 20 OStreamWrapper const 20 OStreamWrapper const 0 0 2789 0 0 0 0 0 0 0 0 0 0

3017 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 2789 0 0 0 0 0 0 0 0 0 0

3018 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 2792 0 0 0 0 0 0 0 0 0 0

3019 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 2794 0 0 0 0 0 0 0 0 0 0

3020 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 2796 0 0 0 0 0 0 0 0 0 0

3021 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 2798 0 0 0 0 0 0 0 0 0 0

3022 19 PandaSystem const * 0 8576 19 PandaSystem const * 19 PandaSystem const * 0 0 3023 0 0 0 0 0 0 0 0 0 0

3023 17 PandaSystem const 0 8832 17 PandaSystem const 17 PandaSystem const 0 0 2799 0 0 0 0 0 0 0 0 0 0

3024 13 PandaSystem * 0 8576 13 PandaSystem * 13 PandaSystem * 0 0 2799 0 0 0 0 0 0 0 0 0 0

3025 20 StreamReader const * 0 8576 20 StreamReader const * 20 StreamReader const * 0 0 3026 0 0 0 0 0 0 0 0 0 0

3026 18 StreamReader const 0 8832 18 StreamReader const 18 StreamReader const 0 0 2800 0 0 0 0 0 0 0 0 0 0

3027 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 2800 0 0 0 0 0 0 0 0 0 0

3028 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 3029 0 0 0 0 0 0 0 0 0 0

3029 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

3030 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 2904 0 0 0 0 0 0 0 0 0 0

3031 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 3032 0 0 0 0 0 0 0 0 0 0

3032 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3033 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 2738 0 0 0 0 0 0 0 0 0 0

3034 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 3035 0 0 0 0 0 0 0 0 0 0

3035 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

3036 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 3037 0 0 0 0 0 0 0 0 0 0

3037 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

3038 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 3039 0 0 0 0 0 0 0 0 0 0

3039 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

3040 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 2749 0 0 0 0 0 0 0 0 0 0

3041 21 StreamWrapper const * 0 8576 21 StreamWrapper const * 21 StreamWrapper const * 0 0 3042 0 0 0 0 0 0 0 0 0 0

3042 19 StreamWrapper const 0 8832 19 StreamWrapper const 19 StreamWrapper const 0 0 2801 0 0 0 0 0 0 0 0 0 0

3043 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 2801 0 0 0 0 0 0 0 0 0 0

3044 20 StreamWriter const * 0 8576 20 StreamWriter const * 20 StreamWriter const * 0 0 3045 0 0 0 0 0 0 0 0 0 0

3045 18 StreamWriter const 0 8832 18 StreamWriter const 18 StreamWriter const 0 0 2803 0 0 0 0 0 0 0 0 0 0

3046 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 2803 0 0 0 0 0 0 0 0 0 0

3047 13 TextEncoder * 0 8576 13 TextEncoder * 13 TextEncoder * 0 0 2804 0 0 0 0 0 0 0 0 0 0

3048 19 TextEncoder const * 0 8576 19 TextEncoder const * 19 TextEncoder const * 0 0 3049 0 0 0 0 0 0 0 0 0 0

3049 17 TextEncoder const 0 8832 17 TextEncoder const 17 TextEncoder const 0 0 2804 0 0 0 0 0 0 0 0 0 0

3050 7 wchar_t 0 8194 7 wchar_t 7 wchar_t 0 1 0 0 0 0 0 0 0 0 0 0 0

3051 18 TypeHandle const * 0 8576 18 TypeHandle const * 18 TypeHandle const * 0 0 3052 0 0 0 0 0 0 0 0 0 0

3052 16 TypeHandle const 0 8832 16 TypeHandle const 16 TypeHandle const 0 0 2806 0 0 0 0 0 0 0 0 0 0

3053 14 PyTypeObject * 0 8576 14 PyTypeObject * 14 PyTypeObject * 0 0 3054 0 0 0 0 0 0 0 0 0 0

3054 12 PyTypeObject 0 2105344 12 PyTypeObject 12 PyTypeObject 0 0 3055 0 0 0 0 0 0 0 0 0 0

3055 11 _typeobject 0 1024 11 _typeobject 11 _typeobject 0 0 0 0 0 0 0 0 0 0 0 0 0

3056 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 2809 0 0 0 0 0 0 0 0 0 0

3057 18 set< int > const * 0 8576 18 set< int > const * 18 set< int > const * 0 0 3058 0 0 0 0 0 0 0 0 0 0

3058 16 set< int > const 0 8832 16 set< int > const 16 set< int > const 0 0 3059 0 0 0 0 0 0 0 0 0 0

3059 10 set< int > 0 2048 10 set< int > 10 set< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

3060 20 TypeRegistry const * 0 8576 20 TypeRegistry const * 20 TypeRegistry const * 0 0 3061 0 0 0 0 0 0 0 0 0 0

3061 18 TypeRegistry const 0 8832 18 TypeRegistry const 18 TypeRegistry const 0 0 2808 0 0 0 0 0 0 0 0 0 0

3062 14 TypeRegistry * 0 8576 14 TypeRegistry * 14 TypeRegistry * 0 0 2808 0 0 0 0 0 0 0 0 0 0

3063 19 TypedObject const * 0 8576 19 TypedObject const * 19 TypedObject const * 0 0 3064 0 0 0 0 0 0 0 0 0 0

3064 17 TypedObject const 0 8832 17 TypedObject const 17 TypedObject const 0 0 2809 0 0 0 0 0 0 0 0 0 0

3065 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 2828 0 0 0 0 0 0 0 0 0 0

3066 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 3067 0 0 0 0 0 0 0 0 0 0

3067 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 2815 0 0 0 0 0 0 0 0 0 0

3068 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 2815 0 0 0 0 0 0 0 0 0 0

3069 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 3070 0 0 0 0 0 0 0 0 0 0

3070 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 2816 0 0 0 0 0 0 0 0 0 0

3071 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 2816 0 0 0 0 0 0 0 0 0 0

3072 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 2817 0 0 0 0 0 0 0 0 0 0

3073 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 3074 0 0 0 0 0 0 0 0 0 0

3074 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 2818 0 0 0 0 0 0 0 0 0 0

3075 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 2819 0 0 0 0 0 0 0 0 0 0

3076 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 3077 0 0 0 0 0 0 0 0 0 0

3077 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 2819 0 0 0 0 0 0 0 0 0 0

3078 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 2854 0 0 0 0 0 0 0 0 0 0

3079 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 2797 0 0 0 0 0 0 0 0 0 0

3080 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 2724 0 0 0 0 0 0 0 0 0 0

3081 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 2820 0 0 0 0 0 0 0 0 0 0

3082 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 2835 0 0 0 0 0 0 0 0 0 0

3083 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 3084 0 0 0 0 0 0 0 0 0 0

3084 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 2820 0 0 0 0 0 0 0 0 0 0

3085 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2825 0 0 0 0 0 0 0 0 0 0

3086 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 3085 0 0 0 0 0 0 0 0 0 0

3087 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 2836 0 0 0 0 0 0 0 0 0 0

3088 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 2821 0 0 0 0 0 0 0 0 0 0

3089 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 3090 0 0 0 0 0 0 0 0 0 0

3090 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 2821 0 0 0 0 0 0 0 0 0 0

3091 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 2822 0 0 0 0 0 0 0 0 0 0

3092 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 3093 0 0 0 0 0 0 0 0 0 0

3093 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 2835 0 0 0 0 0 0 0 0 0 0

3094 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 2824 0 0 0 0 0 0 0 0 0 0

3095 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 2825 0 0 0 0 0 0 0 0 0 0

3096 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 2826 0 0 0 0 0 0 0 0 0 0

3097 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 3098 0 0 0 0 0 0 0 0 0 0

3098 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 2826 0 0 0 0 0 0 0 0 0 0

3099 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2827 0 0 0 0 0 0 0 0 0 0

3100 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 2855 0 0 0 0 0 0 0 0 0 0

3101 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

3102 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 3103 0 0 0 0 0 0 0 0 0 0

3103 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 2828 0 0 0 0 0 0 0 0 0 0

3104 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 2829 0 0 0 0 0 0 0 0 0 0

3105 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 2830 0 0 0 0 0 0 0 0 0 0

3106 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 2831 0 0 0 0 0 0 0 0 0 0

3107 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 2832 0 0 0 0 0 0 0 0 0 0

3108 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 3109 0 0 0 0 0 0 0 0 0 0

3109 10 X509_STORE 0 1024 10 X509_STORE 10 X509_STORE 0 0 0 0 0 0 0 0 0 0 0 0 0

3110 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 2833 0 0 0 0 0 0 0 0 0 0

3111 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 3112 0 0 0 0 0 0 0 0 0 0

3112 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 2833 0 0 0 0 0 0 0 0 0 0

3113 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 3114 0 0 0 0 0 0 0 0 0 0

3114 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 2834 0 0 0 0 0 0 0 0 0 0

3115 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 2834 0 0 0 0 0 0 0 0 0 0

3116 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 3117 0 0 0 0 0 0 0 0 0 0

3117 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 2836 0 0 0 0 0 0 0 0 0 0

3118 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 2847 0 0 0 0 0 0 0 0 0 0

3119 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 2846 0 0 0 0 0 0 0 0 0 0

3120 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 3121 0 0 0 0 0 0 0 0 0 0

3121 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 2838 0 0 0 0 0 0 0 0 0 0

3122 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 2839 0 0 0 0 0 0 0 0 0 0

3123 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 3124 0 0 0 0 0 0 0 0 0 0

3124 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 2839 0 0 0 0 0 0 0 0 0 0

3125 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 2840 0 0 0 0 0 0 0 0 0 0

3126 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 2841 0 0 0 0 0 0 0 0 0 0

3127 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 3128 0 0 0 0 0 0 0 0 0 0

3128 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 2841 0 0 0 0 0 0 0 0 0 0

3129 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 3130 0 0 0 0 0 0 0 0 0 0

3130 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 2842 0 0 0 0 0 0 0 0 0 0

3131 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 2838 0 0 0 0 0 0 0 0 0 0

3132 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 2843 0 0 0 0 0 0 0 0 0 0

3133 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 3134 0 0 0 0 0 0 0 0 0 0

3134 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 2843 0 0 0 0 0 0 0 0 0 0

3135 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 2844 0 0 0 0 0 0 0 0 0 0

3136 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 2845 0 0 0 0 0 0 0 0 0 0

3137 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 3138 0 0 0 0 0 0 0 0 0 0

3138 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 2846 0 0 0 0 0 0 0 0 0 0

3139 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 3140 0 0 0 0 0 0 0 0 0 0

3140 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 2847 0 0 0 0 0 0 0 0 0 0

3141 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 2849 0 0 0 0 0 0 0 0 0 0

3142 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 3143 0 0 0 0 0 0 0 0 0 0

3143 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 2849 0 0 0 0 0 0 0 0 0 0

3144 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 2850 0 0 0 0 0 0 0 0 0 0

3145 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 3146 0 0 0 0 0 0 0 0 0 0

3146 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 2850 0 0 0 0 0 0 0 0 0 0

3147 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 2851 0 0 0 0 0 0 0 0 0 0

3148 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 3149 0 0 0 0 0 0 0 0 0 0

3149 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 2851 0 0 0 0 0 0 0 0 0 0

3150 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 2852 0 0 0 0 0 0 0 0 0 0

3151 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 3152 0 0 0 0 0 0 0 0 0 0

3152 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 2852 0 0 0 0 0 0 0 0 0 0

3153 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 3154 0 0 0 0 0 0 0 0 0 0

3154 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 2856 0 0 0 0 0 0 0 0 0 0

3155 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 2856 0 0 0 0 0 0 0 0 0 0

3156 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 3157 0 0 0 0 0 0 0 0 0 0

3157 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 2857 0 0 0 0 0 0 0 0 0 0

3158 17 WindowsRegistry * 0 8576 17 WindowsRegistry * 17 WindowsRegistry * 0 0 2858 0 0 0 0 0 0 0 0 0 0

3159 23 WindowsRegistry const * 0 8576 23 WindowsRegistry const * 23 WindowsRegistry const * 0 0 3160 0 0 0 0 0 0 0 0 0 0

3160 21 WindowsRegistry const 0 8832 21 WindowsRegistry const 21 WindowsRegistry const 0 0 2858 0 0 0 0 0 0 0 0 0 0

0
84
3161 4 page 0 2 2732 1439 0 0 0 0 0 23 ConfigDeclaration::page 0

3162 4 name 0 2 2734 1443 0 0 0 0 0 16 ConfigPage::name 0

3163 7 special 0 2 2737 1444 0 0 0 0 0 19 ConfigPage::special 0

3164 8 implicit 0 2 2737 1445 0 0 0 0 0 20 ConfigPage::implicit 0

3165 4 sort 0 6 2738 1447 1446 0 0 0 0 16 ConfigPage::sort 0

3166 8 page_seq 0 2 2738 1448 0 0 0 0 0 20 ConfigPage::page_seq 0

3167 11 trust_level 0 6 2738 1449 1450 0 0 0 0 23 ConfigPage::trust_level 0

3168 9 signature 0 2 2734 1451 0 0 0 0 0 21 ConfigPage::signature 0

3169 12 declarations 0 66 2739 1459 0 0 0 0 1457 24 ConfigPage::declarations 0

3170 8 variable 0 2 2740 1440 0 0 0 0 0 27 ConfigDeclaration::variable 0

3171 12 declarations 0 66 2742 1485 0 0 0 0 1484 32 ConfigVariableCore::declarations 0

3172 4 name 0 2 2734 1466 0 0 0 0 0 24 ConfigVariableCore::name 0

3173 4 used 0 2 2737 1467 0 0 0 0 0 24 ConfigVariableCore::used 0

3174 6 closed 0 2 2737 1471 0 0 0 0 0 26 ConfigVariableCore::closed 0

3175 11 trust_level 0 2 2738 1472 0 0 0 0 0 31 ConfigVariableCore::trust_level 0

3176 7 dynamic 0 2 2737 1473 0 0 0 0 0 27 ConfigVariableCore::dynamic 0

3177 10 value_type 0 6 2730 1468 1475 0 0 0 0 30 ConfigVariableCore::value_type 0

3178 11 description 0 6 2734 1469 1477 0 0 0 0 31 ConfigVariableCore::description 0

3179 13 default_value 0 6 2742 1474 1478 0 0 0 0 33 ConfigVariableCore::default_value 0

3180 10 references 0 66 2742 1487 0 0 0 0 1486 30 ConfigVariableCore::references 0

3181 18 trusted_references 0 66 2742 1489 0 0 0 0 1488 38 ConfigVariableCore::trusted_references 0

3182 17 unique_references 0 66 2742 1491 0 0 0 0 1490 37 ConfigVariableCore::unique_references 0

3183 4 name 0 2 2734 1534 0 0 0 0 0 24 ConfigVariableBase::name 0

3184 10 value_type 0 2 2730 1535 0 0 0 0 0 30 ConfigVariableBase::value_type 0

3185 11 description 0 2 2734 1536 0 0 0 0 0 31 ConfigVariableBase::description 0

3186 6 closed 0 2 2737 1538 0 0 0 0 0 26 ConfigVariableBase::closed 0

3187 11 trust_level 0 2 2738 1539 0 0 0 0 0 31 ConfigVariableBase::trust_level 0

3188 7 dynamic 0 2 2737 1540 0 0 0 0 0 27 ConfigVariableBase::dynamic 0

3189 5 value 0 6 2737 1558 1557 0 0 0 0 25 ConfigVariableBool::value 0

3190 13 default_value 0 2 2737 1559 0 0 0 0 0 33 ConfigVariableBool::default_value 0

3191 5 value 0 6 2749 1569 1568 0 0 0 0 27 ConfigVariableDouble::value 0

3192 13 default_value 0 2 2749 1570 0 0 0 0 0 35 ConfigVariableDouble::default_value 0

3193 5 value 0 6 2751 1591 1590 0 0 0 0 29 ConfigVariableFilename::value 0

3194 13 default_value 0 2 2751 1592 0 0 0 0 0 37 ConfigVariableFilename::default_value 0

3195 5 value 0 6 2738 1704 1703 0 0 0 0 24 ConfigVariableInt::value 0

3196 13 default_value 0 2 2738 1705 0 0 0 0 0 32 ConfigVariableInt::default_value 0

3197 5 value 0 6 2755 1715 1714 0 0 0 0 26 ConfigVariableInt64::value 0

3198 13 default_value 0 2 2755 1716 0 0 0 0 0 34 ConfigVariableInt64::default_value 0

3199 9 variables 0 66 2740 1733 0 0 0 0 1732 32 ConfigVariableManager::variables 0

3200 5 value 0 2 2760 1746 0 0 0 0 0 31 ConfigVariableSearchPath::value 0

3201 11 directories 0 66 2763 1768 0 0 0 0 1767 24 DSearchPath::directories 0

3202 13 default_value 0 2 2760 1747 0 0 0 0 0 39 ConfigVariableSearchPath::default_value 0

3203 11 directories 0 66 2763 1782 0 0 0 0 1781 37 ConfigVariableSearchPath::directories 0

3204 5 value 0 6 2734 1798 1797 0 0 0 0 27 ConfigVariableString::value 0

3205 13 default_value 0 2 2735 1799 0 0 0 0 0 35 ConfigVariableString::default_value 0

3206 7 pattern 0 6 2734 1859 1858 0 0 0 0 20 GlobPattern::pattern 0

3207 14 case_sensitive 0 6 2737 1861 1860 0 0 0 0 27 GlobPattern::case_sensitive 0

3208 13 nomatch_chars 0 6 2734 1863 1862 0 0 0 0 26 GlobPattern::nomatch_chars 0

3209 9 algorithm 0 2 2734 1873 0 0 0 0 0 25 IDecryptStream::algorithm 0

3210 10 key_length 0 2 2738 1874 0 0 0 0 0 26 IDecryptStream::key_length 0

3211 15 iteration_count 0 2 2738 1875 0 0 0 0 0 31 IDecryptStream::iteration_count 0

3212 7 istream 0 2 2780 1888 0 0 0 0 0 23 IStreamWrapper::istream 0

3213 8 fullname 0 2 2735 1920 0 0 0 0 0 24 NotifyCategory::fullname 0

3214 8 basename 0 2 2735 1921 0 0 0 0 0 24 NotifyCategory::basename 0

3215 8 severity 0 6 2785 1922 1923 0 0 0 0 24 NotifyCategory::severity 0

3216 8 children 0 66 2786 1939 0 0 0 0 1938 24 NotifyCategory::children 0

3217 9 algorithm 0 6 2734 1949 1946 0 0 0 0 25 OEncryptStream::algorithm 0

3218 10 key_length 0 6 2738 1950 1947 0 0 0 0 26 OEncryptStream::key_length 0

3219 15 iteration_count 0 6 2738 1951 1948 0 0 0 0 31 OEncryptStream::iteration_count 0

3220 7 ostream 0 2 2790 1960 0 0 0 0 0 23 OStreamWrapper::ostream 0

3221 7 systems 0 66 2735 2048 0 0 0 0 2047 20 PandaSystem::systems 0

3222 7 istream 0 2 2780 2060 0 0 0 0 0 21 StreamReader::istream 0

3223 8 iostream 0 2 2802 2094 0 0 0 0 0 23 StreamWrapper::iostream 0

3224 7 ostream 0 2 2790 2098 0 0 0 0 0 21 StreamWriter::ostream 0

3225 9 softspace 0 6 2738 2126 2127 0 0 0 0 23 StreamWriter::softspace 54
// Python 2 needs this for printing to work correctly.

3226 5 index 0 2 2738 2186 0 0 0 0 0 17 TypeHandle::index 0

3227 4 name 0 2 2735 2175 0 0 0 0 0 16 TypeHandle::name 0

3228 14 parent_classes 0 66 2806 2178 0 0 0 0 2177 26 TypeHandle::parent_classes 0

3229 13 child_classes 0 66 2806 2180 0 0 0 0 2179 25 TypeHandle::child_classes 0

3230 11 typehandles 0 66 2806 2200 0 0 0 0 2199 25 TypeRegistry::typehandles 0

3231 12 root_classes 0 66 2806 2202 0 0 0 0 2201 26 TypeRegistry::root_classes 0

3232 4 type 0 2 2806 2216 0 0 0 0 0 17 TypedObject::type 0

3233 9 ref_count 0 2 2738 2255 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

3234 4 name 0 6 2734 2538 2535 0 0 0 0 13 Namable::name 0

3235 6 mounts 0 66 2849 2628 0 0 0 0 2627 25 VirtualFileSystem::mounts 0

3236 9 long_time 0 2 2749 2667 0 0 0 0 0 20 TrueClock::long_time 0

3237 10 short_time 0 2 2749 2668 0 0 0 0 0 21 TrueClock::short_time 0

3238 14 short_raw_time 0 2 2749 2669 0 0 0 0 0 25 TrueClock::short_raw_time 0

3239 11 error_count 0 2 2738 2670 0 0 0 0 0 22 TrueClock::error_count 0

3240 8 progress 0 2 2853 2680 0 0 0 0 0 19 Patchfile::progress 0

3241 15 allow_multifile 0 6 2737 2682 2681 0 0 0 0 26 Patchfile::allow_multifile 0

3242 16 footprint_length 0 6 2738 2684 2683 0 0 0 0 27 Patchfile::footprint_length 0

3243 11 source_hash 0 10 2855 2687 0 2686 0 0 0 22 Patchfile::source_hash 0

3244 11 result_hash 0 2 2855 2688 0 0 0 0 0 22 Patchfile::result_hash 0

16
3245 16 get_declarations 0 1484 1485 36 ConfigVariableCore::get_declarations 0

3246 14 get_references 0 1486 1487 34 ConfigVariableCore::get_references 0

3247 22 get_trusted_references 0 1488 1489 42 ConfigVariableCore::get_trusted_references 0

3248 21 get_unique_references 0 1490 1491 41 ConfigVariableCore::get_unique_references 0

3249 13 get_variables 0 1732 1733 36 ConfigVariableManager::get_variables 0

3250 15 get_directories 0 1767 1768 28 DSearchPath::get_directories 0

3251 15 get_directories 0 1781 1782 41 ConfigVariableSearchPath::get_directories 0

3252 12 get_children 0 1938 1939 28 NotifyCategory::get_children 0

3253 11 get_systems 0 2047 2048 24 PandaSystem::get_systems 0

3254 15 get_typehandles 0 2199 2200 29 TypeRegistry::get_typehandles 0

3255 16 get_root_classes 0 2201 2202 30 TypeRegistry::get_root_classes 0

3256 12 get_pointers 0 2442 2443 33 MemoryUsagePointers::get_pointers 0

3257 18 get_typed_pointers 0 2442 2444 39 MemoryUsagePointers::get_typed_pointers 0

3258 17 get_subfile_names 0 2508 2513 28 Multifile::get_subfile_names 0

3259 9 get_files 0 2613 2614 26 VirtualFileList::get_files 0

3260 10 get_mounts 0 2627 2628 29 VirtualFileSystem::get_mounts 0

