1481295974
3 2
14 libpandabullet 4 fCJ_ 14 panda3d.bullet 
739
756 19 get_default_up_axis 0 1 0 19 get_default_up_axis 0 1 754 10
/**
 *
 */
39
BulletUpAxis get_default_up_axis(void);

757 18 get_bullet_version 0 1 0 18 get_bullet_version 0 1 755 60
/**
 * Returns the version of the linked Bullet library.
 */
29
int get_bullet_version(void);

758 5 empty 0 4 1496 19 BulletRayHit::empty 0 1 1 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
53
static inline BulletRayHit BulletRayHit::empty(void);

759 8 get_node 0 4 1496 22 BulletRayHit::get_node 0 1 2 10
/**
 *
 */
46
PandaNode *BulletRayHit::get_node(void) const;

760 11 get_hit_pos 0 4 1496 25 BulletRayHit::get_hit_pos 0 1 3 10
/**
 *
 */
46
LPoint3 BulletRayHit::get_hit_pos(void) const;

761 14 get_hit_normal 0 4 1496 28 BulletRayHit::get_hit_normal 0 1 4 10
/**
 *
 */
50
LVector3 BulletRayHit::get_hit_normal(void) const;

762 16 get_hit_fraction 0 4 1496 30 BulletRayHit::get_hit_fraction 0 1 5 10
/**
 *
 */
55
PN_stdfloat BulletRayHit::get_hit_fraction(void) const;

763 14 get_shape_part 0 4 1496 28 BulletRayHit::get_shape_part 0 1 6 10
/**
 *
 */
45
int BulletRayHit::get_shape_part(void) const;

764 18 get_triangle_index 0 4 1496 32 BulletRayHit::get_triangle_index 0 1 7 10
/**
 *
 */
49
int BulletRayHit::get_triangle_index(void) const;

765 34 upcast_to_AllHitsRayResultCallback 0 12 1497 58 BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback 0 1 15 62
upcast from BulletAllHitsRayResult to AllHitsRayResultCallback
109
btCollisionWorld::AllHitsRayResultCallback *BulletAllHitsRayResult::upcast_to_AllHitsRayResultCallback(void);

766 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 8 0 59 downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult 0 1 16 64
downcast from AllHitsRayResultCallback to BulletAllHitsRayResult
134
BulletAllHitsRayResult *downcast_AllHitsRayResultCallback_to_BulletAllHitsRayResult(btCollisionWorld::AllHitsRayResultCallback *this);

767 5 empty 0 4 1497 29 BulletAllHitsRayResult::empty 0 1 8 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
73
static inline BulletAllHitsRayResult BulletAllHitsRayResult::empty(void);

768 12 get_from_pos 0 4 1497 36 BulletAllHitsRayResult::get_from_pos 0 1 9 10
/**
 *
 */
57
LPoint3 BulletAllHitsRayResult::get_from_pos(void) const;

769 10 get_to_pos 0 4 1497 34 BulletAllHitsRayResult::get_to_pos 0 1 10 10
/**
 *
 */
55
LPoint3 BulletAllHitsRayResult::get_to_pos(void) const;

770 8 has_hits 0 4 1497 32 BulletAllHitsRayResult::has_hits 0 1 11 10
/**
 *
 */
50
bool BulletAllHitsRayResult::has_hits(void) const;

771 24 get_closest_hit_fraction 0 4 1497 48 BulletAllHitsRayResult::get_closest_hit_fraction 0 1 12 10
/**
 *
 */
73
PN_stdfloat BulletAllHitsRayResult::get_closest_hit_fraction(void) const;

772 12 get_num_hits 0 4 1497 36 BulletAllHitsRayResult::get_num_hits 0 1 13 10
/**
 *
 */
53
int BulletAllHitsRayResult::get_num_hits(void) const;

773 7 get_hit 0 4 1497 31 BulletAllHitsRayResult::get_hit 0 1 14 10
/**
 *
 */
66
BulletRayHit const BulletAllHitsRayResult::get_hit(int idx) const;

774 23 ~BulletAllHitsRayResult 0 4 1497 47 BulletAllHitsRayResult::~BulletAllHitsRayResult 0 0 0
54
BulletAllHitsRayResult::~BulletAllHitsRayResult(void);

775 13 is_polyhedral 0 4 1500 26 BulletShape::is_polyhedral 0 1 17 10
/**
 *
 */
51
inline bool BulletShape::is_polyhedral(void) const;

776 9 is_convex 0 4 1500 22 BulletShape::is_convex 0 1 18 10
/**
 *
 */
47
inline bool BulletShape::is_convex(void) const;

777 12 is_convex_2d 0 4 1500 25 BulletShape::is_convex_2d 0 1 19 10
/**
 *
 */
50
inline bool BulletShape::is_convex_2d(void) const;

778 10 is_concave 0 4 1500 23 BulletShape::is_concave 0 1 20 10
/**
 *
 */
48
inline bool BulletShape::is_concave(void) const;

779 11 is_infinite 0 4 1500 24 BulletShape::is_infinite 0 1 21 10
/**
 *
 */
49
inline bool BulletShape::is_infinite(void) const;

780 13 is_non_moving 0 4 1500 26 BulletShape::is_non_moving 0 1 22 10
/**
 *
 */
51
inline bool BulletShape::is_non_moving(void) const;

781 12 is_soft_body 0 4 1500 25 BulletShape::is_soft_body 0 1 23 10
/**
 *
 */
50
inline bool BulletShape::is_soft_body(void) const;

782 10 set_margin 0 4 1500 23 BulletShape::set_margin 0 1 24 10
/**
 *
 */
49
void BulletShape::set_margin(PN_stdfloat margin);

783 8 get_name 0 4 1500 21 BulletShape::get_name 0 1 25 10
/**
 *
 */
46
char const *BulletShape::get_name(void) const;

784 10 get_margin 0 4 1500 23 BulletShape::get_margin 0 1 26 10
/**
 *
 */
48
PN_stdfloat BulletShape::get_margin(void) const;

785 16 get_shape_bounds 0 4 1500 29 BulletShape::get_shape_bounds 0 1 27 62
/**
 * Returns the current bounds of this collision shape.
 */
57
BoundingSphere BulletShape::get_shape_bounds(void) const;

786 14 get_class_type 0 4 1500 27 BulletShape::get_class_type 0 1 28 0
52
static TypeHandle BulletShape::get_class_type(void);

787 14 get_class_type 0 4 1502 49 BulletBaseCharacterControllerNode::get_class_type 0 1 29 0
74
static TypeHandle BulletBaseCharacterControllerNode::get_class_type(void);

788 34 ~BulletBaseCharacterControllerNode 0 4 1502 69 BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode 0 0 0
76
BulletBaseCharacterControllerNode::~BulletBaseCharacterControllerNode(void);

789 9 add_shape 0 4 1504 25 BulletBodyNode::add_shape 0 1 30 21
// Shapes

/**
 *
 */
114
void BulletBodyNode::add_shape(BulletShape *shape, TransformState const *xform = TransformState::make_identity());

790 12 remove_shape 0 4 1504 28 BulletBodyNode::remove_shape 0 1 31 10
/**
 *
 */
54
void BulletBodyNode::remove_shape(BulletShape *shape);

791 14 get_num_shapes 0 4 1504 30 BulletBodyNode::get_num_shapes 0 1 32 10
/**
 *
 */
54
inline int BulletBodyNode::get_num_shapes(void) const;

792 9 get_shape 0 4 1504 25 BulletBodyNode::get_shape 0 1 33 10
/**
 *
 */
61
inline BulletShape *BulletBodyNode::get_shape(int idx) const;

793 13 get_shape_pos 0 4 1504 29 BulletBodyNode::get_shape_pos 0 1 34 10
/**
 *
 */
53
LPoint3 BulletBodyNode::get_shape_pos(int idx) const;

794 13 get_shape_mat 0 4 1504 29 BulletBodyNode::get_shape_mat 0 1 35 10
/**
 *
 */
54
LMatrix4 BulletBodyNode::get_shape_mat(int idx) const;

795 19 get_shape_transform 0 4 1504 35 BulletBodyNode::get_shape_transform 0 1 36 10
/**
 *
 */
84
ConstPointerTo< TransformState > BulletBodyNode::get_shape_transform(int idx) const;

796 16 get_shape_bounds 0 4 1504 32 BulletBodyNode::get_shape_bounds 0 1 37 81
/**
 * Returns the current bounds of all collision shapes owned by this body.
 */
60
BoundingSphere BulletBodyNode::get_shape_bounds(void) const;

797 32 add_shapes_from_collision_solids 0 4 1504 48 BulletBodyNode::add_shapes_from_collision_solids 0 1 38 10
/**
 *
 */
76
void BulletBodyNode::add_shapes_from_collision_solids(CollisionNode *cnode);

798 9 is_static 0 4 1504 25 BulletBodyNode::is_static 0 1 39 35
// Static and kinematic

/**
 *
 */
50
inline bool BulletBodyNode::is_static(void) const;

799 12 is_kinematic 0 4 1504 28 BulletBodyNode::is_kinematic 0 1 40 10
/**
 *
 */
53
inline bool BulletBodyNode::is_kinematic(void) const;

800 10 set_static 0 4 1504 26 BulletBodyNode::set_static 0 1 41 10
/**
 *
 */
51
inline void BulletBodyNode::set_static(bool value);

801 13 set_kinematic 0 4 1504 29 BulletBodyNode::set_kinematic 0 1 42 10
/**
 *
 */
54
inline void BulletBodyNode::set_kinematic(bool value);

802 21 set_into_collide_mask 0 4 1504 37 BulletBodyNode::set_into_collide_mask 0 1 43 23
// Contacts

/**
 *
 */
68
inline void BulletBodyNode::set_into_collide_mask(CollideMask mask);

803 17 notify_collisions 0 4 1504 33 BulletBodyNode::notify_collisions 0 1 44 10
/**
 *
 */
58
inline void BulletBodyNode::notify_collisions(bool value);

804 19 notifies_collisions 0 4 1504 35 BulletBodyNode::notifies_collisions 0 1 45 10
/**
 *
 */
60
inline bool BulletBodyNode::notifies_collisions(void) const;

805 22 set_collision_response 0 4 1504 38 BulletBodyNode::set_collision_response 0 1 46 10
/**
 *
 */
63
inline void BulletBodyNode::set_collision_response(bool value);

806 22 get_collision_response 0 4 1504 38 BulletBodyNode::get_collision_response 0 1 47 10
/**
 *
 */
63
inline bool BulletBodyNode::get_collision_response(void) const;

807 20 check_collision_with 0 4 1504 36 BulletBodyNode::check_collision_with 0 1 48 10
/**
 *
 */
59
bool BulletBodyNode::check_collision_with(PandaNode *node);

808 20 has_contact_response 0 4 1504 36 BulletBodyNode::has_contact_response 0 1 49 10
/**
 *
 */
54
bool BulletBodyNode::has_contact_response(void) const;

809 32 get_contact_processing_threshold 0 4 1504 48 BulletBodyNode::get_contact_processing_threshold 0 1 50 10
/**
 *
 */
73
PN_stdfloat BulletBodyNode::get_contact_processing_threshold(void) const;

810 32 set_contact_processing_threshold 0 4 1504 48 BulletBodyNode::set_contact_processing_threshold 0 1 51 106
/**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */
77
void BulletBodyNode::set_contact_processing_threshold(PN_stdfloat threshold);

811 9 is_active 0 4 1504 25 BulletBodyNode::is_active 0 1 52 27
// Deactivation

/**
 *
 */
43
bool BulletBodyNode::is_active(void) const;

812 10 set_active 0 4 1504 26 BulletBodyNode::set_active 0 1 53 10
/**
 *
 */
65
void BulletBodyNode::set_active(bool active, bool force = false);

813 21 set_deactivation_time 0 4 1504 37 BulletBodyNode::set_deactivation_time 0 1 54 10
/**
 *
 */
59
void BulletBodyNode::set_deactivation_time(PN_stdfloat dt);

814 21 get_deactivation_time 0 4 1504 37 BulletBodyNode::get_deactivation_time 0 1 55 10
/**
 *
 */
62
PN_stdfloat BulletBodyNode::get_deactivation_time(void) const;

815 24 set_deactivation_enabled 0 4 1504 40 BulletBodyNode::set_deactivation_enabled 0 1 56 163
/**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */
60
void BulletBodyNode::set_deactivation_enabled(bool enabled);

816 23 is_deactivation_enabled 0 4 1504 39 BulletBodyNode::is_deactivation_enabled 0 1 57 10
/**
 *
 */
57
bool BulletBodyNode::is_deactivation_enabled(void) const;

817 17 set_debug_enabled 0 4 1504 33 BulletBodyNode::set_debug_enabled 0 1 58 155
// Debug Visualistion

/**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */
66
inline void BulletBodyNode::set_debug_enabled(bool const enabled);

818 16 is_debug_enabled 0 4 1504 32 BulletBodyNode::is_debug_enabled 0 1 59 141
/**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */
57
inline bool BulletBodyNode::is_debug_enabled(void) const;

819 15 get_restitution 0 4 1504 31 BulletBodyNode::get_restitution 0 1 60 39
// Friction and Restitution

/**
 *
 */
63
inline PN_stdfloat BulletBodyNode::get_restitution(void) const;

820 15 set_restitution 0 4 1504 31 BulletBodyNode::set_restitution 0 1 61 10
/**
 *
 */
69
inline void BulletBodyNode::set_restitution(PN_stdfloat restitution);

821 12 get_friction 0 4 1504 28 BulletBodyNode::get_friction 0 1 62 10
/**
 *
 */
60
inline PN_stdfloat BulletBodyNode::get_friction(void) const;

822 12 set_friction 0 4 1504 28 BulletBodyNode::set_friction 0 1 63 10
/**
 *
 */
63
inline void BulletBodyNode::set_friction(PN_stdfloat friction);

823 24 has_anisotropic_friction 0 4 1504 40 BulletBodyNode::has_anisotropic_friction 0 1 64 10
/**
 *
 */
65
inline bool BulletBodyNode::has_anisotropic_friction(void) const;

824 24 set_anisotropic_friction 0 4 1504 40 BulletBodyNode::set_anisotropic_friction 0 1 65 10
/**
 *
 */
73
void BulletBodyNode::set_anisotropic_friction(LVecBase3 const &friction);

825 24 get_anisotropic_friction 0 4 1504 40 BulletBodyNode::get_anisotropic_friction 0 1 66 10
/**
 *
 */
63
LVecBase3 BulletBodyNode::get_anisotropic_friction(void) const;

826 27 get_ccd_swept_sphere_radius 0 4 1504 43 BulletBodyNode::get_ccd_swept_sphere_radius 0 1 67 18
// CCD

/**
 *
 */
68
PN_stdfloat BulletBodyNode::get_ccd_swept_sphere_radius(void) const;

827 24 get_ccd_motion_threshold 0 4 1504 40 BulletBodyNode::get_ccd_motion_threshold 0 1 68 10
/**
 *
 */
65
PN_stdfloat BulletBodyNode::get_ccd_motion_threshold(void) const;

828 27 set_ccd_swept_sphere_radius 0 4 1504 43 BulletBodyNode::set_ccd_swept_sphere_radius 0 1 69 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_swept_sphere_radius(PN_stdfloat radius);

829 24 set_ccd_motion_threshold 0 4 1504 40 BulletBodyNode::set_ccd_motion_threshold 0 1 70 10
/**
 *
 */
69
void BulletBodyNode::set_ccd_motion_threshold(PN_stdfloat threshold);

830 19 set_transform_dirty 0 4 1504 35 BulletBodyNode::set_transform_dirty 0 1 71 228
// Special

/**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */
47
void BulletBodyNode::set_transform_dirty(void);

831 14 get_class_type 0 4 1504 30 BulletBodyNode::get_class_type 0 1 72 0
55
static TypeHandle BulletBodyNode::get_class_type(void);

832 14 BulletBoxShape 0 4 1505 30 BulletBoxShape::BulletBoxShape 0 2 73 74 22
/**
 *
 */

/**
 *
 */
128
BulletBoxShape::BulletBoxShape(LVecBase3 const &halfExtents);
inline BulletBoxShape::BulletBoxShape(BulletBoxShape const &copy);

833 10 operator = 0 4 1505 26 BulletBoxShape::operator = 0 1 75 0
67
inline void BulletBoxShape::operator =(BulletBoxShape const &copy);

834 31 get_half_extents_without_margin 0 4 1505 47 BulletBoxShape::get_half_extents_without_margin 0 1 76 10
/**
 *
 */
70
LVecBase3 BulletBoxShape::get_half_extents_without_margin(void) const;

835 28 get_half_extents_with_margin 0 4 1505 44 BulletBoxShape::get_half_extents_with_margin 0 1 77 10
/**
 *
 */
67
LVecBase3 BulletBoxShape::get_half_extents_with_margin(void) const;

836 15 make_from_solid 0 4 1505 31 BulletBoxShape::make_from_solid 0 1 78 10
/**
 *
 */
82
static BulletBoxShape *BulletBoxShape::make_from_solid(CollisionBox const *solid);

837 14 get_class_type 0 4 1505 30 BulletBoxShape::get_class_type 0 1 79 0
55
static TypeHandle BulletBoxShape::get_class_type(void);

838 18 BulletCapsuleShape 0 4 1506 38 BulletCapsuleShape::BulletCapsuleShape 0 2 80 81 22
/**
 *
 */

/**
 *
 */
184
BulletCapsuleShape::BulletCapsuleShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletCapsuleShape::BulletCapsuleShape(BulletCapsuleShape const &copy);

839 10 operator = 0 4 1506 30 BulletCapsuleShape::operator = 0 1 82 0
75
inline void BulletCapsuleShape::operator =(BulletCapsuleShape const &copy);

840 10 get_radius 0 4 1506 30 BulletCapsuleShape::get_radius 0 1 83 10
/**
 *
 */
62
inline PN_stdfloat BulletCapsuleShape::get_radius(void) const;

841 15 get_half_height 0 4 1506 35 BulletCapsuleShape::get_half_height 0 1 84 10
/**
 *
 */
67
inline PN_stdfloat BulletCapsuleShape::get_half_height(void) const;

842 14 get_class_type 0 4 1506 34 BulletCapsuleShape::get_class_type 0 1 85 0
59
static TypeHandle BulletCapsuleShape::get_class_type(void);

843 29 BulletCharacterControllerNode 0 4 1507 60 BulletCharacterControllerNode::BulletCharacterControllerNode 0 1 86 10
/**
 *
 */
138
BulletCharacterControllerNode::BulletCharacterControllerNode(BulletShape *shape, PN_stdfloat step_height, char const *name = "character");

844 19 set_linear_movement 0 4 1507 50 BulletCharacterControllerNode::set_linear_movement 0 1 87 10
/**
 *
 */
97
void BulletCharacterControllerNode::set_linear_movement(LVector3 const &velocity, bool is_local);

845 20 set_angular_movement 0 4 1507 51 BulletCharacterControllerNode::set_angular_movement 0 1 88 10
/**
 *
 */
76
void BulletCharacterControllerNode::set_angular_movement(PN_stdfloat omega);

846 9 get_shape 0 4 1507 40 BulletCharacterControllerNode::get_shape 0 1 89 10
/**
 *
 */
66
BulletShape *BulletCharacterControllerNode::get_shape(void) const;

847 11 get_gravity 0 4 1507 42 BulletCharacterControllerNode::get_gravity 0 1 90 10
/**
 *
 */
67
PN_stdfloat BulletCharacterControllerNode::get_gravity(void) const;

848 13 get_max_slope 0 4 1507 44 BulletCharacterControllerNode::get_max_slope 0 1 91 10
/**
 *
 */
69
PN_stdfloat BulletCharacterControllerNode::get_max_slope(void) const;

849 14 set_fall_speed 0 4 1507 45 BulletCharacterControllerNode::set_fall_speed 0 1 92 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_fall_speed(PN_stdfloat fall_speed);

850 14 set_jump_speed 0 4 1507 45 BulletCharacterControllerNode::set_jump_speed 0 1 93 10
/**
 *
 */
75
void BulletCharacterControllerNode::set_jump_speed(PN_stdfloat jump_speed);

851 19 set_max_jump_height 0 4 1507 50 BulletCharacterControllerNode::set_max_jump_height 0 1 94 10
/**
 *
 */
85
void BulletCharacterControllerNode::set_max_jump_height(PN_stdfloat max_jump_height);

852 13 set_max_slope 0 4 1507 44 BulletCharacterControllerNode::set_max_slope 0 1 95 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_max_slope(PN_stdfloat max_slope);

853 11 set_gravity 0 4 1507 42 BulletCharacterControllerNode::set_gravity 0 1 96 10
/**
 *
 */
69
void BulletCharacterControllerNode::set_gravity(PN_stdfloat gravity);

854 24 set_use_ghost_sweep_test 0 4 1507 55 BulletCharacterControllerNode::set_use_ghost_sweep_test 0 1 97 10
/**
 *
 */
73
void BulletCharacterControllerNode::set_use_ghost_sweep_test(bool value);

855 12 is_on_ground 0 4 1507 43 BulletCharacterControllerNode::is_on_ground 0 1 98 10
/**
 *
 */
61
bool BulletCharacterControllerNode::is_on_ground(void) const;

856 8 can_jump 0 4 1507 39 BulletCharacterControllerNode::can_jump 0 1 99 10
/**
 *
 */
57
bool BulletCharacterControllerNode::can_jump(void) const;

857 7 do_jump 0 4 1507 38 BulletCharacterControllerNode::do_jump 0 1 100 10
/**
 *
 */
50
void BulletCharacterControllerNode::do_jump(void);

858 14 get_class_type 0 4 1507 45 BulletCharacterControllerNode::get_class_type 0 1 101 0
70
static TypeHandle BulletCharacterControllerNode::get_class_type(void);

859 34 upcast_to_ClosestRayResultCallback 0 12 1508 61 BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback 0 1 113 65
upcast from BulletClosestHitRayResult to ClosestRayResultCallback
112
btCollisionWorld::ClosestRayResultCallback *BulletClosestHitRayResult::upcast_to_ClosestRayResultCallback(void);

860 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 8 0 62 downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult 0 1 114 67
downcast from ClosestRayResultCallback to BulletClosestHitRayResult
140
BulletClosestHitRayResult *downcast_ClosestRayResultCallback_to_BulletClosestHitRayResult(btCollisionWorld::ClosestRayResultCallback *this);

861 5 empty 0 4 1508 32 BulletClosestHitRayResult::empty 0 1 103 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletClosestHitRayResult BulletClosestHitRayResult::empty(void);

862 12 get_from_pos 0 4 1508 39 BulletClosestHitRayResult::get_from_pos 0 1 104 10
/**
 *
 */
60
LPoint3 BulletClosestHitRayResult::get_from_pos(void) const;

863 10 get_to_pos 0 4 1508 37 BulletClosestHitRayResult::get_to_pos 0 1 105 10
/**
 *
 */
58
LPoint3 BulletClosestHitRayResult::get_to_pos(void) const;

864 7 has_hit 0 4 1508 34 BulletClosestHitRayResult::has_hit 0 1 106 10
/**
 *
 */
52
bool BulletClosestHitRayResult::has_hit(void) const;

865 8 get_node 0 4 1508 35 BulletClosestHitRayResult::get_node 0 1 107 10
/**
 *
 */
59
PandaNode *BulletClosestHitRayResult::get_node(void) const;

866 11 get_hit_pos 0 4 1508 38 BulletClosestHitRayResult::get_hit_pos 0 1 108 10
/**
 *
 */
59
LPoint3 BulletClosestHitRayResult::get_hit_pos(void) const;

867 14 get_hit_normal 0 4 1508 41 BulletClosestHitRayResult::get_hit_normal 0 1 109 10
/**
 *
 */
63
LVector3 BulletClosestHitRayResult::get_hit_normal(void) const;

868 16 get_hit_fraction 0 4 1508 43 BulletClosestHitRayResult::get_hit_fraction 0 1 110 10
/**
 *
 */
68
PN_stdfloat BulletClosestHitRayResult::get_hit_fraction(void) const;

869 14 get_shape_part 0 4 1508 41 BulletClosestHitRayResult::get_shape_part 0 1 111 10
/**
 *
 */
58
int BulletClosestHitRayResult::get_shape_part(void) const;

870 18 get_triangle_index 0 4 1508 45 BulletClosestHitRayResult::get_triangle_index 0 1 112 10
/**
 *
 */
62
int BulletClosestHitRayResult::get_triangle_index(void) const;

871 25 BulletClosestHitRayResult 0 4 1508 52 BulletClosestHitRayResult::BulletClosestHitRayResult 0 1 102 10
/**
 *
 */
105
inline BulletClosestHitRayResult::BulletClosestHitRayResult(BulletClosestHitRayResult const &) = default;

872 26 ~BulletClosestHitRayResult 0 4 1508 53 BulletClosestHitRayResult::~BulletClosestHitRayResult 0 0 0
60
BulletClosestHitRayResult::~BulletClosestHitRayResult(void);

873 37 upcast_to_ClosestConvexResultCallback 0 12 1510 66 BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback 0 1 124 70
upcast from BulletClosestHitSweepResult to ClosestConvexResultCallback
120
btCollisionWorld::ClosestConvexResultCallback *BulletClosestHitSweepResult::upcast_to_ClosestConvexResultCallback(void);

874 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 8 0 67 downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult 0 1 125 72
downcast from ClosestConvexResultCallback to BulletClosestHitSweepResult
150
BulletClosestHitSweepResult *downcast_ClosestConvexResultCallback_to_BulletClosestHitSweepResult(btCollisionWorld::ClosestConvexResultCallback *this);

875 5 empty 0 4 1510 34 BulletClosestHitSweepResult::empty 0 1 116 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
83
static inline BulletClosestHitSweepResult BulletClosestHitSweepResult::empty(void);

876 12 get_from_pos 0 4 1510 41 BulletClosestHitSweepResult::get_from_pos 0 1 117 10
/**
 *
 */
62
LPoint3 BulletClosestHitSweepResult::get_from_pos(void) const;

877 10 get_to_pos 0 4 1510 39 BulletClosestHitSweepResult::get_to_pos 0 1 118 10
/**
 *
 */
60
LPoint3 BulletClosestHitSweepResult::get_to_pos(void) const;

878 7 has_hit 0 4 1510 36 BulletClosestHitSweepResult::has_hit 0 1 119 10
/**
 *
 */
54
bool BulletClosestHitSweepResult::has_hit(void) const;

879 8 get_node 0 4 1510 37 BulletClosestHitSweepResult::get_node 0 1 120 10
/**
 *
 */
61
PandaNode *BulletClosestHitSweepResult::get_node(void) const;

880 11 get_hit_pos 0 4 1510 40 BulletClosestHitSweepResult::get_hit_pos 0 1 121 10
/**
 *
 */
61
LPoint3 BulletClosestHitSweepResult::get_hit_pos(void) const;

881 14 get_hit_normal 0 4 1510 43 BulletClosestHitSweepResult::get_hit_normal 0 1 122 10
/**
 *
 */
65
LVector3 BulletClosestHitSweepResult::get_hit_normal(void) const;

882 16 get_hit_fraction 0 4 1510 45 BulletClosestHitSweepResult::get_hit_fraction 0 1 123 10
/**
 *
 */
70
PN_stdfloat BulletClosestHitSweepResult::get_hit_fraction(void) const;

883 27 BulletClosestHitSweepResult 0 4 1510 56 BulletClosestHitSweepResult::BulletClosestHitSweepResult 0 1 115 10
/**
 *
 */
111
inline BulletClosestHitSweepResult::BulletClosestHitSweepResult(BulletClosestHitSweepResult const &) = default;

884 28 ~BulletClosestHitSweepResult 0 4 1510 57 BulletClosestHitSweepResult::~BulletClosestHitSweepResult 0 0 0
64
BulletClosestHitSweepResult::~BulletClosestHitSweepResult(void);

885 15 BulletConeShape 0 4 1512 32 BulletConeShape::BulletConeShape 0 2 126 127 22
/**
 *
 */

/**
 *
 */
169
BulletConeShape::BulletConeShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
inline BulletConeShape::BulletConeShape(BulletConeShape const &copy);

886 10 operator = 0 4 1512 27 BulletConeShape::operator = 0 1 128 0
69
inline void BulletConeShape::operator =(BulletConeShape const &copy);

887 10 get_radius 0 4 1512 27 BulletConeShape::get_radius 0 1 129 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_radius(void) const;

888 10 get_height 0 4 1512 27 BulletConeShape::get_height 0 1 130 10
/**
 *
 */
59
inline PN_stdfloat BulletConeShape::get_height(void) const;

889 14 get_class_type 0 4 1512 31 BulletConeShape::get_class_type 0 1 131 0
56
static TypeHandle BulletConeShape::get_class_type(void);

890 16 get_rigid_body_a 0 4 1513 34 BulletConstraint::get_rigid_body_a 0 1 132 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_a(void);

891 16 get_rigid_body_b 0 4 1513 34 BulletConstraint::get_rigid_body_b 0 1 133 10
/**
 *
 */
62
BulletRigidBodyNode *BulletConstraint::get_rigid_body_b(void);

892 15 enable_feedback 0 4 1513 33 BulletConstraint::enable_feedback 0 1 134 10
/**
 *
 */
51
void BulletConstraint::enable_feedback(bool value);

893 19 set_debug_draw_size 0 4 1513 37 BulletConstraint::set_debug_draw_size 0 1 135 10
/**
 *
 */
61
void BulletConstraint::set_debug_draw_size(PN_stdfloat size);

894 19 get_applied_impulse 0 4 1513 37 BulletConstraint::get_applied_impulse 0 1 136 10
/**
 *
 */
62
PN_stdfloat BulletConstraint::get_applied_impulse(void) const;

895 19 get_debug_draw_size 0 4 1513 37 BulletConstraint::get_debug_draw_size 0 1 137 10
/**
 *
 */
56
PN_stdfloat BulletConstraint::get_debug_draw_size(void);

896 22 set_breaking_threshold 0 4 1513 40 BulletConstraint::set_breaking_threshold 0 2 138 139 287
/**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */

/**
 * Returns the applied impluse limit for breaking the constraint.
 */
149
inline void BulletConstraint::set_breaking_threshold(PN_stdfloat threshold);
inline PN_stdfloat BulletConstraint::set_breaking_threshold(void) const;

897 11 set_enabled 0 4 1513 29 BulletConstraint::set_enabled 0 1 140 10
/**
 *
 */
56
inline void BulletConstraint::set_enabled(bool enabled);

898 10 is_enabled 0 4 1513 28 BulletConstraint::is_enabled 0 1 141 53
/**
 * Returns TRUE if the constraint is enabled.
 */
53
inline bool BulletConstraint::is_enabled(void) const;

899 9 set_param 0 4 1513 27 BulletConstraint::set_param 0 1 142 10
/**
 *
 */
106
void BulletConstraint::set_param(BulletConstraint::ConstraintParam num, PN_stdfloat value, int axis = -1);

900 9 get_param 0 4 1513 27 BulletConstraint::get_param 0 1 143 10
/**
 *
 */
94
PN_stdfloat BulletConstraint::get_param(BulletConstraint::ConstraintParam num, int axis = -1);

901 14 get_class_type 0 4 1513 32 BulletConstraint::get_class_type 0 1 144 0
57
static TypeHandle BulletConstraint::get_class_type(void);

902 25 BulletConeTwistConstraint 0 4 1516 52 BulletConeTwistConstraint::BulletConeTwistConstraint 0 2 145 146 22
/**
 *
 */

/**
 *
 */
305
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a);
BulletConeTwistConstraint::BulletConeTwistConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b);

903 9 set_limit 0 4 1516 36 BulletConeTwistConstraint::set_limit 0 2 147 148 22
/**
 *
 */

/**
 *
 */
272
void BulletConeTwistConstraint::set_limit(int index, PN_stdfloat value);
void BulletConeTwistConstraint::set_limit(PN_stdfloat swing1, PN_stdfloat swing2, PN_stdfloat twist, PN_stdfloat softness = 1.0, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

904 11 set_damping 0 4 1516 38 BulletConeTwistConstraint::set_damping 0 1 149 10
/**
 *
 */
65
void BulletConeTwistConstraint::set_damping(PN_stdfloat damping);

905 17 get_fix_threshold 0 4 1516 44 BulletConeTwistConstraint::get_fix_threshold 0 1 150 10
/**
 *
 */
69
PN_stdfloat BulletConeTwistConstraint::get_fix_threshold(void) const;

906 17 set_fix_threshold 0 4 1516 44 BulletConeTwistConstraint::set_fix_threshold 0 1 151 10
/**
 *
 */
73
void BulletConeTwistConstraint::set_fix_threshold(PN_stdfloat threshold);

907 12 enable_motor 0 4 1516 39 BulletConeTwistConstraint::enable_motor 0 1 152 10
/**
 *
 */
58
void BulletConeTwistConstraint::enable_motor(bool enable);

908 21 set_max_motor_impulse 0 4 1516 48 BulletConeTwistConstraint::set_max_motor_impulse 0 1 153 10
/**
 *
 */
79
void BulletConeTwistConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

909 32 set_max_motor_impulse_normalized 0 4 1516 59 BulletConeTwistConstraint::set_max_motor_impulse_normalized 0 1 154 10
/**
 *
 */
90
void BulletConeTwistConstraint::set_max_motor_impulse_normalized(PN_stdfloat max_impulse);

910 16 set_motor_target 0 4 1516 43 BulletConeTwistConstraint::set_motor_target 0 1 155 10
/**
 *
 */
74
void BulletConeTwistConstraint::set_motor_target(LQuaternion const &quat);

911 36 set_motor_target_in_constraint_space 0 4 1516 63 BulletConeTwistConstraint::set_motor_target_in_constraint_space 0 1 156 10
/**
 *
 */
94
void BulletConeTwistConstraint::set_motor_target_in_constraint_space(LQuaternion const &quat);

912 10 set_frames 0 4 1516 37 BulletConeTwistConstraint::set_frames 0 1 157 10
/**
 *
 */
99
void BulletConeTwistConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

913 11 get_frame_a 0 4 1516 38 BulletConeTwistConstraint::get_frame_a 0 1 158 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_a(void) const;

914 11 get_frame_b 0 4 1516 38 BulletConeTwistConstraint::get_frame_b 0 1 159 10
/**
 *
 */
91
inline ConstPointerTo< TransformState > BulletConeTwistConstraint::get_frame_b(void) const;

915 14 get_class_type 0 4 1516 41 BulletConeTwistConstraint::get_class_type 0 1 160 0
66
static TypeHandle BulletConeTwistConstraint::get_class_type(void);

916 20 ~BulletManifoldPoint 0 4 1517 41 BulletManifoldPoint::~BulletManifoldPoint 0 0 10
/**
 *
 */
55
inline BulletManifoldPoint::~BulletManifoldPoint(void);

917 13 get_life_time 0 4 1517 34 BulletManifoldPoint::get_life_time 0 1 161 10
/**
 *
 */
51
int BulletManifoldPoint::get_life_time(void) const;

918 12 get_distance 0 4 1517 33 BulletManifoldPoint::get_distance 0 1 162 10
/**
 *
 */
58
PN_stdfloat BulletManifoldPoint::get_distance(void) const;

919 19 get_applied_impulse 0 4 1517 40 BulletManifoldPoint::get_applied_impulse 0 1 163 10
/**
 *
 */
65
PN_stdfloat BulletManifoldPoint::get_applied_impulse(void) const;

920 23 get_position_world_on_a 0 4 1517 44 BulletManifoldPoint::get_position_world_on_a 0 1 164 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_a(void) const;

921 23 get_position_world_on_b 0 4 1517 44 BulletManifoldPoint::get_position_world_on_b 0 1 165 10
/**
 *
 */
65
LPoint3 BulletManifoldPoint::get_position_world_on_b(void) const;

922 21 get_normal_world_on_b 0 4 1517 42 BulletManifoldPoint::get_normal_world_on_b 0 1 166 10
/**
 *
 */
64
LVector3 BulletManifoldPoint::get_normal_world_on_b(void) const;

923 17 get_local_point_a 0 4 1517 38 BulletManifoldPoint::get_local_point_a 0 1 167 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_a(void) const;

924 17 get_local_point_b 0 4 1517 38 BulletManifoldPoint::get_local_point_b 0 1 168 10
/**
 *
 */
59
LPoint3 BulletManifoldPoint::get_local_point_b(void) const;

925 12 get_part_id0 0 4 1517 33 BulletManifoldPoint::get_part_id0 0 1 169 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id0(void) const;

926 12 get_part_id1 0 4 1517 33 BulletManifoldPoint::get_part_id1 0 1 170 10
/**
 *
 */
50
int BulletManifoldPoint::get_part_id1(void) const;

927 10 get_index0 0 4 1517 31 BulletManifoldPoint::get_index0 0 1 171 10
/**
 *
 */
48
int BulletManifoldPoint::get_index0(void) const;

928 10 get_index1 0 4 1517 31 BulletManifoldPoint::get_index1 0 1 172 10
/**
 *
 */
48
int BulletManifoldPoint::get_index1(void) const;

929 32 set_lateral_friction_initialized 0 4 1517 53 BulletManifoldPoint::set_lateral_friction_initialized 0 1 173 10
/**
 *
 */
78
inline void BulletManifoldPoint::set_lateral_friction_initialized(bool value);

930 25 set_lateral_friction_dir1 0 4 1517 46 BulletManifoldPoint::set_lateral_friction_dir1 0 1 174 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir1(LVecBase3 const &dir);

931 25 set_lateral_friction_dir2 0 4 1517 46 BulletManifoldPoint::set_lateral_friction_dir2 0 1 175 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_lateral_friction_dir2(LVecBase3 const &dir);

932 19 set_contact_motion1 0 4 1517 40 BulletManifoldPoint::set_contact_motion1 0 1 176 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion1(PN_stdfloat value);

933 19 set_contact_motion2 0 4 1517 40 BulletManifoldPoint::set_contact_motion2 0 1 177 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_contact_motion2(PN_stdfloat value);

934 21 set_combined_friction 0 4 1517 42 BulletManifoldPoint::set_combined_friction 0 1 178 10
/**
 *
 */
74
inline void BulletManifoldPoint::set_combined_friction(PN_stdfloat value);

935 24 set_combined_restitution 0 4 1517 45 BulletManifoldPoint::set_combined_restitution 0 1 179 10
/**
 *
 */
77
inline void BulletManifoldPoint::set_combined_restitution(PN_stdfloat value);

936 19 set_applied_impulse 0 4 1517 40 BulletManifoldPoint::set_applied_impulse 0 1 180 10
/**
 *
 */
72
inline void BulletManifoldPoint::set_applied_impulse(PN_stdfloat value);

937 28 set_applied_impulse_lateral1 0 4 1517 49 BulletManifoldPoint::set_applied_impulse_lateral1 0 1 181 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral1(PN_stdfloat value);

938 28 set_applied_impulse_lateral2 0 4 1517 49 BulletManifoldPoint::set_applied_impulse_lateral2 0 1 182 10
/**
 *
 */
81
inline void BulletManifoldPoint::set_applied_impulse_lateral2(PN_stdfloat value);

939 16 set_contact_cfm1 0 4 1517 37 BulletManifoldPoint::set_contact_cfm1 0 1 183 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm1(PN_stdfloat value);

940 16 set_contact_cfm2 0 4 1517 37 BulletManifoldPoint::set_contact_cfm2 0 1 184 10
/**
 *
 */
69
inline void BulletManifoldPoint::set_contact_cfm2(PN_stdfloat value);

941 32 get_lateral_friction_initialized 0 4 1517 53 BulletManifoldPoint::get_lateral_friction_initialized 0 1 185 10
/**
 *
 */
78
inline bool BulletManifoldPoint::get_lateral_friction_initialized(void) const;

942 25 get_lateral_friction_dir1 0 4 1517 46 BulletManifoldPoint::get_lateral_friction_dir1 0 1 186 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir1(void) const;

943 25 get_lateral_friction_dir2 0 4 1517 46 BulletManifoldPoint::get_lateral_friction_dir2 0 1 187 10
/**
 *
 */
75
inline LVector3 BulletManifoldPoint::get_lateral_friction_dir2(void) const;

944 19 get_contact_motion1 0 4 1517 40 BulletManifoldPoint::get_contact_motion1 0 1 188 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion1(void) const;

945 19 get_contact_motion2 0 4 1517 40 BulletManifoldPoint::get_contact_motion2 0 1 189 10
/**
 *
 */
72
inline PN_stdfloat BulletManifoldPoint::get_contact_motion2(void) const;

946 21 get_combined_friction 0 4 1517 42 BulletManifoldPoint::get_combined_friction 0 1 190 10
/**
 *
 */
74
inline PN_stdfloat BulletManifoldPoint::get_combined_friction(void) const;

947 24 get_combined_restitution 0 4 1517 45 BulletManifoldPoint::get_combined_restitution 0 1 191 10
/**
 *
 */
77
inline PN_stdfloat BulletManifoldPoint::get_combined_restitution(void) const;

948 28 get_applied_impulse_lateral1 0 4 1517 49 BulletManifoldPoint::get_applied_impulse_lateral1 0 1 192 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral1(void) const;

949 28 get_applied_impulse_lateral2 0 4 1517 49 BulletManifoldPoint::get_applied_impulse_lateral2 0 1 193 10
/**
 *
 */
81
inline PN_stdfloat BulletManifoldPoint::get_applied_impulse_lateral2(void) const;

950 16 get_contact_cfm1 0 4 1517 37 BulletManifoldPoint::get_contact_cfm1 0 1 194 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm1(void) const;

951 16 get_contact_cfm2 0 4 1517 37 BulletManifoldPoint::get_contact_cfm2 0 1 195 10
/**
 *
 */
69
inline PN_stdfloat BulletManifoldPoint::get_contact_cfm2(void) const;

952 25 BulletContactCallbackData 0 4 1518 52 BulletContactCallbackData::BulletContactCallbackData 0 1 196 10
/**
 *
 */
163
inline BulletContactCallbackData::BulletContactCallbackData(BulletManifoldPoint &mp, PandaNode *node0, PandaNode *node1, int id0, int id1, int index0, int index1);

953 12 get_manifold 0 4 1518 39 BulletContactCallbackData::get_manifold 0 1 197 10
/**
 *
 */
80
inline BulletManifoldPoint &BulletContactCallbackData::get_manifold(void) const;

954 9 get_node0 0 4 1518 36 BulletContactCallbackData::get_node0 0 1 198 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node0(void) const;

955 9 get_node1 0 4 1518 36 BulletContactCallbackData::get_node1 0 1 199 10
/**
 *
 */
67
inline PandaNode *BulletContactCallbackData::get_node1(void) const;

956 12 get_part_id0 0 4 1518 39 BulletContactCallbackData::get_part_id0 0 1 200 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id0(void) const;

957 12 get_part_id1 0 4 1518 39 BulletContactCallbackData::get_part_id1 0 1 201 10
/**
 *
 */
63
inline int BulletContactCallbackData::get_part_id1(void) const;

958 10 get_index0 0 4 1518 37 BulletContactCallbackData::get_index0 0 1 202 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index0(void) const;

959 10 get_index1 0 4 1518 37 BulletContactCallbackData::get_index1 0 1 203 10
/**
 *
 */
61
inline int BulletContactCallbackData::get_index1(void) const;

960 14 get_class_type 0 4 1518 41 BulletContactCallbackData::get_class_type 0 1 204 0
66
static TypeHandle BulletContactCallbackData::get_class_type(void);

961 18 get_manifold_point 0 4 1520 33 BulletContact::get_manifold_point 0 1 205 10
/**
 *
 */
68
inline BulletManifoldPoint &BulletContact::get_manifold_point(void);

962 9 get_node0 0 4 1520 24 BulletContact::get_node0 0 1 206 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node0(void) const;

963 9 get_node1 0 4 1520 24 BulletContact::get_node1 0 1 207 10
/**
 *
 */
55
inline PandaNode *BulletContact::get_node1(void) const;

964 8 get_idx0 0 4 1520 23 BulletContact::get_idx0 0 1 208 10
/**
 *
 */
47
inline int BulletContact::get_idx0(void) const;

965 8 get_idx1 0 4 1520 23 BulletContact::get_idx1 0 1 209 10
/**
 *
 */
47
inline int BulletContact::get_idx1(void) const;

966 12 get_part_id0 0 4 1520 27 BulletContact::get_part_id0 0 1 210 10
/**
 *
 */
51
inline int BulletContact::get_part_id0(void) const;

967 12 get_part_id1 0 4 1520 27 BulletContact::get_part_id1 0 1 211 10
/**
 *
 */
51
inline int BulletContact::get_part_id1(void) const;

968 14 ~BulletContact 0 4 1520 29 BulletContact::~BulletContact 0 0 0
36
BulletContact::~BulletContact(void);

969 31 upcast_to_ContactResultCallback 0 12 1521 52 BulletContactResult::upcast_to_ContactResultCallback 0 1 214 56
upcast from BulletContactResult to ContactResultCallback
100
btCollisionWorld::ContactResultCallback *BulletContactResult::upcast_to_ContactResultCallback(void);

970 53 downcast_ContactResultCallback_to_BulletContactResult 0 8 0 53 downcast_ContactResultCallback_to_BulletContactResult 0 1 215 58
downcast from ContactResultCallback to BulletContactResult
122
BulletContactResult *downcast_ContactResultCallback_to_BulletContactResult(btCollisionWorld::ContactResultCallback *this);

971 16 get_num_contacts 0 4 1521 37 BulletContactResult::get_num_contacts 0 1 212 10
/**
 *
 */
61
inline int BulletContactResult::get_num_contacts(void) const;

972 11 get_contact 0 4 1521 32 BulletContactResult::get_contact 0 1 213 10
/**
 *
 */
63
inline BulletContact BulletContactResult::get_contact(int idx);

973 20 ~BulletContactResult 0 4 1521 41 BulletContactResult::~BulletContactResult 0 0 0
48
BulletContactResult::~BulletContactResult(void);

974 15 BulletDebugNode 0 4 1523 32 BulletDebugNode::BulletDebugNode 0 2 216 217 10
/**
 *
 */
137
BulletDebugNode::BulletDebugNode(char const *name = "debug");
inline BulletDebugNode::BulletDebugNode(BulletDebugNode const &) = default;

975 17 draw_mask_changed 0 6 1523 34 BulletDebugNode::draw_mask_changed 0 1 218 10
/**
 *
 */
54
virtual void BulletDebugNode::draw_mask_changed(void);

976 14 show_wireframe 0 4 1523 31 BulletDebugNode::show_wireframe 0 1 219 10
/**
 *
 */
55
inline void BulletDebugNode::show_wireframe(bool show);

977 16 show_constraints 0 4 1523 33 BulletDebugNode::show_constraints 0 1 220 10
/**
 *
 */
57
inline void BulletDebugNode::show_constraints(bool show);

978 19 show_bounding_boxes 0 4 1523 36 BulletDebugNode::show_bounding_boxes 0 1 221 10
/**
 *
 */
60
inline void BulletDebugNode::show_bounding_boxes(bool show);

979 12 show_normals 0 4 1523 29 BulletDebugNode::show_normals 0 1 222 10
/**
 *
 */
53
inline void BulletDebugNode::show_normals(bool show);

980 14 get_class_type 0 4 1523 31 BulletDebugNode::get_class_type 0 1 223 0
56
static TypeHandle BulletDebugNode::get_class_type(void);

981 15 BulletGhostNode 0 4 1525 32 BulletGhostNode::BulletGhostNode 0 1 224 10
/**
 *
 */
61
BulletGhostNode::BulletGhostNode(char const *name = "ghost");

982 25 get_num_overlapping_nodes 0 4 1525 42 BulletGhostNode::get_num_overlapping_nodes 0 1 225 42
// Overlapping

// Overlapping

/**
 *
 */
66
inline int BulletGhostNode::get_num_overlapping_nodes(void) const;

983 20 get_overlapping_node 0 4 1525 37 BulletGhostNode::get_overlapping_node 0 1 226 10
/**
 *
 */
71
inline PandaNode *BulletGhostNode::get_overlapping_node(int idx) const;

984 14 get_class_type 0 4 1525 31 BulletGhostNode::get_class_type 0 1 227 0
56
static TypeHandle BulletGhostNode::get_class_type(void);

985 19 BulletRigidBodyNode 0 4 1526 40 BulletRigidBodyNode::BulletRigidBodyNode 0 1 228 138
/**
 *
 */

/**
 * Do not call the copy constructor directly; instead, use make_copy() or
 * copy_subgraph() to make a copy of a node.
 */
78
explicit BulletRigidBodyNode::BulletRigidBodyNode(char const *name = "rigid");

986 8 set_mass 0 4 1526 29 BulletRigidBodyNode::set_mass 0 1 229 276
// Mass & inertia

/**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */
53
void BulletRigidBodyNode::set_mass(PN_stdfloat mass);

987 8 get_mass 0 4 1526 29 BulletRigidBodyNode::get_mass 0 1 230 128
/**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */
54
PN_stdfloat BulletRigidBodyNode::get_mass(void) const;

988 12 get_inv_mass 0 4 1526 33 BulletRigidBodyNode::get_inv_mass 0 1 231 52
/**
 * Returns the inverse mass of a rigid body.
 */
58
PN_stdfloat BulletRigidBodyNode::get_inv_mass(void) const;

989 11 set_inertia 0 4 1526 32 BulletRigidBodyNode::set_inertia 0 1 232 591
/**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */
64
void BulletRigidBodyNode::set_inertia(LVecBase3 const &inertia);

990 11 get_inertia 0 4 1526 32 BulletRigidBodyNode::get_inertia 0 1 233 174
/**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */
54
LVector3 BulletRigidBodyNode::get_inertia(void) const;

991 26 get_inv_inertia_diag_local 0 4 1526 47 BulletRigidBodyNode::get_inv_inertia_diag_local 0 1 234 10
/**
 *
 */
69
LVector3 BulletRigidBodyNode::get_inv_inertia_diag_local(void) const;

992 28 get_inv_inertia_tensor_world 0 4 1526 49 BulletRigidBodyNode::get_inv_inertia_tensor_world 0 1 235 10
/**
 *
 */
71
LMatrix3 BulletRigidBodyNode::get_inv_inertia_tensor_world(void) const;

993 19 get_linear_velocity 0 4 1526 40 BulletRigidBodyNode::get_linear_velocity 0 1 236 23
// Velocity

/**
 *
 */
62
LVector3 BulletRigidBodyNode::get_linear_velocity(void) const;

994 20 get_angular_velocity 0 4 1526 41 BulletRigidBodyNode::get_angular_velocity 0 1 237 10
/**
 *
 */
63
LVector3 BulletRigidBodyNode::get_angular_velocity(void) const;

995 19 set_linear_velocity 0 4 1526 40 BulletRigidBodyNode::set_linear_velocity 0 1 238 10
/**
 *
 */
72
void BulletRigidBodyNode::set_linear_velocity(LVector3 const &velocity);

996 20 set_angular_velocity 0 4 1526 41 BulletRigidBodyNode::set_angular_velocity 0 1 239 10
/**
 *
 */
73
void BulletRigidBodyNode::set_angular_velocity(LVector3 const &velocity);

997 18 get_linear_damping 0 4 1526 39 BulletRigidBodyNode::get_linear_damping 0 1 240 22
// Damping

/**
 *
 */
71
inline PN_stdfloat BulletRigidBodyNode::get_linear_damping(void) const;

998 19 get_angular_damping 0 4 1526 40 BulletRigidBodyNode::get_angular_damping 0 1 241 10
/**
 *
 */
72
inline PN_stdfloat BulletRigidBodyNode::get_angular_damping(void) const;

999 18 set_linear_damping 0 4 1526 39 BulletRigidBodyNode::set_linear_damping 0 1 242 10
/**
 *
 */
71
inline void BulletRigidBodyNode::set_linear_damping(PN_stdfloat value);

1000 19 set_angular_damping 0 4 1526 40 BulletRigidBodyNode::set_angular_damping 0 1 243 10
/**
 *
 */
72
inline void BulletRigidBodyNode::set_angular_damping(PN_stdfloat value);

1001 12 clear_forces 0 4 1526 33 BulletRigidBodyNode::clear_forces 0 1 244 21
// Forces

/**
 *
 */
45
void BulletRigidBodyNode::clear_forces(void);

1002 11 apply_force 0 4 1526 32 BulletRigidBodyNode::apply_force 0 1 245 10
/**
 *
 */
81
void BulletRigidBodyNode::apply_force(LVector3 const &force, LPoint3 const &pos);

1003 19 apply_central_force 0 4 1526 40 BulletRigidBodyNode::apply_central_force 0 1 246 10
/**
 *
 */
69
void BulletRigidBodyNode::apply_central_force(LVector3 const &force);

1004 13 apply_impulse 0 4 1526 34 BulletRigidBodyNode::apply_impulse 0 1 247 10
/**
 *
 */
85
void BulletRigidBodyNode::apply_impulse(LVector3 const &impulse, LPoint3 const &pos);

1005 21 apply_central_impulse 0 4 1526 42 BulletRigidBodyNode::apply_central_impulse 0 1 248 10
/**
 *
 */
73
void BulletRigidBodyNode::apply_central_impulse(LVector3 const &impulse);

1006 12 apply_torque 0 4 1526 33 BulletRigidBodyNode::apply_torque 0 1 249 10
/**
 *
 */
63
void BulletRigidBodyNode::apply_torque(LVector3 const &torque);

1007 20 apply_torque_impulse 0 4 1526 41 BulletRigidBodyNode::apply_torque_impulse 0 1 250 10
/**
 *
 */
71
void BulletRigidBodyNode::apply_torque_impulse(LVector3 const &torque);

1008 15 get_total_force 0 4 1526 36 BulletRigidBodyNode::get_total_force 0 1 251 10
/**
 *
 */
58
LVector3 BulletRigidBodyNode::get_total_force(void) const;

1009 16 get_total_torque 0 4 1526 37 BulletRigidBodyNode::get_total_torque 0 1 252 10
/**
 *
 */
59
LVector3 BulletRigidBodyNode::get_total_torque(void) const;

1010 26 get_linear_sleep_threshold 0 4 1526 47 BulletRigidBodyNode::get_linear_sleep_threshold 0 1 253 38
// Deactivation thresholds

/**
 *
 */
72
PN_stdfloat BulletRigidBodyNode::get_linear_sleep_threshold(void) const;

1011 27 get_angular_sleep_threshold 0 4 1526 48 BulletRigidBodyNode::get_angular_sleep_threshold 0 1 254 10
/**
 *
 */
73
PN_stdfloat BulletRigidBodyNode::get_angular_sleep_threshold(void) const;

1012 26 set_linear_sleep_threshold 0 4 1526 47 BulletRigidBodyNode::set_linear_sleep_threshold 0 1 255 10
/**
 *
 */
76
void BulletRigidBodyNode::set_linear_sleep_threshold(PN_stdfloat threshold);

1013 27 set_angular_sleep_threshold 0 4 1526 48 BulletRigidBodyNode::set_angular_sleep_threshold 0 1 256 10
/**
 *
 */
77
void BulletRigidBodyNode::set_angular_sleep_threshold(PN_stdfloat threshold);

1014 11 set_gravity 0 4 1526 32 BulletRigidBodyNode::set_gravity 0 1 257 22
// Gravity

/**
 *
 */
63
void BulletRigidBodyNode::set_gravity(LVector3 const &gravity);

1015 11 get_gravity 0 4 1526 32 BulletRigidBodyNode::get_gravity 0 1 258 10
/**
 *
 */
54
LVector3 BulletRigidBodyNode::get_gravity(void) const;

1016 17 get_linear_factor 0 4 1526 38 BulletRigidBodyNode::get_linear_factor 0 1 259 32
// Restrict movement

/**
 *
 */
60
LVector3 BulletRigidBodyNode::get_linear_factor(void) const;

1017 18 get_angular_factor 0 4 1526 39 BulletRigidBodyNode::get_angular_factor 0 1 260 10
/**
 *
 */
61
LVector3 BulletRigidBodyNode::get_angular_factor(void) const;

1018 17 set_linear_factor 0 4 1526 38 BulletRigidBodyNode::set_linear_factor 0 1 261 10
/**
 *
 */
68
void BulletRigidBodyNode::set_linear_factor(LVector3 const &factor);

1019 18 set_angular_factor 0 4 1526 39 BulletRigidBodyNode::set_angular_factor 0 1 262 10
/**
 *
 */
69
void BulletRigidBodyNode::set_angular_factor(LVector3 const &factor);

1020 15 pick_dirty_flag 0 4 1526 36 BulletRigidBodyNode::pick_dirty_flag 0 1 263 135
// Special

/**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */
48
bool BulletRigidBodyNode::pick_dirty_flag(void);

1021 14 get_class_type 0 4 1526 35 BulletRigidBodyNode::get_class_type 0 1 264 0
60
static TypeHandle BulletRigidBodyNode::get_class_type(void);

1022 26 ~BulletSoftBodyNodeElement 0 4 1527 53 BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement 0 0 10
/**
 *
 */
67
inline BulletSoftBodyNodeElement::~BulletSoftBodyNodeElement(void);

1023 5 empty 0 4 1527 32 BulletSoftBodyNodeElement::empty 0 1 266 101
/**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */
79
static inline BulletSoftBodyNodeElement BulletSoftBodyNodeElement::empty(void);

1024 7 get_pos 0 4 1527 34 BulletSoftBodyNodeElement::get_pos 0 1 267 10
/**
 *
 */
62
inline LPoint3 BulletSoftBodyNodeElement::get_pos(void) const;

1025 12 get_velocity 0 4 1527 39 BulletSoftBodyNodeElement::get_velocity 0 1 268 10
/**
 *
 */
68
inline LVector3 BulletSoftBodyNodeElement::get_velocity(void) const;

1026 10 get_normal 0 4 1527 37 BulletSoftBodyNodeElement::get_normal 0 1 269 10
/**
 *
 */
66
inline LVector3 BulletSoftBodyNodeElement::get_normal(void) const;

1027 12 get_inv_mass 0 4 1527 39 BulletSoftBodyNodeElement::get_inv_mass 0 1 270 10
/**
 *
 */
71
inline PN_stdfloat BulletSoftBodyNodeElement::get_inv_mass(void) const;

1028 8 get_area 0 4 1527 35 BulletSoftBodyNodeElement::get_area 0 1 271 10
/**
 *
 */
67
inline PN_stdfloat BulletSoftBodyNodeElement::get_area(void) const;

1029 11 is_attached 0 4 1527 38 BulletSoftBodyNodeElement::is_attached 0 1 272 10
/**
 *
 */
62
inline int BulletSoftBodyNodeElement::is_attached(void) const;

1030 25 BulletSoftBodyNodeElement 0 4 1527 52 BulletSoftBodyNodeElement::BulletSoftBodyNodeElement 0 1 265 10
/**
 *
 */
105
inline BulletSoftBodyNodeElement::BulletSoftBodyNodeElement(BulletSoftBodyNodeElement const &) = default;

1031 7 get_cfg 0 4 1528 27 BulletSoftBodyNode::get_cfg 0 1 273 10
/**
 *
 */
55
BulletSoftBodyConfig BulletSoftBodyNode::get_cfg(void);

1032 14 get_world_info 0 4 1528 34 BulletSoftBodyNode::get_world_info 0 1 274 10
/**
 *
 */
65
BulletSoftBodyWorldInfo BulletSoftBodyNode::get_world_info(void);

1033 28 generate_bending_constraints 0 4 1528 48 BulletSoftBodyNode::generate_bending_constraints 0 1 275 10
/**
 *
 */
106
void BulletSoftBodyNode::generate_bending_constraints(int distance, BulletSoftBodyMaterial *material = 0);

1034 21 randomize_constraints 0 4 1528 41 BulletSoftBodyNode::randomize_constraints 0 1 276 10
/**
 *
 */
53
void BulletSoftBodyNode::randomize_constraints(void);

1035 15 set_volume_mass 0 4 1528 35 BulletSoftBodyNode::set_volume_mass 0 1 277 36
// Mass, volume, density

/**
 *
 */
59
void BulletSoftBodyNode::set_volume_mass(PN_stdfloat mass);

1036 18 set_volume_density 0 4 1528 38 BulletSoftBodyNode::set_volume_density 0 1 278 10
/**
 *
 */
65
void BulletSoftBodyNode::set_volume_density(PN_stdfloat density);

1037 14 set_total_mass 0 4 1528 34 BulletSoftBodyNode::set_total_mass 0 1 279 10
/**
 *
 */
82
void BulletSoftBodyNode::set_total_mass(PN_stdfloat mass, bool fromfaces = false);

1038 17 set_total_density 0 4 1528 37 BulletSoftBodyNode::set_total_density 0 1 280 10
/**
 *
 */
64
void BulletSoftBodyNode::set_total_density(PN_stdfloat density);

1039 8 set_mass 0 4 1528 28 BulletSoftBodyNode::set_mass 0 1 281 10
/**
 *
 */
62
void BulletSoftBodyNode::set_mass(int node, PN_stdfloat mass);

1040 8 get_mass 0 4 1528 28 BulletSoftBodyNode::get_mass 0 1 282 10
/**
 *
 */
57
PN_stdfloat BulletSoftBodyNode::get_mass(int node) const;

1041 14 get_total_mass 0 4 1528 34 BulletSoftBodyNode::get_total_mass 0 1 283 10
/**
 *
 */
59
PN_stdfloat BulletSoftBodyNode::get_total_mass(void) const;

1042 10 get_volume 0 4 1528 30 BulletSoftBodyNode::get_volume 0 1 284 10
/**
 *
 */
55
PN_stdfloat BulletSoftBodyNode::get_volume(void) const;

1043 9 add_force 0 4 1528 29 BulletSoftBodyNode::add_force 0 2 285 286 32
// Force

/**
 *
 */

/**
 *
 */
127
void BulletSoftBodyNode::add_force(LVector3 const &force);
void BulletSoftBodyNode::add_force(LVector3 const &force, int node);

1044 12 set_velocity 0 4 1528 32 BulletSoftBodyNode::set_velocity 0 1 287 10
/**
 *
 */
64
void BulletSoftBodyNode::set_velocity(LVector3 const &velocity);

1045 12 add_velocity 0 4 1528 32 BulletSoftBodyNode::add_velocity 0 2 288 289 22
/**
 *
 */

/**
 *
 */
139
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity);
void BulletSoftBodyNode::add_velocity(LVector3 const &velocity, int node);

1046 17 set_wind_velocity 0 4 1528 37 BulletSoftBodyNode::set_wind_velocity 0 1 290 10
/**
 *
 */
69
void BulletSoftBodyNode::set_wind_velocity(LVector3 const &velocity);

1047 17 get_wind_velocity 0 4 1528 37 BulletSoftBodyNode::get_wind_velocity 0 1 291 10
/**
 *
 */
59
LVector3 BulletSoftBodyNode::get_wind_velocity(void) const;

1048 8 set_pose 0 4 1528 28 BulletSoftBodyNode::set_pose 0 1 292 10
/**
 *
 */
61
void BulletSoftBodyNode::set_pose(bool bvolume, bool bframe);

1049 8 get_aabb 0 4 1528 28 BulletSoftBodyNode::get_aabb 0 1 293 10
/**
 *
 */
53
BoundingBox BulletSoftBodyNode::get_aabb(void) const;

1050 17 generate_clusters 0 4 1528 37 BulletSoftBodyNode::generate_clusters 0 1 294 22
// Cluster

/**
 *
 */
76
void BulletSoftBodyNode::generate_clusters(int k, int maxiterations = 8192);

1051 15 release_cluster 0 4 1528 35 BulletSoftBodyNode::release_cluster 0 1 295 10
/**
 *
 */
52
void BulletSoftBodyNode::release_cluster(int index);

1052 16 release_clusters 0 4 1528 36 BulletSoftBodyNode::release_clusters 0 1 296 10
/**
 *
 */
48
void BulletSoftBodyNode::release_clusters(void);

1053 16 get_num_clusters 0 4 1528 36 BulletSoftBodyNode::get_num_clusters 0 1 297 10
/**
 *
 */
53
int BulletSoftBodyNode::get_num_clusters(void) const;

1054 11 cluster_com 0 4 1528 31 BulletSoftBodyNode::cluster_com 0 1 298 10
/**
 *
 */
61
LVecBase3 BulletSoftBodyNode::cluster_com(int cluster) const;

1055 9 link_geom 0 4 1528 29 BulletSoftBodyNode::link_geom 0 1 299 24
// Rendering

/**
 *
 */
47
void BulletSoftBodyNode::link_geom(Geom *geom);

1056 11 unlink_geom 0 4 1528 31 BulletSoftBodyNode::unlink_geom 0 1 300 10
/**
 *
 */
43
void BulletSoftBodyNode::unlink_geom(void);

1057 10 link_curve 0 4 1528 30 BulletSoftBodyNode::link_curve 0 1 301 10
/**
 *
 */
64
void BulletSoftBodyNode::link_curve(NurbsCurveEvaluator *curve);

1058 12 unlink_curve 0 4 1528 32 BulletSoftBodyNode::unlink_curve 0 1 302 10
/**
 *
 */
44
void BulletSoftBodyNode::unlink_curve(void);

1059 12 link_surface 0 4 1528 32 BulletSoftBodyNode::link_surface 0 1 303 10
/**
 *
 */
70
void BulletSoftBodyNode::link_surface(NurbsSurfaceEvaluator *surface);

1060 14 unlink_surface 0 4 1528 34 BulletSoftBodyNode::unlink_surface 0 1 304 10
/**
 *
 */
46
void BulletSoftBodyNode::unlink_surface(void);

1061 13 append_anchor 0 4 1528 33 BulletSoftBodyNode::append_anchor 0 2 305 306 34
// Anchors

/**
 *
 */

/**
 *
 */
220
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, bool disable = false);
void BulletSoftBodyNode::append_anchor(int node, BulletRigidBodyNode *body, LVector3 const &pivot, bool disable = false);

1062 19 append_linear_joint 0 4 1528 39 BulletSoftBodyNode::append_linear_joint 0 2 307 308 32
// Links

/**
 *
 */

/**
 *
 */
310
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, int cluster, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);
void BulletSoftBodyNode::append_linear_joint(BulletBodyNode *body, LPoint3 const &pos, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0);

1063 20 append_angular_joint 0 4 1528 40 BulletSoftBodyNode::append_angular_joint 0 1 309 10
/**
 *
 */
197
void BulletSoftBodyNode::append_angular_joint(BulletBodyNode *body, LVector3 const &axis, PN_stdfloat erp = 1.0, PN_stdfloat cfm = 1.0, PN_stdfloat split = 1.0, BulletSoftBodyControl *control = 0);

1064 17 get_num_materials 0 4 1528 37 BulletSoftBodyNode::get_num_materials 0 1 310 38
// Materials

// Materials

/**
 *
 */
54
int BulletSoftBodyNode::get_num_materials(void) const;

1065 12 get_material 0 4 1528 32 BulletSoftBodyNode::get_material 0 1 311 10
/**
 *
 */
71
BulletSoftBodyMaterial BulletSoftBodyNode::get_material(int idx) const;

1066 15 append_material 0 4 1528 35 BulletSoftBodyNode::append_material 0 1 312 10
/**
 *
 */
65
BulletSoftBodyMaterial BulletSoftBodyNode::append_material(void);

1067 13 get_num_nodes 0 4 1528 33 BulletSoftBodyNode::get_num_nodes 0 1 313 30
// Nodes

// Nodes

/**
 *
 */
50
int BulletSoftBodyNode::get_num_nodes(void) const;

1068 8 get_node 0 4 1528 28 BulletSoftBodyNode::get_node 0 1 314 10
/**
 *
 */
70
BulletSoftBodyNodeElement BulletSoftBodyNode::get_node(int idx) const;

1069 22 get_closest_node_index 0 4 1528 42 BulletSoftBodyNode::get_closest_node_index 0 1 315 212
/**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */
76
int BulletSoftBodyNode::get_closest_node_index(LVecBase3 point, bool local);

1070 9 make_rope 0 4 1528 29 BulletSoftBodyNode::make_rope 0 1 316 22
// Factory

/**
 *
 */
161
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_rope(BulletSoftBodyWorldInfo &info, LPoint3 const &from, LPoint3 const &to, int res, int fixeds);

1071 10 make_patch 0 4 1528 30 BulletSoftBodyNode::make_patch 0 1 317 10
/**
 *
 */
248
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_patch(BulletSoftBodyWorldInfo &info, LPoint3 const &corner00, LPoint3 const &corner10, LPoint3 const &corner01, LPoint3 const &corner11, int resx, int resy, int fixeds, bool gendiags);

1072 14 make_ellipsoid 0 4 1528 34 BulletSoftBodyNode::make_ellipsoid 0 1 318 10
/**
 *
 */
162
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_ellipsoid(BulletSoftBodyWorldInfo &info, LPoint3 const &center, LVecBase3 const &radius, int res);

1073 13 make_tri_mesh 0 4 1528 33 BulletSoftBodyNode::make_tri_mesh 0 2 319 320 22
/**
 *
 */

/**
 *
 */
334
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, Geom const *geom, bool randomizeConstraints = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tri_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool randomizeConstraints = true);

1074 13 make_tet_mesh 0 4 1528 33 BulletSoftBodyNode::make_tet_mesh 0 2 321 322 22
/**
 *
 */

/**
 *
 */
325
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, PTA_LVecBase3 points, PTA_int indices, bool tetralinks = true);
static PointerTo< BulletSoftBodyNode > BulletSoftBodyNode::make_tet_mesh(BulletSoftBodyWorldInfo &info, char const *ele, char const *face, char const *node);

1075 14 get_class_type 0 4 1528 34 BulletSoftBodyNode::get_class_type 0 1 323 0
59
static TypeHandle BulletSoftBodyNode::get_class_type(void);

1076 24 set_suspension_stiffness 0 4 1529 45 BulletVehicleTuning::set_suspension_stiffness 0 1 324 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_suspension_stiffness(PN_stdfloat value);

1077 26 set_suspension_compression 0 4 1529 47 BulletVehicleTuning::set_suspension_compression 0 1 325 10
/**
 *
 */
79
inline void BulletVehicleTuning::set_suspension_compression(PN_stdfloat value);

1078 22 set_suspension_damping 0 4 1529 43 BulletVehicleTuning::set_suspension_damping 0 1 326 10
/**
 *
 */
75
inline void BulletVehicleTuning::set_suspension_damping(PN_stdfloat value);

1079 28 set_max_suspension_travel_cm 0 4 1529 49 BulletVehicleTuning::set_max_suspension_travel_cm 0 1 327 10
/**
 *
 */
81
inline void BulletVehicleTuning::set_max_suspension_travel_cm(PN_stdfloat value);

1080 17 set_friction_slip 0 4 1529 38 BulletVehicleTuning::set_friction_slip 0 1 328 10
/**
 *
 */
70
inline void BulletVehicleTuning::set_friction_slip(PN_stdfloat value);

1081 24 set_max_suspension_force 0 4 1529 45 BulletVehicleTuning::set_max_suspension_force 0 1 329 10
/**
 *
 */
77
inline void BulletVehicleTuning::set_max_suspension_force(PN_stdfloat value);

1082 24 get_suspension_stiffness 0 4 1529 45 BulletVehicleTuning::get_suspension_stiffness 0 1 330 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_suspension_stiffness(void) const;

1083 26 get_suspension_compression 0 4 1529 47 BulletVehicleTuning::get_suspension_compression 0 1 331 10
/**
 *
 */
79
inline PN_stdfloat BulletVehicleTuning::get_suspension_compression(void) const;

1084 22 get_suspension_damping 0 4 1529 43 BulletVehicleTuning::get_suspension_damping 0 1 332 10
/**
 *
 */
75
inline PN_stdfloat BulletVehicleTuning::get_suspension_damping(void) const;

1085 28 get_max_suspension_travel_cm 0 4 1529 49 BulletVehicleTuning::get_max_suspension_travel_cm 0 1 333 10
/**
 *
 */
81
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_travel_cm(void) const;

1086 17 get_friction_slip 0 4 1529 38 BulletVehicleTuning::get_friction_slip 0 1 334 10
/**
 *
 */
70
inline PN_stdfloat BulletVehicleTuning::get_friction_slip(void) const;

1087 24 get_max_suspension_force 0 4 1529 45 BulletVehicleTuning::get_max_suspension_force 0 1 335 10
/**
 *
 */
77
inline PN_stdfloat BulletVehicleTuning::get_max_suspension_force(void) const;

1088 13 BulletVehicle 0 4 1530 28 BulletVehicle::BulletVehicle 0 1 336 94
/**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */
79
BulletVehicle::BulletVehicle(BulletWorld *world, BulletRigidBodyNode *chassis);

1089 21 set_coordinate_system 0 4 1530 36 BulletVehicle::set_coordinate_system 0 1 337 100
/**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */
59
void BulletVehicle::set_coordinate_system(BulletUpAxis up);

1090 18 set_steering_value 0 4 1530 33 BulletVehicle::set_steering_value 0 1 338 76
/**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */
70
void BulletVehicle::set_steering_value(PN_stdfloat steering, int idx);

1091 9 set_brake 0 4 1530 24 BulletVehicle::set_brake 0 1 339 61
/**
 * Applies braking force to the wheel with index idx.
 */
58
void BulletVehicle::set_brake(PN_stdfloat brake, int idx);

1092 17 set_pitch_control 0 4 1530 32 BulletVehicle::set_pitch_control 0 1 340 10
/**
 *
 */
57
void BulletVehicle::set_pitch_control(PN_stdfloat pitch);

1093 11 get_chassis 0 4 1530 26 BulletVehicle::get_chassis 0 1 341 82
/**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */
54
BulletRigidBodyNode *BulletVehicle::get_chassis(void);

1094 25 get_current_speed_km_hour 0 4 1530 40 BulletVehicle::get_current_speed_km_hour 0 1 342 106
/**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */
65
PN_stdfloat BulletVehicle::get_current_speed_km_hour(void) const;

1095 18 get_steering_value 0 4 1530 33 BulletVehicle::get_steering_value 0 1 343 77
/**
 * Returns the steering angle of the wheel with index idx in degrees.
 */
61
PN_stdfloat BulletVehicle::get_steering_value(int idx) const;

1096 18 get_forward_vector 0 4 1530 33 BulletVehicle::get_forward_vector 0 1 344 145
/**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */
55
LVector3 BulletVehicle::get_forward_vector(void) const;

1097 16 reset_suspension 0 4 1530 31 BulletVehicle::reset_suspension 0 1 345 43
/**
 * Resets the vehicle's suspension.
 */
43
void BulletVehicle::reset_suspension(void);

1098 18 apply_engine_force 0 4 1530 33 BulletVehicle::apply_engine_force 0 1 346 70
/**
 * Applies force at the wheel with index idx for acceleration.
 */
67
void BulletVehicle::apply_engine_force(PN_stdfloat force, int idx);

1099 12 create_wheel 0 4 1530 27 BulletVehicle::create_wheel 0 1 347 83
// Wheels

/**
 * Factory method for creating wheels for this vehicle instance.
 */
46
BulletWheel BulletVehicle::create_wheel(void);

1100 14 get_num_wheels 0 4 1530 29 BulletVehicle::get_num_wheels 0 1 348 57
/**
 * Returns the number of wheels this vehicle has.
 */
53
inline int BulletVehicle::get_num_wheels(void) const;

1101 9 get_wheel 0 4 1530 24 BulletVehicle::get_wheel 0 1 349 132
/**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */
52
BulletWheel BulletVehicle::get_wheel(int idx) const;

1102 10 get_tuning 0 4 1530 25 BulletVehicle::get_tuning 0 1 350 200
// Tuning

/**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */
60
inline BulletVehicleTuning &BulletVehicle::get_tuning(void);

1103 14 get_class_type 0 4 1530 29 BulletVehicle::get_class_type 0 1 351 0
54
static TypeHandle BulletVehicle::get_class_type(void);

1104 11 BulletWorld 0 4 1531 24 BulletWorld::BulletWorld 0 1 352 10
/**
 *
 */
31
BulletWorld::BulletWorld(void);

1105 11 set_gravity 0 4 1531 24 BulletWorld::set_gravity 0 2 353 354 22
/**
 *
 */

/**
 *
 */
134
void BulletWorld::set_gravity(LVector3 const &gravity);
void BulletWorld::set_gravity(PN_stdfloat gx, PN_stdfloat gy, PN_stdfloat gz);

1106 11 get_gravity 0 4 1531 24 BulletWorld::get_gravity 0 1 355 10
/**
 *
 */
52
LVector3 const BulletWorld::get_gravity(void) const;

1107 10 do_physics 0 4 1531 23 BulletWorld::do_physics 0 1 356 10
/**
 *
 */
103
int BulletWorld::do_physics(PN_stdfloat dt, int max_substeps = 1, PN_stdfloat stepsize = (1.0 / 60.0));

1108 14 get_world_info 0 4 1531 27 BulletWorld::get_world_info 0 1 357 10
/**
 *
 */
58
BulletSoftBodyWorldInfo BulletWorld::get_world_info(void);

1109 14 set_debug_node 0 4 1531 27 BulletWorld::set_debug_node 0 1 358 20
// Debug

/**
 *
 */
63
inline void BulletWorld::set_debug_node(BulletDebugNode *node);

1110 16 clear_debug_node 0 4 1531 29 BulletWorld::clear_debug_node 0 1 359 10
/**
 *
 */
48
inline void BulletWorld::clear_debug_node(void);

1111 14 get_debug_node 0 4 1531 27 BulletWorld::get_debug_node 0 1 360 10
/**
 *
 */
64
inline BulletDebugNode *BulletWorld::get_debug_node(void) const;

1112 6 attach 0 4 1531 19 BulletWorld::attach 0 1 361 27
// AttachRemove

/**
 *
 */
46
void BulletWorld::attach(TypedObject *object);

1113 17 attach_constraint 0 4 1531 30 BulletWorld::attach_constraint 0 1 362 156
/**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */
97
void BulletWorld::attach_constraint(BulletConstraint *constraint, bool linked_collision = false);

1114 6 remove 0 4 1531 19 BulletWorld::remove 0 1 363 10
/**
 *
 */
46
void BulletWorld::remove(TypedObject *object);

1115 14 get_num_ghosts 0 4 1531 27 BulletWorld::get_num_ghosts 0 1 364 44
// Ghost object

// Ghost object

/**
 *
 */
51
inline int BulletWorld::get_num_ghosts(void) const;

1116 9 get_ghost 0 4 1531 22 BulletWorld::get_ghost 0 1 365 10
/**
 *
 */
62
inline BulletGhostNode *BulletWorld::get_ghost(int idx) const;

1117 20 get_num_rigid_bodies 0 4 1531 33 BulletWorld::get_num_rigid_bodies 0 1 366 40
// Rigid body

// Rigid body

/**
 *
 */
57
inline int BulletWorld::get_num_rigid_bodies(void) const;

1118 14 get_rigid_body 0 4 1531 27 BulletWorld::get_rigid_body 0 1 367 10
/**
 *
 */
71
inline BulletRigidBodyNode *BulletWorld::get_rigid_body(int idx) const;

1119 19 get_num_soft_bodies 0 4 1531 32 BulletWorld::get_num_soft_bodies 0 1 368 38
// Soft body

// Soft body

/**
 *
 */
56
inline int BulletWorld::get_num_soft_bodies(void) const;

1120 13 get_soft_body 0 4 1531 26 BulletWorld::get_soft_body 0 1 369 10
/**
 *
 */
69
inline BulletSoftBodyNode *BulletWorld::get_soft_body(int idx) const;

1121 18 get_num_characters 0 4 1531 31 BulletWorld::get_num_characters 0 1 370 60
// Character controller

// Character controller

/**
 *
 */
55
inline int BulletWorld::get_num_characters(void) const;

1122 13 get_character 0 4 1531 26 BulletWorld::get_character 0 1 371 10
/**
 *
 */
84
inline BulletBaseCharacterControllerNode *BulletWorld::get_character(int idx) const;

1123 14 attach_vehicle 0 4 1531 27 BulletWorld::attach_vehicle 0 1 372 66
// Vehicle

/**
 * Deprecated!  Please use BulletWorld::attach
 */
57
void BulletWorld::attach_vehicle(BulletVehicle *vehicle);

1124 14 remove_vehicle 0 4 1531 27 BulletWorld::remove_vehicle 0 1 373 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
57
void BulletWorld::remove_vehicle(BulletVehicle *vehicle);

1125 16 get_num_vehicles 0 4 1531 29 BulletWorld::get_num_vehicles 0 1 374 10
/**
 *
 */
53
inline int BulletWorld::get_num_vehicles(void) const;

1126 11 get_vehicle 0 4 1531 24 BulletWorld::get_vehicle 0 1 375 10
/**
 *
 */
62
inline BulletVehicle *BulletWorld::get_vehicle(int idx) const;

1127 19 get_num_constraints 0 4 1531 32 BulletWorld::get_num_constraints 0 1 376 40
// Constraint

// Constraint

/**
 *
 */
56
inline int BulletWorld::get_num_constraints(void) const;

1128 14 get_constraint 0 4 1531 27 BulletWorld::get_constraint 0 1 377 10
/**
 *
 */
68
inline BulletConstraint *BulletWorld::get_constraint(int idx) const;

1129 16 ray_test_closest 0 4 1531 29 BulletWorld::ray_test_closest 0 1 378 40
// Raycast and other queries

/**
 *
 */
159
BulletClosestHitRayResult BulletWorld::ray_test_closest(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1130 12 ray_test_all 0 4 1531 25 BulletWorld::ray_test_all 0 1 379 10
/**
 *
 */
152
BulletAllHitsRayResult BulletWorld::ray_test_all(LPoint3 const &from_pos, LPoint3 const &to_pos, CollideMask const &mask = CollideMask::all_on()) const;

1131 18 sweep_test_closest 0 4 1531 31 BulletWorld::sweep_test_closest 0 1 380 10
/**
 *
 */
226
BulletClosestHitSweepResult BulletWorld::sweep_test_closest(BulletShape *shape, TransformState const &from_ts, TransformState const &to_ts, CollideMask const &mask = CollideMask::all_on(), PN_stdfloat penetration = 0.0) const;

1132 12 contact_test 0 4 1531 25 BulletWorld::contact_test 0 1 381 386
/**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */
94
BulletContactResult BulletWorld::contact_test(PandaNode *node, bool use_filter = false) const;

1133 17 contact_test_pair 0 4 1531 30 BulletWorld::contact_test_pair 0 1 382 181
/**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */
93
BulletContactResult BulletWorld::contact_test_pair(PandaNode *node0, PandaNode *node1) const;

1134 11 filter_test 0 4 1531 24 BulletWorld::filter_test 0 1 383 105
/**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */
72
bool BulletWorld::filter_test(PandaNode *node0, PandaNode *node1) const;

1135 17 get_num_manifolds 0 4 1531 30 BulletWorld::get_num_manifolds 0 1 384 38
// Manifolds

// Manifolds

/**
 *
 */
54
inline int BulletWorld::get_num_manifolds(void) const;

1136 12 get_manifold 0 4 1531 25 BulletWorld::get_manifold 0 1 385 10
/**
 *
 */
67
BulletPersistentManifold *BulletWorld::get_manifold(int idx) const;

1137 24 set_group_collision_flag 0 4 1531 37 BulletWorld::set_group_collision_flag 0 1 386 34
// Collision filtering

/**
 *
 */
98
void BulletWorld::set_group_collision_flag(unsigned int group1, unsigned int group2, bool enable);

1138 24 get_group_collision_flag 0 4 1531 37 BulletWorld::get_group_collision_flag 0 1 387 10
/**
 *
 */
91
bool BulletWorld::get_group_collision_flag(unsigned int group1, unsigned int group2) const;

1139 26 set_contact_added_callback 0 4 1531 39 BulletWorld::set_contact_added_callback 0 1 388 24
// Callbacks

/**
 *
 */
66
void BulletWorld::set_contact_added_callback(CallbackObject *obj);

1140 28 clear_contact_added_callback 0 4 1531 41 BulletWorld::clear_contact_added_callback 0 1 389 10
/**
 *
 */
53
void BulletWorld::clear_contact_added_callback(void);

1141 17 set_tick_callback 0 4 1531 30 BulletWorld::set_tick_callback 0 1 390 10
/**
 *
 */
82
void BulletWorld::set_tick_callback(CallbackObject *obj, bool is_pretick = false);

1142 19 clear_tick_callback 0 4 1531 32 BulletWorld::clear_tick_callback 0 1 391 10
/**
 *
 */
44
void BulletWorld::clear_tick_callback(void);

1143 19 set_filter_callback 0 4 1531 32 BulletWorld::set_filter_callback 0 1 392 10
/**
 *
 */
59
void BulletWorld::set_filter_callback(CallbackObject *obj);

1144 21 clear_filter_callback 0 4 1531 34 BulletWorld::clear_filter_callback 0 1 393 10
/**
 *
 */
46
void BulletWorld::clear_filter_callback(void);

1145 12 attach_ghost 0 4 1531 25 BulletWorld::attach_ghost 0 1 394 103
// Deprecated methods, will become private soon

/**
 * Deprecated!  Please use BulletWorld::attach
 */
54
void BulletWorld::attach_ghost(BulletGhostNode *node);

1146 12 remove_ghost 0 4 1531 25 BulletWorld::remove_ghost 0 1 395 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
54
void BulletWorld::remove_ghost(BulletGhostNode *node);

1147 17 attach_rigid_body 0 4 1531 30 BulletWorld::attach_rigid_body 0 1 396 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
63
void BulletWorld::attach_rigid_body(BulletRigidBodyNode *node);

1148 17 remove_rigid_body 0 4 1531 30 BulletWorld::remove_rigid_body 0 1 397 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
63
void BulletWorld::remove_rigid_body(BulletRigidBodyNode *node);

1149 16 attach_soft_body 0 4 1531 29 BulletWorld::attach_soft_body 0 1 398 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
61
void BulletWorld::attach_soft_body(BulletSoftBodyNode *node);

1150 16 remove_soft_body 0 4 1531 29 BulletWorld::remove_soft_body 0 1 399 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
61
void BulletWorld::remove_soft_body(BulletSoftBodyNode *node);

1151 16 attach_character 0 4 1531 29 BulletWorld::attach_character 0 1 400 54
/**
 * Deprecated!  Please use BulletWorld::attach
 */
76
void BulletWorld::attach_character(BulletBaseCharacterControllerNode *node);

1152 16 remove_character 0 4 1531 29 BulletWorld::remove_character 0 1 401 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
76
void BulletWorld::remove_character(BulletBaseCharacterControllerNode *node);

1153 17 remove_constraint 0 4 1531 30 BulletWorld::remove_constraint 0 1 402 54
/**
 * Deprecated.! Please use BulletWorld::remove
 */
66
void BulletWorld::remove_constraint(BulletConstraint *constraint);

1154 14 get_class_type 0 4 1531 27 BulletWorld::get_class_type 0 1 403 0
52
static TypeHandle BulletWorld::get_class_type(void);

1155 21 BulletConvexHullShape 0 4 1534 44 BulletConvexHullShape::BulletConvexHullShape 0 2 404 405 22
/**
 *
 */

/**
 *
 */
139
BulletConvexHullShape::BulletConvexHullShape(void);
inline BulletConvexHullShape::BulletConvexHullShape(BulletConvexHullShape const &copy);

1156 10 operator = 0 4 1534 33 BulletConvexHullShape::operator = 0 1 406 0
81
inline void BulletConvexHullShape::operator =(BulletConvexHullShape const &copy);

1157 9 add_point 0 4 1534 32 BulletConvexHullShape::add_point 0 1 407 10
/**
 *
 */
56
void BulletConvexHullShape::add_point(LPoint3 const &p);

1158 9 add_array 0 4 1534 32 BulletConvexHullShape::add_array 0 1 408 10
/**
 *
 */
67
void BulletConvexHullShape::add_array(PTA_LVecBase3 const &points);

1159 8 add_geom 0 4 1534 31 BulletConvexHullShape::add_geom 0 1 409 10
/**
 *
 */
115
void BulletConvexHullShape::add_geom(Geom const *geom, TransformState const *ts = TransformState::make_identity());

1160 14 get_class_type 0 4 1534 37 BulletConvexHullShape::get_class_type 0 1 410 0
62
static TypeHandle BulletConvexHullShape::get_class_type(void);

1161 27 BulletConvexPointCloudShape 0 4 1535 56 BulletConvexPointCloudShape::BulletConvexPointCloudShape 0 3 411 412 413 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
336
BulletConvexPointCloudShape::BulletConvexPointCloudShape(PTA_LVecBase3 const &points, LVecBase3 scale = LVecBase3(1.0));
BulletConvexPointCloudShape::BulletConvexPointCloudShape(Geom const *geom, LVecBase3 scale = LVecBase3(1.0));
inline BulletConvexPointCloudShape::BulletConvexPointCloudShape(BulletConvexPointCloudShape const &copy);

1162 10 operator = 0 4 1535 39 BulletConvexPointCloudShape::operator = 0 1 414 0
93
inline void BulletConvexPointCloudShape::operator =(BulletConvexPointCloudShape const &copy);

1163 14 get_num_points 0 4 1535 43 BulletConvexPointCloudShape::get_num_points 0 1 415 10
/**
 *
 */
67
inline int BulletConvexPointCloudShape::get_num_points(void) const;

1164 14 get_class_type 0 4 1535 43 BulletConvexPointCloudShape::get_class_type 0 1 416 0
68
static TypeHandle BulletConvexPointCloudShape::get_class_type(void);

1165 19 BulletCylinderShape 0 4 1536 40 BulletCylinderShape::BulletCylinderShape 0 3 417 418 419 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
287
BulletCylinderShape::BulletCylinderShape(PN_stdfloat radius, PN_stdfloat height, BulletUpAxis up = ::Z_up);
BulletCylinderShape::BulletCylinderShape(LVector3 const &half_extents, BulletUpAxis up = ::Z_up);
inline BulletCylinderShape::BulletCylinderShape(BulletCylinderShape const &copy);

1166 10 operator = 0 4 1536 31 BulletCylinderShape::operator = 0 1 420 0
77
inline void BulletCylinderShape::operator =(BulletCylinderShape const &copy);

1167 10 get_radius 0 4 1536 31 BulletCylinderShape::get_radius 0 1 421 10
/**
 *
 */
63
inline PN_stdfloat BulletCylinderShape::get_radius(void) const;

1168 31 get_half_extents_without_margin 0 4 1536 52 BulletCylinderShape::get_half_extents_without_margin 0 1 422 10
/**
 *
 */
82
inline LVecBase3 BulletCylinderShape::get_half_extents_without_margin(void) const;

1169 28 get_half_extents_with_margin 0 4 1536 49 BulletCylinderShape::get_half_extents_with_margin 0 1 423 10
/**
 *
 */
79
inline LVecBase3 BulletCylinderShape::get_half_extents_with_margin(void) const;

1170 14 get_class_type 0 4 1536 35 BulletCylinderShape::get_class_type 0 1 424 0
60
static TypeHandle BulletCylinderShape::get_class_type(void);

1171 24 BulletFilterCallbackData 0 4 1537 50 BulletFilterCallbackData::BulletFilterCallbackData 0 1 425 10
/**
 *
 */
94
inline BulletFilterCallbackData::BulletFilterCallbackData(PandaNode *node0, PandaNode *node1);

1172 10 get_node_0 0 4 1537 36 BulletFilterCallbackData::get_node_0 0 1 426 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_0(void) const;

1173 10 get_node_1 0 4 1537 36 BulletFilterCallbackData::get_node_1 0 1 427 10
/**
 *
 */
67
inline PandaNode *BulletFilterCallbackData::get_node_1(void) const;

1174 11 set_collide 0 4 1537 37 BulletFilterCallbackData::set_collide 0 1 428 10
/**
 *
 */
64
inline void BulletFilterCallbackData::set_collide(bool collide);

1175 11 get_collide 0 4 1537 37 BulletFilterCallbackData::get_collide 0 1 429 10
/**
 *
 */
62
inline bool BulletFilterCallbackData::get_collide(void) const;

1176 14 get_class_type 0 4 1537 40 BulletFilterCallbackData::get_class_type 0 1 430 0
65
static TypeHandle BulletFilterCallbackData::get_class_type(void);

1177 25 ~BulletFilterCallbackData 0 4 1537 51 BulletFilterCallbackData::~BulletFilterCallbackData 0 0 0
58
BulletFilterCallbackData::~BulletFilterCallbackData(void);

1178 26 BulletRotationalLimitMotor 0 4 1538 54 BulletRotationalLimitMotor::BulletRotationalLimitMotor 0 1 431 22
/**
 *
 */

/**
 *
 */
95
BulletRotationalLimitMotor::BulletRotationalLimitMotor(BulletRotationalLimitMotor const &copy);

1179 27 ~BulletRotationalLimitMotor 0 4 1538 55 BulletRotationalLimitMotor::~BulletRotationalLimitMotor 0 0 10
/**
 *
 */
62
BulletRotationalLimitMotor::~BulletRotationalLimitMotor(void);

1180 17 set_motor_enabled 0 4 1538 45 BulletRotationalLimitMotor::set_motor_enabled 0 1 432 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_motor_enabled(bool enable);

1181 13 set_low_limit 0 4 1538 41 BulletRotationalLimitMotor::set_low_limit 0 1 433 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_low_limit(PN_stdfloat limit);

1182 14 set_high_limit 0 4 1538 42 BulletRotationalLimitMotor::set_high_limit 0 1 434 10
/**
 *
 */
74
inline void BulletRotationalLimitMotor::set_high_limit(PN_stdfloat limit);

1183 19 set_target_velocity 0 4 1538 47 BulletRotationalLimitMotor::set_target_velocity 0 1 435 10
/**
 *
 */
82
inline void BulletRotationalLimitMotor::set_target_velocity(PN_stdfloat velocity);

1184 19 set_max_motor_force 0 4 1538 47 BulletRotationalLimitMotor::set_max_motor_force 0 1 436 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_motor_force(PN_stdfloat force);

1185 19 set_max_limit_force 0 4 1538 47 BulletRotationalLimitMotor::set_max_limit_force 0 1 437 10
/**
 *
 */
79
inline void BulletRotationalLimitMotor::set_max_limit_force(PN_stdfloat force);

1186 11 set_damping 0 4 1538 39 BulletRotationalLimitMotor::set_damping 0 1 438 10
/**
 *
 */
73
inline void BulletRotationalLimitMotor::set_damping(PN_stdfloat damping);

1187 12 set_softness 0 4 1538 40 BulletRotationalLimitMotor::set_softness 0 1 439 10
/**
 *
 */
75
inline void BulletRotationalLimitMotor::set_softness(PN_stdfloat softness);

1188 10 set_bounce 0 4 1538 38 BulletRotationalLimitMotor::set_bounce 0 1 440 10
/**
 *
 */
71
inline void BulletRotationalLimitMotor::set_bounce(PN_stdfloat bounce);

1189 14 set_normal_cfm 0 4 1538 42 BulletRotationalLimitMotor::set_normal_cfm 0 1 441 10
/**
 *
 */
72
inline void BulletRotationalLimitMotor::set_normal_cfm(PN_stdfloat cfm);

1190 12 set_stop_cfm 0 4 1538 40 BulletRotationalLimitMotor::set_stop_cfm 0 1 442 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_cfm(PN_stdfloat cfm);

1191 12 set_stop_erp 0 4 1538 40 BulletRotationalLimitMotor::set_stop_erp 0 1 443 10
/**
 *
 */
70
inline void BulletRotationalLimitMotor::set_stop_erp(PN_stdfloat erp);

1192 10 is_limited 0 4 1538 38 BulletRotationalLimitMotor::is_limited 0 1 444 10
/**
 *
 */
63
inline bool BulletRotationalLimitMotor::is_limited(void) const;

1193 17 get_motor_enabled 0 4 1538 45 BulletRotationalLimitMotor::get_motor_enabled 0 1 445 10
/**
 *
 */
70
inline bool BulletRotationalLimitMotor::get_motor_enabled(void) const;

1194 17 get_current_limit 0 4 1538 45 BulletRotationalLimitMotor::get_current_limit 0 1 446 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
69
inline int BulletRotationalLimitMotor::get_current_limit(void) const;

1195 17 get_current_error 0 4 1538 45 BulletRotationalLimitMotor::get_current_error 0 1 447 10
/**
 *
 */
77
inline PN_stdfloat BulletRotationalLimitMotor::get_current_error(void) const;

1196 20 get_current_position 0 4 1538 48 BulletRotationalLimitMotor::get_current_position 0 1 448 10
/**
 *
 */
80
inline PN_stdfloat BulletRotationalLimitMotor::get_current_position(void) const;

1197 23 get_accumulated_impulse 0 4 1538 51 BulletRotationalLimitMotor::get_accumulated_impulse 0 1 449 10
/**
 *
 */
83
inline PN_stdfloat BulletRotationalLimitMotor::get_accumulated_impulse(void) const;

1198 29 BulletTranslationalLimitMotor 0 4 1539 60 BulletTranslationalLimitMotor::BulletTranslationalLimitMotor 0 1 450 22
/**
 *
 */

/**
 *
 */
104
BulletTranslationalLimitMotor::BulletTranslationalLimitMotor(BulletTranslationalLimitMotor const &copy);

1199 30 ~BulletTranslationalLimitMotor 0 4 1539 61 BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor 0 0 10
/**
 *
 */
68
BulletTranslationalLimitMotor::~BulletTranslationalLimitMotor(void);

1200 17 set_motor_enabled 0 4 1539 48 BulletTranslationalLimitMotor::set_motor_enabled 0 1 451 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_motor_enabled(int axis, bool enable);

1201 13 set_low_limit 0 4 1539 44 BulletTranslationalLimitMotor::set_low_limit 0 1 452 10
/**
 *
 */
81
inline void BulletTranslationalLimitMotor::set_low_limit(LVecBase3 const &limit);

1202 14 set_high_limit 0 4 1539 45 BulletTranslationalLimitMotor::set_high_limit 0 1 453 10
/**
 *
 */
82
inline void BulletTranslationalLimitMotor::set_high_limit(LVecBase3 const &limit);

1203 19 set_target_velocity 0 4 1539 50 BulletTranslationalLimitMotor::set_target_velocity 0 1 454 10
/**
 *
 */
90
inline void BulletTranslationalLimitMotor::set_target_velocity(LVecBase3 const &velocity);

1204 19 set_max_motor_force 0 4 1539 50 BulletTranslationalLimitMotor::set_max_motor_force 0 1 455 10
/**
 *
 */
87
inline void BulletTranslationalLimitMotor::set_max_motor_force(LVecBase3 const &force);

1205 11 set_damping 0 4 1539 42 BulletTranslationalLimitMotor::set_damping 0 1 456 10
/**
 *
 */
76
inline void BulletTranslationalLimitMotor::set_damping(PN_stdfloat damping);

1206 12 set_softness 0 4 1539 43 BulletTranslationalLimitMotor::set_softness 0 1 457 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_softness(PN_stdfloat softness);

1207 15 set_restitution 0 4 1539 46 BulletTranslationalLimitMotor::set_restitution 0 1 458 10
/**
 *
 */
84
inline void BulletTranslationalLimitMotor::set_restitution(PN_stdfloat restitution);

1208 14 set_normal_cfm 0 4 1539 45 BulletTranslationalLimitMotor::set_normal_cfm 0 1 459 10
/**
 *
 */
80
inline void BulletTranslationalLimitMotor::set_normal_cfm(LVecBase3 const &cfm);

1209 12 set_stop_erp 0 4 1539 43 BulletTranslationalLimitMotor::set_stop_erp 0 1 460 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_erp(LVecBase3 const &erp);

1210 12 set_stop_cfm 0 4 1539 43 BulletTranslationalLimitMotor::set_stop_cfm 0 1 461 10
/**
 *
 */
78
inline void BulletTranslationalLimitMotor::set_stop_cfm(LVecBase3 const &cfm);

1211 10 is_limited 0 4 1539 41 BulletTranslationalLimitMotor::is_limited 0 1 462 10
/**
 *
 */
70
inline bool BulletTranslationalLimitMotor::is_limited(int axis) const;

1212 17 get_motor_enabled 0 4 1539 48 BulletTranslationalLimitMotor::get_motor_enabled 0 1 463 10
/**
 *
 */
77
inline bool BulletTranslationalLimitMotor::get_motor_enabled(int axis) const;

1213 17 get_current_limit 0 4 1539 48 BulletTranslationalLimitMotor::get_current_limit 0 1 464 98
/**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */
76
inline int BulletTranslationalLimitMotor::get_current_limit(int axis) const;

1214 17 get_current_error 0 4 1539 48 BulletTranslationalLimitMotor::get_current_error 0 1 465 10
/**
 *
 */
77
inline LVector3 BulletTranslationalLimitMotor::get_current_error(void) const;

1215 16 get_current_diff 0 4 1539 47 BulletTranslationalLimitMotor::get_current_diff 0 1 466 10
/**
 *
 */
75
inline LPoint3 BulletTranslationalLimitMotor::get_current_diff(void) const;

1216 23 get_accumulated_impulse 0 4 1539 54 BulletTranslationalLimitMotor::get_accumulated_impulse 0 1 467 10
/**
 *
 */
83
inline LVector3 BulletTranslationalLimitMotor::get_accumulated_impulse(void) const;

1217 23 BulletGenericConstraint 0 4 1540 48 BulletGenericConstraint::BulletGenericConstraint 0 2 468 469 22
/**
 *
 */

/**
 *
 */
333
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool use_frame_a);
BulletGenericConstraint::BulletGenericConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1218 8 get_axis 0 4 1540 33 BulletGenericConstraint::get_axis 0 1 470 23
// Geometry

/**
 *
 */
59
LVector3 BulletGenericConstraint::get_axis(int axis) const;

1219 9 get_pivot 0 4 1540 34 BulletGenericConstraint::get_pivot 0 1 471 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_pivot(int axis) const;

1220 9 get_angle 0 4 1540 34 BulletGenericConstraint::get_angle 0 1 472 10
/**
 *
 */
63
PN_stdfloat BulletGenericConstraint::get_angle(int axis) const;

1221 16 set_linear_limit 0 4 1540 41 BulletGenericConstraint::set_linear_limit 0 1 473 20
// Limit

/**
 *
 */
92
void BulletGenericConstraint::set_linear_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1222 17 set_angular_limit 0 4 1540 42 BulletGenericConstraint::set_angular_limit 0 1 474 10
/**
 *
 */
93
void BulletGenericConstraint::set_angular_limit(int axis, PN_stdfloat low, PN_stdfloat high);

1223 26 get_rotational_limit_motor 0 4 1540 51 BulletGenericConstraint::get_rotational_limit_motor 0 1 475 21
// Motors

/**
 *
 */
89
BulletRotationalLimitMotor BulletGenericConstraint::get_rotational_limit_motor(int axis);

1224 29 get_translational_limit_motor 0 4 1540 54 BulletGenericConstraint::get_translational_limit_motor 0 1 476 10
/**
 *
 */
91
BulletTranslationalLimitMotor BulletGenericConstraint::get_translational_limit_motor(void);

1225 10 set_frames 0 4 1540 35 BulletGenericConstraint::set_frames 0 1 477 21
// Frames

/**
 *
 */
97
void BulletGenericConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1226 11 get_frame_a 0 4 1540 36 BulletGenericConstraint::get_frame_a 0 1 478 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_a(void) const;

1227 11 get_frame_b 0 4 1540 36 BulletGenericConstraint::get_frame_b 0 1 479 10
/**
 *
 */
89
inline ConstPointerTo< TransformState > BulletGenericConstraint::get_frame_b(void) const;

1228 14 get_class_type 0 4 1540 39 BulletGenericConstraint::get_class_type 0 1 480 0
64
static TypeHandle BulletGenericConstraint::get_class_type(void);

1229 22 BulletHeightfieldShape 0 4 1541 46 BulletHeightfieldShape::BulletHeightfieldShape 0 3 481 482 483 540
/**
 *
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */

/**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */
323
BulletHeightfieldShape::BulletHeightfieldShape(PNMImage const &image, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
BulletHeightfieldShape::BulletHeightfieldShape(Texture *tex, PN_stdfloat max_height, BulletUpAxis up = ::Z_up);
inline BulletHeightfieldShape::BulletHeightfieldShape(BulletHeightfieldShape const &copy);

1230 10 operator = 0 4 1541 34 BulletHeightfieldShape::operator = 0 1 484 0
83
inline void BulletHeightfieldShape::operator =(BulletHeightfieldShape const &copy);

1231 27 set_use_diamond_subdivision 0 4 1541 51 BulletHeightfieldShape::set_use_diamond_subdivision 0 1 485 10
/**
 *
 */
75
void BulletHeightfieldShape::set_use_diamond_subdivision(bool flag = true);

1232 14 get_class_type 0 4 1541 38 BulletHeightfieldShape::get_class_type 0 1 486 0
63
static TypeHandle BulletHeightfieldShape::get_class_type(void);

1233 21 from_collision_solids 0 4 1542 35 BulletHelper::from_collision_solids 0 1 489 31
// Collision shapes

/**
 *
 */
96
static NodePathCollection BulletHelper::from_collision_solids(NodePath &np, bool clear = false);

1234 12 get_sb_index 0 4 1542 26 BulletHelper::get_sb_index 0 1 490 29
// Internal names

/**
 *
 */
73
static inline PointerTo< InternalName > BulletHelper::get_sb_index(void);

1235 11 get_sb_flip 0 4 1542 25 BulletHelper::get_sb_flip 0 1 491 10
/**
 *
 */
72
static inline PointerTo< InternalName > BulletHelper::get_sb_flip(void);

1236 19 add_sb_index_column 0 4 1542 33 BulletHelper::add_sb_index_column 0 1 492 31
// Geom vertex data

/**
 *
 */
108
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_index_column(GeomVertexFormat const *format);

1237 18 add_sb_flip_column 0 4 1542 32 BulletHelper::add_sb_flip_column 0 1 493 10
/**
 *
 */
107
static ConstPointerTo< GeomVertexFormat > BulletHelper::add_sb_flip_column(GeomVertexFormat const *format);

1238 20 make_geom_from_faces 0 4 1542 34 BulletHelper::make_geom_from_faces 0 1 494 25
// Geom utils

/**
 *
 */
146
static PointerTo< Geom > BulletHelper::make_geom_from_faces(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0, bool two_sided = false);

1239 20 make_geom_from_links 0 4 1542 34 BulletHelper::make_geom_from_links 0 1 495 10
/**
 *
 */
122
static PointerTo< Geom > BulletHelper::make_geom_from_links(BulletSoftBodyNode *node, GeomVertexFormat const *format = 0);

1240 24 make_texcoords_for_patch 0 4 1542 38 BulletHelper::make_texcoords_for_patch 0 1 496 10
/**
 *
 */
83
static void BulletHelper::make_texcoords_for_patch(Geom *geom, int resx, int resy);

1241 12 BulletHelper 0 4 1542 26 BulletHelper::BulletHelper 0 2 487 488 0
117
inline BulletHelper::BulletHelper(void) = default;
inline BulletHelper::BulletHelper(BulletHelper const &) = default;

1242 13 ~BulletHelper 0 4 1542 27 BulletHelper::~BulletHelper 0 0 0
34
BulletHelper::~BulletHelper(void);

1243 21 BulletHingeConstraint 0 4 1543 44 BulletHingeConstraint::BulletHingeConstraint 0 4 497 498 499 500 709
/**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */

/**
 * Constructs a hinge constraint which connects two rigid bodies.
 */

/**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */

/**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */
725
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a, LVector3 const &axis_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b, LVector3 const &axis_a, LVector3 const &axis_b, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, TransformState const *ts_a, bool use_frame_a = false);
BulletHingeConstraint::BulletHingeConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *ts_a, TransformState const *ts_b, bool use_frame_a = false);

1244 15 get_hinge_angle 0 4 1543 38 BulletHingeConstraint::get_hinge_angle 0 1 501 66
/**
 * Returns the angle between node_a and node_b in degrees.
 */
57
PN_stdfloat BulletHingeConstraint::get_hinge_angle(void);

1245 15 get_lower_limit 0 4 1543 38 BulletHingeConstraint::get_lower_limit 0 1 502 54
/**
 * Returns the lower angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_lower_limit(void) const;

1246 15 get_upper_limit 0 4 1543 38 BulletHingeConstraint::get_upper_limit 0 1 503 54
/**
 * Returns the upper angular limit in degrees.
 */
63
PN_stdfloat BulletHingeConstraint::get_upper_limit(void) const;

1247 16 get_angular_only 0 4 1543 39 BulletHingeConstraint::get_angular_only 0 1 504 10
/**
 *
 */
57
bool BulletHingeConstraint::get_angular_only(void) const;

1248 16 set_angular_only 0 4 1543 39 BulletHingeConstraint::set_angular_only 0 1 505 10
/**
 *
 */
57
void BulletHingeConstraint::set_angular_only(bool value);

1249 9 set_limit 0 4 1543 32 BulletHingeConstraint::set_limit 0 1 506 65
/**
 * Sets the lower and upper rotational limits in degrees.
 */
171
void BulletHingeConstraint::set_limit(PN_stdfloat low, PN_stdfloat high, PN_stdfloat softness = 0.9, PN_stdfloat bias = 0.30000000000000007, PN_stdfloat relaxation = 1.0);

1250 8 set_axis 0 4 1543 31 BulletHingeConstraint::set_axis 0 1 507 63
/**
 * Sets the hinge's rotation axis in world coordinates.
 */
59
void BulletHingeConstraint::set_axis(LVector3 const &axis);

1251 20 enable_angular_motor 0 4 1543 43 BulletHingeConstraint::enable_angular_motor 0 1 508 261
/**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */
116
void BulletHingeConstraint::enable_angular_motor(bool enable, PN_stdfloat target_velocity, PN_stdfloat max_impulse);

1252 12 enable_motor 0 4 1543 35 BulletHingeConstraint::enable_motor 0 1 509 10
/**
 *
 */
54
void BulletHingeConstraint::enable_motor(bool enable);

1253 21 set_max_motor_impulse 0 4 1543 44 BulletHingeConstraint::set_max_motor_impulse 0 1 510 96
/**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */
75
void BulletHingeConstraint::set_max_motor_impulse(PN_stdfloat max_impulse);

1254 16 set_motor_target 0 4 1543 39 BulletHingeConstraint::set_motor_target 0 2 511 512 22
/**
 *
 */

/**
 *
 */
174
void BulletHingeConstraint::set_motor_target(LQuaternion const &quat, PN_stdfloat dt);
void BulletHingeConstraint::set_motor_target(PN_stdfloat target_angle, PN_stdfloat dt);

1255 10 set_frames 0 4 1543 33 BulletHingeConstraint::set_frames 0 1 513 10
/**
 *
 */
95
void BulletHingeConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1256 11 get_frame_a 0 4 1543 34 BulletHingeConstraint::get_frame_a 0 1 514 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_a(void) const;

1257 11 get_frame_b 0 4 1543 34 BulletHingeConstraint::get_frame_b 0 1 515 10
/**
 *
 */
87
inline ConstPointerTo< TransformState > BulletHingeConstraint::get_frame_b(void) const;

1258 14 get_class_type 0 4 1543 37 BulletHingeConstraint::get_class_type 0 1 516 0
62
static TypeHandle BulletHingeConstraint::get_class_type(void);

1259 23 BulletMinkowskiSumShape 0 4 1544 48 BulletMinkowskiSumShape::BulletMinkowskiSumShape 0 2 517 518 22
/**
 *
 */

/**
 *
 */
199
BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletShape const *shape_a, BulletShape const *shape_b);
inline BulletMinkowskiSumShape::BulletMinkowskiSumShape(BulletMinkowskiSumShape const &copy);

1260 10 operator = 0 4 1544 35 BulletMinkowskiSumShape::operator = 0 1 519 0
85
inline void BulletMinkowskiSumShape::operator =(BulletMinkowskiSumShape const &copy);

1261 15 set_transform_a 0 4 1544 40 BulletMinkowskiSumShape::set_transform_a 0 1 520 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_a(TransformState const *ts);

1262 15 set_transform_b 0 4 1544 40 BulletMinkowskiSumShape::set_transform_b 0 1 521 10
/**
 *
 */
79
inline void BulletMinkowskiSumShape::set_transform_b(TransformState const *ts);

1263 15 get_transform_a 0 4 1544 40 BulletMinkowskiSumShape::get_transform_a 0 1 522 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_a(void) const;

1264 15 get_transform_b 0 4 1544 40 BulletMinkowskiSumShape::get_transform_b 0 1 523 10
/**
 *
 */
93
inline ConstPointerTo< TransformState > BulletMinkowskiSumShape::get_transform_b(void) const;

1265 11 get_shape_a 0 4 1544 36 BulletMinkowskiSumShape::get_shape_a 0 1 524 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_a(void) const;

1266 11 get_shape_b 0 4 1544 36 BulletMinkowskiSumShape::get_shape_b 0 1 525 10
/**
 *
 */
75
inline BulletShape const *BulletMinkowskiSumShape::get_shape_b(void) const;

1267 10 get_margin 0 4 1544 35 BulletMinkowskiSumShape::get_margin 0 1 526 10
/**
 *
 */
67
inline PN_stdfloat BulletMinkowskiSumShape::get_margin(void) const;

1268 14 get_class_type 0 4 1544 39 BulletMinkowskiSumShape::get_class_type 0 1 527 0
64
static TypeHandle BulletMinkowskiSumShape::get_class_type(void);

1269 22 BulletMultiSphereShape 0 4 1545 46 BulletMultiSphereShape::BulletMultiSphereShape 0 2 528 529 22
/**
 *
 */

/**
 *
 */
194
BulletMultiSphereShape::BulletMultiSphereShape(PTA_LVecBase3 const &points, PTA_stdfloat const &radii);
inline BulletMultiSphereShape::BulletMultiSphereShape(BulletMultiSphereShape const &copy);

1270 10 operator = 0 4 1545 34 BulletMultiSphereShape::operator = 0 1 530 0
83
inline void BulletMultiSphereShape::operator =(BulletMultiSphereShape const &copy);

1271 16 get_sphere_count 0 4 1545 40 BulletMultiSphereShape::get_sphere_count 0 1 531 10
/**
 *
 */
64
inline int BulletMultiSphereShape::get_sphere_count(void) const;

1272 14 get_sphere_pos 0 4 1545 38 BulletMultiSphereShape::get_sphere_pos 0 1 532 10
/**
 *
 */
71
inline LPoint3 BulletMultiSphereShape::get_sphere_pos(int index) const;

1273 17 get_sphere_radius 0 4 1545 41 BulletMultiSphereShape::get_sphere_radius 0 1 533 10
/**
 *
 */
78
inline PN_stdfloat BulletMultiSphereShape::get_sphere_radius(int index) const;

1274 14 get_class_type 0 4 1545 38 BulletMultiSphereShape::get_class_type 0 1 534 0
63
static TypeHandle BulletMultiSphereShape::get_class_type(void);

1275 25 ~BulletPersistentManifold 0 4 1546 51 BulletPersistentManifold::~BulletPersistentManifold 0 0 10
/**
 *
 */
65
inline BulletPersistentManifold::~BulletPersistentManifold(void);

1276 9 get_node0 0 4 1546 35 BulletPersistentManifold::get_node0 0 1 536 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node0(void);

1277 9 get_node1 0 4 1546 35 BulletPersistentManifold::get_node1 0 1 537 10
/**
 *
 */
53
PandaNode *BulletPersistentManifold::get_node1(void);

1278 23 get_num_manifold_points 0 4 1546 49 BulletPersistentManifold::get_num_manifold_points 0 1 538 10
/**
 *
 */
66
int BulletPersistentManifold::get_num_manifold_points(void) const;

1279 18 get_manifold_point 0 4 1546 44 BulletPersistentManifold::get_manifold_point 0 1 539 10
/**
 *
 */
81
BulletManifoldPoint *BulletPersistentManifold::get_manifold_point(int idx) const;

1280 30 get_contact_breaking_threshold 0 4 1546 56 BulletPersistentManifold::get_contact_breaking_threshold 0 1 540 10
/**
 *
 */
81
PN_stdfloat BulletPersistentManifold::get_contact_breaking_threshold(void) const;

1281 32 get_contact_processing_threshold 0 4 1546 58 BulletPersistentManifold::get_contact_processing_threshold 0 1 541 10
/**
 *
 */
83
PN_stdfloat BulletPersistentManifold::get_contact_processing_threshold(void) const;

1282 14 clear_manifold 0 4 1546 40 BulletPersistentManifold::clear_manifold 0 1 542 10
/**
 *
 */
52
void BulletPersistentManifold::clear_manifold(void);

1283 24 BulletPersistentManifold 0 4 1546 50 BulletPersistentManifold::BulletPersistentManifold 0 1 535 10
/**
 *
 */
102
inline BulletPersistentManifold::BulletPersistentManifold(BulletPersistentManifold const &) = default;

1284 16 BulletPlaneShape 0 4 1547 34 BulletPlaneShape::BulletPlaneShape 0 2 543 544 22
/**
 *
 */

/**
 *
 */
154
BulletPlaneShape::BulletPlaneShape(LVector3 const &normal, PN_stdfloat constant);
inline BulletPlaneShape::BulletPlaneShape(BulletPlaneShape const &copy);

1285 10 operator = 0 4 1547 28 BulletPlaneShape::operator = 0 1 545 0
71
inline void BulletPlaneShape::operator =(BulletPlaneShape const &copy);

1286 16 get_plane_normal 0 4 1547 34 BulletPlaneShape::get_plane_normal 0 1 546 10
/**
 *
 */
63
inline LVector3 BulletPlaneShape::get_plane_normal(void) const;

1287 18 get_plane_constant 0 4 1547 36 BulletPlaneShape::get_plane_constant 0 1 547 10
/**
 *
 */
68
inline PN_stdfloat BulletPlaneShape::get_plane_constant(void) const;

1288 15 make_from_solid 0 4 1547 33 BulletPlaneShape::make_from_solid 0 1 548 10
/**
 *
 */
88
static BulletPlaneShape *BulletPlaneShape::make_from_solid(CollisionPlane const *solid);

1289 14 get_class_type 0 4 1547 32 BulletPlaneShape::get_class_type 0 1 549 0
57
static TypeHandle BulletPlaneShape::get_class_type(void);

1290 22 BulletSliderConstraint 0 4 1548 46 BulletSliderConstraint::BulletSliderConstraint 0 2 550 551 22
/**
 *
 */

/**
 *
 */
328
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, TransformState const *frame_a, bool useFrame_a);
BulletSliderConstraint::BulletSliderConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, TransformState const *frame_a, TransformState const *frame_b, bool use_frame_a);

1291 14 get_linear_pos 0 4 1548 38 BulletSliderConstraint::get_linear_pos 0 1 552 10
/**
 *
 */
63
PN_stdfloat BulletSliderConstraint::get_linear_pos(void) const;

1292 15 get_angular_pos 0 4 1548 39 BulletSliderConstraint::get_angular_pos 0 1 553 10
/**
 *
 */
64
PN_stdfloat BulletSliderConstraint::get_angular_pos(void) const;

1293 22 get_lower_linear_limit 0 4 1548 46 BulletSliderConstraint::get_lower_linear_limit 0 1 554 21
// Limits

/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_lower_linear_limit(void) const;

1294 22 get_upper_linear_limit 0 4 1548 46 BulletSliderConstraint::get_upper_linear_limit 0 1 555 10
/**
 *
 */
71
PN_stdfloat BulletSliderConstraint::get_upper_linear_limit(void) const;

1295 23 get_lower_angular_limit 0 4 1548 47 BulletSliderConstraint::get_lower_angular_limit 0 1 556 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_lower_angular_limit(void) const;

1296 23 get_upper_angular_limit 0 4 1548 47 BulletSliderConstraint::get_upper_angular_limit 0 1 557 10
/**
 *
 */
72
PN_stdfloat BulletSliderConstraint::get_upper_angular_limit(void) const;

1297 22 set_lower_linear_limit 0 4 1548 46 BulletSliderConstraint::set_lower_linear_limit 0 1 558 10
/**
 *
 */
71
void BulletSliderConstraint::set_lower_linear_limit(PN_stdfloat value);

1298 22 set_upper_linear_limit 0 4 1548 46 BulletSliderConstraint::set_upper_linear_limit 0 1 559 10
/**
 *
 */
71
void BulletSliderConstraint::set_upper_linear_limit(PN_stdfloat value);

1299 23 set_lower_angular_limit 0 4 1548 47 BulletSliderConstraint::set_lower_angular_limit 0 1 560 10
/**
 *
 */
72
void BulletSliderConstraint::set_lower_angular_limit(PN_stdfloat value);

1300 23 set_upper_angular_limit 0 4 1548 47 BulletSliderConstraint::set_upper_angular_limit 0 1 561 10
/**
 *
 */
72
void BulletSliderConstraint::set_upper_angular_limit(PN_stdfloat value);

1301 24 set_powered_linear_motor 0 4 1548 48 BulletSliderConstraint::set_powered_linear_motor 0 1 562 27
// Linear motor

/**
 *
 */
63
void BulletSliderConstraint::set_powered_linear_motor(bool on);

1302 32 set_target_linear_motor_velocity 0 4 1548 56 BulletSliderConstraint::set_target_linear_motor_velocity 0 1 563 10
/**
 *
 */
91
void BulletSliderConstraint::set_target_linear_motor_velocity(PN_stdfloat target_velocity);

1303 26 set_max_linear_motor_force 0 4 1548 50 BulletSliderConstraint::set_max_linear_motor_force 0 1 564 10
/**
 *
 */
79
void BulletSliderConstraint::set_max_linear_motor_force(PN_stdfloat max_force);

1304 24 get_powered_linear_motor 0 4 1548 48 BulletSliderConstraint::get_powered_linear_motor 0 1 565 10
/**
 *
 */
66
bool BulletSliderConstraint::get_powered_linear_motor(void) const;

1305 32 get_target_linear_motor_velocity 0 4 1548 56 BulletSliderConstraint::get_target_linear_motor_velocity 0 1 566 10
/**
 *
 */
81
PN_stdfloat BulletSliderConstraint::get_target_linear_motor_velocity(void) const;

1306 26 get_max_linear_motor_force 0 4 1548 50 BulletSliderConstraint::get_max_linear_motor_force 0 1 567 10
/**
 *
 */
75
PN_stdfloat BulletSliderConstraint::get_max_linear_motor_force(void) const;

1307 25 set_powered_angular_motor 0 4 1548 49 BulletSliderConstraint::set_powered_angular_motor 0 1 568 28
// Angular motor

/**
 *
 */
64
void BulletSliderConstraint::set_powered_angular_motor(bool on);

1308 33 set_target_angular_motor_velocity 0 4 1548 57 BulletSliderConstraint::set_target_angular_motor_velocity 0 1 569 10
/**
 *
 */
92
void BulletSliderConstraint::set_target_angular_motor_velocity(PN_stdfloat target_velocity);

1309 27 set_max_angular_motor_force 0 4 1548 51 BulletSliderConstraint::set_max_angular_motor_force 0 1 570 10
/**
 *
 */
80
void BulletSliderConstraint::set_max_angular_motor_force(PN_stdfloat max_force);

1310 25 get_powered_angular_motor 0 4 1548 49 BulletSliderConstraint::get_powered_angular_motor 0 1 571 10
/**
 *
 */
67
bool BulletSliderConstraint::get_powered_angular_motor(void) const;

1311 33 get_target_angular_motor_velocity 0 4 1548 57 BulletSliderConstraint::get_target_angular_motor_velocity 0 1 572 10
/**
 *
 */
82
PN_stdfloat BulletSliderConstraint::get_target_angular_motor_velocity(void) const;

1312 27 get_max_angular_motor_force 0 4 1548 51 BulletSliderConstraint::get_max_angular_motor_force 0 1 573 10
/**
 *
 */
76
PN_stdfloat BulletSliderConstraint::get_max_angular_motor_force(void) const;

1313 10 set_frames 0 4 1548 34 BulletSliderConstraint::set_frames 0 1 574 21
// Frames

/**
 *
 */
96
void BulletSliderConstraint::set_frames(TransformState const *ts_a, TransformState const *ts_b);

1314 11 get_frame_a 0 4 1548 35 BulletSliderConstraint::get_frame_a 0 1 575 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_a(void) const;

1315 11 get_frame_b 0 4 1548 35 BulletSliderConstraint::get_frame_b 0 1 576 10
/**
 *
 */
88
inline ConstPointerTo< TransformState > BulletSliderConstraint::get_frame_b(void) const;

1316 14 get_class_type 0 4 1548 38 BulletSliderConstraint::get_class_type 0 1 577 0
63
static TypeHandle BulletSliderConstraint::get_class_type(void);

1317 21 ~BulletSoftBodyConfig 0 4 1549 43 BulletSoftBodyConfig::~BulletSoftBodyConfig 0 0 10
/**
 *
 */
57
inline BulletSoftBodyConfig::~BulletSoftBodyConfig(void);

1318 25 clear_all_collision_flags 0 4 1549 47 BulletSoftBodyConfig::clear_all_collision_flags 0 1 579 10
/**
 *
 */
59
void BulletSoftBodyConfig::clear_all_collision_flags(void);

1319 18 set_collision_flag 0 4 1549 40 BulletSoftBodyConfig::set_collision_flag 0 1 580 10
/**
 *
 */
100
void BulletSoftBodyConfig::set_collision_flag(BulletSoftBodyConfig::CollisionFlag flag, bool value);

1320 18 get_collision_flag 0 4 1549 40 BulletSoftBodyConfig::get_collision_flag 0 1 581 10
/**
 *
 */
94
bool BulletSoftBodyConfig::get_collision_flag(BulletSoftBodyConfig::CollisionFlag flag) const;

1321 14 set_aero_model 0 4 1549 36 BulletSoftBodyConfig::set_aero_model 0 1 582 10
/**
 *
 */
81
void BulletSoftBodyConfig::set_aero_model(BulletSoftBodyConfig::AeroModel value);

1322 14 get_aero_model 0 4 1549 36 BulletSoftBodyConfig::get_aero_model 0 1 583 10
/**
 *
 */
81
BulletSoftBodyConfig::AeroModel BulletSoftBodyConfig::get_aero_model(void) const;

1323 32 set_velocities_correction_factor 0 4 1549 54 BulletSoftBodyConfig::set_velocities_correction_factor 0 1 584 36
/**
 * Setter for property kVCF.
 */
86
inline void BulletSoftBodyConfig::set_velocities_correction_factor(PN_stdfloat value);

1324 23 set_damping_coefficient 0 4 1549 45 BulletSoftBodyConfig::set_damping_coefficient 0 1 585 35
/**
 * Setter for property kDP.
 */
77
inline void BulletSoftBodyConfig::set_damping_coefficient(PN_stdfloat value);

1325 20 set_drag_coefficient 0 4 1549 42 BulletSoftBodyConfig::set_drag_coefficient 0 1 586 35
/**
 * Setter for property kDG.
 */
74
inline void BulletSoftBodyConfig::set_drag_coefficient(PN_stdfloat value);

1326 20 set_lift_coefficient 0 4 1549 42 BulletSoftBodyConfig::set_lift_coefficient 0 1 587 35
/**
 * Setter for property kLF.
 */
74
inline void BulletSoftBodyConfig::set_lift_coefficient(PN_stdfloat value);

1327 24 set_pressure_coefficient 0 4 1549 46 BulletSoftBodyConfig::set_pressure_coefficient 0 1 588 35
/**
 * Setter for property kPR.
 */
78
inline void BulletSoftBodyConfig::set_pressure_coefficient(PN_stdfloat value);

1328 35 set_volume_conversation_coefficient 0 4 1549 57 BulletSoftBodyConfig::set_volume_conversation_coefficient 0 1 589 35
/**
 * Setter for property kVC.
 */
89
inline void BulletSoftBodyConfig::set_volume_conversation_coefficient(PN_stdfloat value);

1329 32 set_dynamic_friction_coefficient 0 4 1549 54 BulletSoftBodyConfig::set_dynamic_friction_coefficient 0 1 590 35
/**
 * Setter for property kDF.
 */
86
inline void BulletSoftBodyConfig::set_dynamic_friction_coefficient(PN_stdfloat value);

1330 29 set_pose_matching_coefficient 0 4 1549 51 BulletSoftBodyConfig::set_pose_matching_coefficient 0 1 591 35
/**
 * Setter for property kMT.
 */
83
inline void BulletSoftBodyConfig::set_pose_matching_coefficient(PN_stdfloat value);

1331 27 set_rigid_contacts_hardness 0 4 1549 49 BulletSoftBodyConfig::set_rigid_contacts_hardness 0 1 592 36
/**
 * Setter for property kCHR.
 */
81
inline void BulletSoftBodyConfig::set_rigid_contacts_hardness(PN_stdfloat value);

1332 29 set_kinetic_contacts_hardness 0 4 1549 51 BulletSoftBodyConfig::set_kinetic_contacts_hardness 0 1 593 36
/**
 * Setter for property kKHR.
 */
83
inline void BulletSoftBodyConfig::set_kinetic_contacts_hardness(PN_stdfloat value);

1333 26 set_soft_contacts_hardness 0 4 1549 48 BulletSoftBodyConfig::set_soft_contacts_hardness 0 1 594 36
/**
 * Setter for property kSHR.
 */
80
inline void BulletSoftBodyConfig::set_soft_contacts_hardness(PN_stdfloat value);

1334 20 set_anchors_hardness 0 4 1549 42 BulletSoftBodyConfig::set_anchors_hardness 0 1 595 36
/**
 * Setter for property kAHR.
 */
74
inline void BulletSoftBodyConfig::set_anchors_hardness(PN_stdfloat value);

1335 26 set_soft_vs_rigid_hardness 0 4 1549 48 BulletSoftBodyConfig::set_soft_vs_rigid_hardness 0 1 596 40
/**
 * Setter for property kSRHR_CL.
 */
80
inline void BulletSoftBodyConfig::set_soft_vs_rigid_hardness(PN_stdfloat value);

1336 28 set_soft_vs_kinetic_hardness 0 4 1549 50 BulletSoftBodyConfig::set_soft_vs_kinetic_hardness 0 1 597 40
/**
 * Setter for property kSKHR_CL.
 */
82
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_hardness(PN_stdfloat value);

1337 25 set_soft_vs_soft_hardness 0 4 1549 47 BulletSoftBodyConfig::set_soft_vs_soft_hardness 0 1 598 40
/**
 * Setter for property kSSHR_CL.
 */
79
inline void BulletSoftBodyConfig::set_soft_vs_soft_hardness(PN_stdfloat value);

1338 31 set_soft_vs_rigid_impulse_split 0 4 1549 53 BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split 0 1 599 43
/**
 * Setter for property kSR_SPLT_CL.
 */
85
inline void BulletSoftBodyConfig::set_soft_vs_rigid_impulse_split(PN_stdfloat value);

1339 33 set_soft_vs_kinetic_impulse_split 0 4 1549 55 BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split 0 1 600 43
/**
 * Setter for property kSK_SPLT_CL.
 */
87
inline void BulletSoftBodyConfig::set_soft_vs_kinetic_impulse_split(PN_stdfloat value);

1340 30 set_soft_vs_soft_impulse_split 0 4 1549 52 BulletSoftBodyConfig::set_soft_vs_soft_impulse_split 0 1 601 43
/**
 * Setter for property kSS_SPLT_CL.
 */
84
inline void BulletSoftBodyConfig::set_soft_vs_soft_impulse_split(PN_stdfloat value);

1341 13 set_maxvolume 0 4 1549 35 BulletSoftBodyConfig::set_maxvolume 0 1 602 41
/**
 * Setter for property maxvolume.
 */
67
inline void BulletSoftBodyConfig::set_maxvolume(PN_stdfloat value);

1342 13 set_timescale 0 4 1549 35 BulletSoftBodyConfig::set_timescale 0 1 603 41
/**
 * Setter for property timescale.
 */
67
inline void BulletSoftBodyConfig::set_timescale(PN_stdfloat value);

1343 31 set_positions_solver_iterations 0 4 1549 53 BulletSoftBodyConfig::set_positions_solver_iterations 0 1 604 43
/**
 * Setter for property piterations.
 */
77
inline void BulletSoftBodyConfig::set_positions_solver_iterations(int value);

1344 32 set_velocities_solver_iterations 0 4 1549 54 BulletSoftBodyConfig::set_velocities_solver_iterations 0 1 605 43
/**
 * Setter for property viterations.
 */
78
inline void BulletSoftBodyConfig::set_velocities_solver_iterations(int value);

1345 27 set_drift_solver_iterations 0 4 1549 49 BulletSoftBodyConfig::set_drift_solver_iterations 0 1 606 43
/**
 * Setter for property diterations.
 */
73
inline void BulletSoftBodyConfig::set_drift_solver_iterations(int value);

1346 29 set_cluster_solver_iterations 0 4 1549 51 BulletSoftBodyConfig::set_cluster_solver_iterations 0 1 607 43
/**
 * Setter for property citerations.
 */
75
inline void BulletSoftBodyConfig::set_cluster_solver_iterations(int value);

1347 32 get_velocities_correction_factor 0 4 1549 54 BulletSoftBodyConfig::get_velocities_correction_factor 0 1 608 36
/**
 * Getter for property kVCF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_velocities_correction_factor(void) const;

1348 23 get_damping_coefficient 0 4 1549 45 BulletSoftBodyConfig::get_damping_coefficient 0 1 609 35
/**
 * Getter for property kDP.
 */
77
inline PN_stdfloat BulletSoftBodyConfig::get_damping_coefficient(void) const;

1349 20 get_drag_coefficient 0 4 1549 42 BulletSoftBodyConfig::get_drag_coefficient 0 1 610 35
/**
 * Getter for property kDG.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_drag_coefficient(void) const;

1350 20 get_lift_coefficient 0 4 1549 42 BulletSoftBodyConfig::get_lift_coefficient 0 1 611 35
/**
 * Getter for property kLF.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_lift_coefficient(void) const;

1351 24 get_pressure_coefficient 0 4 1549 46 BulletSoftBodyConfig::get_pressure_coefficient 0 1 612 35
/**
 * Getter for property kPR.
 */
78
inline PN_stdfloat BulletSoftBodyConfig::get_pressure_coefficient(void) const;

1352 35 get_volume_conversation_coefficient 0 4 1549 57 BulletSoftBodyConfig::get_volume_conversation_coefficient 0 1 613 35
/**
 * Getter for property kVC.
 */
89
inline PN_stdfloat BulletSoftBodyConfig::get_volume_conversation_coefficient(void) const;

1353 32 get_dynamic_friction_coefficient 0 4 1549 54 BulletSoftBodyConfig::get_dynamic_friction_coefficient 0 1 614 35
/**
 * Getter for property kDF.
 */
86
inline PN_stdfloat BulletSoftBodyConfig::get_dynamic_friction_coefficient(void) const;

1354 29 get_pose_matching_coefficient 0 4 1549 51 BulletSoftBodyConfig::get_pose_matching_coefficient 0 1 615 35
/**
 * Getter for property kMT.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_pose_matching_coefficient(void) const;

1355 27 get_rigid_contacts_hardness 0 4 1549 49 BulletSoftBodyConfig::get_rigid_contacts_hardness 0 1 616 36
/**
 * Getter for property kCHR.
 */
81
inline PN_stdfloat BulletSoftBodyConfig::get_rigid_contacts_hardness(void) const;

1356 29 get_kinetic_contacts_hardness 0 4 1549 51 BulletSoftBodyConfig::get_kinetic_contacts_hardness 0 1 617 36
/**
 * Getter for property kKHR.
 */
83
inline PN_stdfloat BulletSoftBodyConfig::get_kinetic_contacts_hardness(void) const;

1357 26 get_soft_contacts_hardness 0 4 1549 48 BulletSoftBodyConfig::get_soft_contacts_hardness 0 1 618 36
/**
 * Getter for property kSHR.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_contacts_hardness(void) const;

1358 20 get_anchors_hardness 0 4 1549 42 BulletSoftBodyConfig::get_anchors_hardness 0 1 619 36
/**
 * Getter for property kAHR.
 */
74
inline PN_stdfloat BulletSoftBodyConfig::get_anchors_hardness(void) const;

1359 26 get_soft_vs_rigid_hardness 0 4 1549 48 BulletSoftBodyConfig::get_soft_vs_rigid_hardness 0 1 620 40
/**
 * Getter for property kSRHR_CL.
 */
80
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_hardness(void) const;

1360 28 get_soft_vs_kinetic_hardness 0 4 1549 50 BulletSoftBodyConfig::get_soft_vs_kinetic_hardness 0 1 621 40
/**
 * Getter for property kSKHR_CL.
 */
82
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_hardness(void) const;

1361 25 get_soft_vs_soft_hardness 0 4 1549 47 BulletSoftBodyConfig::get_soft_vs_soft_hardness 0 1 622 40
/**
 * Getter for property kSSHR_CL.
 */
79
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_hardness(void) const;

1362 31 get_soft_vs_rigid_impulse_split 0 4 1549 53 BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split 0 1 623 43
/**
 * Getter for property kSR_SPLT_CL.
 */
85
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_rigid_impulse_split(void) const;

1363 33 get_soft_vs_kinetic_impulse_split 0 4 1549 55 BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split 0 1 624 43
/**
 * Getter for property kSK_SPLT_CL.
 */
87
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_kinetic_impulse_split(void) const;

1364 30 get_soft_vs_soft_impulse_split 0 4 1549 52 BulletSoftBodyConfig::get_soft_vs_soft_impulse_split 0 1 625 43
/**
 * Getter for property kSS_SPLT_CL.
 */
84
inline PN_stdfloat BulletSoftBodyConfig::get_soft_vs_soft_impulse_split(void) const;

1365 13 get_maxvolume 0 4 1549 35 BulletSoftBodyConfig::get_maxvolume 0 1 626 41
/**
 * Getter for property maxvolume.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_maxvolume(void) const;

1366 13 get_timescale 0 4 1549 35 BulletSoftBodyConfig::get_timescale 0 1 627 41
/**
 * Getter for property timescale.
 */
67
inline PN_stdfloat BulletSoftBodyConfig::get_timescale(void) const;

1367 31 get_positions_solver_iterations 0 4 1549 53 BulletSoftBodyConfig::get_positions_solver_iterations 0 1 628 43
/**
 * Getter for property piterations.
 */
77
inline int BulletSoftBodyConfig::get_positions_solver_iterations(void) const;

1368 32 get_velocities_solver_iterations 0 4 1549 54 BulletSoftBodyConfig::get_velocities_solver_iterations 0 1 629 43
/**
 * Getter for property viterations.
 */
78
inline int BulletSoftBodyConfig::get_velocities_solver_iterations(void) const;

1369 27 get_drift_solver_iterations 0 4 1549 49 BulletSoftBodyConfig::get_drift_solver_iterations 0 1 630 43
/**
 * Getter for property diterations.
 */
73
inline int BulletSoftBodyConfig::get_drift_solver_iterations(void) const;

1370 29 get_cluster_solver_iterations 0 4 1549 51 BulletSoftBodyConfig::get_cluster_solver_iterations 0 1 631 43
/**
 * Getter for property citerations.
 */
75
inline int BulletSoftBodyConfig::get_cluster_solver_iterations(void) const;

1371 20 BulletSoftBodyConfig 0 4 1549 42 BulletSoftBodyConfig::BulletSoftBodyConfig 0 1 578 10
/**
 *
 */
90
inline BulletSoftBodyConfig::BulletSoftBodyConfig(BulletSoftBodyConfig const &) = default;

1372 18 upcast_to_IControl 0 12 1552 41 BulletSoftBodyControl::upcast_to_IControl 0 1 637 45
upcast from BulletSoftBodyControl to IControl
78
btSoftBody::AJoint::IControl *BulletSoftBodyControl::upcast_to_IControl(void);

1373 42 downcast_IControl_to_BulletSoftBodyControl 0 8 0 42 downcast_IControl_to_BulletSoftBodyControl 0 1 638 47
downcast from IControl to BulletSoftBodyControl
102
BulletSoftBodyControl *downcast_IControl_to_BulletSoftBodyControl(btSoftBody::AJoint::IControl *this);

1374 21 BulletSoftBodyControl 0 4 1552 44 BulletSoftBodyControl::BulletSoftBodyControl 0 1 632 10
/**
 *
 */
51
BulletSoftBodyControl::BulletSoftBodyControl(void);

1375 22 ~BulletSoftBodyControl 0 6 1552 45 BulletSoftBodyControl::~BulletSoftBodyControl 0 0 10
/**
 *
 */
60
virtual BulletSoftBodyControl::~BulletSoftBodyControl(void);

1376 8 set_goal 0 4 1552 31 BulletSoftBodyControl::set_goal 0 1 633 20
// Motor

/**
 *
 */
62
inline void BulletSoftBodyControl::set_goal(PN_stdfloat goal);

1377 14 set_max_torque 0 4 1552 37 BulletSoftBodyControl::set_max_torque 0 1 634 10
/**
 *
 */
73
inline void BulletSoftBodyControl::set_max_torque(PN_stdfloat maxtorque);

1378 9 set_angle 0 4 1552 32 BulletSoftBodyControl::set_angle 0 1 635 20
// Steer

/**
 *
 */
64
inline void BulletSoftBodyControl::set_angle(PN_stdfloat angle);

1379 8 set_sign 0 4 1552 31 BulletSoftBodyControl::set_sign 0 1 636 10
/**
 *
 */
62
inline void BulletSoftBodyControl::set_sign(PN_stdfloat sign);

1380 23 ~BulletSoftBodyMaterial 0 4 1556 47 BulletSoftBodyMaterial::~BulletSoftBodyMaterial 0 0 10
/**
 *
 */
61
inline BulletSoftBodyMaterial::~BulletSoftBodyMaterial(void);

1381 5 empty 0 4 1556 29 BulletSoftBodyMaterial::empty 0 1 640 102
/**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */
73
static inline BulletSoftBodyMaterial BulletSoftBodyMaterial::empty(void);

1382 20 set_linear_stiffness 0 4 1556 44 BulletSoftBodyMaterial::set_linear_stiffness 0 1 641 42
/**
 * Setter for the property m_kLST.
 */
76
inline void BulletSoftBodyMaterial::set_linear_stiffness(PN_stdfloat value);

1383 20 get_linear_stiffness 0 4 1556 44 BulletSoftBodyMaterial::get_linear_stiffness 0 1 642 42
/**
 * Getter for the property m_kLST.
 */
76
inline PN_stdfloat BulletSoftBodyMaterial::get_linear_stiffness(void) const;

1384 21 set_angular_stiffness 0 4 1556 45 BulletSoftBodyMaterial::set_angular_stiffness 0 1 643 42
/**
 * Setter for the property m_kAST.
 */
77
inline void BulletSoftBodyMaterial::set_angular_stiffness(PN_stdfloat value);

1385 21 get_angular_stiffness 0 4 1556 45 BulletSoftBodyMaterial::get_angular_stiffness 0 1 644 42
/**
 * Getter for the property m_kAST.
 */
77
inline PN_stdfloat BulletSoftBodyMaterial::get_angular_stiffness(void) const;

1386 23 set_volume_preservation 0 4 1556 47 BulletSoftBodyMaterial::set_volume_preservation 0 1 645 42
/**
 * Setter for the property m_kVST.
 */
79
inline void BulletSoftBodyMaterial::set_volume_preservation(PN_stdfloat value);

1387 23 get_volume_preservation 0 4 1556 47 BulletSoftBodyMaterial::get_volume_preservation 0 1 646 42
/**
 * Getter for the property m_kVST.
 */
79
inline PN_stdfloat BulletSoftBodyMaterial::get_volume_preservation(void) const;

1388 22 BulletSoftBodyMaterial 0 4 1556 46 BulletSoftBodyMaterial::BulletSoftBodyMaterial 0 1 639 10
/**
 *
 */
96
inline BulletSoftBodyMaterial::BulletSoftBodyMaterial(BulletSoftBodyMaterial const &) = default;

1389 8 get_body 0 4 1559 29 BulletSoftBodyShape::get_body 0 1 647 10
/**
 *
 */
62
BulletSoftBodyNode *BulletSoftBodyShape::get_body(void) const;

1390 14 get_class_type 0 4 1559 35 BulletSoftBodyShape::get_class_type 0 1 648 0
60
static TypeHandle BulletSoftBodyShape::get_class_type(void);

1391 24 ~BulletSoftBodyWorldInfo 0 4 1560 49 BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo 0 0 10
/**
 *
 */
63
inline BulletSoftBodyWorldInfo::~BulletSoftBodyWorldInfo(void);

1392 15 set_air_density 0 4 1560 40 BulletSoftBodyWorldInfo::set_air_density 0 1 650 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_air_density(PN_stdfloat density);

1393 17 set_water_density 0 4 1560 42 BulletSoftBodyWorldInfo::set_water_density 0 1 651 10
/**
 *
 */
69
void BulletSoftBodyWorldInfo::set_water_density(PN_stdfloat density);

1394 16 set_water_offset 0 4 1560 41 BulletSoftBodyWorldInfo::set_water_offset 0 1 652 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_water_offset(PN_stdfloat offset);

1395 16 set_water_normal 0 4 1560 41 BulletSoftBodyWorldInfo::set_water_normal 0 1 653 10
/**
 *
 */
71
void BulletSoftBodyWorldInfo::set_water_normal(LVector3 const &normal);

1396 11 set_gravity 0 4 1560 36 BulletSoftBodyWorldInfo::set_gravity 0 1 654 10
/**
 *
 */
67
void BulletSoftBodyWorldInfo::set_gravity(LVector3 const &gravity);

1397 15 get_air_density 0 4 1560 40 BulletSoftBodyWorldInfo::get_air_density 0 1 655 10
/**
 *
 */
65
PN_stdfloat BulletSoftBodyWorldInfo::get_air_density(void) const;

1398 17 get_water_density 0 4 1560 42 BulletSoftBodyWorldInfo::get_water_density 0 1 656 10
/**
 *
 */
67
PN_stdfloat BulletSoftBodyWorldInfo::get_water_density(void) const;

1399 16 get_water_offset 0 4 1560 41 BulletSoftBodyWorldInfo::get_water_offset 0 1 657 10
/**
 *
 */
66
PN_stdfloat BulletSoftBodyWorldInfo::get_water_offset(void) const;

1400 16 get_water_normal 0 4 1560 41 BulletSoftBodyWorldInfo::get_water_normal 0 1 658 10
/**
 *
 */
63
LVector3 BulletSoftBodyWorldInfo::get_water_normal(void) const;

1401 11 get_gravity 0 4 1560 36 BulletSoftBodyWorldInfo::get_gravity 0 1 659 10
/**
 *
 */
58
LVector3 BulletSoftBodyWorldInfo::get_gravity(void) const;

1402 15 garbage_collect 0 4 1560 40 BulletSoftBodyWorldInfo::garbage_collect 0 1 660 10
/**
 *
 */
66
void BulletSoftBodyWorldInfo::garbage_collect(int lifetime = 256);

1403 23 BulletSoftBodyWorldInfo 0 4 1560 48 BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo 0 1 649 10
/**
 *
 */
99
inline BulletSoftBodyWorldInfo::BulletSoftBodyWorldInfo(BulletSoftBodyWorldInfo const &) = default;

1404 17 BulletSphereShape 0 4 1561 36 BulletSphereShape::BulletSphereShape 0 2 661 662 22
/**
 *
 */

/**
 *
 */
133
BulletSphereShape::BulletSphereShape(PN_stdfloat radius);
inline BulletSphereShape::BulletSphereShape(BulletSphereShape const &copy);

1405 10 operator = 0 4 1561 29 BulletSphereShape::operator = 0 1 663 0
73
inline void BulletSphereShape::operator =(BulletSphereShape const &copy);

1406 10 get_radius 0 4 1561 29 BulletSphereShape::get_radius 0 1 664 10
/**
 *
 */
61
inline PN_stdfloat BulletSphereShape::get_radius(void) const;

1407 15 make_from_solid 0 4 1561 34 BulletSphereShape::make_from_solid 0 1 665 10
/**
 *
 */
91
static BulletSphereShape *BulletSphereShape::make_from_solid(CollisionSphere const *solid);

1408 14 get_class_type 0 4 1561 33 BulletSphereShape::get_class_type 0 1 666 0
58
static TypeHandle BulletSphereShape::get_class_type(void);

1409 25 BulletSphericalConstraint 0 4 1562 52 BulletSphericalConstraint::BulletSphericalConstraint 0 2 667 668 22
/**
 *
 */

/**
 *
 */
284
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, LPoint3 const &pivot_a);
BulletSphericalConstraint::BulletSphericalConstraint(BulletRigidBodyNode const *node_a, BulletRigidBodyNode const *node_b, LPoint3 const &pivot_a, LPoint3 const &pivot_b);

1410 11 set_pivot_a 0 4 1562 38 BulletSphericalConstraint::set_pivot_a 0 1 669 21
// Pivots

/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_a(LPoint3 const &pivot_a);

1411 11 set_pivot_b 0 4 1562 38 BulletSphericalConstraint::set_pivot_b 0 1 670 10
/**
 *
 */
68
void BulletSphericalConstraint::set_pivot_b(LPoint3 const &pivot_b);

1412 14 get_pivot_in_a 0 4 1562 41 BulletSphericalConstraint::get_pivot_in_a 0 1 671 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_a(void) const;

1413 14 get_pivot_in_b 0 4 1562 41 BulletSphericalConstraint::get_pivot_in_b 0 1 672 10
/**
 *
 */
62
LPoint3 BulletSphericalConstraint::get_pivot_in_b(void) const;

1414 14 get_class_type 0 4 1562 41 BulletSphericalConstraint::get_class_type 0 1 673 0
66
static TypeHandle BulletSphericalConstraint::get_class_type(void);

1415 22 BulletTickCallbackData 0 4 1563 46 BulletTickCallbackData::BulletTickCallbackData 0 1 674 10
/**
 *
 */
73
inline BulletTickCallbackData::BulletTickCallbackData(btScalar timestep);

1416 12 get_timestep 0 4 1563 36 BulletTickCallbackData::get_timestep 0 1 675 10
/**
 *
 */
68
inline PN_stdfloat BulletTickCallbackData::get_timestep(void) const;

1417 14 get_class_type 0 4 1563 38 BulletTickCallbackData::get_class_type 0 1 676 0
63
static TypeHandle BulletTickCallbackData::get_class_type(void);

1418 18 BulletTriangleMesh 0 4 1564 38 BulletTriangleMesh::BulletTriangleMesh 0 2 677 678 10
/**
 *
 */
130
BulletTriangleMesh::BulletTriangleMesh(void);
inline BulletTriangleMesh::BulletTriangleMesh(BulletTriangleMesh const &) = default;

1419 12 add_triangle 0 4 1564 32 BulletTriangleMesh::add_triangle 0 1 679 10
/**
 *
 */
135
void BulletTriangleMesh::add_triangle(LPoint3 const &p0, LPoint3 const &p1, LPoint3 const &p2, bool remove_duplicate_vertices = false);

1420 9 add_array 0 4 1564 29 BulletTriangleMesh::add_array 0 1 680 10
/**
 *
 */
128
void BulletTriangleMesh::add_array(PTA_LVecBase3 const &points, PTA_int const &indices, bool remove_duplicate_vertices = false);

1421 8 add_geom 0 4 1564 28 BulletTriangleMesh::add_geom 0 1 681 10
/**
 *
 */
152
void BulletTriangleMesh::add_geom(Geom const *geom, bool remove_duplicate_vertices = false, TransformState const *ts = TransformState::make_identity());

1422 20 set_welding_distance 0 4 1564 40 BulletTriangleMesh::set_welding_distance 0 1 682 10
/**
 *
 */
68
void BulletTriangleMesh::set_welding_distance(PN_stdfloat distance);

1423 11 preallocate 0 4 1564 31 BulletTriangleMesh::preallocate 0 1 683 10
/**
 *
 */
69
void BulletTriangleMesh::preallocate(int num_verts, int num_indices);

1424 17 get_num_triangles 0 4 1564 37 BulletTriangleMesh::get_num_triangles 0 1 684 10
/**
 *
 */
54
int BulletTriangleMesh::get_num_triangles(void) const;

1425 20 get_welding_distance 0 4 1564 40 BulletTriangleMesh::get_welding_distance 0 1 685 10
/**
 *
 */
65
PN_stdfloat BulletTriangleMesh::get_welding_distance(void) const;

1426 6 output 0 6 1564 26 BulletTriangleMesh::output 0 1 686 10
/**
 *
 */
60
virtual void BulletTriangleMesh::output(ostream &out) const;

1427 5 write 0 6 1564 25 BulletTriangleMesh::write 0 1 687 10
/**
 *
 */
77
virtual void BulletTriangleMesh::write(ostream &out, int indent_level) const;

1428 14 get_class_type 0 4 1564 34 BulletTriangleMesh::get_class_type 0 1 688 0
59
static TypeHandle BulletTriangleMesh::get_class_type(void);

1429 23 BulletTriangleMeshShape 0 4 1565 48 BulletTriangleMeshShape::BulletTriangleMeshShape 0 2 689 690 145
/**
 *
 */

/**
 * Only used by make_from_bam.
 */

/**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */
222
BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMesh *mesh, bool dynamic, bool compress = true, bool bvh = true);
inline BulletTriangleMeshShape::BulletTriangleMeshShape(BulletTriangleMeshShape const &copy);

1430 10 operator = 0 4 1565 35 BulletTriangleMeshShape::operator = 0 1 691 0
85
inline void BulletTriangleMeshShape::operator =(BulletTriangleMeshShape const &copy);

1431 10 refit_tree 0 4 1565 35 BulletTriangleMeshShape::refit_tree 0 1 692 10
/**
 *
 */
91
void BulletTriangleMeshShape::refit_tree(LPoint3 const &aabb_min, LPoint3 const &aabb_max);

1432 9 is_static 0 4 1565 34 BulletTriangleMeshShape::is_static 0 1 693 10
/**
 *
 */
59
inline bool BulletTriangleMeshShape::is_static(void) const;

1433 10 is_dynamic 0 4 1565 35 BulletTriangleMeshShape::is_dynamic 0 1 694 10
/**
 *
 */
60
inline bool BulletTriangleMeshShape::is_dynamic(void) const;

1434 14 get_class_type 0 4 1565 39 BulletTriangleMeshShape::get_class_type 0 1 695 0
64
static TypeHandle BulletTriangleMeshShape::get_class_type(void);

1435 23 ~BulletWheelRaycastInfo 0 4 1566 47 BulletWheelRaycastInfo::~BulletWheelRaycastInfo 0 0 10
/**
 *
 */
61
inline BulletWheelRaycastInfo::~BulletWheelRaycastInfo(void);

1436 13 is_in_contact 0 4 1566 37 BulletWheelRaycastInfo::is_in_contact 0 1 697 10
/**
 *
 */
62
inline bool BulletWheelRaycastInfo::is_in_contact(void) const;

1437 21 get_suspension_length 0 4 1566 45 BulletWheelRaycastInfo::get_suspension_length 0 1 698 10
/**
 *
 */
77
inline PN_stdfloat BulletWheelRaycastInfo::get_suspension_length(void) const;

1438 21 get_contact_normal_ws 0 4 1566 45 BulletWheelRaycastInfo::get_contact_normal_ws 0 1 699 10
/**
 *
 */
74
inline LVector3 BulletWheelRaycastInfo::get_contact_normal_ws(void) const;

1439 22 get_wheel_direction_ws 0 4 1566 46 BulletWheelRaycastInfo::get_wheel_direction_ws 0 1 700 10
/**
 *
 */
75
inline LVector3 BulletWheelRaycastInfo::get_wheel_direction_ws(void) const;

1440 17 get_wheel_axle_ws 0 4 1566 41 BulletWheelRaycastInfo::get_wheel_axle_ws 0 1 701 10
/**
 *
 */
70
inline LVector3 BulletWheelRaycastInfo::get_wheel_axle_ws(void) const;

1441 20 get_contact_point_ws 0 4 1566 44 BulletWheelRaycastInfo::get_contact_point_ws 0 1 702 10
/**
 *
 */
72
inline LPoint3 BulletWheelRaycastInfo::get_contact_point_ws(void) const;

1442 17 get_hard_point_ws 0 4 1566 41 BulletWheelRaycastInfo::get_hard_point_ws 0 1 703 10
/**
 *
 */
69
inline LPoint3 BulletWheelRaycastInfo::get_hard_point_ws(void) const;

1443 17 get_ground_object 0 4 1566 41 BulletWheelRaycastInfo::get_ground_object 0 1 704 10
/**
 *
 */
72
inline PandaNode *BulletWheelRaycastInfo::get_ground_object(void) const;

1444 22 BulletWheelRaycastInfo 0 4 1566 46 BulletWheelRaycastInfo::BulletWheelRaycastInfo 0 1 696 10
/**
 *
 */
96
inline BulletWheelRaycastInfo::BulletWheelRaycastInfo(BulletWheelRaycastInfo const &) = default;

1445 12 ~BulletWheel 0 4 1567 25 BulletWheel::~BulletWheel 0 0 10
/**
 *
 */
39
inline BulletWheel::~BulletWheel(void);

1446 24 set_suspension_stiffness 0 4 1567 37 BulletWheel::set_suspension_stiffness 0 1 706 50
/**
 * Sets how stiff the suspension shall be.
 */
62
void BulletWheel::set_suspension_stiffness(PN_stdfloat value);

1447 28 set_max_suspension_travel_cm 0 4 1567 41 BulletWheel::set_max_suspension_travel_cm 0 1 707 109
/**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */
66
void BulletWheel::set_max_suspension_travel_cm(PN_stdfloat value);

1448 17 set_friction_slip 0 4 1567 30 BulletWheel::set_friction_slip 0 1 708 45
/**
 * Sets the slipperyness of the tyre.
 */
55
void BulletWheel::set_friction_slip(PN_stdfloat value);

1449 24 set_max_suspension_force 0 4 1567 37 BulletWheel::set_max_suspension_force 0 1 709 66
/**
 * Sets the maximum suspension force the wheel can handle.
 */
62
void BulletWheel::set_max_suspension_force(PN_stdfloat value);

1450 30 set_wheels_damping_compression 0 4 1567 43 BulletWheel::set_wheels_damping_compression 0 1 710 79
/**
 * Sets the damping forces applied when the suspension gets compressed.
 */
68
void BulletWheel::set_wheels_damping_compression(PN_stdfloat value);

1451 29 set_wheels_damping_relaxation 0 4 1567 42 BulletWheel::set_wheels_damping_relaxation 0 1 711 71
/**
 * Sets the damping forces applied when the suspension relaxes.
 */
67
void BulletWheel::set_wheels_damping_relaxation(PN_stdfloat value);

1452 18 set_roll_influence 0 4 1567 31 BulletWheel::set_roll_influence 0 1 712 249
/**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */
56
void BulletWheel::set_roll_influence(PN_stdfloat value);

1453 16 set_wheel_radius 0 4 1567 29 BulletWheel::set_wheel_radius 0 1 713 33
/**
 * Sets the wheel radius.
 */
54
void BulletWheel::set_wheel_radius(PN_stdfloat value);

1454 12 set_steering 0 4 1567 25 BulletWheel::set_steering 0 1 714 35
/**
 * Sets the steering angle.
 */
50
void BulletWheel::set_steering(PN_stdfloat value);

1455 12 set_rotation 0 4 1567 25 BulletWheel::set_rotation 0 1 715 10
/**
 *
 */
50
void BulletWheel::set_rotation(PN_stdfloat value);

1456 18 set_delta_rotation 0 4 1567 31 BulletWheel::set_delta_rotation 0 1 716 10
/**
 *
 */
56
void BulletWheel::set_delta_rotation(PN_stdfloat value);

1457 16 set_engine_force 0 4 1567 29 BulletWheel::set_engine_force 0 1 717 69
/**
 * Defines how much force should be used to rotate the wheel.
 */
54
void BulletWheel::set_engine_force(PN_stdfloat value);

1458 9 set_brake 0 4 1567 22 BulletWheel::set_brake 0 1 718 10
/**
 *
 */
47
void BulletWheel::set_brake(PN_stdfloat value);

1459 13 set_skid_info 0 4 1567 26 BulletWheel::set_skid_info 0 1 719 10
/**
 *
 */
51
void BulletWheel::set_skid_info(PN_stdfloat value);

1460 27 set_wheels_suspension_force 0 4 1567 40 BulletWheel::set_wheels_suspension_force 0 1 720 10
/**
 *
 */
65
void BulletWheel::set_wheels_suspension_force(PN_stdfloat value);

1461 32 set_suspension_relative_velocity 0 4 1567 45 BulletWheel::set_suspension_relative_velocity 0 1 721 10
/**
 *
 */
70
void BulletWheel::set_suspension_relative_velocity(PN_stdfloat value);

1462 35 set_clipped_inv_connection_point_cs 0 4 1567 48 BulletWheel::set_clipped_inv_connection_point_cs 0 1 722 10
/**
 *
 */
73
void BulletWheel::set_clipped_inv_connection_point_cs(PN_stdfloat value);

1463 31 set_chassis_connection_point_cs 0 4 1567 44 BulletWheel::set_chassis_connection_point_cs 0 1 723 70
/**
 * Sets the point where the wheel is connected to the chassis.
 */
70
void BulletWheel::set_chassis_connection_point_cs(LPoint3 const &pos);

1464 22 set_wheel_direction_cs 0 4 1567 35 BulletWheel::set_wheel_direction_cs 0 1 724 92
/**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */
62
void BulletWheel::set_wheel_direction_cs(LVector3 const &dir);

1465 17 set_wheel_axle_cs 0 4 1567 30 BulletWheel::set_wheel_axle_cs 0 1 725 51
/**
 * Determines the wheel axle normal vector.
 */
58
void BulletWheel::set_wheel_axle_cs(LVector3 const &axle);

1466 19 set_world_transform 0 4 1567 32 BulletWheel::set_world_transform 0 1 726 10
/**
 *
 */
59
void BulletWheel::set_world_transform(LMatrix4 const &mat);

1467 15 set_front_wheel 0 4 1567 28 BulletWheel::set_front_wheel 0 1 727 42
/**
 * Sets if the wheel is steerable.
 */
46
void BulletWheel::set_front_wheel(bool value);

1468 8 set_node 0 4 1567 21 BulletWheel::set_node 0 1 728 86
/**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */
44
void BulletWheel::set_node(PandaNode *node);

1469 26 get_suspension_rest_length 0 4 1567 39 BulletWheel::get_suspension_rest_length 0 1 729 83
/**
 * Returns the length of the suspension when the vehicle is standing still.
 */
64
PN_stdfloat BulletWheel::get_suspension_rest_length(void) const;

1470 24 get_suspension_stiffness 0 4 1567 37 BulletWheel::get_suspension_stiffness 0 1 730 51
/**
 * Returns the stiffness of the suspension.
 */
62
PN_stdfloat BulletWheel::get_suspension_stiffness(void) const;

1471 28 get_max_suspension_travel_cm 0 4 1567 41 BulletWheel::get_max_suspension_travel_cm 0 1 731 10
/**
 *
 */
66
PN_stdfloat BulletWheel::get_max_suspension_travel_cm(void) const;

1472 17 get_friction_slip 0 4 1567 30 BulletWheel::get_friction_slip 0 1 732 46
/**
 * Returns how slippery the tyres are.
 */
55
PN_stdfloat BulletWheel::get_friction_slip(void) const;

1473 24 get_max_suspension_force 0 4 1567 37 BulletWheel::get_max_suspension_force 0 1 733 72
/**
 * Returns the maximum force (weight) the suspension can handle.
 */
62
PN_stdfloat BulletWheel::get_max_suspension_force(void) const;

1474 30 get_wheels_damping_compression 0 4 1567 43 BulletWheel::get_wheels_damping_compression 0 1 734 70
/**
 * Returns the  damping applied to the compressing suspension.
 */
68
PN_stdfloat BulletWheel::get_wheels_damping_compression(void) const;

1475 29 get_wheels_damping_relaxation 0 4 1567 42 BulletWheel::get_wheels_damping_relaxation 0 1 735 66
/**
 * Returns the damping applied to the relaxing suspension.
 */
67
PN_stdfloat BulletWheel::get_wheels_damping_relaxation(void) const;

1476 18 get_roll_influence 0 4 1567 31 BulletWheel::get_roll_influence 0 1 736 90
/**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */
56
PN_stdfloat BulletWheel::get_roll_influence(void) const;

1477 16 get_wheel_radius 0 4 1567 29 BulletWheel::get_wheel_radius 0 1 737 36
/**
 * Returns the wheel radius.
 */
54
PN_stdfloat BulletWheel::get_wheel_radius(void) const;

1478 12 get_steering 0 4 1567 25 BulletWheel::get_steering 0 1 738 49
/**
 * Returns the steering angle in degrees.
 */
50
PN_stdfloat BulletWheel::get_steering(void) const;

1479 12 get_rotation 0 4 1567 25 BulletWheel::get_rotation 0 1 739 10
/**
 *
 */
50
PN_stdfloat BulletWheel::get_rotation(void) const;

1480 18 get_delta_rotation 0 4 1567 31 BulletWheel::get_delta_rotation 0 1 740 10
/**
 *
 */
56
PN_stdfloat BulletWheel::get_delta_rotation(void) const;

1481 16 get_engine_force 0 4 1567 29 BulletWheel::get_engine_force 0 1 741 71
/**
 * Returns the amount of accelleration force currently applied.
 */
54
PN_stdfloat BulletWheel::get_engine_force(void) const;

1482 9 get_brake 0 4 1567 22 BulletWheel::get_brake 0 1 742 65
/**
 * Returns the amount of braking force currently applied.
 */
47
PN_stdfloat BulletWheel::get_brake(void) const;

1483 13 get_skid_info 0 4 1567 26 BulletWheel::get_skid_info 0 1 743 10
/**
 *
 */
51
PN_stdfloat BulletWheel::get_skid_info(void) const;

1484 27 get_wheels_suspension_force 0 4 1567 40 BulletWheel::get_wheels_suspension_force 0 1 744 10
/**
 *
 */
65
PN_stdfloat BulletWheel::get_wheels_suspension_force(void) const;

1485 32 get_suspension_relative_velocity 0 4 1567 45 BulletWheel::get_suspension_relative_velocity 0 1 745 10
/**
 *
 */
70
PN_stdfloat BulletWheel::get_suspension_relative_velocity(void) const;

1486 35 get_clipped_inv_connection_point_cs 0 4 1567 48 BulletWheel::get_clipped_inv_connection_point_cs 0 1 746 10
/**
 *
 */
73
PN_stdfloat BulletWheel::get_clipped_inv_connection_point_cs(void) const;

1487 31 get_chassis_connection_point_cs 0 4 1567 44 BulletWheel::get_chassis_connection_point_cs 0 1 747 73
/**
 * Returns the point where the wheel is connected to the chassis.
 */
65
LPoint3 BulletWheel::get_chassis_connection_point_cs(void) const;

1488 22 get_wheel_direction_cs 0 4 1567 35 BulletWheel::get_wheel_direction_cs 0 1 748 70
/**
 * Returns the wheel's forward vector relative to the chassis.
 */
57
LVector3 BulletWheel::get_wheel_direction_cs(void) const;

1489 17 get_wheel_axle_cs 0 4 1567 30 BulletWheel::get_wheel_axle_cs 0 1 749 55
/**
 * Returns the normal vector of the wheel axle.
 */
52
LVector3 BulletWheel::get_wheel_axle_cs(void) const;

1490 19 get_world_transform 0 4 1567 32 BulletWheel::get_world_transform 0 1 750 10
/**
 *
 */
54
LMatrix4 BulletWheel::get_world_transform(void) const;

1491 14 is_front_wheel 0 4 1567 27 BulletWheel::is_front_wheel 0 1 751 46
/**
 * Determines if a wheel is steerable.
 */
45
bool BulletWheel::is_front_wheel(void) const;

1492 8 get_node 0 4 1567 21 BulletWheel::get_node 0 1 752 142
/**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */
45
PandaNode *BulletWheel::get_node(void) const;

1493 16 get_raycast_info 0 4 1567 29 BulletWheel::get_raycast_info 0 1 753 10
/**
 *
 */
65
BulletWheelRaycastInfo BulletWheel::get_raycast_info(void) const;

1494 11 BulletWheel 0 4 1567 24 BulletWheel::BulletWheel 0 1 705 10
/**
 *
 */
63
inline BulletWheel::BulletWheel(BulletWheel const &) = default;

755
1 0 0 7 5 1568 0 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
2 0 0 7 6 1571 0 0 10 /**
 *
 */ 1 4 this 3 1569  
3 0 0 7 7 1574 0 0 10 /**
 *
 */ 1 4 this 3 1569  
4 0 0 7 8 1577 0 0 10 /**
 *
 */ 1 4 this 3 1569  
5 0 0 6 9 1557 0 0 10 /**
 *
 */ 1 4 this 3 1569  
6 0 0 6 10 1578 0 0 10 /**
 *
 */ 1 4 this 3 1569  
7 0 0 6 11 1578 0 0 10 /**
 *
 */ 1 4 this 3 1569  
8 0 0 7 17 1579 774 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
9 0 0 7 18 1574 0 0 10 /**
 *
 */ 1 4 this 3 1580  
10 0 0 7 19 1574 0 0 10 /**
 *
 */ 1 4 this 3 1580  
11 0 0 6 20 1582 0 0 10 /**
 *
 */ 1 4 this 3 1580  
12 0 0 6 21 1557 0 0 10 /**
 *
 */ 1 4 this 3 1580  
13 0 0 6 22 1578 0 0 10 /**
 *
 */ 1 4 this 3 1580  
14 0 0 7 23 1569 0 0 10 /**
 *
 */ 2 4 this 3 1580  3 idx 1 1578  
15 0 0 6 15 1583 0 0 0 1 4 this 3 1579  
16 0 0 6 16 1579 0 0 0 2 4 this 3 1583  4 this 1 1583  
17 0 0 6 28 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
18 0 0 6 29 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
19 0 0 6 30 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
20 0 0 6 31 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
21 0 0 6 32 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
22 0 0 6 33 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
23 0 0 6 34 1582 0 0 10 /**
 *
 */ 1 4 this 3 1584  
24 0 0 4 35 1587 0 0 10 /**
 *
 */ 2 4 this 3 1586  6 margin 1 1557  
25 0 0 6 36 1588 0 0 10 /**
 *
 */ 1 4 this 3 1584  
26 0 0 6 37 1557 0 0 10 /**
 *
 */ 1 4 this 3 1584  
27 0 0 7 38 1590 0 0 62 /**
 * Returns the current bounds of this collision shape.
 */ 1 4 this 3 1584  
28 0 0 7 39 1592 0 0 0 0 
29 0 0 7 42 1592 0 0 0 0 
30 0 0 4 45 1587 0 0 9 // Shapes 3 4 this 3 1593  5 shape 1 1586  5 xform 1 1594  
31 0 0 4 46 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 shape 1 1586  
32 0 0 6 47 1578 0 0 10 /**
 *
 */ 1 4 this 3 1597  
33 0 0 7 48 1586 0 0 10 /**
 *
 */ 2 4 this 3 1597  3 idx 1 1578  
34 0 0 7 50 1574 0 0 10 /**
 *
 */ 2 4 this 3 1597  3 idx 1 1578  
35 0 0 7 51 1601 0 0 10 /**
 *
 */ 2 4 this 3 1597  3 idx 1 1578  
36 0 0 7 52 1594 0 0 10 /**
 *
 */ 2 4 this 3 1597  3 idx 1 1578  
37 0 0 7 53 1590 0 0 81 /**
 * Returns the current bounds of all collision shapes owned by this body.
 */ 1 4 this 3 1597  
38 0 0 4 54 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 cnode 1 1602  
39 0 0 6 55 1582 0 0 23 // Static and kinematic 1 4 this 3 1597  
40 0 0 6 56 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
41 0 0 4 57 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 value 1 1582  
42 0 0 4 58 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 value 1 1582  
43 0 0 4 59 1587 0 0 11 // Contacts 2 4 this 3 1593  4 mask 1 1604  
44 0 0 4 60 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 value 1 1582  
45 0 0 6 61 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
46 0 0 4 62 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  5 value 1 1582  
47 0 0 6 63 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
48 0 0 6 64 1582 0 0 10 /**
 *
 */ 2 4 this 3 1593  4 node 1 1571  
49 0 0 6 65 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
50 0 0 6 66 1557 0 0 10 /**
 *
 */ 1 4 this 3 1597  
51 0 0 4 67 1587 0 0 106 /**
 * The constraint solver can discard solving contacts, if the distance is
 * above this threshold.
 */ 2 4 this 3 1593  9 threshold 1 1557  
52 0 0 6 68 1582 0 0 15 // Deactivation 1 4 this 3 1597  
53 0 0 4 69 1587 0 0 10 /**
 *
 */ 3 4 this 3 1593  6 active 1 1582  5 force 1 1582  
54 0 0 4 70 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  2 dt 1 1557  
55 0 0 6 71 1557 0 0 10 /**
 *
 */ 1 4 this 3 1597  
56 0 0 4 72 1587 0 0 163 /**
 * If true, this object will be deactivated after a certain amount of time has
 * passed without movement.  If false, the object will always remain active.
 */ 2 4 this 3 1593  7 enabled 1 1582  
57 0 0 6 73 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
58 0 0 4 74 1587 0 0 132 /**
 * Enables or disables the debug visualisation for this collision object.  By
 * default the debug visualisation is enabled.
 */ 2 4 this 3 1593  7 enabled 1 1608  
59 0 0 6 75 1582 0 0 141 /**
 * Returns TRUE if the debug visualisation is enabled for this collision
 * object, and FALSE if the debug visualisation is disabled.
 */ 1 4 this 3 1597  
60 0 0 6 76 1557 0 0 27 // Friction and Restitution 1 4 this 3 1597  
61 0 0 4 77 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  11 restitution 1 1557  
62 0 0 6 78 1557 0 0 10 /**
 *
 */ 1 4 this 3 1597  
63 0 0 4 79 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  8 friction 1 1557  
64 0 0 6 80 1582 0 0 10 /**
 *
 */ 1 4 this 3 1597  
65 0 0 4 81 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  8 friction 1 1609  
66 0 0 7 82 1613 0 0 10 /**
 *
 */ 1 4 this 3 1597  
67 0 0 6 83 1557 0 0 10 /**
 *
 */ 1 4 this 3 1597  
68 0 0 6 84 1557 0 0 10 /**
 *
 */ 1 4 this 3 1597  
69 0 0 4 85 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  6 radius 1 1557  
70 0 0 4 86 1587 0 0 10 /**
 *
 */ 2 4 this 3 1593  9 threshold 1 1557  
71 0 0 4 87 1587 0 0 216 /**
 * This method enforces an update of the Bullet transform, that is copies the
 * scene graph transform to the Bullet transform.  This is achieved by alling
 * the protected PandaNode hook 'transform_changed'.
 */ 1 4 this 3 1593  
72 0 0 7 88 1592 0 0 0 0 
73 0 0 7 90 1616 0 0 10 /**
 *
 */ 1 4 copy 1 1614  
74 0 0 7 90 1616 0 0 10 /**
 *
 */ 1 11 halfExtents 1 1609  
75 0 0 7 91 1616 0 0 0 2 4 this 3 1616  4 copy 1 1614  
76 0 0 7 92 1613 0 0 10 /**
 *
 */ 1 4 this 3 1614  
77 0 0 7 93 1613 0 0 10 /**
 *
 */ 1 4 this 3 1614  
78 0 0 7 94 1616 0 0 10 /**
 *
 */ 1 5 solid 1 1617  
79 0 0 7 95 1592 0 0 0 0 
80 0 0 7 97 1622 0 0 10 /**
 *
 */ 1 4 copy 1 1620  
81 0 0 7 97 1622 0 0 10 /**
 *
 */ 3 6 radius 1 1557  6 height 1 1557  2 up 1 1495  
82 0 0 7 98 1622 0 0 0 2 4 this 3 1622  4 copy 1 1620  
83 0 0 6 99 1557 0 0 10 /**
 *
 */ 1 4 this 3 1620  
84 0 0 6 100 1557 0 0 10 /**
 *
 */ 1 4 this 3 1620  
85 0 0 7 101 1592 0 0 0 0 
86 0 0 7 103 1623 788 0 10 /**
 *
 */ 3 5 shape 1 1586  11 step_height 1 1557  4 name 1 1588  
87 0 0 4 104 1587 0 0 10 /**
 *
 */ 3 4 this 3 1623  8 velocity 1 1624  8 is_local 1 1582  
88 0 0 4 105 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  5 omega 1 1557  
89 0 0 7 106 1586 0 0 10 /**
 *
 */ 1 4 this 3 1626  
90 0 0 6 107 1557 0 0 10 /**
 *
 */ 1 4 this 3 1626  
91 0 0 6 108 1557 0 0 10 /**
 *
 */ 1 4 this 3 1626  
92 0 0 4 109 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  10 fall_speed 1 1557  
93 0 0 4 110 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  10 jump_speed 1 1557  
94 0 0 4 111 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  15 max_jump_height 1 1557  
95 0 0 4 112 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  9 max_slope 1 1557  
96 0 0 4 113 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  7 gravity 1 1557  
97 0 0 4 114 1587 0 0 10 /**
 *
 */ 2 4 this 3 1623  5 value 1 1582  
98 0 0 6 115 1582 0 0 10 /**
 *
 */ 1 4 this 3 1626  
99 0 0 6 116 1582 0 0 10 /**
 *
 */ 1 4 this 3 1626  
100 0 0 4 117 1587 0 0 10 /**
 *
 */ 1 4 this 3 1623  
101 0 0 7 118 1592 0 0 0 0 
102 0 0 7 133 1630 872 0 0 1 6 param0 0 1628  
103 0 0 7 123 1630 872 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
104 0 0 7 124 1574 0 0 10 /**
 *
 */ 1 4 this 3 1628  
105 0 0 7 125 1574 0 0 10 /**
 *
 */ 1 4 this 3 1628  
106 0 0 6 126 1582 0 0 10 /**
 *
 */ 1 4 this 3 1628  
107 0 0 7 127 1571 0 0 10 /**
 *
 */ 1 4 this 3 1628  
108 0 0 7 128 1574 0 0 10 /**
 *
 */ 1 4 this 3 1628  
109 0 0 7 129 1577 0 0 10 /**
 *
 */ 1 4 this 3 1628  
110 0 0 6 130 1557 0 0 10 /**
 *
 */ 1 4 this 3 1628  
111 0 0 6 131 1578 0 0 10 /**
 *
 */ 1 4 this 3 1628  
112 0 0 6 132 1578 0 0 10 /**
 *
 */ 1 4 this 3 1628  
113 0 0 6 121 1631 0 0 0 1 4 this 3 1630  
114 0 0 6 122 1630 0 0 0 2 4 this 3 1631  4 this 1 1631  
115 0 0 7 147 1634 884 0 0 1 6 param0 0 1632  
116 0 0 7 139 1634 884 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
117 0 0 7 140 1574 0 0 10 /**
 *
 */ 1 4 this 3 1632  
118 0 0 7 141 1574 0 0 10 /**
 *
 */ 1 4 this 3 1632  
119 0 0 6 142 1582 0 0 10 /**
 *
 */ 1 4 this 3 1632  
120 0 0 7 143 1571 0 0 10 /**
 *
 */ 1 4 this 3 1632  
121 0 0 7 144 1574 0 0 10 /**
 *
 */ 1 4 this 3 1632  
122 0 0 7 145 1577 0 0 10 /**
 *
 */ 1 4 this 3 1632  
123 0 0 6 146 1557 0 0 10 /**
 *
 */ 1 4 this 3 1632  
124 0 0 6 137 1635 0 0 0 1 4 this 3 1634  
125 0 0 6 138 1634 0 0 0 2 4 this 3 1635  4 this 1 1635  
126 0 0 7 150 1638 0 0 10 /**
 *
 */ 1 4 copy 1 1636  
127 0 0 7 150 1638 0 0 10 /**
 *
 */ 3 6 radius 1 1557  6 height 1 1557  2 up 1 1495  
128 0 0 7 151 1638 0 0 0 2 4 this 3 1638  4 copy 1 1636  
129 0 0 6 152 1557 0 0 10 /**
 *
 */ 1 4 this 3 1636  
130 0 0 6 153 1557 0 0 10 /**
 *
 */ 1 4 this 3 1636  
131 0 0 7 154 1592 0 0 0 0 
132 0 0 7 157 1640 0 0 10 /**
 *
 */ 1 4 this 3 1639  
133 0 0 7 158 1640 0 0 10 /**
 *
 */ 1 4 this 3 1639  
134 0 0 4 159 1587 0 0 10 /**
 *
 */ 2 4 this 3 1639  5 value 1 1582  
135 0 0 4 160 1587 0 0 10 /**
 *
 */ 2 4 this 3 1639  4 size 1 1557  
136 0 0 6 161 1557 0 0 10 /**
 *
 */ 1 4 this 3 1641  
137 0 0 6 162 1557 0 0 10 /**
 *
 */ 1 4 this 3 1639  
138 0 0 6 163 1557 0 0 73 /**
 * Returns the applied impluse limit for breaking the constraint.
 */ 1 4 this 3 1641  
139 0 0 4 163 1587 0 0 212 /**
 * Sets the applied impulse limit for breaking the constraint.  If the limit
 * is exceeded the constraint will be disabled.  Disabled constraints are not
 * removed from the world, and can be re-enabled.
 */ 2 4 this 3 1639  9 threshold 1 1557  
140 0 0 4 164 1587 0 0 10 /**
 *
 */ 2 4 this 3 1639  7 enabled 1 1582  
141 0 0 6 165 1582 0 0 53 /**
 * Returns TRUE if the constraint is enabled.
 */ 1 4 this 3 1641  
142 0 0 4 167 1587 0 0 10 /**
 *
 */ 4 4 this 3 1639  3 num 1 1515  5 value 1 1557  4 axis 1 1578  
143 0 0 6 168 1557 0 0 10 /**
 *
 */ 3 4 this 3 1639  3 num 1 1515  4 axis 1 1578  
144 0 0 7 169 1592 0 0 0 0 
145 0 0 7 171 1645 0 0 10 /**
 *
 */ 4 6 node_a 1 1643  6 node_b 1 1643  7 frame_a 1 1594  7 frame_b 1 1594  
146 0 0 7 171 1645 0 0 10 /**
 *
 */ 2 6 node_a 1 1643  7 frame_a 1 1594  
147 0 0 4 172 1587 0 0 10 /**
 *
 */ 7 4 this 3 1645  6 swing1 1 1557  6 swing2 1 1557  5 twist 1 1557  8 softness 1 1557  4 bias 1 1557  10 relaxation 1 1557  
148 0 0 4 172 1587 0 0 10 /**
 *
 */ 3 4 this 3 1645  5 index 1 1578  5 value 1 1557  
149 0 0 4 173 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  7 damping 1 1557  
150 0 0 6 174 1557 0 0 10 /**
 *
 */ 1 4 this 3 1646  
151 0 0 4 175 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  9 threshold 1 1557  
152 0 0 4 176 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  6 enable 1 1582  
153 0 0 4 177 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  11 max_impulse 1 1557  
154 0 0 4 178 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  11 max_impulse 1 1557  
155 0 0 4 179 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  4 quat 1 1648  
156 0 0 4 180 1587 0 0 10 /**
 *
 */ 2 4 this 3 1645  4 quat 1 1648  
157 0 0 4 181 1587 0 0 10 /**
 *
 */ 3 4 this 3 1645  4 ts_a 1 1594  4 ts_b 1 1594  
158 0 0 7 182 1594 0 0 10 /**
 *
 */ 1 4 this 3 1646  
159 0 0 7 183 1594 0 0 10 /**
 *
 */ 1 4 this 3 1646  
160 0 0 7 184 1592 0 0 0 0 
161 0 0 6 187 1578 0 0 10 /**
 *
 */ 1 4 this 3 1652  
162 0 0 6 188 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
163 0 0 6 189 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
164 0 0 7 190 1574 0 0 10 /**
 *
 */ 1 4 this 3 1652  
165 0 0 7 191 1574 0 0 10 /**
 *
 */ 1 4 this 3 1652  
166 0 0 7 192 1577 0 0 10 /**
 *
 */ 1 4 this 3 1652  
167 0 0 7 193 1574 0 0 10 /**
 *
 */ 1 4 this 3 1652  
168 0 0 7 194 1574 0 0 10 /**
 *
 */ 1 4 this 3 1652  
169 0 0 6 195 1578 0 0 10 /**
 *
 */ 1 4 this 3 1652  
170 0 0 6 196 1578 0 0 10 /**
 *
 */ 1 4 this 3 1652  
171 0 0 6 197 1578 0 0 10 /**
 *
 */ 1 4 this 3 1652  
172 0 0 6 198 1578 0 0 10 /**
 *
 */ 1 4 this 3 1652  
173 0 0 4 199 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1582  
174 0 0 4 200 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  3 dir 1 1609  
175 0 0 4 201 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  3 dir 1 1609  
176 0 0 4 202 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
177 0 0 4 203 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
178 0 0 4 204 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
179 0 0 4 205 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
180 0 0 4 206 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
181 0 0 4 207 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
182 0 0 4 208 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
183 0 0 4 209 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
184 0 0 4 210 1587 0 0 10 /**
 *
 */ 2 4 this 3 1654  5 value 1 1557  
185 0 0 6 211 1582 0 0 10 /**
 *
 */ 1 4 this 3 1652  
186 0 0 7 212 1577 0 0 10 /**
 *
 */ 1 4 this 3 1652  
187 0 0 7 213 1577 0 0 10 /**
 *
 */ 1 4 this 3 1652  
188 0 0 6 214 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
189 0 0 6 215 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
190 0 0 6 216 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
191 0 0 6 217 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
192 0 0 6 218 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
193 0 0 6 219 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
194 0 0 6 220 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
195 0 0 6 221 1557 0 0 10 /**
 *
 */ 1 4 this 3 1652  
196 0 0 7 224 1655 0 0 10 /**
 *
 */ 7 2 mp 1 1654  5 node0 1 1571  5 node1 1 1571  3 id0 1 1578  3 id1 1 1578  6 index0 1 1578  6 index1 1 1578  
197 0 0 6 225 1654 0 0 10 /**
 *
 */ 1 4 this 3 1656  
198 0 0 7 226 1571 0 0 10 /**
 *
 */ 1 4 this 3 1656  
199 0 0 7 227 1571 0 0 10 /**
 *
 */ 1 4 this 3 1656  
200 0 0 6 228 1578 0 0 10 /**
 *
 */ 1 4 this 3 1656  
201 0 0 6 229 1578 0 0 10 /**
 *
 */ 1 4 this 3 1656  
202 0 0 6 230 1578 0 0 10 /**
 *
 */ 1 4 this 3 1656  
203 0 0 6 231 1578 0 0 10 /**
 *
 */ 1 4 this 3 1656  
204 0 0 7 232 1592 0 0 0 0 
205 0 0 6 234 1654 0 0 10 /**
 *
 */ 1 4 this 3 1658  
206 0 0 7 235 1571 0 0 10 /**
 *
 */ 1 4 this 3 1659  
207 0 0 7 236 1571 0 0 10 /**
 *
 */ 1 4 this 3 1659  
208 0 0 6 237 1578 0 0 10 /**
 *
 */ 1 4 this 3 1659  
209 0 0 6 238 1578 0 0 10 /**
 *
 */ 1 4 this 3 1659  
210 0 0 6 239 1578 0 0 10 /**
 *
 */ 1 4 this 3 1659  
211 0 0 6 240 1578 0 0 10 /**
 *
 */ 1 4 this 3 1659  
212 0 0 6 246 1578 0 0 10 /**
 *
 */ 1 4 this 3 1661  
213 0 0 7 247 1658 968 0 10 /**
 *
 */ 2 4 this 3 1663  3 idx 1 1578  
214 0 0 6 244 1664 0 0 0 1 4 this 3 1663  
215 0 0 6 245 1663 0 0 0 2 4 this 3 1664  4 this 1 1664  
216 0 0 7 252 1667 0 0 0 1 6 param0 0 1665  
217 0 0 7 252 1667 0 0 10 /**
 *
 */ 1 4 name 1 1588  
218 0 0 4 253 1587 0 0 10 /**
 *
 */ 1 4 this 3 1667  
219 0 0 4 254 1587 0 0 10 /**
 *
 */ 2 4 this 3 1667  4 show 1 1582  
220 0 0 4 255 1587 0 0 10 /**
 *
 */ 2 4 this 3 1667  4 show 1 1582  
221 0 0 4 256 1587 0 0 10 /**
 *
 */ 2 4 this 3 1667  4 show 1 1582  
222 0 0 4 257 1587 0 0 10 /**
 *
 */ 2 4 this 3 1667  4 show 1 1582  
223 0 0 7 258 1592 0 0 0 0 
224 0 0 7 260 1668 0 0 10 /**
 *
 */ 1 4 name 1 1588  
225 0 0 6 261 1578 0 0 14 // Overlapping 1 4 this 3 1669  
226 0 0 7 262 1571 0 0 10 /**
 *
 */ 2 4 this 3 1669  3 idx 1 1578  
227 0 0 7 264 1592 0 0 0 0 
228 0 0 7 266 1640 0 0 10 /**
 *
 */ 1 4 name 1 1588  
229 0 0 4 267 1587 0 0 257 /**
 * Sets the mass of a rigid body.  This also modifies the inertia, which is
 * automatically computed from the shape of the body.  Setting a value of zero
 * for mass will make the body static.  A value of zero can be considered an
 * infinite mass.
 */ 2 4 this 3 1640  4 mass 1 1557  
230 0 0 6 268 1557 0 0 128 /**
 * Returns the total mass of a rigid body.  A value of zero means that the
 * body is staic, i.e.  has an infinite mass.
 */ 1 4 this 3 1643  
231 0 0 6 269 1557 0 0 52 /**
 * Returns the inverse mass of a rigid body.
 */ 1 4 this 3 1643  
232 0 0 4 270 1587 0 0 591 /**
 * Sets the inertia of a rigid body.  Inertia is given as a three-component
 * vector.  A component value of zero means infinite inertia along this
 * direction.  Setting the intertia will override the value which is
 * automatically calculated from the rigid bodies shape.  However, it is
 * possible that automatic calculation of intertia is trigger after calling
 * this method, and thus overwriting the explicitly set value again.  This
 * happens when: (a) the mass is set after the inertia.  (b) a shape is added
 * or removed from the body.  (c) the scale of the body changed.
 */ 2 4 this 3 1640  7 inertia 1 1609  
233 0 0 7 271 1577 0 0 174 /**
 * Returns the inertia of the rigid body.  Inertia is given as a three
 * component vector.  A component value of zero means infinite inertia along
 * this direction.
 */ 1 4 this 3 1643  
234 0 0 7 272 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
235 0 0 7 273 1673 0 0 10 /**
 *
 */ 1 4 this 3 1643  
236 0 0 7 274 1577 0 0 11 // Velocity 1 4 this 3 1643  
237 0 0 7 275 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
238 0 0 4 276 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  8 velocity 1 1624  
239 0 0 4 277 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  8 velocity 1 1624  
240 0 0 6 278 1557 0 0 10 // Damping 1 4 this 3 1643  
241 0 0 6 279 1557 0 0 10 /**
 *
 */ 1 4 this 3 1643  
242 0 0 4 280 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  5 value 1 1557  
243 0 0 4 281 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  5 value 1 1557  
244 0 0 4 282 1587 0 0 9 // Forces 1 4 this 3 1640  
245 0 0 4 283 1587 0 0 10 /**
 *
 */ 3 4 this 3 1640  5 force 1 1624  3 pos 1 1674  
246 0 0 4 284 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  5 force 1 1624  
247 0 0 4 285 1587 0 0 10 /**
 *
 */ 3 4 this 3 1640  7 impulse 1 1624  3 pos 1 1674  
248 0 0 4 286 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  7 impulse 1 1624  
249 0 0 4 287 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  6 torque 1 1624  
250 0 0 4 288 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  6 torque 1 1624  
251 0 0 7 289 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
252 0 0 7 290 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
253 0 0 6 291 1557 0 0 26 // Deactivation thresholds 1 4 this 3 1643  
254 0 0 6 292 1557 0 0 10 /**
 *
 */ 1 4 this 3 1643  
255 0 0 4 293 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  9 threshold 1 1557  
256 0 0 4 294 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  9 threshold 1 1557  
257 0 0 4 295 1587 0 0 10 // Gravity 2 4 this 3 1640  7 gravity 1 1624  
258 0 0 7 296 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
259 0 0 7 297 1577 0 0 20 // Restrict movement 1 4 this 3 1643  
260 0 0 7 298 1577 0 0 10 /**
 *
 */ 1 4 this 3 1643  
261 0 0 4 299 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  6 factor 1 1624  
262 0 0 4 300 1587 0 0 10 /**
 *
 */ 2 4 this 3 1640  6 factor 1 1624  
263 0 0 6 301 1582 0 0 123 /**
 * Returns TRUE if the transform of the rigid body has changed at least once
 * since the last call to this method.
 */ 1 4 this 3 1640  
264 0 0 7 302 1592 0 0 0 0 
265 0 0 7 312 1678 1022 0 0 1 6 param0 0 1676  
266 0 0 7 305 1678 1022 0 101 /**
 * Named constructor intended to be used for asserts with have to return a
 * concrete value.
 */ 0 
267 0 0 7 306 1574 0 0 10 /**
 *
 */ 1 4 this 3 1676  
268 0 0 7 307 1577 0 0 10 /**
 *
 */ 1 4 this 3 1676  
269 0 0 7 308 1577 0 0 10 /**
 *
 */ 1 4 this 3 1676  
270 0 0 6 309 1557 0 0 10 /**
 *
 */ 1 4 this 3 1676  
271 0 0 6 310 1557 0 0 10 /**
 *
 */ 1 4 this 3 1676  
272 0 0 6 311 1578 0 0 10 /**
 *
 */ 1 4 this 3 1676  
273 0 0 7 314 1680 1317 0 10 /**
 *
 */ 1 4 this 3 1679  
274 0 0 7 315 1681 1391 0 10 /**
 *
 */ 1 4 this 3 1679  
275 0 0 4 316 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  8 distance 1 1578  8 material 1 1682  
276 0 0 4 317 1587 0 0 10 /**
 *
 */ 1 4 this 3 1679  
277 0 0 4 318 1587 0 0 24 // Mass, volume, density 2 4 this 3 1679  4 mass 1 1557  
278 0 0 4 319 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  7 density 1 1557  
279 0 0 4 320 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  4 mass 1 1557  9 fromfaces 1 1582  
280 0 0 4 321 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  7 density 1 1557  
281 0 0 4 322 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  4 node 1 1578  4 mass 1 1557  
282 0 0 6 323 1557 0 0 10 /**
 *
 */ 2 4 this 3 1683  4 node 1 1578  
283 0 0 6 324 1557 0 0 10 /**
 *
 */ 1 4 this 3 1683  
284 0 0 6 325 1557 0 0 10 /**
 *
 */ 1 4 this 3 1683  
285 0 0 4 326 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  5 force 1 1624  
286 0 0 4 326 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  5 force 1 1624  4 node 1 1578  
287 0 0 4 327 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  8 velocity 1 1624  
288 0 0 4 328 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  8 velocity 1 1624  
289 0 0 4 328 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  8 velocity 1 1624  4 node 1 1578  
290 0 0 4 329 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  8 velocity 1 1624  
291 0 0 7 330 1577 0 0 10 /**
 *
 */ 1 4 this 3 1683  
292 0 0 4 331 1587 0 0 10 /**
 *
 */ 3 4 this 3 1679  7 bvolume 1 1582  6 bframe 1 1582  
293 0 0 7 332 1686 0 0 10 /**
 *
 */ 1 4 this 3 1683  
294 0 0 4 333 1587 0 0 10 // Cluster 3 4 this 3 1679  1 k 1 1578  13 maxiterations 1 1578  
295 0 0 4 334 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  5 index 1 1578  
296 0 0 4 335 1587 0 0 10 /**
 *
 */ 1 4 this 3 1679  
297 0 0 6 336 1578 0 0 10 /**
 *
 */ 1 4 this 3 1683  
298 0 0 7 337 1613 0 0 10 /**
 *
 */ 2 4 this 3 1683  7 cluster 1 1578  
299 0 0 4 338 1587 0 0 12 // Rendering 2 4 this 3 1679  4 geom 1 1687  
300 0 0 4 339 1587 0 0 10 /**
 *
 */ 1 4 this 3 1679  
301 0 0 4 340 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  5 curve 1 1689  
302 0 0 4 341 1587 0 0 10 /**
 *
 */ 1 4 this 3 1679  
303 0 0 4 342 1587 0 0 10 /**
 *
 */ 2 4 this 3 1679  7 surface 1 1691  
304 0 0 4 343 1587 0 0 10 /**
 *
 */ 1 4 this 3 1679  
305 0 0 4 344 1587 0 0 10 /**
 *
 */ 5 4 this 3 1679  4 node 1 1578  4 body 1 1640  5 pivot 1 1624  7 disable 1 1582  
306 0 0 4 344 1587 0 0 10 // Anchors 4 4 this 3 1679  4 node 1 1578  4 body 1 1640  7 disable 1 1582  
307 0 0 4 345 1587 0 0 10 /**
 *
 */ 6 4 this 3 1679  4 body 1 1593  3 pos 1 1674  3 erp 1 1557  3 cfm 1 1557  5 split 1 1557  
308 0 0 4 345 1587 0 0 10 /**
 *
 */ 6 4 this 3 1679  4 body 1 1593  7 cluster 1 1578  3 erp 1 1557  3 cfm 1 1557  5 split 1 1557  
309 0 0 4 346 1587 0 0 10 /**
 *
 */ 7 4 this 3 1679  4 body 1 1593  4 axis 1 1624  3 erp 1 1557  3 cfm 1 1557  5 split 1 1557  7 control 1 1693  
310 0 0 6 347 1578 0 0 12 // Materials 1 4 this 3 1683  
311 0 0 7 348 1682 1380 0 10 /**
 *
 */ 2 4 this 3 1683  3 idx 1 1578  
312 0 0 7 350 1682 1380 0 10 /**
 *
 */ 1 4 this 3 1679  
313 0 0 6 351 1578 0 0 10 /**
 *
 */ 1 4 this 3 1683  
314 0 0 7 352 1678 1022 0 10 /**
 *
 */ 2 4 this 3 1683  3 idx 1 1578  
315 0 0 6 354 1578 0 0 212 /**
 * Returns the index of the node which is closest to the given point.  The
 * distance between each node and the given point is computed in world space
 * if local=false, and in local space if local=true.
 */ 3 4 this 3 1679  5 point 1 1613  5 local 1 1582  
316 0 0 7 355 1679 0 0 10 // Factory 5 4 info 1 1681  4 from 1 1674  2 to 1 1674  3 res 1 1578  6 fixeds 1 1578  
317 0 0 7 356 1679 0 0 10 /**
 *
 */ 9 4 info 1 1681  8 corner00 1 1674  8 corner10 1 1674  8 corner01 1 1674  8 corner11 1 1674  4 resx 1 1578  4 resy 1 1578  6 fixeds 1 1578  8 gendiags 1 1582  
318 0 0 7 357 1679 0 0 10 /**
 *
 */ 4 4 info 1 1681  6 center 1 1674  6 radius 1 1609  3 res 1 1578  
319 0 0 7 358 1679 0 0 10 /**
 *
 */ 3 4 info 1 1681  4 geom 1 1694  20 randomizeConstraints 1 1582  
320 0 0 7 358 1679 0 0 10 /**
 *
 */ 4 4 info 1 1681  6 points 1 1696  7 indices 1 1700  20 randomizeConstraints 1 1582  
321 0 0 7 359 1679 0 0 10 /**
 *
 */ 4 4 info 1 1681  6 points 1 1696  7 indices 1 1700  10 tetralinks 1 1582  
322 0 0 7 359 1679 0 0 10 /**
 *
 */ 4 4 info 1 1681  3 ele 1 1588  4 face 1 1588  4 node 1 1588  
323 0 0 7 360 1592 0 0 0 0 
324 0 0 4 362 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
325 0 0 4 363 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
326 0 0 4 364 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
327 0 0 4 365 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
328 0 0 4 366 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
329 0 0 4 367 1587 0 0 10 /**
 *
 */ 2 4 this 3 1703  5 value 1 1557  
330 0 0 6 368 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
331 0 0 6 369 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
332 0 0 6 370 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
333 0 0 6 371 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
334 0 0 6 372 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
335 0 0 6 373 1557 0 0 10 /**
 *
 */ 1 4 this 3 1704  
336 0 0 7 375 1707 0 0 94 /**
 * Creates a new BulletVehicle instance in the given world and with a chassis
 * node.
 */ 2 5 world 1 1706  7 chassis 1 1640  
337 0 0 4 376 1587 0 0 100 /**
 * Specifies which axis is "up". Nessecary for the vehicle's suspension to
 * work properly!
 */ 2 4 this 3 1707  2 up 1 1495  
338 0 0 4 377 1587 0 0 76 /**
 * Sets the steering value (in degrees) of the wheel with index idx.
 */ 3 4 this 3 1707  8 steering 1 1557  3 idx 1 1578  
339 0 0 4 378 1587 0 0 61 /**
 * Applies braking force to the wheel with index idx.
 */ 3 4 this 3 1707  5 brake 1 1557  3 idx 1 1578  
340 0 0 4 379 1587 0 0 10 /**
 *
 */ 2 4 this 3 1707  5 pitch 1 1557  
341 0 0 7 380 1640 0 0 82 /**
 * Returns the chassis of this vehicle.  The chassis is a rigid body node.
 */ 1 4 this 3 1707  
342 0 0 6 381 1557 0 0 106 /**
 * Returns the current speed in kilometers per hour.  Convert to miles using:
 * km/h * 0.62 = mph
 */ 1 4 this 3 1708  
343 0 0 6 382 1557 0 0 77 /**
 * Returns the steering angle of the wheel with index idx in degrees.
 */ 2 4 this 3 1708  3 idx 1 1578  
344 0 0 7 383 1577 0 0 145 /**
 * Returns the forward vector representing the car's actual direction of
 * movement.  The forward vetcor is given in global coordinates.
 */ 1 4 this 3 1708  
345 0 0 4 384 1587 0 0 43 /**
 * Resets the vehicle's suspension.
 */ 1 4 this 3 1707  
346 0 0 4 385 1587 0 0 70 /**
 * Applies force at the wheel with index idx for acceleration.
 */ 3 4 this 3 1707  5 force 1 1557  3 idx 1 1578  
347 0 0 7 386 1710 1445 0 72 /**
 * Factory method for creating wheels for this vehicle instance.
 */ 1 4 this 3 1707  
348 0 0 6 387 1578 0 0 57 /**
 * Returns the number of wheels this vehicle has.
 */ 1 4 this 3 1708  
349 0 0 7 388 1710 1445 0 132 /**
 * Returns the BulletWheel with index idx.  Causes an AssertionError if idx is
 * equal or larger than the number of wheels.
 */ 2 4 this 3 1708  3 idx 1 1578  
350 0 0 6 390 1703 0 0 189 /**
 * Returns a reference to the BulletVehicleTuning object of this vehicle which
 * offers various vehicle-global tuning options.  Make sure to configure this
 * before adding wheels!
 */ 1 4 this 3 1707  
351 0 0 7 391 1592 0 0 0 0 
352 0 0 7 393 1706 0 0 10 /**
 *
 */ 0 
353 0 0 4 394 1587 0 0 10 /**
 *
 */ 2 4 this 3 1706  7 gravity 1 1624  
354 0 0 4 394 1587 0 0 10 /**
 *
 */ 4 4 this 3 1706  2 gx 1 1557  2 gy 1 1557  2 gz 1 1557  
355 0 0 7 395 1624 0 0 10 /**
 *
 */ 1 4 this 3 1711  
356 0 0 6 396 1578 0 0 10 /**
 *
 */ 4 4 this 3 1706  2 dt 1 1557  12 max_substeps 1 1578  8 stepsize 1 1557  
357 0 0 7 397 1681 1391 0 10 /**
 *
 */ 1 4 this 3 1706  
358 0 0 4 398 1587 0 0 10 /**
 *
 */ 2 4 this 3 1706  4 node 1 1667  
359 0 0 4 399 1587 0 0 10 /**
 *
 */ 1 4 this 3 1706  
360 0 0 7 400 1667 0 0 10 /**
 *
 */ 1 4 this 3 1711  
361 0 0 4 401 1587 0 0 15 // AttachRemove 2 4 this 3 1706  6 object 1 1713  
362 0 0 4 402 1587 0 0 156 /**
 * Attaches a single constraint to a world.  Collision checks between the
 * linked objects will be disabled if the second parameter is set to TRUE.
 */ 3 4 this 3 1706  10 constraint 1 1639  16 linked_collision 1 1582  
363 0 0 4 403 1587 0 0 10 /**
 *
 */ 2 4 this 3 1706  6 object 1 1713  
364 0 0 6 404 1578 0 0 15 // Ghost object 1 4 this 3 1711  
365 0 0 7 405 1668 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
366 0 0 6 407 1578 0 0 13 // Rigid body 1 4 this 3 1711  
367 0 0 7 408 1640 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
368 0 0 6 410 1578 0 0 12 // Soft body 1 4 this 3 1711  
369 0 0 7 411 1679 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
370 0 0 6 413 1578 0 0 23 // Character controller 1 4 this 3 1711  
371 0 0 7 414 1715 788 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
372 0 0 4 416 1587 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1706  7 vehicle 1 1707  
373 0 0 4 417 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  7 vehicle 1 1707  
374 0 0 6 418 1578 0 0 10 /**
 *
 */ 1 4 this 3 1711  
375 0 0 7 419 1707 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
376 0 0 6 421 1578 0 0 13 // Constraint 1 4 this 3 1711  
377 0 0 7 422 1639 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
378 0 0 7 424 1630 872 0 28 // Raycast and other queries 4 4 this 3 1711  8 from_pos 1 1674  6 to_pos 1 1674  4 mask 1 1716  
379 0 0 7 425 1579 774 0 10 /**
 *
 */ 4 4 this 3 1711  8 from_pos 1 1674  6 to_pos 1 1674  4 mask 1 1716  
380 0 0 7 426 1634 884 0 10 /**
 *
 */ 6 4 this 3 1711  5 shape 1 1586  7 from_ts 1 1594  5 to_ts 1 1594  4 mask 1 1716  11 penetration 1 1557  
381 0 0 7 427 1663 973 0 386 /**
 * Performas a test for all bodies which are currently in contact with the
 * given body.  The test returns a BulletContactResult object which may
 * contain zero, one or more contacts.
 *
 * If the optional parameter use_filter is set to TRUE this test will consider
 * filter settings.  Otherwise all objects in contact are reported, no matter
 * if they would collide or not.
 */ 3 4 this 3 1711  4 node 1 1571  10 use_filter 1 1582  
382 0 0 7 428 1663 973 0 181 /**
 * Performas a test if the two bodies given as parameters are in contact or
 * not.  The test returns a BulletContactResult object which may contain zero
 * or one contacts.
 */ 3 4 this 3 1711  5 node0 1 1571  5 node1 1 1571  
383 0 0 6 429 1582 0 0 105 /**
 * Performs a test if two bodies should collide or not, based on the collision
 * filter setting.
 */ 3 4 this 3 1711  5 node0 1 1571  5 node1 1 1571  
384 0 0 6 430 1578 0 0 12 // Manifolds 1 4 this 3 1711  
385 0 0 6 431 1718 0 0 10 /**
 *
 */ 2 4 this 3 1711  3 idx 1 1578  
386 0 0 4 433 1587 0 0 22 // Collision filtering 4 4 this 3 1706  6 group1 1 1719  6 group2 1 1719  6 enable 1 1582  
387 0 0 6 434 1582 0 0 10 /**
 *
 */ 3 4 this 3 1711  6 group1 1 1719  6 group2 1 1719  
388 0 0 4 435 1587 0 0 12 // Callbacks 2 4 this 3 1706  3 obj 1 1720  
389 0 0 4 436 1587 0 0 10 /**
 *
 */ 1 4 this 3 1706  
390 0 0 4 437 1587 0 0 10 /**
 *
 */ 3 4 this 3 1706  3 obj 1 1720  10 is_pretick 1 1582  
391 0 0 4 438 1587 0 0 10 /**
 *
 */ 1 4 this 3 1706  
392 0 0 4 439 1587 0 0 10 /**
 *
 */ 2 4 this 3 1706  3 obj 1 1720  
393 0 0 4 440 1587 0 0 10 /**
 *
 */ 1 4 this 3 1706  
394 0 0 4 443 1587 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1706  4 node 1 1668  
395 0 0 4 444 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  4 node 1 1668  
396 0 0 4 445 1587 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1706  4 node 1 1640  
397 0 0 4 446 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  4 node 1 1640  
398 0 0 4 447 1587 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1706  4 node 1 1679  
399 0 0 4 448 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  4 node 1 1679  
400 0 0 4 449 1587 0 0 54 /**
 * Deprecated!  Please use BulletWorld::attach
 */ 2 4 this 3 1706  4 node 1 1715  
401 0 0 4 450 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  4 node 1 1715  
402 0 0 4 451 1587 0 0 54 /**
 * Deprecated.! Please use BulletWorld::remove
 */ 2 4 this 3 1706  10 constraint 1 1639  
403 0 0 7 452 1592 0 0 0 0 
404 0 0 7 454 1722 0 0 10 /**
 *
 */ 0 
405 0 0 7 454 1722 0 0 10 /**
 *
 */ 1 4 copy 1 1723  
406 0 0 7 455 1722 0 0 0 2 4 this 3 1722  4 copy 1 1723  
407 0 0 4 456 1587 0 0 10 /**
 *
 */ 2 4 this 3 1722  1 p 1 1674  
408 0 0 4 457 1587 0 0 10 /**
 *
 */ 2 4 this 3 1722  6 points 1 1725  
409 0 0 4 458 1587 0 0 10 /**
 *
 */ 3 4 this 3 1722  4 geom 1 1694  2 ts 1 1594  
410 0 0 7 459 1592 0 0 0 0 
411 0 0 7 461 1729 0 0 10 /**
 *
 */ 1 4 copy 1 1727  
412 0 0 7 461 1729 0 0 10 /**
 *
 */ 2 4 geom 1 1694  5 scale 1 1613  
413 0 0 7 461 1729 0 0 10 /**
 *
 */ 2 6 points 1 1725  5 scale 1 1613  
414 0 0 7 462 1729 0 0 0 2 4 this 3 1729  4 copy 1 1727  
415 0 0 6 463 1578 0 0 10 /**
 *
 */ 1 4 this 3 1727  
416 0 0 7 464 1592 0 0 0 0 
417 0 0 7 466 1732 0 0 10 /**
 *
 */ 1 4 copy 1 1730  
418 0 0 7 466 1732 0 0 10 /**
 *
 */ 2 12 half_extents 1 1624  2 up 1 1495  
419 0 0 7 466 1732 0 0 10 /**
 *
 */ 3 6 radius 1 1557  6 height 1 1557  2 up 1 1495  
420 0 0 7 467 1732 0 0 0 2 4 this 3 1732  4 copy 1 1730  
421 0 0 6 468 1557 0 0 10 /**
 *
 */ 1 4 this 3 1730  
422 0 0 7 469 1613 0 0 10 /**
 *
 */ 1 4 this 3 1730  
423 0 0 7 470 1613 0 0 10 /**
 *
 */ 1 4 this 3 1730  
424 0 0 7 471 1592 0 0 0 0 
425 0 0 7 473 1733 1177 0 10 /**
 *
 */ 2 5 node0 1 1571  5 node1 1 1571  
426 0 0 7 474 1571 0 0 10 /**
 *
 */ 1 4 this 3 1734  
427 0 0 7 475 1571 0 0 10 /**
 *
 */ 1 4 this 3 1734  
428 0 0 4 476 1587 0 0 10 /**
 *
 */ 2 4 this 3 1733  7 collide 1 1582  
429 0 0 6 477 1582 0 0 10 /**
 *
 */ 1 4 this 3 1734  
430 0 0 7 478 1592 0 0 0 0 
431 0 0 7 481 1738 1179 0 10 /**
 *
 */ 1 4 copy 1 1736  
432 0 0 4 483 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  6 enable 1 1582  
433 0 0 4 484 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  5 limit 1 1557  
434 0 0 4 485 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  5 limit 1 1557  
435 0 0 4 486 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  8 velocity 1 1557  
436 0 0 4 487 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  5 force 1 1557  
437 0 0 4 488 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  5 force 1 1557  
438 0 0 4 489 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  7 damping 1 1557  
439 0 0 4 490 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  8 softness 1 1557  
440 0 0 4 491 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  6 bounce 1 1557  
441 0 0 4 492 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  3 cfm 1 1557  
442 0 0 4 493 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  3 cfm 1 1557  
443 0 0 4 494 1587 0 0 10 /**
 *
 */ 2 4 this 3 1738  3 erp 1 1557  
444 0 0 6 495 1582 0 0 10 /**
 *
 */ 1 4 this 3 1736  
445 0 0 6 496 1582 0 0 10 /**
 *
 */ 1 4 this 3 1736  
446 0 0 6 497 1578 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 1 4 this 3 1736  
447 0 0 6 498 1557 0 0 10 /**
 *
 */ 1 4 this 3 1736  
448 0 0 6 499 1557 0 0 10 /**
 *
 */ 1 4 this 3 1736  
449 0 0 6 500 1557 0 0 10 /**
 *
 */ 1 4 this 3 1736  
450 0 0 7 502 1741 1199 0 10 /**
 *
 */ 1 4 copy 1 1739  
451 0 0 4 504 1587 0 0 10 /**
 *
 */ 3 4 this 3 1741  4 axis 1 1578  6 enable 1 1582  
452 0 0 4 505 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 limit 1 1609  
453 0 0 4 506 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 limit 1 1609  
454 0 0 4 507 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  8 velocity 1 1609  
455 0 0 4 508 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  5 force 1 1609  
456 0 0 4 509 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  7 damping 1 1557  
457 0 0 4 510 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  8 softness 1 1557  
458 0 0 4 511 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  11 restitution 1 1557  
459 0 0 4 512 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  3 cfm 1 1609  
460 0 0 4 513 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  3 erp 1 1609  
461 0 0 4 514 1587 0 0 10 /**
 *
 */ 2 4 this 3 1741  3 cfm 1 1609  
462 0 0 6 515 1582 0 0 10 /**
 *
 */ 2 4 this 3 1739  4 axis 1 1578  
463 0 0 6 516 1582 0 0 10 /**
 *
 */ 2 4 this 3 1739  4 axis 1 1578  
464 0 0 6 517 1578 0 0 98 /**
 * Retrieves the current value of angle: 0 = free, 1 = at low limit, 2 = at
 * high limit.
 */ 2 4 this 3 1739  4 axis 1 1578  
465 0 0 7 518 1577 0 0 10 /**
 *
 */ 1 4 this 3 1739  
466 0 0 7 519 1574 0 0 10 /**
 *
 */ 1 4 this 3 1739  
467 0 0 7 520 1577 0 0 10 /**
 *
 */ 1 4 this 3 1739  
468 0 0 7 522 1742 0 0 10 /**
 *
 */ 5 6 node_a 1 1643  6 node_b 1 1643  7 frame_a 1 1594  7 frame_b 1 1594  11 use_frame_a 1 1582  
469 0 0 7 522 1742 0 0 10 /**
 *
 */ 3 6 node_a 1 1643  7 frame_a 1 1594  11 use_frame_a 1 1582  
470 0 0 7 523 1577 0 0 11 // Geometry 2 4 this 3 1743  4 axis 1 1578  
471 0 0 6 524 1557 0 0 10 /**
 *
 */ 2 4 this 3 1743  4 axis 1 1578  
472 0 0 6 525 1557 0 0 10 /**
 *
 */ 2 4 this 3 1743  4 axis 1 1578  
473 0 0 4 526 1587 0 0 10 /**
 *
 */ 4 4 this 3 1742  4 axis 1 1578  3 low 1 1557  4 high 1 1557  
474 0 0 4 527 1587 0 0 10 /**
 *
 */ 4 4 this 3 1742  4 axis 1 1578  3 low 1 1557  4 high 1 1557  
475 0 0 7 528 1738 1179 0 9 // Motors 2 4 this 3 1742  4 axis 1 1578  
476 0 0 7 529 1741 1199 0 10 /**
 *
 */ 1 4 this 3 1742  
477 0 0 4 530 1587 0 0 9 // Frames 3 4 this 3 1742  4 ts_a 1 1594  4 ts_b 1 1594  
478 0 0 7 531 1594 0 0 10 /**
 *
 */ 1 4 this 3 1743  
479 0 0 7 532 1594 0 0 10 /**
 *
 */ 1 4 this 3 1743  
480 0 0 7 533 1592 0 0 0 0 
481 0 0 7 535 1747 0 0 10 /**
 *
 */ 1 4 copy 1 1745  
482 0 0 7 535 1747 0 0 215 /**
 * @brief Creates a collision shape suited for terrains from a rectangular image.
 * @details Stores the image's brightness values in a vector Bullet can use, 
 *   while rotating it 90 degrees to the right.
 */ 3 5 image 1 1748  10 max_height 1 1557  2 up 1 1495  
483 0 0 7 535 1747 0 0 311 /**
 * @brief Creates a collision shape suited for terrains from a rectangular texture.
 * @details Alternative constructor intended for use with ShaderTerrainMesh. This will
 *   do bilinear sampling at the corners of all texels. Also works with textures 
 *   that are non-power-of-two and/or rectangular.
 */ 3 3 tex 1 1751  10 max_height 1 1557  2 up 1 1495  
484 0 0 7 536 1747 0 0 0 2 4 this 3 1747  4 copy 1 1745  
485 0 0 4 537 1587 0 0 10 /**
 *
 */ 2 4 this 3 1747  4 flag 1 1582  
486 0 0 7 538 1592 0 0 0 0 
487 0 0 7 548 1753 1242 0 0 0 
488 0 0 7 548 1753 1242 0 0 1 6 param0 0 1754  
489 0 0 7 540 1759 0 0 19 // Collision shapes 2 2 np 1 1757  5 clear 1 1582  
490 0 0 7 541 1761 0 0 17 // Internal names 0 
491 0 0 7 542 1761 0 0 10 /**
 *
 */ 0 
492 0 0 7 543 1764 0 0 19 // Geom vertex data 1 6 format 1 1764  
493 0 0 7 544 1764 0 0 10 /**
 *
 */ 1 6 format 1 1764  
494 0 0 7 545 1687 0 0 13 // Geom utils 3 4 node 1 1679  6 format 1 1764  9 two_sided 1 1582  
495 0 0 7 546 1687 0 0 10 /**
 *
 */ 2 4 node 1 1679  6 format 1 1764  
496 0 0 4 547 1587 0 0 10 /**
 *
 */ 3 4 geom 1 1687  4 resx 1 1578  4 resy 1 1578  
497 0 0 7 551 1765 0 0 342 /**
 * Creates a hinge connecting node_a to node_b.  The pivot point is the point
 * at which the body is fixed to the constraint.  In other words: It specifies
 * where on each body the rotation axis should be.  This axis is specified
 * using axis_a and axis_b.  Remember, everything is specified in the bodies
 * own coordinate system!
 */ 7 6 node_a 1 1643  6 node_b 1 1643  7 pivot_a 1 1674  7 pivot_b 1 1674  6 axis_a 1 1624  6 axis_b 1 1624  11 use_frame_a 1 1582  
498 0 0 7 551 1765 0 0 73 /**
 * Constructs a hinge constraint which connects two rigid bodies.
 */ 5 6 node_a 1 1643  6 node_b 1 1643  4 ts_a 1 1594  4 ts_b 1 1594  11 use_frame_a 1 1582  
499 0 0 7 551 1765 0 0 182 /**
 * Creates a hinge constraint in the same way as the other constructor, but
 * uses the world as second body so that node_a is fixed to some point in mid-
 * air for example.
 */ 4 6 node_a 1 1643  7 pivot_a 1 1674  6 axis_a 1 1624  11 use_frame_a 1 1582  
500 0 0 7 551 1765 0 0 106 /**
 * Creates a hinge constraint which connects one rigid body with some fixe
 * dpoint in the world.
 */ 3 6 node_a 1 1643  4 ts_a 1 1594  11 use_frame_a 1 1582  
501 0 0 6 552 1557 0 0 66 /**
 * Returns the angle between node_a and node_b in degrees.
 */ 1 4 this 3 1765  
502 0 0 6 553 1557 0 0 54 /**
 * Returns the lower angular limit in degrees.
 */ 1 4 this 3 1766  
503 0 0 6 554 1557 0 0 54 /**
 * Returns the upper angular limit in degrees.
 */ 1 4 this 3 1766  
504 0 0 6 555 1582 0 0 10 /**
 *
 */ 1 4 this 3 1766  
505 0 0 4 556 1587 0 0 10 /**
 *
 */ 2 4 this 3 1765  5 value 1 1582  
506 0 0 4 557 1587 0 0 65 /**
 * Sets the lower and upper rotational limits in degrees.
 */ 6 4 this 3 1765  3 low 1 1557  4 high 1 1557  8 softness 1 1557  4 bias 1 1557  10 relaxation 1 1557  
507 0 0 4 558 1587 0 0 63 /**
 * Sets the hinge's rotation axis in world coordinates.
 */ 2 4 this 3 1765  4 axis 1 1624  
508 0 0 4 559 1587 0 0 261 /**
 * Applies an impulse to the constraint so that the angle changes at
 * target_velocity where max_impulse is the maximum impulse that is used for
 * achieving the specified velocity.
 *
 * Note that the target_velocity is in radians/second, not degrees.
 */ 4 4 this 3 1765  6 enable 1 1582  15 target_velocity 1 1557  11 max_impulse 1 1557  
509 0 0 4 560 1587 0 0 10 /**
 *
 */ 2 4 this 3 1765  6 enable 1 1582  
510 0 0 4 561 1587 0 0 96 /**
 * Sets the maximum impulse used to achieve the velocity set in
 * enable_angular_motor.
 */ 2 4 this 3 1765  11 max_impulse 1 1557  
511 0 0 4 562 1587 0 0 10 /**
 *
 */ 3 4 this 3 1765  4 quat 1 1648  2 dt 1 1557  
512 0 0 4 562 1587 0 0 10 /**
 *
 */ 3 4 this 3 1765  12 target_angle 1 1557  2 dt 1 1557  
513 0 0 4 563 1587 0 0 10 /**
 *
 */ 3 4 this 3 1765  4 ts_a 1 1594  4 ts_b 1 1594  
514 0 0 7 564 1594 0 0 10 /**
 *
 */ 1 4 this 3 1766  
515 0 0 7 565 1594 0 0 10 /**
 *
 */ 1 4 this 3 1766  
516 0 0 7 566 1592 0 0 0 0 
517 0 0 7 568 1770 0 0 10 /**
 *
 */ 1 4 copy 1 1768  
518 0 0 7 568 1770 0 0 10 /**
 *
 */ 2 7 shape_a 1 1584  7 shape_b 1 1584  
519 0 0 7 569 1770 0 0 0 2 4 this 3 1770  4 copy 1 1768  
520 0 0 4 570 1587 0 0 10 /**
 *
 */ 2 4 this 3 1770  2 ts 1 1594  
521 0 0 4 571 1587 0 0 10 /**
 *
 */ 2 4 this 3 1770  2 ts 1 1594  
522 0 0 7 572 1594 0 0 10 /**
 *
 */ 1 4 this 3 1768  
523 0 0 7 573 1594 0 0 10 /**
 *
 */ 1 4 this 3 1768  
524 0 0 7 574 1584 0 0 10 /**
 *
 */ 1 4 this 3 1768  
525 0 0 7 575 1584 0 0 10 /**
 *
 */ 1 4 this 3 1768  
526 0 0 6 576 1557 0 0 10 /**
 *
 */ 1 4 this 3 1768  
527 0 0 7 577 1592 0 0 0 0 
528 0 0 7 579 1773 0 0 10 /**
 *
 */ 1 4 copy 1 1771  
529 0 0 7 579 1773 0 0 10 /**
 *
 */ 2 6 points 1 1725  5 radii 1 1774  
530 0 0 7 580 1773 0 0 0 2 4 this 3 1773  4 copy 1 1771  
531 0 0 6 581 1578 0 0 10 /**
 *
 */ 1 4 this 3 1771  
532 0 0 7 582 1574 0 0 10 /**
 *
 */ 2 4 this 3 1771  5 index 1 1578  
533 0 0 6 583 1557 0 0 10 /**
 *
 */ 2 4 this 3 1771  5 index 1 1578  
534 0 0 7 584 1592 0 0 0 0 
535 0 0 7 595 1718 1275 0 0 1 6 param0 0 1779  
536 0 0 7 587 1571 0 0 10 /**
 *
 */ 1 4 this 3 1718  
537 0 0 7 588 1571 0 0 10 /**
 *
 */ 1 4 this 3 1718  
538 0 0 6 589 1578 0 0 10 /**
 *
 */ 1 4 this 3 1779  
539 0 0 6 590 1654 0 0 10 /**
 *
 */ 2 4 this 3 1779  3 idx 1 1578  
540 0 0 6 592 1557 0 0 10 /**
 *
 */ 1 4 this 3 1779  
541 0 0 6 593 1557 0 0 10 /**
 *
 */ 1 4 this 3 1779  
542 0 0 4 594 1587 0 0 10 /**
 *
 */ 1 4 this 3 1718  
543 0 0 7 597 1783 0 0 10 /**
 *
 */ 1 4 copy 1 1781  
544 0 0 7 597 1783 0 0 10 /**
 *
 */ 2 6 normal 1 1624  8 constant 1 1557  
545 0 0 7 598 1783 0 0 0 2 4 this 3 1783  4 copy 1 1781  
546 0 0 7 599 1577 0 0 10 /**
 *
 */ 1 4 this 3 1781  
547 0 0 6 600 1557 0 0 10 /**
 *
 */ 1 4 this 3 1781  
548 0 0 7 601 1783 0 0 10 /**
 *
 */ 1 5 solid 1 1784  
549 0 0 7 602 1592 0 0 0 0 
550 0 0 7 604 1787 0 0 10 /**
 *
 */ 5 6 node_a 1 1643  6 node_b 1 1643  7 frame_a 1 1594  7 frame_b 1 1594  11 use_frame_a 1 1582  
551 0 0 7 604 1787 0 0 10 /**
 *
 */ 3 6 node_a 1 1643  7 frame_a 1 1594  10 useFrame_a 1 1582  
552 0 0 6 605 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
553 0 0 6 606 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
554 0 0 6 607 1557 0 0 9 // Limits 1 4 this 3 1788  
555 0 0 6 608 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
556 0 0 6 609 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
557 0 0 6 610 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
558 0 0 4 611 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  5 value 1 1557  
559 0 0 4 612 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  5 value 1 1557  
560 0 0 4 613 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  5 value 1 1557  
561 0 0 4 614 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  5 value 1 1557  
562 0 0 4 615 1587 0 0 15 // Linear motor 2 4 this 3 1787  2 on 1 1582  
563 0 0 4 616 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  15 target_velocity 1 1557  
564 0 0 4 617 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  9 max_force 1 1557  
565 0 0 6 618 1582 0 0 10 /**
 *
 */ 1 4 this 3 1788  
566 0 0 6 619 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
567 0 0 6 620 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
568 0 0 4 621 1587 0 0 16 // Angular motor 2 4 this 3 1787  2 on 1 1582  
569 0 0 4 622 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  15 target_velocity 1 1557  
570 0 0 4 623 1587 0 0 10 /**
 *
 */ 2 4 this 3 1787  9 max_force 1 1557  
571 0 0 6 624 1582 0 0 10 /**
 *
 */ 1 4 this 3 1788  
572 0 0 6 625 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
573 0 0 6 626 1557 0 0 10 /**
 *
 */ 1 4 this 3 1788  
574 0 0 4 627 1587 0 0 9 // Frames 3 4 this 3 1787  4 ts_a 1 1594  4 ts_b 1 1594  
575 0 0 7 628 1594 0 0 10 /**
 *
 */ 1 4 this 3 1788  
576 0 0 7 629 1594 0 0 10 /**
 *
 */ 1 4 this 3 1788  
577 0 0 7 630 1592 0 0 0 0 
578 0 0 7 688 1680 1317 0 0 1 6 param0 0 1790  
579 0 0 4 635 1587 0 0 10 /**
 *
 */ 1 4 this 3 1680  
580 0 0 4 636 1587 0 0 10 /**
 *
 */ 3 4 this 3 1680  4 flag 1 1550  5 value 1 1582  
581 0 0 6 637 1582 0 0 10 /**
 *
 */ 2 4 this 3 1790  4 flag 1 1550  
582 0 0 4 638 1587 0 0 10 /**
 *
 */ 2 4 this 3 1680  5 value 1 1551  
583 0 0 6 639 1551 0 0 10 /**
 *
 */ 1 4 this 3 1790  
584 0 0 4 640 1587 0 0 36 /**
 * Setter for property kVCF.
 */ 2 4 this 3 1680  5 value 1 1557  
585 0 0 4 641 1587 0 0 35 /**
 * Setter for property kDP.
 */ 2 4 this 3 1680  5 value 1 1557  
586 0 0 4 642 1587 0 0 35 /**
 * Setter for property kDG.
 */ 2 4 this 3 1680  5 value 1 1557  
587 0 0 4 643 1587 0 0 35 /**
 * Setter for property kLF.
 */ 2 4 this 3 1680  5 value 1 1557  
588 0 0 4 644 1587 0 0 35 /**
 * Setter for property kPR.
 */ 2 4 this 3 1680  5 value 1 1557  
589 0 0 4 645 1587 0 0 35 /**
 * Setter for property kVC.
 */ 2 4 this 3 1680  5 value 1 1557  
590 0 0 4 646 1587 0 0 35 /**
 * Setter for property kDF.
 */ 2 4 this 3 1680  5 value 1 1557  
591 0 0 4 647 1587 0 0 35 /**
 * Setter for property kMT.
 */ 2 4 this 3 1680  5 value 1 1557  
592 0 0 4 648 1587 0 0 36 /**
 * Setter for property kCHR.
 */ 2 4 this 3 1680  5 value 1 1557  
593 0 0 4 649 1587 0 0 36 /**
 * Setter for property kKHR.
 */ 2 4 this 3 1680  5 value 1 1557  
594 0 0 4 650 1587 0 0 36 /**
 * Setter for property kSHR.
 */ 2 4 this 3 1680  5 value 1 1557  
595 0 0 4 651 1587 0 0 36 /**
 * Setter for property kAHR.
 */ 2 4 this 3 1680  5 value 1 1557  
596 0 0 4 652 1587 0 0 40 /**
 * Setter for property kSRHR_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
597 0 0 4 653 1587 0 0 40 /**
 * Setter for property kSKHR_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
598 0 0 4 654 1587 0 0 40 /**
 * Setter for property kSSHR_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
599 0 0 4 655 1587 0 0 43 /**
 * Setter for property kSR_SPLT_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
600 0 0 4 656 1587 0 0 43 /**
 * Setter for property kSK_SPLT_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
601 0 0 4 657 1587 0 0 43 /**
 * Setter for property kSS_SPLT_CL.
 */ 2 4 this 3 1680  5 value 1 1557  
602 0 0 4 658 1587 0 0 41 /**
 * Setter for property maxvolume.
 */ 2 4 this 3 1680  5 value 1 1557  
603 0 0 4 659 1587 0 0 41 /**
 * Setter for property timescale.
 */ 2 4 this 3 1680  5 value 1 1557  
604 0 0 4 660 1587 0 0 43 /**
 * Setter for property piterations.
 */ 2 4 this 3 1680  5 value 1 1578  
605 0 0 4 661 1587 0 0 43 /**
 * Setter for property viterations.
 */ 2 4 this 3 1680  5 value 1 1578  
606 0 0 4 662 1587 0 0 43 /**
 * Setter for property diterations.
 */ 2 4 this 3 1680  5 value 1 1578  
607 0 0 4 663 1587 0 0 43 /**
 * Setter for property citerations.
 */ 2 4 this 3 1680  5 value 1 1578  
608 0 0 6 664 1557 0 0 36 /**
 * Getter for property kVCF.
 */ 1 4 this 3 1790  
609 0 0 6 665 1557 0 0 35 /**
 * Getter for property kDP.
 */ 1 4 this 3 1790  
610 0 0 6 666 1557 0 0 35 /**
 * Getter for property kDG.
 */ 1 4 this 3 1790  
611 0 0 6 667 1557 0 0 35 /**
 * Getter for property kLF.
 */ 1 4 this 3 1790  
612 0 0 6 668 1557 0 0 35 /**
 * Getter for property kPR.
 */ 1 4 this 3 1790  
613 0 0 6 669 1557 0 0 35 /**
 * Getter for property kVC.
 */ 1 4 this 3 1790  
614 0 0 6 670 1557 0 0 35 /**
 * Getter for property kDF.
 */ 1 4 this 3 1790  
615 0 0 6 671 1557 0 0 35 /**
 * Getter for property kMT.
 */ 1 4 this 3 1790  
616 0 0 6 672 1557 0 0 36 /**
 * Getter for property kCHR.
 */ 1 4 this 3 1790  
617 0 0 6 673 1557 0 0 36 /**
 * Getter for property kKHR.
 */ 1 4 this 3 1790  
618 0 0 6 674 1557 0 0 36 /**
 * Getter for property kSHR.
 */ 1 4 this 3 1790  
619 0 0 6 675 1557 0 0 36 /**
 * Getter for property kAHR.
 */ 1 4 this 3 1790  
620 0 0 6 676 1557 0 0 40 /**
 * Getter for property kSRHR_CL.
 */ 1 4 this 3 1790  
621 0 0 6 677 1557 0 0 40 /**
 * Getter for property kSKHR_CL.
 */ 1 4 this 3 1790  
622 0 0 6 678 1557 0 0 40 /**
 * Getter for property kSSHR_CL.
 */ 1 4 this 3 1790  
623 0 0 6 679 1557 0 0 43 /**
 * Getter for property kSR_SPLT_CL.
 */ 1 4 this 3 1790  
624 0 0 6 680 1557 0 0 43 /**
 * Getter for property kSK_SPLT_CL.
 */ 1 4 this 3 1790  
625 0 0 6 681 1557 0 0 43 /**
 * Getter for property kSS_SPLT_CL.
 */ 1 4 this 3 1790  
626 0 0 6 682 1557 0 0 41 /**
 * Getter for property maxvolume.
 */ 1 4 this 3 1790  
627 0 0 6 683 1557 0 0 41 /**
 * Getter for property timescale.
 */ 1 4 this 3 1790  
628 0 0 6 684 1578 0 0 43 /**
 * Getter for property piterations.
 */ 1 4 this 3 1790  
629 0 0 6 685 1578 0 0 43 /**
 * Getter for property viterations.
 */ 1 4 this 3 1790  
630 0 0 6 686 1578 0 0 43 /**
 * Getter for property diterations.
 */ 1 4 this 3 1790  
631 0 0 6 687 1578 0 0 43 /**
 * Getter for property citerations.
 */ 1 4 this 3 1790  
632 0 0 7 695 1693 1375 0 10 /**
 *
 */ 0 
633 0 0 4 697 1587 0 0 10 /**
 *
 */ 2 4 this 3 1693  4 goal 1 1557  
634 0 0 4 698 1587 0 0 10 /**
 *
 */ 2 4 this 3 1693  9 maxtorque 1 1557  
635 0 0 4 699 1587 0 0 10 /**
 *
 */ 2 4 this 3 1693  5 angle 1 1557  
636 0 0 4 700 1587 0 0 10 /**
 *
 */ 2 4 this 3 1693  4 sign 1 1557  
637 0 0 6 693 1792 0 0 0 1 4 this 3 1693  
638 0 0 6 694 1693 0 0 0 2 4 this 3 1792  4 this 1 1792  
639 0 0 7 715 1682 1380 0 0 1 6 param0 0 1793  
640 0 0 7 703 1682 1380 0 102 /**
 * Named constructor intended to be used for asserts which have to return a
 * concrete value.
 */ 0 
641 0 0 4 704 1587 0 0 42 /**
 * Setter for the property m_kLST.
 */ 2 4 this 3 1682  5 value 1 1557  
642 0 0 6 705 1557 0 0 42 /**
 * Getter for the property m_kLST.
 */ 1 4 this 3 1793  
643 0 0 4 709 1587 0 0 42 /**
 * Setter for the property m_kAST.
 */ 2 4 this 3 1682  5 value 1 1557  
644 0 0 6 710 1557 0 0 42 /**
 * Getter for the property m_kAST.
 */ 1 4 this 3 1793  
645 0 0 4 712 1587 0 0 42 /**
 * Setter for the property m_kVST.
 */ 2 4 this 3 1682  5 value 1 1557  
646 0 0 6 713 1557 0 0 42 /**
 * Getter for the property m_kVST.
 */ 1 4 this 3 1793  
647 0 0 7 717 1679 0 0 10 /**
 *
 */ 1 4 this 3 1795  
648 0 0 7 718 1592 0 0 0 0 
649 0 0 7 732 1681 1391 0 0 1 6 param0 0 1797  
650 0 0 4 721 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 density 1 1557  
651 0 0 4 722 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 density 1 1557  
652 0 0 4 723 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  6 offset 1 1557  
653 0 0 4 724 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  6 normal 1 1624  
654 0 0 4 725 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  7 gravity 1 1624  
655 0 0 6 726 1557 0 0 10 /**
 *
 */ 1 4 this 3 1797  
656 0 0 6 727 1557 0 0 10 /**
 *
 */ 1 4 this 3 1797  
657 0 0 6 728 1557 0 0 10 /**
 *
 */ 1 4 this 3 1797  
658 0 0 7 729 1577 0 0 10 /**
 *
 */ 1 4 this 3 1797  
659 0 0 7 730 1577 0 0 10 /**
 *
 */ 1 4 this 3 1797  
660 0 0 4 731 1587 0 0 10 /**
 *
 */ 2 4 this 3 1681  8 lifetime 1 1578  
661 0 0 7 734 1801 0 0 10 /**
 *
 */ 1 4 copy 1 1799  
662 0 0 7 734 1801 0 0 10 /**
 *
 */ 1 6 radius 1 1557  
663 0 0 7 735 1801 0 0 0 2 4 this 3 1801  4 copy 1 1799  
664 0 0 6 736 1557 0 0 10 /**
 *
 */ 1 4 this 3 1799  
665 0 0 7 737 1801 0 0 10 /**
 *
 */ 1 5 solid 1 1802  
666 0 0 7 738 1592 0 0 0 0 
667 0 0 7 740 1805 0 0 10 /**
 *
 */ 4 6 node_a 1 1643  6 node_b 1 1643  7 pivot_a 1 1674  7 pivot_b 1 1674  
668 0 0 7 740 1805 0 0 10 /**
 *
 */ 2 6 node_a 1 1643  7 pivot_a 1 1674  
669 0 0 4 741 1587 0 0 9 // Pivots 2 4 this 3 1805  7 pivot_a 1 1674  
670 0 0 4 742 1587 0 0 10 /**
 *
 */ 2 4 this 3 1805  7 pivot_b 1 1674  
671 0 0 7 743 1574 0 0 10 /**
 *
 */ 1 4 this 3 1806  
672 0 0 7 744 1574 0 0 10 /**
 *
 */ 1 4 this 3 1806  
673 0 0 7 745 1592 0 0 0 0 
674 0 0 7 747 1810 0 0 10 /**
 *
 */ 1 8 timestep 1 1808  
675 0 0 6 748 1557 0 0 10 /**
 *
 */ 1 4 this 3 1811  
676 0 0 7 749 1592 0 0 0 0 
677 0 0 7 751 1813 0 0 10 /**
 *
 */ 0 
678 0 0 7 751 1813 0 0 0 1 6 param0 0 1814  
679 0 0 4 752 1587 0 0 10 /**
 *
 */ 5 4 this 3 1813  2 p0 1 1674  2 p1 1 1674  2 p2 1 1674  25 remove_duplicate_vertices 1 1582  
680 0 0 4 753 1587 0 0 10 /**
 *
 */ 4 4 this 3 1813  6 points 1 1725  7 indices 1 1816  25 remove_duplicate_vertices 1 1582  
681 0 0 4 754 1587 0 0 10 /**
 *
 */ 4 4 this 3 1813  4 geom 1 1694  25 remove_duplicate_vertices 1 1582  2 ts 1 1594  
682 0 0 4 755 1587 0 0 10 /**
 *
 */ 2 4 this 3 1813  8 distance 1 1557  
683 0 0 4 756 1587 0 0 10 /**
 *
 */ 3 4 this 3 1813  9 num_verts 1 1578  11 num_indices 1 1578  
684 0 0 6 757 1578 0 0 10 /**
 *
 */ 1 4 this 3 1814  
685 0 0 6 758 1557 0 0 10 /**
 *
 */ 1 4 this 3 1814  
686 0 0 4 759 1587 0 0 10 /**
 *
 */ 2 4 this 3 1814  3 out 1 1818  
687 0 0 4 760 1587 0 0 10 /**
 *
 */ 3 4 this 3 1814  3 out 1 1818  12 indent_level 1 1578  
688 0 0 7 761 1592 0 0 0 0 
689 0 0 7 763 1820 0 0 93 /**
 * The parameters 'compress' and 'bvh' are only used if 'dynamic' is set to
 * FALSE.
 */ 4 4 mesh 1 1813  7 dynamic 1 1582  8 compress 1 1582  3 bvh 1 1582  
690 0 0 7 763 1820 0 0 10 /**
 *
 */ 1 4 copy 1 1821  
691 0 0 7 764 1820 0 0 0 2 4 this 3 1820  4 copy 1 1821  
692 0 0 4 765 1587 0 0 10 /**
 *
 */ 3 4 this 3 1820  8 aabb_min 1 1674  8 aabb_max 1 1674  
693 0 0 6 766 1582 0 0 10 /**
 *
 */ 1 4 this 3 1821  
694 0 0 6 767 1582 0 0 10 /**
 *
 */ 1 4 this 3 1821  
695 0 0 7 768 1592 0 0 0 0 
696 0 0 7 779 1825 1435 0 0 1 6 param0 0 1823  
697 0 0 6 771 1582 0 0 10 /**
 *
 */ 1 4 this 3 1823  
698 0 0 6 772 1557 0 0 10 /**
 *
 */ 1 4 this 3 1823  
699 0 0 7 773 1577 0 0 10 /**
 *
 */ 1 4 this 3 1823  
700 0 0 7 774 1577 0 0 10 /**
 *
 */ 1 4 this 3 1823  
701 0 0 7 775 1577 0 0 10 /**
 *
 */ 1 4 this 3 1823  
702 0 0 7 776 1574 0 0 10 /**
 *
 */ 1 4 this 3 1823  
703 0 0 7 777 1574 0 0 10 /**
 *
 */ 1 4 this 3 1823  
704 0 0 7 778 1571 0 0 10 /**
 *
 */ 1 4 this 3 1823  
705 0 0 7 830 1710 1445 0 0 1 6 param0 0 1826  
706 0 0 4 782 1587 0 0 50 /**
 * Sets how stiff the suspension shall be.
 */ 2 4 this 3 1710  5 value 1 1557  
707 0 0 4 783 1587 0 0 109 /**
 * Sets the maximum distance the suspension can travel out of the resting
 * position in centimeters.
 */ 2 4 this 3 1710  5 value 1 1557  
708 0 0 4 784 1587 0 0 45 /**
 * Sets the slipperyness of the tyre.
 */ 2 4 this 3 1710  5 value 1 1557  
709 0 0 4 785 1587 0 0 66 /**
 * Sets the maximum suspension force the wheel can handle.
 */ 2 4 this 3 1710  5 value 1 1557  
710 0 0 4 786 1587 0 0 79 /**
 * Sets the damping forces applied when the suspension gets compressed.
 */ 2 4 this 3 1710  5 value 1 1557  
711 0 0 4 787 1587 0 0 71 /**
 * Sets the damping forces applied when the suspension relaxes.
 */ 2 4 this 3 1710  5 value 1 1557  
712 0 0 4 788 1587 0 0 249 /**
 * Defines a scaling factor for roll forces that affect the chassis.  0.0
 * means no roll - the chassis won't ever flip over - while 1.0 means original
 * physical behaviour.  Basically, this allows moving the center of mass up
 * and down.
 */ 2 4 this 3 1710  5 value 1 1557  
713 0 0 4 789 1587 0 0 33 /**
 * Sets the wheel radius.
 */ 2 4 this 3 1710  5 value 1 1557  
714 0 0 4 790 1587 0 0 35 /**
 * Sets the steering angle.
 */ 2 4 this 3 1710  5 value 1 1557  
715 0 0 4 791 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
716 0 0 4 792 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
717 0 0 4 793 1587 0 0 69 /**
 * Defines how much force should be used to rotate the wheel.
 */ 2 4 this 3 1710  5 value 1 1557  
718 0 0 4 794 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
719 0 0 4 795 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
720 0 0 4 796 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
721 0 0 4 797 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
722 0 0 4 798 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  5 value 1 1557  
723 0 0 4 799 1587 0 0 70 /**
 * Sets the point where the wheel is connected to the chassis.
 */ 2 4 this 3 1710  3 pos 1 1674  
724 0 0 4 800 1587 0 0 92 /**
 * Sets the wheel's forward vector.  (Most likely orthogonal to the axle
 * vector.)
 */ 2 4 this 3 1710  3 dir 1 1624  
725 0 0 4 801 1587 0 0 51 /**
 * Determines the wheel axle normal vector.
 */ 2 4 this 3 1710  4 axle 1 1624  
726 0 0 4 802 1587 0 0 10 /**
 *
 */ 2 4 this 3 1710  3 mat 1 1828  
727 0 0 4 803 1587 0 0 42 /**
 * Sets if the wheel is steerable.
 */ 2 4 this 3 1710  5 value 1 1582  
728 0 0 4 804 1587 0 0 86 /**
 * Sets the PandaNode which representates the visual appearance of this wheel.
 */ 2 4 this 3 1710  4 node 1 1571  
729 0 0 6 805 1557 0 0 83 /**
 * Returns the length of the suspension when the vehicle is standing still.
 */ 1 4 this 3 1826  
730 0 0 6 806 1557 0 0 51 /**
 * Returns the stiffness of the suspension.
 */ 1 4 this 3 1826  
731 0 0 6 807 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
732 0 0 6 808 1557 0 0 46 /**
 * Returns how slippery the tyres are.
 */ 1 4 this 3 1826  
733 0 0 6 809 1557 0 0 72 /**
 * Returns the maximum force (weight) the suspension can handle.
 */ 1 4 this 3 1826  
734 0 0 6 810 1557 0 0 70 /**
 * Returns the  damping applied to the compressing suspension.
 */ 1 4 this 3 1826  
735 0 0 6 811 1557 0 0 66 /**
 * Returns the damping applied to the relaxing suspension.
 */ 1 4 this 3 1826  
736 0 0 6 812 1557 0 0 90 /**
 * Returns the factor by which roll forces are scaled.  See
 * set_roll_influence.
 */ 1 4 this 3 1826  
737 0 0 6 813 1557 0 0 36 /**
 * Returns the wheel radius.
 */ 1 4 this 3 1826  
738 0 0 6 814 1557 0 0 49 /**
 * Returns the steering angle in degrees.
 */ 1 4 this 3 1826  
739 0 0 6 815 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
740 0 0 6 816 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
741 0 0 6 817 1557 0 0 71 /**
 * Returns the amount of accelleration force currently applied.
 */ 1 4 this 3 1826  
742 0 0 6 818 1557 0 0 65 /**
 * Returns the amount of braking force currently applied.
 */ 1 4 this 3 1826  
743 0 0 6 819 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
744 0 0 6 820 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
745 0 0 6 821 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
746 0 0 6 822 1557 0 0 10 /**
 *
 */ 1 4 this 3 1826  
747 0 0 7 823 1574 0 0 73 /**
 * Returns the point where the wheel is connected to the chassis.
 */ 1 4 this 3 1826  
748 0 0 7 824 1577 0 0 70 /**
 * Returns the wheel's forward vector relative to the chassis.
 */ 1 4 this 3 1826  
749 0 0 7 825 1577 0 0 55 /**
 * Returns the normal vector of the wheel axle.
 */ 1 4 this 3 1826  
750 0 0 7 826 1601 0 0 10 /**
 *
 */ 1 4 this 3 1826  
751 0 0 6 827 1582 0 0 46 /**
 * Determines if a wheel is steerable.
 */ 1 4 this 3 1826  
752 0 0 7 828 1571 0 0 142 /**
 * Returns the PandaNode which representates the visual appearance of this
 * wheel, if such a representation has been set previously.
 */ 1 4 this 3 1826  
753 0 0 7 829 1825 1435 0 10 /**
 *
 */ 1 4 this 3 1826  
754 0 0 6 2 1495 0 0 10 /**
 *
 */ 0 
755 0 0 6 3 1578 0 0 60 /**
 * Returns the version of the linked Bullet library.
 */ 0 
335
1495 12 BulletUpAxis 0 532481 12 BulletUpAxis 12 BulletUpAxis 0 0 0 0 0 0 0 0 0 0 3 4 X_up 4 X_up 0
0 4 Y_up 4 Y_up 0
1 4 Z_up 4 Z_up 0
2 0 0

1496 12 BulletRayHit 0 9217 12 BulletRayHit 12 BulletRayHit 0 0 0 0 0 0 7 758 759 760 761 762 763 764 0 0 0 0 0 10
/**
 *
 */

1497 22 BulletAllHitsRayResult 0 140289 22 BulletAllHitsRayResult 22 BulletAllHitsRayResult 0 0 0 0 774 0 7 767 768 769 770 771 772 773 1 1833 0 1 3 1498 765 766 0 0 10
/**
 *
 */

1498 24 AllHitsRayResultCallback 0 263169 42 btCollisionWorld::AllHitsRayResultCallback 42 btCollisionWorld::AllHitsRayResultCallback 1499 0 0 0 0 0 0 0 0 0 0 0 0

1499 16 btCollisionWorld 0 2048 16 btCollisionWorld 16 btCollisionWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1500 11 BulletShape 0 75777 11 BulletShape 11 BulletShape 0 0 0 0 0 0 12 775 776 777 778 779 780 781 782 783 784 785 786 0 0 1 0 1501 0 0 0 0 10
/**
 *
 */

1501 27 TypedWritableReferenceCount 0 2049 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1502 33 BulletBaseCharacterControllerNode 0 141313 33 BulletBaseCharacterControllerNode 33 BulletBaseCharacterControllerNode 0 0 0 0 788 0 1 787 0 0 1 0 1503 0 0 0 0 10
/**
 *
 */

1503 9 PandaNode 0 2049 9 PandaNode 9 PandaNode 0 0 0 0 0 0 0 0 0 0 0 0 175
/**
 * A basic node of the scene graph or data graph.  This is the base class of
 * all specialized nodes, and also serves as a generic node with no special
 * properties.
 */

1504 14 BulletBodyNode 0 75777 14 BulletBodyNode 14 BulletBodyNode 0 0 0 0 0 0 43 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 1 1834 0 1 0 1503 0 0 0 0 10
/**
 *
 */

1505 14 BulletBoxShape 0 75777 14 BulletBoxShape 14 BulletBoxShape 0 0 0 1 832 0 0 5 833 834 835 836 837 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1506 18 BulletCapsuleShape 0 75777 18 BulletCapsuleShape 18 BulletCapsuleShape 0 0 0 1 838 0 0 4 839 840 841 842 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1507 29 BulletCharacterControllerNode 0 75777 29 BulletCharacterControllerNode 29 BulletCharacterControllerNode 0 0 0 1 843 788 0 15 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 0 0 1 0 1502 0 0 0 0 10
/**
 *
 */

1508 25 BulletClosestHitRayResult 0 140289 25 BulletClosestHitRayResult 25 BulletClosestHitRayResult 0 0 0 1 871 872 0 10 861 862 863 864 865 866 867 868 869 870 0 0 1 3 1509 859 860 0 0 10
/**
 *
 */

1509 24 ClosestRayResultCallback 0 263169 42 btCollisionWorld::ClosestRayResultCallback 42 btCollisionWorld::ClosestRayResultCallback 1499 0 0 0 0 0 0 0 0 0 0 0 0

1510 27 BulletClosestHitSweepResult 0 140289 27 BulletClosestHitSweepResult 27 BulletClosestHitSweepResult 0 0 0 1 883 884 0 8 875 876 877 878 879 880 881 882 0 0 1 3 1511 873 874 0 0 10
/**
 *
 */

1511 27 ClosestConvexResultCallback 0 263169 45 btCollisionWorld::ClosestConvexResultCallback 45 btCollisionWorld::ClosestConvexResultCallback 1499 0 0 0 0 0 0 0 0 0 0 0 0

1512 15 BulletConeShape 0 75777 15 BulletConeShape 15 BulletConeShape 0 0 0 1 885 0 0 4 886 887 888 889 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1513 16 BulletConstraint 0 75777 16 BulletConstraint 16 BulletConstraint 0 0 0 0 0 0 12 890 891 892 893 894 895 896 897 898 899 900 901 0 0 1 0 1514 0 0 0 1 1515 10
/**
 *
 */

1514 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1515 15 ConstraintParam 0 794624 33 BulletConstraint::ConstraintParam 33 BulletConstraint::ConstraintParam 1513 0 0 0 0 0 0 0 0 0 4 6 CP_erp 24 BulletConstraint::CP_erp 0
1 11 CP_stop_erp 29 BulletConstraint::CP_stop_erp 0
2 6 CP_cfm 24 BulletConstraint::CP_cfm 0
3 11 CP_stop_cfm 29 BulletConstraint::CP_stop_cfm 0
4 0 0

1516 25 BulletConeTwistConstraint 0 75777 25 BulletConeTwistConstraint 25 BulletConeTwistConstraint 0 0 0 1 902 0 0 13 903 904 905 906 907 908 909 910 911 912 913 914 915 0 0 1 0 1513 0 0 0 0 10
/**
 *
 */

1517 19 BulletManifoldPoint 0 26625 19 BulletManifoldPoint 19 BulletManifoldPoint 0 0 0 0 916 0 35 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 0 0 0 0 0 10
/**
 *
 */

1518 25 BulletContactCallbackData 0 10241 25 BulletContactCallbackData 25 BulletContactCallbackData 0 0 0 1 952 0 0 8 953 954 955 956 957 958 959 960 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1519 12 CallbackData 0 2049 12 CallbackData 12 CallbackData 0 0 0 0 0 0 0 0 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1520 13 BulletContact 0 140289 13 BulletContact 13 BulletContact 0 0 0 0 968 0 7 961 962 963 964 965 966 967 0 0 0 0 0 10
/**
 *
 */

1521 19 BulletContactResult 0 140289 19 BulletContactResult 19 BulletContactResult 0 0 0 0 973 0 2 971 972 1 1835 0 1 3 1522 969 970 0 0 10
/**
 *
 */

1522 21 ContactResultCallback 0 263169 39 btCollisionWorld::ContactResultCallback 39 btCollisionWorld::ContactResultCallback 1499 0 0 0 0 0 0 0 0 0 0 0 0

1523 15 BulletDebugNode 0 75777 15 BulletDebugNode 15 BulletDebugNode 0 0 0 1 974 0 0 6 975 976 977 978 979 980 0 0 1 0 1524 0 0 0 0 10
/**
 *
 */

1524 8 GeomNode 0 2049 8 GeomNode 8 GeomNode 0 0 0 0 0 0 0 0 0 0 0 0 208
/**
 * A node that holds Geom objects, renderable pieces of geometry.  This is the
 * primary kind of leaf node in the scene graph; almost all visible objects
 * will be contained in a GeomNode somewhere.
 */

1525 15 BulletGhostNode 0 75777 15 BulletGhostNode 15 BulletGhostNode 0 0 0 1 981 0 0 3 982 983 984 1 1836 0 1 0 1504 0 0 0 0 10
/**
 *
 */

1526 19 BulletRigidBodyNode 0 75777 19 BulletRigidBodyNode 19 BulletRigidBodyNode 0 0 0 1 985 0 0 36 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 0 0 1 0 1504 0 0 0 0 10
/**
 *
 */

1527 25 BulletSoftBodyNodeElement 0 26625 25 BulletSoftBodyNodeElement 25 BulletSoftBodyNodeElement 0 0 0 1 1030 1022 0 7 1023 1024 1025 1026 1027 1028 1029 0 0 0 0 0 10
/**
 *
 */

1528 18 BulletSoftBodyNode 0 75777 18 BulletSoftBodyNode 18 BulletSoftBodyNode 0 0 0 0 0 0 45 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 2 1837 1838 0 1 0 1504 0 0 0 0 10
/**
 *
 */

1529 19 BulletVehicleTuning 0 10241 19 BulletVehicleTuning 19 BulletVehicleTuning 0 0 0 0 0 0 12 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 0 0 0 0 0 10
/**
 *
 */

1530 13 BulletVehicle 0 75777 13 BulletVehicle 13 BulletVehicle 0 0 0 1 1088 0 0 15 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1 1839 0 1 0 1514 0 0 0 0 257
/**
 * Simulates a raycast vehicle which casts a ray per wheel at the ground as a
 * cheap replacement for complex suspension simulation.  The suspension can be
 * tuned in various ways.  It is possible to add a (probably) arbitrary number
 * of wheels.
 */

1531 11 BulletWorld 0 75777 11 BulletWorld 11 BulletWorld 0 0 0 1 1104 0 0 50 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 7 1840 1841 1842 1843 1844 1845 1846 0 1 0 1514 0 0 0 2 1532 1533 10
/**
 *
 */

1532 19 BroadphaseAlgorithm 0 794624 32 BulletWorld::BroadphaseAlgorithm 32 BulletWorld::BroadphaseAlgorithm 1531 0 0 0 0 0 0 0 0 0 2 18 BA_sweep_and_prune 31 BulletWorld::BA_sweep_and_prune 0
0 20 BA_dynamic_aabb_tree 33 BulletWorld::BA_dynamic_aabb_tree 0
1 0 16
// Configuration

1533 15 FilterAlgorithm 0 794624 28 BulletWorld::FilterAlgorithm 28 BulletWorld::FilterAlgorithm 1531 0 0 0 0 0 0 0 0 0 3 7 FA_mask 20 BulletWorld::FA_mask 0
0 14 FA_groups_mask 27 BulletWorld::FA_groups_mask 0
1 11 FA_callback 24 BulletWorld::FA_callback 0
2 0 0

1534 21 BulletConvexHullShape 0 75777 21 BulletConvexHullShape 21 BulletConvexHullShape 0 0 0 1 1155 0 0 5 1156 1157 1158 1159 1160 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1535 27 BulletConvexPointCloudShape 0 75777 27 BulletConvexPointCloudShape 27 BulletConvexPointCloudShape 0 0 0 1 1161 0 0 3 1162 1163 1164 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1536 19 BulletCylinderShape 0 75777 19 BulletCylinderShape 19 BulletCylinderShape 0 0 0 1 1165 0 0 5 1166 1167 1168 1169 1170 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1537 24 BulletFilterCallbackData 0 141313 24 BulletFilterCallbackData 24 BulletFilterCallbackData 0 0 0 1 1171 1177 0 5 1172 1173 1174 1175 1176 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1538 26 BulletRotationalLimitMotor 0 26625 26 BulletRotationalLimitMotor 26 BulletRotationalLimitMotor 0 0 0 1 1178 1179 0 18 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1539 29 BulletTranslationalLimitMotor 0 26625 29 BulletTranslationalLimitMotor 29 BulletTranslationalLimitMotor 0 0 0 1 1198 1199 0 17 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 0 0 0 0 0 55
/**
 * Rotation Limit structure for generic joints.
 */

1540 23 BulletGenericConstraint 0 75777 23 BulletGenericConstraint 23 BulletGenericConstraint 0 0 0 1 1217 0 0 11 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 0 0 1 0 1513 0 0 0 0 10
/**
 *
 */

1541 22 BulletHeightfieldShape 0 75777 22 BulletHeightfieldShape 22 BulletHeightfieldShape 0 0 0 1 1229 0 0 3 1230 1231 1232 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1542 12 BulletHelper 0 141313 12 BulletHelper 12 BulletHelper 0 0 0 1 1241 1242 0 8 1233 1234 1235 1236 1237 1238 1239 1240 0 0 0 0 0 10
/**
 *
 */

1543 21 BulletHingeConstraint 0 75777 21 BulletHingeConstraint 21 BulletHingeConstraint 0 0 0 1 1243 0 0 15 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 0 0 1 0 1513 0 0 0 0 158
/**
 * The hinge constraint lets two bodies rotate around a given axis while
 * adhering to specified limits.  It's motor can apply angular force to them.
 */

1544 23 BulletMinkowskiSumShape 0 75777 23 BulletMinkowskiSumShape 23 BulletMinkowskiSumShape 0 0 0 1 1259 0 0 9 1260 1261 1262 1263 1264 1265 1266 1267 1268 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1545 22 BulletMultiSphereShape 0 75777 22 BulletMultiSphereShape 22 BulletMultiSphereShape 0 0 0 1 1269 0 0 5 1270 1271 1272 1273 1274 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1546 24 BulletPersistentManifold 0 26625 24 BulletPersistentManifold 24 BulletPersistentManifold 0 0 0 1 1283 1275 0 7 1276 1277 1278 1279 1280 1281 1282 1 1847 0 0 0 0 10
/**
 *
 */

1547 16 BulletPlaneShape 0 75777 16 BulletPlaneShape 16 BulletPlaneShape 0 0 0 1 1284 0 0 5 1285 1286 1287 1288 1289 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1548 22 BulletSliderConstraint 0 75777 22 BulletSliderConstraint 22 BulletSliderConstraint 0 0 0 1 1290 0 0 26 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 0 0 1 0 1513 0 0 0 0 10
/**
 *
 */

1549 20 BulletSoftBodyConfig 0 26625 20 BulletSoftBodyConfig 20 BulletSoftBodyConfig 0 0 0 1 1371 1317 0 53 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 0 0 0 0 2 1550 1551 10
/**
 *
 */

1550 13 CollisionFlag 0 794624 35 BulletSoftBodyConfig::CollisionFlag 35 BulletSoftBodyConfig::CollisionFlag 1549 0 0 0 0 0 0 0 0 0 7 21 CF_rigid_vs_soft_mask 43 BulletSoftBodyConfig::CF_rigid_vs_soft_mask 34
// RVSmask: Rigid versus soft mask
15 17 CF_sdf_rigid_soft 39 BulletSoftBodyConfig::CF_sdf_rigid_soft 35
// SDF_RS:  SDF based rigid vs soft
1 21 CF_cluster_rigid_soft 43 BulletSoftBodyConfig::CF_cluster_rigid_soft 43
// CL_RS:   Cluster vs convex rigid vs soft
2 20 CF_soft_vs_soft_mask 42 BulletSoftBodyConfig::CF_soft_vs_soft_mask 33
// SVSmask: Soft versus soft mask
48 24 CF_vertex_face_soft_soft 46 BulletSoftBodyConfig::CF_vertex_face_soft_soft 48
// VF_SS:   Vertex vs face soft vs soft handling
16 20 CF_cluster_soft_soft 42 BulletSoftBodyConfig::CF_cluster_soft_soft 52
// CL_SS:   Cluster vs cluster soft vs soft handling
32 15 CF_cluster_self 37 BulletSoftBodyConfig::CF_cluster_self 44
// CL_SELF: Cluster soft body self collision
64 0 0

1551 9 AeroModel 0 794624 31 BulletSoftBodyConfig::AeroModel 31 BulletSoftBodyConfig::AeroModel 1549 0 0 0 0 0 0 0 0 0 5 15 AM_vertex_point 37 BulletSoftBodyConfig::AM_vertex_point 58
// V_Point:    Vertex normals are oriented toward velocity
0 19 AM_vertex_two_sided 41 BulletSoftBodyConfig::AM_vertex_two_sided 58
// V_TwoSided: Vertex normals are fliped to match velocity
1 19 AM_vertex_one_sided 41 BulletSoftBodyConfig::AM_vertex_one_sided 48
// V_OneSided: Vertex normals are taken as it is
2 17 AM_face_two_sided 39 BulletSoftBodyConfig::AM_face_two_sided 56
// F_TwoSided: Face normals are fliped to match velocity
3 17 AM_face_one_sided 39 BulletSoftBodyConfig::AM_face_one_sided 46
// F_OneSided: Face normals are taken as it is
4 0 0

1552 21 BulletSoftBodyControl 0 26625 21 BulletSoftBodyControl 21 BulletSoftBodyControl 0 0 0 1 1374 1375 0 4 1376 1377 1378 1379 0 0 1 3 1553 1372 1373 0 0 10
/**
 *
 */

1553 8 IControl 0 263169 28 btSoftBody::AJoint::IControl 28 btSoftBody::AJoint::IControl 1554 0 0 0 0 0 0 0 0 0 0 0 0

1554 6 AJoint 0 263168 18 btSoftBody::AJoint 18 btSoftBody::AJoint 1555 0 0 0 0 0 0 0 0 0 0 0 0

1555 10 btSoftBody 0 2048 10 btSoftBody 10 btSoftBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1556 22 BulletSoftBodyMaterial 0 26625 22 BulletSoftBodyMaterial 22 BulletSoftBodyMaterial 0 0 0 1 1388 1380 3 1830 1831 1832 7 1381 1382 1383 1384 1385 1386 1387 0 0 0 0 0 10
/**
 *
 */

1557 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1558 0 0 0 0 0 0 0 0 0 0

1558 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1559 19 BulletSoftBodyShape 0 75777 19 BulletSoftBodyShape 19 BulletSoftBodyShape 0 0 0 0 0 0 2 1389 1390 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1560 23 BulletSoftBodyWorldInfo 0 26625 23 BulletSoftBodyWorldInfo 23 BulletSoftBodyWorldInfo 0 0 0 1 1403 1391 0 11 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 0 0 0 0 0 10
/**
 *
 */

1561 17 BulletSphereShape 0 75777 17 BulletSphereShape 17 BulletSphereShape 0 0 0 1 1404 0 0 4 1405 1406 1407 1408 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1562 25 BulletSphericalConstraint 0 75777 25 BulletSphericalConstraint 25 BulletSphericalConstraint 0 0 0 1 1409 0 0 5 1410 1411 1412 1413 1414 0 0 1 0 1513 0 0 0 0 328
/**
 * A constraint between two rigid bodies, each with a pivot point.  The pivot
 * points are described in the body's local space.  The constraint limits
 * movement of the two rigid bodies in such a way that the pivot points match
 * in global space.  The spherical constraint can be seen as a "ball and
 * socket" joint.
 */

1563 22 BulletTickCallbackData 0 10241 22 BulletTickCallbackData 22 BulletTickCallbackData 0 0 0 1 1415 0 0 2 1416 1417 0 0 1 0 1519 0 0 0 0 10
/**
 *
 */

1564 18 BulletTriangleMesh 0 75777 18 BulletTriangleMesh 18 BulletTriangleMesh 0 0 0 1 1418 0 0 10 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 0 0 1 0 1501 0 0 0 0 10
/**
 *
 */

1565 23 BulletTriangleMeshShape 0 75777 23 BulletTriangleMeshShape 23 BulletTriangleMeshShape 0 0 0 1 1429 0 0 5 1430 1431 1432 1433 1434 0 0 1 0 1500 0 0 0 0 10
/**
 *
 */

1566 22 BulletWheelRaycastInfo 0 26625 22 BulletWheelRaycastInfo 22 BulletWheelRaycastInfo 0 0 0 1 1444 1435 0 8 1436 1437 1438 1439 1440 1441 1442 1443 0 0 0 0 0 10
/**
 *
 */

1567 11 BulletWheel 0 26625 11 BulletWheel 11 BulletWheel 0 0 0 1 1494 1445 0 48 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 0 0 0 0 0 145
/**
 * One wheel of a BulletVehicle.  Instances should not be created directly but
 * using the factory method BulletVehicle::create_wheel().
 */

1568 14 BulletRayHit * 0 8576 14 BulletRayHit * 14 BulletRayHit * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1569 20 BulletRayHit const * 0 8576 20 BulletRayHit const * 20 BulletRayHit const * 0 0 1570 0 0 0 0 0 0 0 0 0 0

1570 18 BulletRayHit const 0 8832 18 BulletRayHit const 18 BulletRayHit const 0 0 1496 0 0 0 0 0 0 0 0 0 0

1571 11 PandaNode * 0 8576 11 PandaNode * 11 PandaNode * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1572 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1573 0 0 0 0 0 0 0 0 0 0

1573 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1574 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1572 0 0 0 0 0 0 0 0 0 0

1575 8 LVector3 0 2105344 8 LVector3 8 LVector3 0 0 1576 0 0 0 0 0 0 0 0 0 0

1576 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1577 10 LVector3 * 0 8576 10 LVector3 * 10 LVector3 * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1578 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1579 24 BulletAllHitsRayResult * 0 8576 24 BulletAllHitsRayResult * 24 BulletAllHitsRayResult * 0 0 1497 0 0 0 0 0 0 0 0 0 0

1580 30 BulletAllHitsRayResult const * 0 8576 30 BulletAllHitsRayResult const * 30 BulletAllHitsRayResult const * 0 0 1581 0 0 0 0 0 0 0 0 0 0

1581 28 BulletAllHitsRayResult const 0 8832 28 BulletAllHitsRayResult const 28 BulletAllHitsRayResult const 0 0 1497 0 0 0 0 0 0 0 0 0 0

1582 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1583 26 AllHitsRayResultCallback * 0 8576 44 btCollisionWorld::AllHitsRayResultCallback * 44 btCollisionWorld::AllHitsRayResultCallback * 0 0 1498 0 0 0 0 0 0 0 0 0 0

1584 19 BulletShape const * 0 8576 19 BulletShape const * 19 BulletShape const * 0 0 1585 0 0 0 0 0 0 0 0 0 0

1585 17 BulletShape const 0 8832 17 BulletShape const 17 BulletShape const 0 0 1500 0 0 0 0 0 0 0 0 0 0

1586 13 BulletShape * 0 8576 13 BulletShape * 13 BulletShape * 0 0 1500 0 0 0 0 0 0 0 0 0 0

1587 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1588 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1589 14 BoundingSphere 0 2048 14 BoundingSphere 14 BoundingSphere 0 0 0 0 0 0 0 0 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1590 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1589 0 0 0 0 0 0 0 0 0 0

1591 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1592 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1593 16 BulletBodyNode * 0 8576 16 BulletBodyNode * 16 BulletBodyNode * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1594 22 TransformState const * 0 8576 22 TransformState const * 22 TransformState const * 0 0 1595 0 0 0 0 0 0 0 0 0 0

1595 20 TransformState const 0 8832 20 TransformState const 20 TransformState const 0 0 1596 0 0 0 0 0 0 0 0 0 0

1596 14 TransformState 0 2048 14 TransformState 14 TransformState 0 0 0 0 0 0 0 0 0 0 0 0 734
/**
 * Indicates a coordinate-system transform on vertices.  TransformStates are
 * the primary means for storing transformations on the scene graph.
 *
 * Transforms may be specified in one of two ways: componentwise, with a pos-
 * hpr-scale, or with an arbitrary transform matrix.  If you specify a
 * transform componentwise, it will remember its original components.
 *
 * TransformState objects are managed very much like RenderState objects.
 * They are immutable and reference-counted automatically.
 *
 * You should not attempt to create or modify a TransformState object
 * directly.  Instead, call one of the make() functions to create one for you.
 * And instead of modifying a TransformState object, create a new one.
 */

1597 22 BulletBodyNode const * 0 8576 22 BulletBodyNode const * 22 BulletBodyNode const * 0 0 1598 0 0 0 0 0 0 0 0 0 0

1598 20 BulletBodyNode const 0 8832 20 BulletBodyNode const 20 BulletBodyNode const 0 0 1504 0 0 0 0 0 0 0 0 0 0

1599 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1600 0 0 0 0 0 0 0 0 0 0

1600 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1601 10 LMatrix4 * 0 8576 10 LMatrix4 * 10 LMatrix4 * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1602 15 CollisionNode * 0 8576 15 CollisionNode * 15 CollisionNode * 0 0 1603 0 0 0 0 0 0 0 0 0 0

1603 13 CollisionNode 0 2048 13 CollisionNode 13 CollisionNode 0 0 0 0 0 0 0 0 0 0 0 0 261
/**
 * A node in the scene graph that can hold any number of CollisionSolids.
 * This may either represent a bit of static geometry in the scene that things
 * will collide with, or an animated object twirling around in the world and
 * running into things.
 */

1604 13 CollideMask * 0 8576 13 CollideMask * 13 CollideMask * 0 0 1605 0 0 0 0 0 0 0 0 0 0

1605 11 CollideMask 0 2105344 11 CollideMask 11 CollideMask 0 0 1606 0 0 0 0 0 0 0 0 0 0

1606 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1607 0 0 0 0 0 0 0 0 0 0

1607 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1608 10 bool const 0 8832 10 bool const 10 bool const 0 0 1582 0 0 0 0 0 0 0 0 0 0

1609 17 LVecBase3 const * 0 8576 17 LVecBase3 const * 17 LVecBase3 const * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1610 15 LVecBase3 const 0 8832 15 LVecBase3 const 15 LVecBase3 const 0 0 1611 0 0 0 0 0 0 0 0 0 0

1611 9 LVecBase3 0 2105344 9 LVecBase3 9 LVecBase3 0 0 1612 0 0 0 0 0 0 0 0 0 0

1612 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1613 11 LVecBase3 * 0 8576 11 LVecBase3 * 11 LVecBase3 * 0 0 1611 0 0 0 0 0 0 0 0 0 0

1614 22 BulletBoxShape const * 0 8576 22 BulletBoxShape const * 22 BulletBoxShape const * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1615 20 BulletBoxShape const 0 8832 20 BulletBoxShape const 20 BulletBoxShape const 0 0 1505 0 0 0 0 0 0 0 0 0 0

1616 16 BulletBoxShape * 0 8576 16 BulletBoxShape * 16 BulletBoxShape * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1617 20 CollisionBox const * 0 8576 20 CollisionBox const * 20 CollisionBox const * 0 0 1618 0 0 0 0 0 0 0 0 0 0

1618 18 CollisionBox const 0 8832 18 CollisionBox const 18 CollisionBox const 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 12 CollisionBox 0 2048 12 CollisionBox 12 CollisionBox 0 0 0 0 0 0 0 0 0 0 0 0 47
/**
 * A cuboid collision volume or object.
 */

1620 26 BulletCapsuleShape const * 0 8576 26 BulletCapsuleShape const * 26 BulletCapsuleShape const * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 24 BulletCapsuleShape const 0 8832 24 BulletCapsuleShape const 24 BulletCapsuleShape const 0 0 1506 0 0 0 0 0 0 0 0 0 0

1622 20 BulletCapsuleShape * 0 8576 20 BulletCapsuleShape * 20 BulletCapsuleShape * 0 0 1506 0 0 0 0 0 0 0 0 0 0

1623 31 BulletCharacterControllerNode * 0 8576 31 BulletCharacterControllerNode * 31 BulletCharacterControllerNode * 0 0 1507 0 0 0 0 0 0 0 0 0 0

1624 16 LVector3 const * 0 8576 16 LVector3 const * 16 LVector3 const * 0 0 1625 0 0 0 0 0 0 0 0 0 0

1625 14 LVector3 const 0 8832 14 LVector3 const 14 LVector3 const 0 0 1575 0 0 0 0 0 0 0 0 0 0

1626 37 BulletCharacterControllerNode const * 0 8576 37 BulletCharacterControllerNode const * 37 BulletCharacterControllerNode const * 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 35 BulletCharacterControllerNode const 0 8832 35 BulletCharacterControllerNode const 35 BulletCharacterControllerNode const 0 0 1507 0 0 0 0 0 0 0 0 0 0

1628 33 BulletClosestHitRayResult const * 0 8576 33 BulletClosestHitRayResult const * 33 BulletClosestHitRayResult const * 0 0 1629 0 0 0 0 0 0 0 0 0 0

1629 31 BulletClosestHitRayResult const 0 8832 31 BulletClosestHitRayResult const 31 BulletClosestHitRayResult const 0 0 1508 0 0 0 0 0 0 0 0 0 0

1630 27 BulletClosestHitRayResult * 0 8576 27 BulletClosestHitRayResult * 27 BulletClosestHitRayResult * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1631 26 ClosestRayResultCallback * 0 8576 44 btCollisionWorld::ClosestRayResultCallback * 44 btCollisionWorld::ClosestRayResultCallback * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1632 35 BulletClosestHitSweepResult const * 0 8576 35 BulletClosestHitSweepResult const * 35 BulletClosestHitSweepResult const * 0 0 1633 0 0 0 0 0 0 0 0 0 0

1633 33 BulletClosestHitSweepResult const 0 8832 33 BulletClosestHitSweepResult const 33 BulletClosestHitSweepResult const 0 0 1510 0 0 0 0 0 0 0 0 0 0

1634 29 BulletClosestHitSweepResult * 0 8576 29 BulletClosestHitSweepResult * 29 BulletClosestHitSweepResult * 0 0 1510 0 0 0 0 0 0 0 0 0 0

1635 29 ClosestConvexResultCallback * 0 8576 47 btCollisionWorld::ClosestConvexResultCallback * 47 btCollisionWorld::ClosestConvexResultCallback * 0 0 1511 0 0 0 0 0 0 0 0 0 0

1636 23 BulletConeShape const * 0 8576 23 BulletConeShape const * 23 BulletConeShape const * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 21 BulletConeShape const 0 8832 21 BulletConeShape const 21 BulletConeShape const 0 0 1512 0 0 0 0 0 0 0 0 0 0

1638 17 BulletConeShape * 0 8576 17 BulletConeShape * 17 BulletConeShape * 0 0 1512 0 0 0 0 0 0 0 0 0 0

1639 18 BulletConstraint * 0 8576 18 BulletConstraint * 18 BulletConstraint * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1640 21 BulletRigidBodyNode * 0 8576 21 BulletRigidBodyNode * 21 BulletRigidBodyNode * 0 0 1526 0 0 0 0 0 0 0 0 0 0

1641 24 BulletConstraint const * 0 8576 24 BulletConstraint const * 24 BulletConstraint const * 0 0 1642 0 0 0 0 0 0 0 0 0 0

1642 22 BulletConstraint const 0 8832 22 BulletConstraint const 22 BulletConstraint const 0 0 1513 0 0 0 0 0 0 0 0 0 0

1643 27 BulletRigidBodyNode const * 0 8576 27 BulletRigidBodyNode const * 27 BulletRigidBodyNode const * 0 0 1644 0 0 0 0 0 0 0 0 0 0

1644 25 BulletRigidBodyNode const 0 8832 25 BulletRigidBodyNode const 25 BulletRigidBodyNode const 0 0 1526 0 0 0 0 0 0 0 0 0 0

1645 27 BulletConeTwistConstraint * 0 8576 27 BulletConeTwistConstraint * 27 BulletConeTwistConstraint * 0 0 1516 0 0 0 0 0 0 0 0 0 0

1646 33 BulletConeTwistConstraint const * 0 8576 33 BulletConeTwistConstraint const * 33 BulletConeTwistConstraint const * 0 0 1647 0 0 0 0 0 0 0 0 0 0

1647 31 BulletConeTwistConstraint const 0 8832 31 BulletConeTwistConstraint const 31 BulletConeTwistConstraint const 0 0 1516 0 0 0 0 0 0 0 0 0 0

1648 19 LQuaternion const * 0 8576 19 LQuaternion const * 19 LQuaternion const * 0 0 1649 0 0 0 0 0 0 0 0 0 0

1649 17 LQuaternion const 0 8832 17 LQuaternion const 17 LQuaternion const 0 0 1650 0 0 0 0 0 0 0 0 0 0

1650 11 LQuaternion 0 2105344 11 LQuaternion 11 LQuaternion 0 0 1651 0 0 0 0 0 0 0 0 0 0

1651 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1652 27 BulletManifoldPoint const * 0 8576 27 BulletManifoldPoint const * 27 BulletManifoldPoint const * 0 0 1653 0 0 0 0 0 0 0 0 0 0

1653 25 BulletManifoldPoint const 0 8832 25 BulletManifoldPoint const 25 BulletManifoldPoint const 0 0 1517 0 0 0 0 0 0 0 0 0 0

1654 21 BulletManifoldPoint * 0 8576 21 BulletManifoldPoint * 21 BulletManifoldPoint * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1655 27 BulletContactCallbackData * 0 8576 27 BulletContactCallbackData * 27 BulletContactCallbackData * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1656 33 BulletContactCallbackData const * 0 8576 33 BulletContactCallbackData const * 33 BulletContactCallbackData const * 0 0 1657 0 0 0 0 0 0 0 0 0 0

1657 31 BulletContactCallbackData const 0 8832 31 BulletContactCallbackData const 31 BulletContactCallbackData const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1658 15 BulletContact * 0 8576 15 BulletContact * 15 BulletContact * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1659 21 BulletContact const * 0 8576 21 BulletContact const * 21 BulletContact const * 0 0 1660 0 0 0 0 0 0 0 0 0 0

1660 19 BulletContact const 0 8832 19 BulletContact const 19 BulletContact const 0 0 1520 0 0 0 0 0 0 0 0 0 0

1661 27 BulletContactResult const * 0 8576 27 BulletContactResult const * 27 BulletContactResult const * 0 0 1662 0 0 0 0 0 0 0 0 0 0

1662 25 BulletContactResult const 0 8832 25 BulletContactResult const 25 BulletContactResult const 0 0 1521 0 0 0 0 0 0 0 0 0 0

1663 21 BulletContactResult * 0 8576 21 BulletContactResult * 21 BulletContactResult * 0 0 1521 0 0 0 0 0 0 0 0 0 0

1664 23 ContactResultCallback * 0 8576 41 btCollisionWorld::ContactResultCallback * 41 btCollisionWorld::ContactResultCallback * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1665 23 BulletDebugNode const * 0 8576 23 BulletDebugNode const * 23 BulletDebugNode const * 0 0 1666 0 0 0 0 0 0 0 0 0 0

1666 21 BulletDebugNode const 0 8832 21 BulletDebugNode const 21 BulletDebugNode const 0 0 1523 0 0 0 0 0 0 0 0 0 0

1667 17 BulletDebugNode * 0 8576 17 BulletDebugNode * 17 BulletDebugNode * 0 0 1523 0 0 0 0 0 0 0 0 0 0

1668 17 BulletGhostNode * 0 8576 17 BulletGhostNode * 17 BulletGhostNode * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1669 23 BulletGhostNode const * 0 8576 23 BulletGhostNode const * 23 BulletGhostNode const * 0 0 1670 0 0 0 0 0 0 0 0 0 0

1670 21 BulletGhostNode const 0 8832 21 BulletGhostNode const 21 BulletGhostNode const 0 0 1525 0 0 0 0 0 0 0 0 0 0

1671 8 LMatrix3 0 2105344 8 LMatrix3 8 LMatrix3 0 0 1672 0 0 0 0 0 0 0 0 0 0

1672 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1673 10 LMatrix3 * 0 8576 10 LMatrix3 * 10 LMatrix3 * 0 0 1671 0 0 0 0 0 0 0 0 0 0

1674 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1675 0 0 0 0 0 0 0 0 0 0

1675 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1676 33 BulletSoftBodyNodeElement const * 0 8576 33 BulletSoftBodyNodeElement const * 33 BulletSoftBodyNodeElement const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 31 BulletSoftBodyNodeElement const 0 8832 31 BulletSoftBodyNodeElement const 31 BulletSoftBodyNodeElement const 0 0 1527 0 0 0 0 0 0 0 0 0 0

1678 27 BulletSoftBodyNodeElement * 0 8576 27 BulletSoftBodyNodeElement * 27 BulletSoftBodyNodeElement * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1679 20 BulletSoftBodyNode * 0 8576 20 BulletSoftBodyNode * 20 BulletSoftBodyNode * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1680 22 BulletSoftBodyConfig * 0 8576 22 BulletSoftBodyConfig * 22 BulletSoftBodyConfig * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1681 25 BulletSoftBodyWorldInfo * 0 8576 25 BulletSoftBodyWorldInfo * 25 BulletSoftBodyWorldInfo * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1682 24 BulletSoftBodyMaterial * 0 8576 24 BulletSoftBodyMaterial * 24 BulletSoftBodyMaterial * 0 0 1556 0 0 0 0 0 0 0 0 0 0

1683 26 BulletSoftBodyNode const * 0 8576 26 BulletSoftBodyNode const * 26 BulletSoftBodyNode const * 0 0 1684 0 0 0 0 0 0 0 0 0 0

1684 24 BulletSoftBodyNode const 0 8832 24 BulletSoftBodyNode const 24 BulletSoftBodyNode const 0 0 1528 0 0 0 0 0 0 0 0 0 0

1685 11 BoundingBox 0 2048 11 BoundingBox 11 BoundingBox 0 0 0 0 0 0 0 0 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1686 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1685 0 0 0 0 0 0 0 0 0 0

1687 6 Geom * 0 8576 6 Geom * 6 Geom * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1688 4 Geom 0 2048 4 Geom 4 Geom 0 0 0 0 0 0 0 0 0 0 0 0 418
/**
 * A container for geometry primitives.  This class associates one or more
 * GeomPrimitive objects with a table of vertices defined by a GeomVertexData
 * object.  All of the primitives stored in a particular Geom are drawn from
 * the same set of vertices (each primitive uses a subset of all of the
 * vertices in the table), and all of them must be rendered at the same time,
 * in the same graphics state.
 */

1689 21 NurbsCurveEvaluator * 0 8576 21 NurbsCurveEvaluator * 21 NurbsCurveEvaluator * 0 0 1690 0 0 0 0 0 0 0 0 0 0

1690 19 NurbsCurveEvaluator 0 2048 19 NurbsCurveEvaluator 19 NurbsCurveEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 492
/**
 * This class is an abstraction for evaluating NURBS curves.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 *
 * This is not related to NurbsCurve, CubicCurveseg or any of the
 * ParametricCurve-derived objects in this module.  It is a completely
 * parallel implementation of NURBS curves, and will probably eventually
 * replace the whole ParametricCurve class hierarchy.
 */

1691 23 NurbsSurfaceEvaluator * 0 8576 23 NurbsSurfaceEvaluator * 23 NurbsSurfaceEvaluator * 0 0 1692 0 0 0 0 0 0 0 0 0 0

1692 21 NurbsSurfaceEvaluator 0 2048 21 NurbsSurfaceEvaluator 21 NurbsSurfaceEvaluator 0 0 0 0 0 0 0 0 0 0 0 0 227
/**
 * This class is an abstraction for evaluating NURBS surfaces.  It accepts an
 * array of vertices, each of which may be in a different coordinate space (as
 * defined by a NodePath), as well as an optional knot vector.
 */

1693 23 BulletSoftBodyControl * 0 8576 23 BulletSoftBodyControl * 23 BulletSoftBodyControl * 0 0 1552 0 0 0 0 0 0 0 0 0 0

1694 12 Geom const * 0 8576 12 Geom const * 12 Geom const * 0 0 1695 0 0 0 0 0 0 0 0 0 0

1695 10 Geom const 0 8832 10 Geom const 10 Geom const 0 0 1688 0 0 0 0 0 0 0 0 0 0

1696 15 PTA_LVecBase3 * 0 8576 15 PTA_LVecBase3 * 15 PTA_LVecBase3 * 0 0 1697 0 0 0 0 0 0 0 0 0 0

1697 13 PTA_LVecBase3 0 2105344 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 14 PTA_LVecBase3f 0 2105344 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 28 PointerToArray< LVecBase3f > 0 2048 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 0 0 0 0 0 0 0 0 0 0

1700 9 PTA_int * 0 8576 9 PTA_int * 9 PTA_int * 0 0 1701 0 0 0 0 0 0 0 0 0 0

1701 7 PTA_int 0 2105344 7 PTA_int 7 PTA_int 0 0 1702 0 0 0 0 0 0 0 0 0 0

1702 21 PointerToArray< int > 0 2048 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 0 0 0 0 0 0 0 0 0 0

1703 21 BulletVehicleTuning * 0 8576 21 BulletVehicleTuning * 21 BulletVehicleTuning * 0 0 1529 0 0 0 0 0 0 0 0 0 0

1704 27 BulletVehicleTuning const * 0 8576 27 BulletVehicleTuning const * 27 BulletVehicleTuning const * 0 0 1705 0 0 0 0 0 0 0 0 0 0

1705 25 BulletVehicleTuning const 0 8832 25 BulletVehicleTuning const 25 BulletVehicleTuning const 0 0 1529 0 0 0 0 0 0 0 0 0 0

1706 13 BulletWorld * 0 8576 13 BulletWorld * 13 BulletWorld * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1707 15 BulletVehicle * 0 8576 15 BulletVehicle * 15 BulletVehicle * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1708 21 BulletVehicle const * 0 8576 21 BulletVehicle const * 21 BulletVehicle const * 0 0 1709 0 0 0 0 0 0 0 0 0 0

1709 19 BulletVehicle const 0 8832 19 BulletVehicle const 19 BulletVehicle const 0 0 1530 0 0 0 0 0 0 0 0 0 0

1710 13 BulletWheel * 0 8576 13 BulletWheel * 13 BulletWheel * 0 0 1567 0 0 0 0 0 0 0 0 0 0

1711 19 BulletWorld const * 0 8576 19 BulletWorld const * 19 BulletWorld const * 0 0 1712 0 0 0 0 0 0 0 0 0 0

1712 17 BulletWorld const 0 8832 17 BulletWorld const 17 BulletWorld const 0 0 1531 0 0 0 0 0 0 0 0 0 0

1713 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1714 0 0 0 0 0 0 0 0 0 0

1714 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

1715 35 BulletBaseCharacterControllerNode * 0 8576 35 BulletBaseCharacterControllerNode * 35 BulletBaseCharacterControllerNode * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1716 19 CollideMask const * 0 8576 19 CollideMask const * 19 CollideMask const * 0 0 1717 0 0 0 0 0 0 0 0 0 0

1717 17 CollideMask const 0 8832 17 CollideMask const 17 CollideMask const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1718 26 BulletPersistentManifold * 0 8576 26 BulletPersistentManifold * 26 BulletPersistentManifold * 0 0 1546 0 0 0 0 0 0 0 0 0 0

1719 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1720 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 14 CallbackObject 0 2048 14 CallbackObject 14 CallbackObject 0 0 0 0 0 0 0 0 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1722 23 BulletConvexHullShape * 0 8576 23 BulletConvexHullShape * 23 BulletConvexHullShape * 0 0 1534 0 0 0 0 0 0 0 0 0 0

1723 29 BulletConvexHullShape const * 0 8576 29 BulletConvexHullShape const * 29 BulletConvexHullShape const * 0 0 1724 0 0 0 0 0 0 0 0 0 0

1724 27 BulletConvexHullShape const 0 8832 27 BulletConvexHullShape const 27 BulletConvexHullShape const 0 0 1534 0 0 0 0 0 0 0 0 0 0

1725 21 PTA_LVecBase3 const * 0 8576 21 PTA_LVecBase3 const * 21 PTA_LVecBase3 const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 19 PTA_LVecBase3 const 0 8832 19 PTA_LVecBase3 const 19 PTA_LVecBase3 const 0 0 1697 0 0 0 0 0 0 0 0 0 0

1727 35 BulletConvexPointCloudShape const * 0 8576 35 BulletConvexPointCloudShape const * 35 BulletConvexPointCloudShape const * 0 0 1728 0 0 0 0 0 0 0 0 0 0

1728 33 BulletConvexPointCloudShape const 0 8832 33 BulletConvexPointCloudShape const 33 BulletConvexPointCloudShape const 0 0 1535 0 0 0 0 0 0 0 0 0 0

1729 29 BulletConvexPointCloudShape * 0 8576 29 BulletConvexPointCloudShape * 29 BulletConvexPointCloudShape * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1730 27 BulletCylinderShape const * 0 8576 27 BulletCylinderShape const * 27 BulletCylinderShape const * 0 0 1731 0 0 0 0 0 0 0 0 0 0

1731 25 BulletCylinderShape const 0 8832 25 BulletCylinderShape const 25 BulletCylinderShape const 0 0 1536 0 0 0 0 0 0 0 0 0 0

1732 21 BulletCylinderShape * 0 8576 21 BulletCylinderShape * 21 BulletCylinderShape * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1733 26 BulletFilterCallbackData * 0 8576 26 BulletFilterCallbackData * 26 BulletFilterCallbackData * 0 0 1537 0 0 0 0 0 0 0 0 0 0

1734 32 BulletFilterCallbackData const * 0 8576 32 BulletFilterCallbackData const * 32 BulletFilterCallbackData const * 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 30 BulletFilterCallbackData const 0 8832 30 BulletFilterCallbackData const 30 BulletFilterCallbackData const 0 0 1537 0 0 0 0 0 0 0 0 0 0

1736 34 BulletRotationalLimitMotor const * 0 8576 34 BulletRotationalLimitMotor const * 34 BulletRotationalLimitMotor const * 0 0 1737 0 0 0 0 0 0 0 0 0 0

1737 32 BulletRotationalLimitMotor const 0 8832 32 BulletRotationalLimitMotor const 32 BulletRotationalLimitMotor const 0 0 1538 0 0 0 0 0 0 0 0 0 0

1738 28 BulletRotationalLimitMotor * 0 8576 28 BulletRotationalLimitMotor * 28 BulletRotationalLimitMotor * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1739 37 BulletTranslationalLimitMotor const * 0 8576 37 BulletTranslationalLimitMotor const * 37 BulletTranslationalLimitMotor const * 0 0 1740 0 0 0 0 0 0 0 0 0 0

1740 35 BulletTranslationalLimitMotor const 0 8832 35 BulletTranslationalLimitMotor const 35 BulletTranslationalLimitMotor const 0 0 1539 0 0 0 0 0 0 0 0 0 0

1741 31 BulletTranslationalLimitMotor * 0 8576 31 BulletTranslationalLimitMotor * 31 BulletTranslationalLimitMotor * 0 0 1539 0 0 0 0 0 0 0 0 0 0

1742 25 BulletGenericConstraint * 0 8576 25 BulletGenericConstraint * 25 BulletGenericConstraint * 0 0 1540 0 0 0 0 0 0 0 0 0 0

1743 31 BulletGenericConstraint const * 0 8576 31 BulletGenericConstraint const * 31 BulletGenericConstraint const * 0 0 1744 0 0 0 0 0 0 0 0 0 0

1744 29 BulletGenericConstraint const 0 8832 29 BulletGenericConstraint const 29 BulletGenericConstraint const 0 0 1540 0 0 0 0 0 0 0 0 0 0

1745 30 BulletHeightfieldShape const * 0 8576 30 BulletHeightfieldShape const * 30 BulletHeightfieldShape const * 0 0 1746 0 0 0 0 0 0 0 0 0 0

1746 28 BulletHeightfieldShape const 0 8832 28 BulletHeightfieldShape const 28 BulletHeightfieldShape const 0 0 1541 0 0 0 0 0 0 0 0 0 0

1747 24 BulletHeightfieldShape * 0 8576 24 BulletHeightfieldShape * 24 BulletHeightfieldShape * 0 0 1541 0 0 0 0 0 0 0 0 0 0

1748 16 PNMImage const * 0 8576 16 PNMImage const * 16 PNMImage const * 0 0 1749 0 0 0 0 0 0 0 0 0 0

1749 14 PNMImage const 0 8832 14 PNMImage const 14 PNMImage const 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 8 PNMImage 0 2048 8 PNMImage 8 PNMImage 0 0 0 0 0 0 0 0 0 0 0 0 1516
/**
 * The name of this class derives from the fact that we originally implemented
 * it as a layer on top of the "pnm library", based on netpbm, which was built
 * to implement pbm, pgm, and pbm files, and is the underlying support of a
 * number of public-domain image file converters.  Nowadays we are no longer
 * derived directly from the pnm library, mainly to allow support of C++
 * iostreams instead of the C stdio FILE interface.
 *
 * Conceptually, a PNMImage is a two-dimensional array of xels, which are the
 * PNM-defined generic pixel type.  Each xel may have a red, green, and blue
 * component, or (if the image is grayscale) a gray component.  The image may
 * be read in, the individual xels manipulated, and written out again, or a
 * black image may be constructed from scratch.
 *
 * A PNMImage has a color space and a maxval, the combination of which defines
 * how a floating-point linear color value is encoded as an integer value in
 * memory.  The functions ending in _val operate on encoded colors, whereas
 * the regular ones work with linear floating-point values.  All operations
 * are color space correct unless otherwise specified.
 *
 * The image is of size XSize() by YSize() xels, numbered from top to bottom,
 * left to right, beginning at zero.
 *
 * Files can be specified by filename, or by an iostream pointer.  The
 * filename "-" refers to stdin or stdout.
 *
 * This class is not inherently thread-safe; use it from a single thread or
 * protect access using a mutex.
 */

1751 9 Texture * 0 8576 9 Texture * 9 Texture * 0 0 1752 0 0 0 0 0 0 0 0 0 0

1752 7 Texture 0 2048 7 Texture 7 Texture 0 0 0 0 0 0 0 0 0 0 0 0 688
/**
 * Represents a texture object, which is typically a single 2-d image but may
 * also represent a 1-d or 3-d texture image, or the six 2-d faces of a cube
 * map texture.
 *
 * A texture's image data might be stored in system RAM (see get_ram_image())
 * or its image may be represented in texture memory on one or more
 * GraphicsStateGuardians (see prepare()), or both.  The typical usage pattern
 * is that a texture is loaded from an image file on disk, which copies its
 * image data into system RAM; then the first time the texture is rendered its
 * image data is copied to texture memory (actually, to the graphics API), and
 * the system RAM image is automatically freed.
 */

1753 14 BulletHelper * 0 8576 14 BulletHelper * 14 BulletHelper * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1754 20 BulletHelper const * 0 8576 20 BulletHelper const * 20 BulletHelper const * 0 0 1755 0 0 0 0 0 0 0 0 0 0

1755 18 BulletHelper const 0 8832 18 BulletHelper const 18 BulletHelper const 0 0 1542 0 0 0 0 0 0 0 0 0 0

1756 18 NodePathCollection 0 2048 18 NodePathCollection 18 NodePathCollection 0 0 0 0 0 0 0 0 0 0 0 0 178
/**
 * This is a set of zero or more NodePaths.  It's handy for returning from
 * functions that need to return multiple NodePaths (for instance,
 * NodePaths::get_children).
 */

1757 10 NodePath * 0 8576 10 NodePath * 10 NodePath * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1759 20 NodePathCollection * 0 8576 20 NodePathCollection * 20 NodePathCollection * 0 0 1756 0 0 0 0 0 0 0 0 0 0

1760 12 InternalName 0 2048 12 InternalName 12 InternalName 0 0 0 0 0 0 0 0 0 0 0 0 514
/**
 * Encodes a string name in a hash table, mapping it to a pointer.  This is
 * used to tokenify names so they may be used efficiently in low-level Panda
 * structures, for instance to differentiate the multiple sets of texture
 * coordinates that might be stored on a Geom.
 *
 * InternalNames are hierarchical, with the '.' used by convention as a
 * separator character.  You can construct a single InternalName as a
 * composition of one or more other names, or by giving it a source string
 * directly.
 */

1761 14 InternalName * 0 8576 14 InternalName * 14 InternalName * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1762 22 GeomVertexFormat const 0 8832 22 GeomVertexFormat const 22 GeomVertexFormat const 0 0 1763 0 0 0 0 0 0 0 0 0 0

1763 16 GeomVertexFormat 0 2048 16 GeomVertexFormat 16 GeomVertexFormat 0 0 0 0 0 0 0 0 0 0 0 0 924
/**
 * This class defines the physical layout of the vertex data stored within a
 * Geom.  The layout consists of a list of named columns, each of which has a
 * numeric type and a size.
 *
 * The columns are typically interleaved within a single array, but they may
 * also be distributed among multiple different arrays; at the extreme, each
 * column may be alone within its own array (which amounts to a parallel-array
 * definition).
 *
 * Thus, a GeomVertexFormat is really a list of GeomVertexArrayFormats, each
 * of which contains a list of columns.  However, a particular column name
 * should not appear more than once in the format, even between different
 * arrays.
 *
 * There are a handful of standard pre-defined GeomVertexFormat objects, or
 * you may define your own as needed.  You may record any combination of
 * standard and/or user-defined columns in your custom GeomVertexFormat
 * constructions.
 */

1764 24 GeomVertexFormat const * 0 8576 24 GeomVertexFormat const * 24 GeomVertexFormat const * 0 0 1762 0 0 0 0 0 0 0 0 0 0

1765 23 BulletHingeConstraint * 0 8576 23 BulletHingeConstraint * 23 BulletHingeConstraint * 0 0 1543 0 0 0 0 0 0 0 0 0 0

1766 29 BulletHingeConstraint const * 0 8576 29 BulletHingeConstraint const * 29 BulletHingeConstraint const * 0 0 1767 0 0 0 0 0 0 0 0 0 0

1767 27 BulletHingeConstraint const 0 8832 27 BulletHingeConstraint const 27 BulletHingeConstraint const 0 0 1543 0 0 0 0 0 0 0 0 0 0

1768 31 BulletMinkowskiSumShape const * 0 8576 31 BulletMinkowskiSumShape const * 31 BulletMinkowskiSumShape const * 0 0 1769 0 0 0 0 0 0 0 0 0 0

1769 29 BulletMinkowskiSumShape const 0 8832 29 BulletMinkowskiSumShape const 29 BulletMinkowskiSumShape const 0 0 1544 0 0 0 0 0 0 0 0 0 0

1770 25 BulletMinkowskiSumShape * 0 8576 25 BulletMinkowskiSumShape * 25 BulletMinkowskiSumShape * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1771 30 BulletMultiSphereShape const * 0 8576 30 BulletMultiSphereShape const * 30 BulletMultiSphereShape const * 0 0 1772 0 0 0 0 0 0 0 0 0 0

1772 28 BulletMultiSphereShape const 0 8832 28 BulletMultiSphereShape const 28 BulletMultiSphereShape const 0 0 1545 0 0 0 0 0 0 0 0 0 0

1773 24 BulletMultiSphereShape * 0 8576 24 BulletMultiSphereShape * 24 BulletMultiSphereShape * 0 0 1545 0 0 0 0 0 0 0 0 0 0

1774 20 PTA_stdfloat const * 0 8576 20 PTA_stdfloat const * 20 PTA_stdfloat const * 0 0 1775 0 0 0 0 0 0 0 0 0 0

1775 18 PTA_stdfloat const 0 8832 18 PTA_stdfloat const 18 PTA_stdfloat const 0 0 1776 0 0 0 0 0 0 0 0 0 0

1776 12 PTA_stdfloat 0 2105344 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 9 PTA_float 0 2105344 9 PTA_float 9 PTA_float 0 0 1778 0 0 0 0 0 0 0 0 0 0

1778 23 PointerToArray< float > 0 2048 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 0 0 0 0 0 0 0 0 0 0

1779 32 BulletPersistentManifold const * 0 8576 32 BulletPersistentManifold const * 32 BulletPersistentManifold const * 0 0 1780 0 0 0 0 0 0 0 0 0 0

1780 30 BulletPersistentManifold const 0 8832 30 BulletPersistentManifold const 30 BulletPersistentManifold const 0 0 1546 0 0 0 0 0 0 0 0 0 0

1781 24 BulletPlaneShape const * 0 8576 24 BulletPlaneShape const * 24 BulletPlaneShape const * 0 0 1782 0 0 0 0 0 0 0 0 0 0

1782 22 BulletPlaneShape const 0 8832 22 BulletPlaneShape const 22 BulletPlaneShape const 0 0 1547 0 0 0 0 0 0 0 0 0 0

1783 18 BulletPlaneShape * 0 8576 18 BulletPlaneShape * 18 BulletPlaneShape * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1784 22 CollisionPlane const * 0 8576 22 CollisionPlane const * 22 CollisionPlane const * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 20 CollisionPlane const 0 8832 20 CollisionPlane const 20 CollisionPlane const 0 0 1786 0 0 0 0 0 0 0 0 0 0

1786 14 CollisionPlane 0 2048 14 CollisionPlane 14 CollisionPlane 0 0 0 0 0 0 0 0 0 0 0 0 10
/**
 *
 */

1787 24 BulletSliderConstraint * 0 8576 24 BulletSliderConstraint * 24 BulletSliderConstraint * 0 0 1548 0 0 0 0 0 0 0 0 0 0

1788 30 BulletSliderConstraint const * 0 8576 30 BulletSliderConstraint const * 30 BulletSliderConstraint const * 0 0 1789 0 0 0 0 0 0 0 0 0 0

1789 28 BulletSliderConstraint const 0 8832 28 BulletSliderConstraint const 28 BulletSliderConstraint const 0 0 1548 0 0 0 0 0 0 0 0 0 0

1790 28 BulletSoftBodyConfig const * 0 8576 28 BulletSoftBodyConfig const * 28 BulletSoftBodyConfig const * 0 0 1791 0 0 0 0 0 0 0 0 0 0

1791 26 BulletSoftBodyConfig const 0 8832 26 BulletSoftBodyConfig const 26 BulletSoftBodyConfig const 0 0 1549 0 0 0 0 0 0 0 0 0 0

1792 10 IControl * 0 8576 30 btSoftBody::AJoint::IControl * 30 btSoftBody::AJoint::IControl * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1793 30 BulletSoftBodyMaterial const * 0 8576 30 BulletSoftBodyMaterial const * 30 BulletSoftBodyMaterial const * 0 0 1794 0 0 0 0 0 0 0 0 0 0

1794 28 BulletSoftBodyMaterial const 0 8832 28 BulletSoftBodyMaterial const 28 BulletSoftBodyMaterial const 0 0 1556 0 0 0 0 0 0 0 0 0 0

1795 27 BulletSoftBodyShape const * 0 8576 27 BulletSoftBodyShape const * 27 BulletSoftBodyShape const * 0 0 1796 0 0 0 0 0 0 0 0 0 0

1796 25 BulletSoftBodyShape const 0 8832 25 BulletSoftBodyShape const 25 BulletSoftBodyShape const 0 0 1559 0 0 0 0 0 0 0 0 0 0

1797 31 BulletSoftBodyWorldInfo const * 0 8576 31 BulletSoftBodyWorldInfo const * 31 BulletSoftBodyWorldInfo const * 0 0 1798 0 0 0 0 0 0 0 0 0 0

1798 29 BulletSoftBodyWorldInfo const 0 8832 29 BulletSoftBodyWorldInfo const 29 BulletSoftBodyWorldInfo const 0 0 1560 0 0 0 0 0 0 0 0 0 0

1799 25 BulletSphereShape const * 0 8576 25 BulletSphereShape const * 25 BulletSphereShape const * 0 0 1800 0 0 0 0 0 0 0 0 0 0

1800 23 BulletSphereShape const 0 8832 23 BulletSphereShape const 23 BulletSphereShape const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1801 19 BulletSphereShape * 0 8576 19 BulletSphereShape * 19 BulletSphereShape * 0 0 1561 0 0 0 0 0 0 0 0 0 0

1802 23 CollisionSphere const * 0 8576 23 CollisionSphere const * 23 CollisionSphere const * 0 0 1803 0 0 0 0 0 0 0 0 0 0

1803 21 CollisionSphere const 0 8832 21 CollisionSphere const 21 CollisionSphere const 0 0 1804 0 0 0 0 0 0 0 0 0 0

1804 15 CollisionSphere 0 2048 15 CollisionSphere 15 CollisionSphere 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * A spherical collision volume or object.
 */

1805 27 BulletSphericalConstraint * 0 8576 27 BulletSphericalConstraint * 27 BulletSphericalConstraint * 0 0 1562 0 0 0 0 0 0 0 0 0 0

1806 33 BulletSphericalConstraint const * 0 8576 33 BulletSphericalConstraint const * 33 BulletSphericalConstraint const * 0 0 1807 0 0 0 0 0 0 0 0 0 0

1807 31 BulletSphericalConstraint const 0 8832 31 BulletSphericalConstraint const 31 BulletSphericalConstraint const 0 0 1562 0 0 0 0 0 0 0 0 0 0

1808 10 btScalar * 0 8576 10 btScalar * 10 btScalar * 0 0 1809 0 0 0 0 0 0 0 0 0 0

1809 8 btScalar 0 2048 8 btScalar 8 btScalar 0 0 0 0 0 0 0 0 0 0 0 0 0

1810 24 BulletTickCallbackData * 0 8576 24 BulletTickCallbackData * 24 BulletTickCallbackData * 0 0 1563 0 0 0 0 0 0 0 0 0 0

1811 30 BulletTickCallbackData const * 0 8576 30 BulletTickCallbackData const * 30 BulletTickCallbackData const * 0 0 1812 0 0 0 0 0 0 0 0 0 0

1812 28 BulletTickCallbackData const 0 8832 28 BulletTickCallbackData const 28 BulletTickCallbackData const 0 0 1563 0 0 0 0 0 0 0 0 0 0

1813 20 BulletTriangleMesh * 0 8576 20 BulletTriangleMesh * 20 BulletTriangleMesh * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1814 26 BulletTriangleMesh const * 0 8576 26 BulletTriangleMesh const * 26 BulletTriangleMesh const * 0 0 1815 0 0 0 0 0 0 0 0 0 0

1815 24 BulletTriangleMesh const 0 8832 24 BulletTriangleMesh const 24 BulletTriangleMesh const 0 0 1564 0 0 0 0 0 0 0 0 0 0

1816 15 PTA_int const * 0 8576 15 PTA_int const * 15 PTA_int const * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1817 13 PTA_int const 0 8832 13 PTA_int const 13 PTA_int const 0 0 1701 0 0 0 0 0 0 0 0 0 0

1818 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1819 0 0 0 0 0 0 0 0 0 0

1819 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1820 25 BulletTriangleMeshShape * 0 8576 25 BulletTriangleMeshShape * 25 BulletTriangleMeshShape * 0 0 1565 0 0 0 0 0 0 0 0 0 0

1821 31 BulletTriangleMeshShape const * 0 8576 31 BulletTriangleMeshShape const * 31 BulletTriangleMeshShape const * 0 0 1822 0 0 0 0 0 0 0 0 0 0

1822 29 BulletTriangleMeshShape const 0 8832 29 BulletTriangleMeshShape const 29 BulletTriangleMeshShape const 0 0 1565 0 0 0 0 0 0 0 0 0 0

1823 30 BulletWheelRaycastInfo const * 0 8576 30 BulletWheelRaycastInfo const * 30 BulletWheelRaycastInfo const * 0 0 1824 0 0 0 0 0 0 0 0 0 0

1824 28 BulletWheelRaycastInfo const 0 8832 28 BulletWheelRaycastInfo const 28 BulletWheelRaycastInfo const 0 0 1566 0 0 0 0 0 0 0 0 0 0

1825 24 BulletWheelRaycastInfo * 0 8576 24 BulletWheelRaycastInfo * 24 BulletWheelRaycastInfo * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1826 19 BulletWheel const * 0 8576 19 BulletWheel const * 19 BulletWheel const * 0 0 1827 0 0 0 0 0 0 0 0 0 0

1827 17 BulletWheel const 0 8832 17 BulletWheel const 17 BulletWheel const 0 0 1567 0 0 0 0 0 0 0 0 0 0

1828 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1829 0 0 0 0 0 0 0 0 0 0

1829 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1599 0 0 0 0 0 0 0 0 0 0

0
3
1830 16 linear_stiffness 0 6 1557 1383 1382 0 0 0 0 40 BulletSoftBodyMaterial::linear_stiffness 0

1831 17 angular_stiffness 0 6 1557 1385 1384 0 0 0 0 41 BulletSoftBodyMaterial::angular_stiffness 0

1832 19 volume_preservation 0 6 1557 1387 1386 0 0 0 0 43 BulletSoftBodyMaterial::volume_preservation 0

15
1833 8 get_hits 0 772 773 32 BulletAllHitsRayResult::get_hits 0

1834 10 get_shapes 0 791 792 26 BulletBodyNode::get_shapes 0

1835 12 get_contacts 0 971 972 33 BulletContactResult::get_contacts 0

1836 21 get_overlapping_nodes 0 982 983 38 BulletGhostNode::get_overlapping_nodes 0

1837 13 get_materials 0 1064 1065 33 BulletSoftBodyNode::get_materials 0

1838 9 get_nodes 0 1067 1068 29 BulletSoftBodyNode::get_nodes 0

1839 10 get_wheels 0 1100 1101 25 BulletVehicle::get_wheels 0

1840 10 get_ghosts 0 1115 1116 23 BulletWorld::get_ghosts 0

1841 16 get_rigid_bodies 0 1117 1118 29 BulletWorld::get_rigid_bodies 0

1842 15 get_soft_bodies 0 1119 1120 28 BulletWorld::get_soft_bodies 0

1843 14 get_characters 0 1121 1122 27 BulletWorld::get_characters 0

1844 12 get_vehicles 0 1125 1126 25 BulletWorld::get_vehicles 0

1845 15 get_constraints 0 1127 1128 28 BulletWorld::get_constraints 0

1846 13 get_manifolds 0 1135 1136 26 BulletWorld::get_manifolds 0

1847 19 get_manifold_points 0 1278 1279 45 BulletPersistentManifold::get_manifold_points 0

