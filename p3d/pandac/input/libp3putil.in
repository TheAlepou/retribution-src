1481294078
3 2
10 libp3putil 4 xqRv 12 panda3d.core 
895
917 5 clear 0 4 1814 56 PointerToBase< ReferenceCountedVector< ushort > >::clear 0 1 13 0
75
inline void PointerToBase< ReferenceCountedVector< ushort > >::clear(void);

918 6 output 0 4 1814 57 PointerToBase< ReferenceCountedVector< ushort > >::output 0 1 14 0
83
void PointerToBase< ReferenceCountedVector< ushort > >::output(ostream &out) const;

919 19 ~PointerToArrayBase 0 4 1813 49 PointerToArrayBase< ushort >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< ushort >::~PointerToArrayBase(void);

920 19 ConstPointerToArray 0 4 1812 50 ConstPointerToArray< ushort >::ConstPointerToArray 0 3 1 2 3 0
284
inline ConstPointerToArray< ushort >::ConstPointerToArray(PointerToArray< ushort > const &copy);
inline ConstPointerToArray< ushort >::ConstPointerToArray(ConstPointerToArray< ushort > const &copy);
ConstPointerToArray< ushort >::ConstPointerToArray(PyObject *self, PyObject *source);

921 4 size 0 4 1812 35 ConstPointerToArray< ushort >::size 0 1 4 0
73
inline unsigned long int ConstPointerToArray< ushort >::size(void) const;

922 11 get_element 0 4 1812 42 ConstPointerToArray< ushort >::get_element 0 1 5 0
91
inline ushort const &ConstPointerToArray< ushort >::get_element(unsigned long int n) const;

923 11 __getitem__ 0 4 1812 42 ConstPointerToArray< ushort >::__getitem__ 0 1 6 0
84
ushort const &ConstPointerToArray< ushort >::__getitem__(unsigned long int n) const;

924 8 get_data 0 4 1812 39 ConstPointerToArray< ushort >::get_data 0 1 7 0
85
inline std::basic_string< char > ConstPointerToArray< ushort >::get_data(void) const;

925 11 get_subdata 0 4 1812 42 ConstPointerToArray< ushort >::get_subdata 0 1 8 0
128
inline std::basic_string< char > ConstPointerToArray< ushort >::get_subdata(unsigned long int n, unsigned long int count) const;

926 13 get_ref_count 0 4 1812 44 ConstPointerToArray< ushort >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< ushort >::get_ref_count(void) const;

927 18 get_node_ref_count 0 4 1812 49 ConstPointerToArray< ushort >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< ushort >::get_node_ref_count(void) const;

928 13 __getbuffer__ 0 4 1812 44 ConstPointerToArray< ushort >::__getbuffer__ 0 1 11 0
99
int ConstPointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

929 17 __releasebuffer__ 0 4 1812 48 ConstPointerToArray< ushort >::__releasebuffer__ 0 1 12 0
93
void ConstPointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

930 20 ~ConstPointerToArray 0 4 1812 51 ConstPointerToArray< ushort >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< ushort >::~ConstPointerToArray(void);

931 14 PointerToArray 0 4 1816 40 PointerToArray< ushort >::PointerToArray 0 3 15 16 17 0
277
inline PointerToArray< ushort >::PointerToArray(TypeHandle type_handle = (_get_type_handle((ushort const *)(0))));
inline PointerToArray< ushort >::PointerToArray(PointerToArray< ushort > const &copy);
PointerToArray< ushort >::PointerToArray(PyObject *self, PyObject *source);

932 11 empty_array 0 4 1816 37 PointerToArray< ushort >::empty_array 0 1 18 0
164
static inline PointerToArray< ushort > PointerToArray< ushort >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((ushort const *)(0))));

933 4 size 0 4 1816 30 PointerToArray< ushort >::size 0 1 19 0
68
inline unsigned long int PointerToArray< ushort >::size(void) const;

934 9 push_back 0 4 1816 35 PointerToArray< ushort >::push_back 0 1 20 0
65
inline void PointerToArray< ushort >::push_back(ushort const &x);

935 8 pop_back 0 4 1816 34 PointerToArray< ushort >::pop_back 0 1 21 0
53
inline void PointerToArray< ushort >::pop_back(void);

936 11 get_element 0 4 1816 37 PointerToArray< ushort >::get_element 0 1 22 0
86
inline ushort const &PointerToArray< ushort >::get_element(unsigned long int n) const;

937 11 set_element 0 4 1816 37 PointerToArray< ushort >::set_element 0 1 23 0
92
inline void PointerToArray< ushort >::set_element(unsigned long int n, ushort const &value);

938 11 __getitem__ 0 4 1816 37 PointerToArray< ushort >::__getitem__ 0 1 24 0
79
ushort const &PointerToArray< ushort >::__getitem__(unsigned long int n) const;

939 11 __setitem__ 0 4 1816 37 PointerToArray< ushort >::__setitem__ 0 1 25 0
85
void PointerToArray< ushort >::__setitem__(unsigned long int n, ushort const &value);

940 8 get_data 0 4 1816 34 PointerToArray< ushort >::get_data 0 1 26 0
80
inline std::basic_string< char > PointerToArray< ushort >::get_data(void) const;

941 8 set_data 0 4 1816 34 PointerToArray< ushort >::set_data 0 1 27 0
86
inline void PointerToArray< ushort >::set_data(std::basic_string< char > const &data);

942 11 get_subdata 0 4 1816 37 PointerToArray< ushort >::get_subdata 0 1 28 0
123
inline std::basic_string< char > PointerToArray< ushort >::get_subdata(unsigned long int n, unsigned long int count) const;

943 11 set_subdata 0 4 1816 37 PointerToArray< ushort >::set_subdata 0 1 29 0
135
inline void PointerToArray< ushort >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

944 13 get_ref_count 0 4 1816 39 PointerToArray< ushort >::get_ref_count 0 1 30 0
63
inline int PointerToArray< ushort >::get_ref_count(void) const;

945 18 get_node_ref_count 0 4 1816 44 PointerToArray< ushort >::get_node_ref_count 0 1 31 0
68
inline int PointerToArray< ushort >::get_node_ref_count(void) const;

946 13 __getbuffer__ 0 4 1816 39 PointerToArray< ushort >::__getbuffer__ 0 1 32 0
88
int PointerToArray< ushort >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

947 17 __releasebuffer__ 0 4 1816 43 PointerToArray< ushort >::__releasebuffer__ 0 1 33 0
88
void PointerToArray< ushort >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

948 15 ~PointerToArray 0 4 1816 41 PointerToArray< ushort >::~PointerToArray 0 0 0
48
PointerToArray< ushort >::~PointerToArray(void);

949 14 ~AnimInterface 0 6 1817 29 AnimInterface::~AnimInterface 0 0 10
/**
 *
 */
44
virtual AnimInterface::~AnimInterface(void);

950 4 play 0 4 1817 19 AnimInterface::play 0 2 34 35 477
/**
 * Runs the entire animation from beginning to end and stops.
 */

/**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */
95
inline void AnimInterface::play(void);
inline void AnimInterface::play(double from, double to);

951 4 loop 0 4 1817 19 AnimInterface::loop 0 2 36 37 392
/**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */
117
inline void AnimInterface::loop(bool restart);
inline void AnimInterface::loop(bool restart, double from, double to);

952 8 pingpong 0 4 1817 23 AnimInterface::pingpong 0 2 38 39 369
/**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */

/**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */
125
inline void AnimInterface::pingpong(bool restart);
inline void AnimInterface::pingpong(bool restart, double from, double to);

953 4 stop 0 4 1817 19 AnimInterface::stop 0 1 40 130
/**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */
38
inline void AnimInterface::stop(void);

954 4 pose 0 4 1817 19 AnimInterface::pose 0 1 41 72
/**
 * Sets the animation to the indicated frame and holds it there.
 */
46
inline void AnimInterface::pose(double frame);

955 13 set_play_rate 0 4 1817 28 AnimInterface::set_play_rate 0 1 42 243
/**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */
59
inline void AnimInterface::set_play_rate(double play_rate);

956 13 get_play_rate 0 4 1817 28 AnimInterface::get_play_rate 0 1 43 79
/**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */
55
inline double AnimInterface::get_play_rate(void) const;

957 14 get_frame_rate 0 4 1817 29 AnimInterface::get_frame_rate 0 1 44 234
/**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */
56
inline double AnimInterface::get_frame_rate(void) const;

958 14 get_num_frames 0 6 1817 29 AnimInterface::get_num_frames 0 1 45 278
/**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */
54
virtual int AnimInterface::get_num_frames(void) const;

959 9 get_frame 0 4 1817 24 AnimInterface::get_frame 0 1 46 116
/**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */
48
inline int AnimInterface::get_frame(void) const;

960 14 get_next_frame 0 4 1817 29 AnimInterface::get_next_frame 0 1 47 330
/**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */
53
inline int AnimInterface::get_next_frame(void) const;

961 8 get_frac 0 4 1817 23 AnimInterface::get_frac 0 1 48 314
/**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */
50
inline double AnimInterface::get_frac(void) const;

962 14 get_full_frame 0 4 1817 29 AnimInterface::get_full_frame 0 1 49 372
/**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */
53
inline int AnimInterface::get_full_frame(void) const;

963 15 get_full_fframe 0 4 1817 30 AnimInterface::get_full_fframe 0 1 50 490
/**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */
57
inline double AnimInterface::get_full_fframe(void) const;

964 10 is_playing 0 4 1817 25 AnimInterface::is_playing 0 1 51 208
/**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */
50
inline bool AnimInterface::is_playing(void) const;

965 6 output 0 6 1817 21 AnimInterface::output 0 1 52 10
/**
 *
 */
55
virtual void AnimInterface::output(ostream &out) const;

966 14 get_class_type 0 4 1817 29 AnimInterface::get_class_type 0 1 53 0
54
static TypeHandle AnimInterface::get_class_type(void);

967 9 UpdateSeq 0 4 1822 20 UpdateSeq::UpdateSeq 0 2 54 55 67
/**
 * Creates an UpdateSeq in the 'initial' state.
 */

/**
 *
 */
86
inline UpdateSeq::UpdateSeq(void);
inline UpdateSeq::UpdateSeq(UpdateSeq const &copy);

968 7 initial 0 4 1822 18 UpdateSeq::initial 0 1 56 55
/**
 * Returns an UpdateSeq in the 'initial' state.
 */
49
static inline UpdateSeq UpdateSeq::initial(void);

969 3 old 0 4 1822 14 UpdateSeq::old 0 1 57 51
/**
 * Returns an UpdateSeq in the 'old' state.
 */
45
static inline UpdateSeq UpdateSeq::old(void);

970 5 fresh 0 4 1822 16 UpdateSeq::fresh 0 1 58 53
/**
 * Returns an UpdateSeq in the 'fresh' state.
 */
47
static inline UpdateSeq UpdateSeq::fresh(void);

971 10 operator = 0 4 1822 21 UpdateSeq::operator = 0 1 59 10
/**
 *
 */
63
inline UpdateSeq &UpdateSeq::operator =(UpdateSeq const &copy);

972 5 clear 0 4 1822 16 UpdateSeq::clear 0 1 60 55
/**
 * Resets the UpdateSeq to the 'initial' state.
 */
35
inline void UpdateSeq::clear(void);

973 10 is_initial 0 4 1822 21 UpdateSeq::is_initial 0 1 61 67
/**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */
46
inline bool UpdateSeq::is_initial(void) const;

974 6 is_old 0 4 1822 17 UpdateSeq::is_old 0 1 62 63
/**
 * Returns true if the UpdateSeq is in the 'old' state.
 */
42
inline bool UpdateSeq::is_old(void) const;

975 8 is_fresh 0 4 1822 19 UpdateSeq::is_fresh 0 1 63 65
/**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */
44
inline bool UpdateSeq::is_fresh(void) const;

976 10 is_special 0 4 1822 21 UpdateSeq::is_special 0 1 64 105
/**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */
46
inline bool UpdateSeq::is_special(void) const;

977 11 operator == 0 4 1822 22 UpdateSeq::operator == 0 1 65 0
65
inline bool UpdateSeq::operator ==(UpdateSeq const &other) const;

978 11 operator != 0 4 1822 22 UpdateSeq::operator != 0 1 66 0
65
inline bool UpdateSeq::operator !=(UpdateSeq const &other) const;

979 10 operator < 0 4 1822 21 UpdateSeq::operator < 0 1 67 0
64
inline bool UpdateSeq::operator <(UpdateSeq const &other) const;

980 11 operator <= 0 4 1822 22 UpdateSeq::operator <= 0 1 68 0
65
inline bool UpdateSeq::operator <=(UpdateSeq const &other) const;

981 10 operator > 0 4 1822 21 UpdateSeq::operator > 0 1 69 0
64
inline bool UpdateSeq::operator >(UpdateSeq const &other) const;

982 11 operator >= 0 4 1822 22 UpdateSeq::operator >= 0 1 70 0
65
inline bool UpdateSeq::operator >=(UpdateSeq const &other) const;

983 11 operator ++ 0 68 1822 22 UpdateSeq::operator ++ 0 1 71 0
46
inline UpdateSeq UpdateSeq::operator ++(void);

984 11 operator ++ 0 4 1822 22 UpdateSeq::operator ++ 0 1 72 0
46
inline UpdateSeq UpdateSeq::operator ++(int );

985 7 get_seq 0 4 1822 18 UpdateSeq::get_seq 0 1 73 107
/**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */
60
inline AtomicAdjust::Integer UpdateSeq::get_seq(void) const;

986 6 output 0 4 1822 17 UpdateSeq::output 0 1 74 10
/**
 *
 */
50
inline void UpdateSeq::output(ostream &out) const;

987 10 ~UpdateSeq 0 4 1822 21 UpdateSeq::~UpdateSeq 0 0 0
28
UpdateSeq::~UpdateSeq(void);

988 6 fillin 0 6 1826 21 TypedWritable::fillin 0 1 75 308
/**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */
79
virtual void TypedWritable::fillin(DatagramIterator &scan, BamReader *manager);

989 17 mark_bam_modified 0 4 1826 32 TypedWritable::mark_bam_modified 0 1 76 345
/**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */
51
inline void TypedWritable::mark_bam_modified(void);

990 16 get_bam_modified 0 4 1826 31 TypedWritable::get_bam_modified 0 1 77 140
/**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */
61
inline UpdateSeq TypedWritable::get_bam_modified(void) const;

991 10 __reduce__ 0 4 1826 25 TypedWritable::__reduce__ 0 1 78 0
58
PyObject *TypedWritable::__reduce__(PyObject *self) const;

992 18 __reduce_persist__ 0 4 1826 33 TypedWritable::__reduce_persist__ 0 1 79 0
85
PyObject *TypedWritable::__reduce_persist__(PyObject *self, PyObject *pickler) const;

993 20 encode_to_bam_stream 0 4 1826 35 TypedWritable::encode_to_bam_stream 0 1 80 846
/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */

/**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and stores that data in the indicated string.  Returns true on
 * success, false on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */
157
inline std::string TypedWritable::encode_to_bam_stream(void) const;
bool TypedWritable::encode_to_bam_stream(std::string &data, BamWriter *writer = 0) const;

994 26 decode_raw_from_bam_stream 0 4 1826 41 TypedWritable::decode_raw_from_bam_stream 0 0 957
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts the single object on that string.  Returns true on success, false
 * on on error.
 *
 * This variant sets the TypedWritable and ReferenceCount pointers separately;
 * both are pointers to the same object.  The reference count is not
 * incremented; it is the caller's responsibility to manage the reference
 * count.
 *
 * Note that this method cannot be used to retrieve objects that do not
 * inherit from ReferenceCount, because these objects cannot persist beyond
 * the lifetime of the BamReader that reads them.  To retrieve these objects
 * from a bam stream, you must construct a BamReader directly.
 *
 * If you happen to know that the particular object in question inherits from
 * TypedWritableReferenceCount or PandaNode, consider calling the variant of
 * decode_from_bam_stream() defined for those methods, which presents a
 * simpler interface.
 */
149
static bool TypedWritable::decode_raw_from_bam_stream(TypedWritable *&ptr, ReferenceCount *&ref_ptr, std::string const &data, BamReader *reader = 0);

995 14 get_class_type 0 4 1826 29 TypedWritable::get_class_type 0 1 81 0
54
static TypeHandle TypedWritable::get_class_type(void);

996 23 upcast_to_TypedWritable 0 12 1828 52 TypedWritableReferenceCount::upcast_to_TypedWritable 0 1 84 56
upcast from TypedWritableReferenceCount to TypedWritable
74
TypedWritable *TypedWritableReferenceCount::upcast_to_TypedWritable(void);

997 39 downcast_to_TypedWritableReferenceCount 0 12 1826 54 TypedWritable::downcast_to_TypedWritableReferenceCount 0 1 85 58
downcast from TypedWritable to TypedWritableReferenceCount
90
TypedWritableReferenceCount *TypedWritable::downcast_to_TypedWritableReferenceCount(void);

998 24 upcast_to_ReferenceCount 0 12 1828 53 TypedWritableReferenceCount::upcast_to_ReferenceCount 0 1 86 57
upcast from TypedWritableReferenceCount to ReferenceCount
76
ReferenceCount *TypedWritableReferenceCount::upcast_to_ReferenceCount(void);

999 39 downcast_to_TypedWritableReferenceCount 0 12 1829 55 ReferenceCount::downcast_to_TypedWritableReferenceCount 0 1 87 59
downcast from ReferenceCount to TypedWritableReferenceCount
91
TypedWritableReferenceCount *ReferenceCount::downcast_to_TypedWritableReferenceCount(void);

1000 22 decode_from_bam_stream 0 4 1828 51 TypedWritableReferenceCount::decode_from_bam_stream 0 1 82 492
/**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */
148
static PointerTo< TypedWritableReferenceCount > TypedWritableReferenceCount::decode_from_bam_stream(std::string const &data, BamReader *reader = 0);

1001 14 get_class_type 0 4 1828 43 TypedWritableReferenceCount::get_class_type 0 1 83 0
68
static TypeHandle TypedWritableReferenceCount::get_class_type(void);

1002 28 ~TypedWritableReferenceCount 0 4 1828 57 TypedWritableReferenceCount::~TypedWritableReferenceCount 0 0 0
64
TypedWritableReferenceCount::~TypedWritableReferenceCount(void);

1003 37 upcast_to_TypedWritableReferenceCount 0 12 1830 53 BamCacheRecord::upcast_to_TypedWritableReferenceCount 0 1 110 57
upcast from BamCacheRecord to TypedWritableReferenceCount
89
TypedWritableReferenceCount *BamCacheRecord::upcast_to_TypedWritableReferenceCount(void);

1004 26 downcast_to_BamCacheRecord 0 12 1828 55 TypedWritableReferenceCount::downcast_to_BamCacheRecord 0 1 111 59
downcast from TypedWritableReferenceCount to BamCacheRecord
78
BamCacheRecord *TypedWritableReferenceCount::downcast_to_BamCacheRecord(void);

1005 24 upcast_to_LinkedListNode 0 12 1830 40 BamCacheRecord::upcast_to_LinkedListNode 0 0 44
upcast from BamCacheRecord to LinkedListNode
63
LinkedListNode *BamCacheRecord::upcast_to_LinkedListNode(void);

1006 26 downcast_to_BamCacheRecord 0 12 1831 42 LinkedListNode::downcast_to_BamCacheRecord 0 0 46
downcast from LinkedListNode to BamCacheRecord
65
BamCacheRecord *LinkedListNode::downcast_to_BamCacheRecord(void);

1007 15 ~BamCacheRecord 0 6 1830 31 BamCacheRecord::~BamCacheRecord 0 0 10
/**
 *
 */
46
virtual BamCacheRecord::~BamCacheRecord(void);

1008 9 make_copy 0 4 1830 25 BamCacheRecord::make_copy 0 1 88 179
/**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */
73
inline PointerTo< BamCacheRecord > BamCacheRecord::make_copy(void) const;

1009 11 operator == 0 4 1830 27 BamCacheRecord::operator == 0 1 89 0
75
inline bool BamCacheRecord::operator ==(BamCacheRecord const &other) const;

1010 19 get_source_pathname 0 4 1830 35 BamCacheRecord::get_source_pathname 0 1 90 237
/**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */
71
inline Filename const &BamCacheRecord::get_source_pathname(void) const;

1011 18 get_cache_filename 0 4 1830 34 BamCacheRecord::get_cache_filename 0 1 91 230
/**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */
70
inline Filename const &BamCacheRecord::get_cache_filename(void) const;

1012 20 get_source_timestamp 0 4 1830 36 BamCacheRecord::get_source_timestamp 0 1 92 204
/**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */
63
inline time_t BamCacheRecord::get_source_timestamp(void) const;

1013 17 get_recorded_time 0 4 1830 33 BamCacheRecord::get_recorded_time 0 1 93 84
/**
 * Returns the time at which this particular record was recorded or updated.
 */
60
inline time_t BamCacheRecord::get_recorded_time(void) const;

1014 23 get_num_dependent_files 0 4 1830 39 BamCacheRecord::get_num_dependent_files 0 1 94 75
/**
 * Returns the number of source files that contribute to the cache.
 */
63
inline int BamCacheRecord::get_num_dependent_files(void) const;

1015 22 get_dependent_pathname 0 4 1830 38 BamCacheRecord::get_dependent_pathname 0 1 95 94
/**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */
75
inline Filename const &BamCacheRecord::get_dependent_pathname(int n) const;

1016 20 dependents_unchanged 0 4 1830 36 BamCacheRecord::dependents_unchanged 0 1 96 124
/**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */
54
bool BamCacheRecord::dependents_unchanged(void) const;

1017 21 clear_dependent_files 0 4 1830 37 BamCacheRecord::clear_dependent_files 0 1 97 80
/**
 * Empties the list of files that contribute to the data in this record.
 */
49
void BamCacheRecord::clear_dependent_files(void);

1018 18 add_dependent_file 0 4 1830 34 BamCacheRecord::add_dependent_file 0 2 98 99 309
/**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */

/**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */
132
void BamCacheRecord::add_dependent_file(Filename const &pathname);
void BamCacheRecord::add_dependent_file(VirtualFile const *file);

1019 8 has_data 0 4 1830 24 BamCacheRecord::has_data 0 1 100 130
/**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */
49
inline bool BamCacheRecord::has_data(void) const;

1020 10 clear_data 0 4 1830 26 BamCacheRecord::clear_data 0 1 101 147
/**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */
45
inline void BamCacheRecord::clear_data(void);

1021 8 get_data 0 4 1830 24 BamCacheRecord::get_data 0 1 102 139
/**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */
59
inline TypedWritable *BamCacheRecord::get_data(void) const;

1022 12 extract_data 0 4 1830 28 BamCacheRecord::extract_data 0 0 416
/**
 * Fills ptr and ref_ptr with the two different-typed pointers to the same
 * object, the data stored within this record.  This transfers ownership of
 * the data pointer; the caller will be responsible for managing the reference
 * counts on this object subsequently.
 *
 * Returns true if the record contained any data (and the pointers have been
 * filled), false if it didn't (and the pointers are NULL).
 */
88
inline bool BamCacheRecord::extract_data(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1023 8 set_data 0 4 1830 24 BamCacheRecord::set_data 0 4 103 104 105 106 916
/**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */

/**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */

/**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */
281
inline void BamCacheRecord::set_data(TypedWritable *ptr, ReferenceCount *ref_ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr);
inline void BamCacheRecord::set_data(TypedWritableReferenceCount *ptr);
inline void BamCacheRecord::set_data(TypedWritable *ptr, int dummy);

1024 6 output 0 4 1830 22 BamCacheRecord::output 0 1 107 10
/**
 *
 */
48
void BamCacheRecord::output(ostream &out) const;

1025 5 write 0 4 1830 21 BamCacheRecord::write 0 1 108 10
/**
 *
 */
69
void BamCacheRecord::write(ostream &out, int indent_level = 0) const;

1026 14 get_class_type 0 4 1830 30 BamCacheRecord::get_class_type 0 1 109 0
55
static TypeHandle BamCacheRecord::get_class_type(void);

1027 8 BamCache 0 4 1836 18 BamCache::BamCache 0 1 112 10
/**
 *
 */
25
BamCache::BamCache(void);

1028 9 ~BamCache 0 4 1836 19 BamCache::~BamCache 0 0 10
/**
 *
 */
26
BamCache::~BamCache(void);

1029 10 set_active 0 4 1836 20 BamCache::set_active 0 1 113 347
/**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
44
inline void BamCache::set_active(bool flag);

1030 10 get_active 0 4 1836 20 BamCache::get_active 0 1 114 381
/**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */
45
inline bool BamCache::get_active(void) const;

1031 16 set_cache_models 0 4 1836 26 BamCache::set_cache_models 0 1 115 118
/**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */
50
inline void BamCache::set_cache_models(bool flag);

1032 16 get_cache_models 0 4 1836 26 BamCache::get_cache_models 0 1 116 172
/**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */
51
inline bool BamCache::get_cache_models(void) const;

1033 18 set_cache_textures 0 4 1836 28 BamCache::set_cache_textures 0 1 117 101
/**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */
52
inline void BamCache::set_cache_textures(bool flag);

1034 18 get_cache_textures 0 4 1836 28 BamCache::get_cache_textures 0 1 118 174
/**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */
53
inline bool BamCache::get_cache_textures(void) const;

1035 29 set_cache_compressed_textures 0 4 1836 39 BamCache::set_cache_compressed_textures 0 1 119 722
/**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */
63
inline void BamCache::set_cache_compressed_textures(bool flag);

1036 29 get_cache_compressed_textures 0 4 1836 39 BamCache::get_cache_compressed_textures 0 1 120 202
/**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */
64
inline bool BamCache::get_cache_compressed_textures(void) const;

1037 26 set_cache_compiled_shaders 0 4 1836 36 BamCache::set_cache_compiled_shaders 0 1 121 184
/**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */
60
inline void BamCache::set_cache_compiled_shaders(bool flag);

1038 26 get_cache_compiled_shaders 0 4 1836 36 BamCache::get_cache_compiled_shaders 0 1 122 196
/**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */
61
inline bool BamCache::get_cache_compiled_shaders(void) const;

1039 8 set_root 0 4 1836 18 BamCache::set_root 0 1 123 372
/**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */
46
void BamCache::set_root(Filename const &root);

1040 8 get_root 0 4 1836 18 BamCache::get_root 0 1 124 75
/**
 * Returns the current root pathname of the cache.  See set_root().
 */
47
inline Filename BamCache::get_root(void) const;

1041 14 set_flush_time 0 4 1836 24 BamCache::set_flush_time 0 1 125 86
/**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */
53
inline void BamCache::set_flush_time(int flush_time);

1042 14 get_flush_time 0 4 1836 24 BamCache::get_flush_time 0 1 126 84
/**
 * Returns the time in seconds between automatic flushes of the cache index.
 */
48
inline int BamCache::get_flush_time(void) const;

1043 20 set_cache_max_kbytes 0 4 1836 30 BamCache::set_cache_max_kbytes 0 1 127 430
/**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */
59
inline void BamCache::set_cache_max_kbytes(int max_kbytes);

1044 20 get_cache_max_kbytes 0 4 1836 30 BamCache::get_cache_max_kbytes 0 1 128 121
/**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */
54
inline int BamCache::get_cache_max_kbytes(void) const;

1045 13 set_read_only 0 4 1836 23 BamCache::set_read_only 0 1 129 252
/**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */
45
inline void BamCache::set_read_only(bool ro);

1046 13 get_read_only 0 4 1836 23 BamCache::get_read_only 0 1 130 230
/**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */
48
inline bool BamCache::get_read_only(void) const;

1047 6 lookup 0 4 1836 16 BamCache::lookup 0 1 131 782
/**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */
114
PointerTo< BamCacheRecord > BamCache::lookup(Filename const &source_filename, std::string const &cache_extension);

1048 5 store 0 4 1836 15 BamCache::store 0 1 132 212
/**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */
45
bool BamCache::store(BamCacheRecord *record);

1049 20 consider_flush_index 0 4 1836 30 BamCache::consider_flush_index 0 1 133 92
/**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */
42
void BamCache::consider_flush_index(void);

1050 11 flush_index 0 4 1836 21 BamCache::flush_index 0 1 134 48
/**
 * Ensures the index is written to disk.
 */
33
void BamCache::flush_index(void);

1051 10 list_index 0 4 1836 20 BamCache::list_index 0 1 135 63
/**
 * Writes the contents of the index to standard output.
 */
68
void BamCache::list_index(ostream &out, int indent_level = 0) const;

1052 14 get_global_ptr 0 4 1836 24 BamCache::get_global_ptr 0 1 136 124
/**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */
55
static inline BamCache *BamCache::get_global_ptr(void);

1053 27 consider_flush_global_index 0 4 1836 37 BamCache::consider_flush_global_index 0 1 137 84
/**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */
63
static inline void BamCache::consider_flush_global_index(void);

1054 18 flush_global_index 0 4 1836 28 BamCache::flush_global_index 0 1 138 75
/**
 * If there is a global BamCache object, calls flush_index() on it.
 */
54
static inline void BamCache::flush_global_index(void);

1055 8 BamEnums 0 4 1837 18 BamEnums::BamEnums 0 2 139 140 0
97
inline BamEnums::BamEnums(void) = default;
inline BamEnums::BamEnums(BamEnums const &) = default;

1056 9 ~BamEnums 0 4 1837 19 BamEnums::~BamEnums 0 0 0
26
BamEnums::~BamEnums(void);

1057 13 LoaderOptions 0 4 1841 28 LoaderOptions::LoaderOptions 0 3 141 142 143 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
238
LoaderOptions::LoaderOptions(int flags = (::LoaderOptions::LF_search | ::LoaderOptions::LF_report_errors));
inline LoaderOptions::LoaderOptions(int flags, int texture_flags);
inline LoaderOptions::LoaderOptions(LoaderOptions const &copy);

1058 10 operator = 0 4 1841 25 LoaderOptions::operator = 0 1 144 0
65
inline void LoaderOptions::operator =(LoaderOptions const &copy);

1059 9 set_flags 0 4 1841 24 LoaderOptions::set_flags 0 1 145 10
/**
 *
 */
48
inline void LoaderOptions::set_flags(int flags);

1060 9 get_flags 0 4 1841 24 LoaderOptions::get_flags 0 1 146 10
/**
 *
 */
48
inline int LoaderOptions::get_flags(void) const;

1061 17 set_texture_flags 0 4 1841 32 LoaderOptions::set_texture_flags 0 1 147 10
/**
 *
 */
56
inline void LoaderOptions::set_texture_flags(int flags);

1062 17 get_texture_flags 0 4 1841 32 LoaderOptions::get_texture_flags 0 1 148 10
/**
 *
 */
56
inline int LoaderOptions::get_texture_flags(void) const;

1063 21 set_texture_num_views 0 4 1841 36 LoaderOptions::set_texture_num_views 0 1 149 459
/**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */
64
inline void LoaderOptions::set_texture_num_views(int num_views);

1064 21 get_texture_num_views 0 4 1841 36 LoaderOptions::get_texture_num_views 0 1 150 39
/**
 * See set_texture_num_views().
 */
60
inline int LoaderOptions::get_texture_num_views(void) const;

1065 22 set_auto_texture_scale 0 4 1841 37 LoaderOptions::set_auto_texture_scale 0 1 151 209
/**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */
74
inline void LoaderOptions::set_auto_texture_scale(AutoTextureScale scale);

1066 22 get_auto_texture_scale 0 4 1841 37 LoaderOptions::get_auto_texture_scale 0 1 152 40
/**
 * See set_auto_texture_scale().
 */
74
inline AutoTextureScale LoaderOptions::get_auto_texture_scale(void) const;

1067 6 output 0 4 1841 21 LoaderOptions::output 0 1 153 10
/**
 *
 */
47
void LoaderOptions::output(ostream &out) const;

1068 14 ~LoaderOptions 0 4 1841 29 LoaderOptions::~LoaderOptions 0 0 0
36
LoaderOptions::~LoaderOptions(void);

1069 9 BamReader 0 4 1844 20 BamReader::BamReader 0 1 154 50
// The primary interface for a caller.

/**
 *
 */
52
BamReader::BamReader(DatagramGenerator *source = 0);

1070 10 ~BamReader 0 4 1844 21 BamReader::~BamReader 0 0 10
/**
 *
 */
28
BamReader::~BamReader(void);

1071 10 set_source 0 4 1844 21 BamReader::set_source 0 1 155 142
/**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */
54
void BamReader::set_source(DatagramGenerator *source);

1072 10 get_source 0 4 1844 21 BamReader::get_source 0 1 156 100
/**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */
54
inline DatagramGenerator *BamReader::get_source(void);

1073 4 init 0 4 1844 15 BamReader::init 0 1 157 210
/**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */
27
bool BamReader::init(void);

1074 12 set_aux_data 0 4 1844 23 BamReader::set_aux_data 0 1 158 1007
/**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */
100
void BamReader::set_aux_data(TypedWritable *obj, std::string const &name, BamReader::AuxData *data);

1075 12 get_aux_data 0 4 1844 23 BamReader::get_aux_data 0 1 159 173
/**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */
95
BamReader::AuxData *BamReader::get_aux_data(TypedWritable *obj, std::string const &name) const;

1076 12 get_filename 0 4 1844 23 BamReader::get_filename 0 1 160 199
/**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */
59
inline Filename const &BamReader::get_filename(void) const;

1077 18 get_loader_options 0 4 1844 29 BamReader::get_loader_options 0 1 161 98
/**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */
70
inline LoaderOptions const &BamReader::get_loader_options(void) const;

1078 18 set_loader_options 0 4 1844 29 BamReader::set_loader_options 0 1 162 58
/**
 * Specifies the LoaderOptions for this BamReader.
 */
72
inline void BamReader::set_loader_options(LoaderOptions const &options);

1079 11 read_object 0 4 1844 22 BamReader::read_object 0 1 163 1393
/**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */

/**
 * Reads a single object from the Bam file.
 *
 * This flavor of read_object() returns both a TypedWritable and a
 * ReferenceCount pointer to the same object, so the reference count may be
 * tracked reliably, without having to know precisely what type of object we
 * have.
 * @return true on success, or false on failure.
 */
120
TypedWritable *BamReader::read_object(void);
bool BamReader::read_object(TypedWritable *&ptr, ReferenceCount *&ref_ptr);

1080 6 is_eof 0 4 1844 17 BamReader::is_eof 0 1 164 138
/**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */
42
inline bool BamReader::is_eof(void) const;

1081 7 resolve 0 4 1844 18 BamReader::resolve 0 1 165 565
/**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */
30
bool BamReader::resolve(void);

1082 14 change_pointer 0 4 1844 25 BamReader::change_pointer 0 1 166 406
/**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */
100
bool BamReader::change_pointer(TypedWritable const *orig_pointer, TypedWritable const *new_pointer);

1083 18 get_file_major_ver 0 4 1844 29 BamReader::get_file_major_ver 0 1 167 81
/**
 * Returns the major version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_major_ver(void) const;

1084 18 get_file_minor_ver 0 4 1844 29 BamReader::get_file_minor_ver 0 1 168 81
/**
 * Returns the minor version number of the Bam file currently being read.
 */
53
inline int BamReader::get_file_minor_ver(void) const;

1085 15 get_file_endian 0 4 1844 26 BamReader::get_file_endian 0 1 169 254
/**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */
66
inline BamEnums::BamEndian BamReader::get_file_endian(void) const;

1086 24 get_file_stdfloat_double 0 4 1844 35 BamReader::get_file_stdfloat_double 0 1 170 220
/**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */
60
inline bool BamReader::get_file_stdfloat_double(void) const;

1087 21 get_current_major_ver 0 4 1844 32 BamReader::get_current_major_ver 0 1 171 174
/**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */
56
inline int BamReader::get_current_major_ver(void) const;

1088 21 get_current_minor_ver 0 4 1844 32 BamReader::get_current_minor_ver 0 1 172 184
/**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */
56
inline int BamReader::get_current_minor_ver(void) const;

1089 16 get_file_version 0 4 1844 27 BamReader::get_file_version 0 1 173 0
50
PyObject *BamReader::get_file_version(void) const;

1090 16 register_factory 0 4 1844 27 BamReader::register_factory 0 1 174 208
/**
 * Registers a factory function that is called when an object of the given
 * type is encountered within the .bam stream.
 *
 * @param user_data an optional pointer to be passed along to the function.
 */
75
static void BamReader::register_factory(TypeHandle handle, PyObject *func);

1091 9 BamWriter 0 4 1851 20 BamWriter::BamWriter 0 2 175 176 10
/**
 *
 */
105
BamWriter::BamWriter(DatagramSink *target = 0);
inline BamWriter::BamWriter(BamWriter const &) = default;

1092 10 ~BamWriter 0 4 1851 21 BamWriter::~BamWriter 0 0 10
/**
 *
 */
28
BamWriter::~BamWriter(void);

1093 10 set_target 0 4 1851 21 BamWriter::set_target 0 1 177 153
/**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */
49
void BamWriter::set_target(DatagramSink *target);

1094 10 get_target 0 4 1851 21 BamWriter::get_target 0 1 178 100
/**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */
49
inline DatagramSink *BamWriter::get_target(void);

1095 4 init 0 4 1851 15 BamWriter::init 0 1 179 220
/**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */
27
bool BamWriter::init(void);

1096 12 get_filename 0 4 1851 23 BamWriter::get_filename 0 1 180 197
/**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */
59
inline Filename const &BamWriter::get_filename(void) const;

1097 12 write_object 0 4 1851 23 BamWriter::write_object 0 1 181 736
/**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */
55
bool BamWriter::write_object(TypedWritable const *obj);

1098 10 has_object 0 4 1851 21 BamWriter::has_object 0 1 182 170
/**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */
59
bool BamWriter::has_object(TypedWritable const *obj) const;

1099 5 flush 0 4 1851 16 BamWriter::flush 0 1 183 85
/**
 * Ensures that all data written thus far is manifested on the output stream.
 */
28
void BamWriter::flush(void);

1100 18 get_file_major_ver 0 4 1851 29 BamWriter::get_file_major_ver 0 1 184 84
/**
 * Returns the major version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_major_ver(void) const;

1101 18 get_file_minor_ver 0 4 1851 29 BamWriter::get_file_minor_ver 0 1 185 84
/**
 * Returns the minor version number of the Bam file currently being written.
 */
53
inline int BamWriter::get_file_minor_ver(void) const;

1102 18 set_file_minor_ver 0 4 1851 29 BamWriter::set_file_minor_ver 0 1 186 232
/**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */
57
inline void BamWriter::set_file_minor_ver(int minor_ver);

1103 15 get_file_endian 0 4 1851 26 BamWriter::get_file_endian 0 1 187 257
/**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */
66
inline BamEnums::BamEndian BamWriter::get_file_endian(void) const;

1104 24 get_file_stdfloat_double 0 4 1851 35 BamWriter::get_file_stdfloat_double 0 1 188 248
/**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */
60
inline bool BamWriter::get_file_stdfloat_double(void) const;

1105 21 get_file_texture_mode 0 4 1851 32 BamWriter::get_file_texture_mode 0 1 189 196
/**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
77
inline BamEnums::BamTextureMode BamWriter::get_file_texture_mode(void) const;

1106 21 set_file_texture_mode 0 4 1851 32 BamWriter::set_file_texture_mode 0 1 190 187
/**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */
89
inline void BamWriter::set_file_texture_mode(BamEnums::BamTextureMode file_texture_mode);

1107 13 get_root_node 0 4 1851 24 BamWriter::get_root_node 0 1 191 165
/**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */
59
inline TypedWritable *BamWriter::get_root_node(void) const;

1108 13 set_root_node 0 4 1851 24 BamWriter::set_root_node 0 1 192 160
/**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */
63
inline void BamWriter::set_root_node(TypedWritable *root_node);

1109 7 BitMask 0 4 1854 32 BitMask< uint16_t, 16 >::BitMask 0 3 193 194 195 0
186
inline BitMask< uint16_t, 16 >::BitMask(void);
inline BitMask< uint16_t, 16 >::BitMask(uint16_t init_value);
inline BitMask< uint16_t, 16 >::BitMask(BitMask< uint16_t, 16 > const &copy);

1110 10 operator = 0 4 1854 35 BitMask< uint16_t, 16 >::operator = 0 1 196 0
105
inline BitMask< uint16_t, 16 > &BitMask< uint16_t, 16 >::operator =(BitMask< uint16_t, 16 > const &copy);

1111 6 all_on 0 4 1854 31 BitMask< uint16_t, 16 >::all_on 0 1 197 0
76
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_on(void);

1112 7 all_off 0 4 1854 32 BitMask< uint16_t, 16 >::all_off 0 1 198 0
77
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::all_off(void);

1113 8 lower_on 0 4 1854 33 BitMask< uint16_t, 16 >::lower_on 0 1 199 0
85
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::lower_on(int on_bits);

1114 3 bit 0 4 1854 28 BitMask< uint16_t, 16 >::bit 0 1 200 0
78
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::bit(int index);

1115 5 range 0 4 1854 30 BitMask< uint16_t, 16 >::range 0 1 201 0
92
static inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::range(int low_bit, int size);

1116 8 ~BitMask 0 4 1854 33 BitMask< uint16_t, 16 >::~BitMask 0 0 0
47
inline BitMask< uint16_t, 16 >::~BitMask(void);

1117 16 has_max_num_bits 0 4 1854 41 BitMask< uint16_t, 16 >::has_max_num_bits 0 1 202 0
70
static constexpr bool BitMask< uint16_t, 16 >::has_max_num_bits(void);

1118 16 get_max_num_bits 0 4 1854 41 BitMask< uint16_t, 16 >::get_max_num_bits 0 1 203 0
69
static constexpr int BitMask< uint16_t, 16 >::get_max_num_bits(void);

1119 12 get_num_bits 0 4 1854 37 BitMask< uint16_t, 16 >::get_num_bits 0 1 204 0
65
static constexpr int BitMask< uint16_t, 16 >::get_num_bits(void);

1120 7 get_bit 0 4 1854 32 BitMask< uint16_t, 16 >::get_bit 0 1 205 0
62
inline bool BitMask< uint16_t, 16 >::get_bit(int index) const;

1121 7 set_bit 0 4 1854 32 BitMask< uint16_t, 16 >::set_bit 0 1 206 0
56
inline void BitMask< uint16_t, 16 >::set_bit(int index);

1122 9 clear_bit 0 4 1854 34 BitMask< uint16_t, 16 >::clear_bit 0 1 207 0
58
inline void BitMask< uint16_t, 16 >::clear_bit(int index);

1123 10 set_bit_to 0 4 1854 35 BitMask< uint16_t, 16 >::set_bit_to 0 1 208 0
71
inline void BitMask< uint16_t, 16 >::set_bit_to(int index, bool value);

1124 7 is_zero 0 4 1854 32 BitMask< uint16_t, 16 >::is_zero 0 1 209 0
57
inline bool BitMask< uint16_t, 16 >::is_zero(void) const;

1125 9 is_all_on 0 4 1854 34 BitMask< uint16_t, 16 >::is_all_on 0 1 210 0
59
inline bool BitMask< uint16_t, 16 >::is_all_on(void) const;

1126 7 extract 0 4 1854 32 BitMask< uint16_t, 16 >::extract 0 1 211 0
78
inline uint16_t BitMask< uint16_t, 16 >::extract(int low_bit, int size) const;

1127 5 store 0 4 1854 30 BitMask< uint16_t, 16 >::store 0 1 212 0
82
inline void BitMask< uint16_t, 16 >::store(uint16_t value, int low_bit, int size);

1128 10 has_any_of 0 4 1854 35 BitMask< uint16_t, 16 >::has_any_of 0 1 213 0
77
inline bool BitMask< uint16_t, 16 >::has_any_of(int low_bit, int size) const;

1129 10 has_all_of 0 4 1854 35 BitMask< uint16_t, 16 >::has_all_of 0 1 214 0
77
inline bool BitMask< uint16_t, 16 >::has_all_of(int low_bit, int size) const;

1130 9 set_range 0 4 1854 34 BitMask< uint16_t, 16 >::set_range 0 1 215 0
70
inline void BitMask< uint16_t, 16 >::set_range(int low_bit, int size);

1131 11 clear_range 0 4 1854 36 BitMask< uint16_t, 16 >::clear_range 0 1 216 0
72
inline void BitMask< uint16_t, 16 >::clear_range(int low_bit, int size);

1132 12 set_range_to 0 4 1854 37 BitMask< uint16_t, 16 >::set_range_to 0 1 217 0
85
inline void BitMask< uint16_t, 16 >::set_range_to(bool value, int low_bit, int size);

1133 8 get_word 0 4 1854 33 BitMask< uint16_t, 16 >::get_word 0 1 218 0
62
inline uint16_t BitMask< uint16_t, 16 >::get_word(void) const;

1134 8 set_word 0 4 1854 33 BitMask< uint16_t, 16 >::set_word 0 1 219 0
62
inline void BitMask< uint16_t, 16 >::set_word(uint16_t value);

1135 15 get_num_on_bits 0 4 1854 40 BitMask< uint16_t, 16 >::get_num_on_bits 0 1 220 0
64
inline int BitMask< uint16_t, 16 >::get_num_on_bits(void) const;

1136 16 get_num_off_bits 0 4 1854 41 BitMask< uint16_t, 16 >::get_num_off_bits 0 1 221 0
65
inline int BitMask< uint16_t, 16 >::get_num_off_bits(void) const;

1137 17 get_lowest_on_bit 0 4 1854 42 BitMask< uint16_t, 16 >::get_lowest_on_bit 0 1 222 0
66
inline int BitMask< uint16_t, 16 >::get_lowest_on_bit(void) const;

1138 18 get_lowest_off_bit 0 4 1854 43 BitMask< uint16_t, 16 >::get_lowest_off_bit 0 1 223 0
67
inline int BitMask< uint16_t, 16 >::get_lowest_off_bit(void) const;

1139 18 get_highest_on_bit 0 4 1854 43 BitMask< uint16_t, 16 >::get_highest_on_bit 0 1 224 0
67
inline int BitMask< uint16_t, 16 >::get_highest_on_bit(void) const;

1140 19 get_highest_off_bit 0 4 1854 44 BitMask< uint16_t, 16 >::get_highest_off_bit 0 1 225 0
68
inline int BitMask< uint16_t, 16 >::get_highest_off_bit(void) const;

1141 29 get_next_higher_different_bit 0 4 1854 54 BitMask< uint16_t, 16 >::get_next_higher_different_bit 0 1 226 0
85
inline int BitMask< uint16_t, 16 >::get_next_higher_different_bit(int low_bit) const;

1142 15 invert_in_place 0 4 1854 40 BitMask< uint16_t, 16 >::invert_in_place 0 1 227 0
59
inline void BitMask< uint16_t, 16 >::invert_in_place(void);

1143 18 has_bits_in_common 0 4 1854 43 BitMask< uint16_t, 16 >::has_bits_in_common 0 1 228 0
100
inline bool BitMask< uint16_t, 16 >::has_bits_in_common(BitMask< uint16_t, 16 > const &other) const;

1144 5 clear 0 4 1854 30 BitMask< uint16_t, 16 >::clear 0 1 229 0
49
inline void BitMask< uint16_t, 16 >::clear(void);

1145 6 output 0 4 1854 31 BitMask< uint16_t, 16 >::output 0 1 230 0
57
void BitMask< uint16_t, 16 >::output(ostream &out) const;

1146 13 output_binary 0 4 1854 38 BitMask< uint16_t, 16 >::output_binary 0 1 231 0
86
void BitMask< uint16_t, 16 >::output_binary(ostream &out, int spaces_every = 4) const;

1147 10 output_hex 0 4 1854 35 BitMask< uint16_t, 16 >::output_hex 0 1 232 0
83
void BitMask< uint16_t, 16 >::output_hex(ostream &out, int spaces_every = 4) const;

1148 5 write 0 4 1854 30 BitMask< uint16_t, 16 >::write 0 1 233 0
78
void BitMask< uint16_t, 16 >::write(ostream &out, int indent_level = 0) const;

1149 11 operator == 0 4 1854 36 BitMask< uint16_t, 16 >::operator == 0 1 234 0
93
inline bool BitMask< uint16_t, 16 >::operator ==(BitMask< uint16_t, 16 > const &other) const;

1150 11 operator != 0 4 1854 36 BitMask< uint16_t, 16 >::operator != 0 1 235 0
93
inline bool BitMask< uint16_t, 16 >::operator !=(BitMask< uint16_t, 16 > const &other) const;

1151 10 operator < 0 4 1854 35 BitMask< uint16_t, 16 >::operator < 0 1 236 0
92
inline bool BitMask< uint16_t, 16 >::operator <(BitMask< uint16_t, 16 > const &other) const;

1152 10 compare_to 0 4 1854 35 BitMask< uint16_t, 16 >::compare_to 0 1 237 0
91
inline int BitMask< uint16_t, 16 >::compare_to(BitMask< uint16_t, 16 > const &other) const;

1153 10 operator & 0 4 1854 35 BitMask< uint16_t, 16 >::operator & 0 1 238 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator &(BitMask< uint16_t, 16 > const &other) const;

1154 10 operator | 0 4 1854 35 BitMask< uint16_t, 16 >::operator | 0 1 239 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator |(BitMask< uint16_t, 16 > const &other) const;

1155 10 operator ^ 0 4 1854 35 BitMask< uint16_t, 16 >::operator ^ 0 1 240 0
111
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ^(BitMask< uint16_t, 16 > const &other) const;

1156 10 operator ~ 0 68 1854 35 BitMask< uint16_t, 16 >::operator ~ 0 1 241 0
79
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator ~(void) const;

1157 11 operator << 0 4 1854 36 BitMask< uint16_t, 16 >::operator << 0 1 242 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator <<(int shift) const;

1158 11 operator >> 0 4 1854 36 BitMask< uint16_t, 16 >::operator >> 0 1 243 0
85
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::operator >>(int shift) const;

1159 11 operator &= 0 4 1854 36 BitMask< uint16_t, 16 >::operator &= 0 1 244 0
87
inline void BitMask< uint16_t, 16 >::operator &=(BitMask< uint16_t, 16 > const &other);

1160 11 operator |= 0 4 1854 36 BitMask< uint16_t, 16 >::operator |= 0 1 245 0
87
inline void BitMask< uint16_t, 16 >::operator |=(BitMask< uint16_t, 16 > const &other);

1161 11 operator ^= 0 4 1854 36 BitMask< uint16_t, 16 >::operator ^= 0 1 246 0
87
inline void BitMask< uint16_t, 16 >::operator ^=(BitMask< uint16_t, 16 > const &other);

1162 12 operator <<= 0 4 1854 37 BitMask< uint16_t, 16 >::operator <<= 0 1 247 0
61
inline void BitMask< uint16_t, 16 >::operator <<=(int shift);

1163 12 operator >>= 0 4 1854 37 BitMask< uint16_t, 16 >::operator >>= 0 1 248 0
61
inline void BitMask< uint16_t, 16 >::operator >>=(int shift);

1164 19 flood_down_in_place 0 4 1854 44 BitMask< uint16_t, 16 >::flood_down_in_place 0 1 249 0
63
inline void BitMask< uint16_t, 16 >::flood_down_in_place(void);

1165 17 flood_up_in_place 0 4 1854 42 BitMask< uint16_t, 16 >::flood_up_in_place 0 1 250 0
61
inline void BitMask< uint16_t, 16 >::flood_up_in_place(void);

1166 15 flood_bits_down 0 4 1854 40 BitMask< uint16_t, 16 >::flood_bits_down 0 1 251 0
84
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_down(void) const;

1167 13 flood_bits_up 0 4 1854 38 BitMask< uint16_t, 16 >::flood_bits_up 0 1 252 0
82
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::flood_bits_up(void) const;

1168 21 keep_next_highest_bit 0 4 1854 46 BitMask< uint16_t, 16 >::keep_next_highest_bit 0 3 253 254 255 0
309
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_highest_bit(BitMask< uint16_t, 16 > const &other) const;

1169 20 keep_next_lowest_bit 0 4 1854 45 BitMask< uint16_t, 16 >::keep_next_lowest_bit 0 3 256 257 258 0
306
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(void) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint16_t, 16 > BitMask< uint16_t, 16 >::keep_next_lowest_bit(BitMask< uint16_t, 16 > const &other) const;

1170 7 get_key 0 4 1854 32 BitMask< uint16_t, 16 >::get_key 0 1 259 0
56
inline int BitMask< uint16_t, 16 >::get_key(void) const;

1171 11 __nonzero__ 0 4 1854 36 BitMask< uint16_t, 16 >::__nonzero__ 0 1 260 0
61
inline bool BitMask< uint16_t, 16 >::__nonzero__(void) const;

1172 14 get_class_type 0 4 1854 39 BitMask< uint16_t, 16 >::get_class_type 0 1 261 0
64
static TypeHandle BitMask< uint16_t, 16 >::get_class_type(void);

1173 7 BitMask 0 4 1856 32 BitMask< uint32_t, 32 >::BitMask 0 3 262 263 264 0
186
inline BitMask< uint32_t, 32 >::BitMask(void);
inline BitMask< uint32_t, 32 >::BitMask(uint32_t init_value);
inline BitMask< uint32_t, 32 >::BitMask(BitMask< uint32_t, 32 > const &copy);

1174 10 operator = 0 4 1856 35 BitMask< uint32_t, 32 >::operator = 0 1 265 0
105
inline BitMask< uint32_t, 32 > &BitMask< uint32_t, 32 >::operator =(BitMask< uint32_t, 32 > const &copy);

1175 6 all_on 0 4 1856 31 BitMask< uint32_t, 32 >::all_on 0 1 266 0
76
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_on(void);

1176 7 all_off 0 4 1856 32 BitMask< uint32_t, 32 >::all_off 0 1 267 0
77
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::all_off(void);

1177 8 lower_on 0 4 1856 33 BitMask< uint32_t, 32 >::lower_on 0 1 268 0
85
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::lower_on(int on_bits);

1178 3 bit 0 4 1856 28 BitMask< uint32_t, 32 >::bit 0 1 269 0
78
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::bit(int index);

1179 5 range 0 4 1856 30 BitMask< uint32_t, 32 >::range 0 1 270 0
92
static inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::range(int low_bit, int size);

1180 8 ~BitMask 0 4 1856 33 BitMask< uint32_t, 32 >::~BitMask 0 0 0
47
inline BitMask< uint32_t, 32 >::~BitMask(void);

1181 16 has_max_num_bits 0 4 1856 41 BitMask< uint32_t, 32 >::has_max_num_bits 0 1 271 0
70
static constexpr bool BitMask< uint32_t, 32 >::has_max_num_bits(void);

1182 16 get_max_num_bits 0 4 1856 41 BitMask< uint32_t, 32 >::get_max_num_bits 0 1 272 0
69
static constexpr int BitMask< uint32_t, 32 >::get_max_num_bits(void);

1183 12 get_num_bits 0 4 1856 37 BitMask< uint32_t, 32 >::get_num_bits 0 1 273 0
65
static constexpr int BitMask< uint32_t, 32 >::get_num_bits(void);

1184 7 get_bit 0 4 1856 32 BitMask< uint32_t, 32 >::get_bit 0 1 274 0
62
inline bool BitMask< uint32_t, 32 >::get_bit(int index) const;

1185 7 set_bit 0 4 1856 32 BitMask< uint32_t, 32 >::set_bit 0 1 275 0
56
inline void BitMask< uint32_t, 32 >::set_bit(int index);

1186 9 clear_bit 0 4 1856 34 BitMask< uint32_t, 32 >::clear_bit 0 1 276 0
58
inline void BitMask< uint32_t, 32 >::clear_bit(int index);

1187 10 set_bit_to 0 4 1856 35 BitMask< uint32_t, 32 >::set_bit_to 0 1 277 0
71
inline void BitMask< uint32_t, 32 >::set_bit_to(int index, bool value);

1188 7 is_zero 0 4 1856 32 BitMask< uint32_t, 32 >::is_zero 0 1 278 0
57
inline bool BitMask< uint32_t, 32 >::is_zero(void) const;

1189 9 is_all_on 0 4 1856 34 BitMask< uint32_t, 32 >::is_all_on 0 1 279 0
59
inline bool BitMask< uint32_t, 32 >::is_all_on(void) const;

1190 7 extract 0 4 1856 32 BitMask< uint32_t, 32 >::extract 0 1 280 0
78
inline uint32_t BitMask< uint32_t, 32 >::extract(int low_bit, int size) const;

1191 5 store 0 4 1856 30 BitMask< uint32_t, 32 >::store 0 1 281 0
82
inline void BitMask< uint32_t, 32 >::store(uint32_t value, int low_bit, int size);

1192 10 has_any_of 0 4 1856 35 BitMask< uint32_t, 32 >::has_any_of 0 1 282 0
77
inline bool BitMask< uint32_t, 32 >::has_any_of(int low_bit, int size) const;

1193 10 has_all_of 0 4 1856 35 BitMask< uint32_t, 32 >::has_all_of 0 1 283 0
77
inline bool BitMask< uint32_t, 32 >::has_all_of(int low_bit, int size) const;

1194 9 set_range 0 4 1856 34 BitMask< uint32_t, 32 >::set_range 0 1 284 0
70
inline void BitMask< uint32_t, 32 >::set_range(int low_bit, int size);

1195 11 clear_range 0 4 1856 36 BitMask< uint32_t, 32 >::clear_range 0 1 285 0
72
inline void BitMask< uint32_t, 32 >::clear_range(int low_bit, int size);

1196 12 set_range_to 0 4 1856 37 BitMask< uint32_t, 32 >::set_range_to 0 1 286 0
85
inline void BitMask< uint32_t, 32 >::set_range_to(bool value, int low_bit, int size);

1197 8 get_word 0 4 1856 33 BitMask< uint32_t, 32 >::get_word 0 1 287 0
62
inline uint32_t BitMask< uint32_t, 32 >::get_word(void) const;

1198 8 set_word 0 4 1856 33 BitMask< uint32_t, 32 >::set_word 0 1 288 0
62
inline void BitMask< uint32_t, 32 >::set_word(uint32_t value);

1199 15 get_num_on_bits 0 4 1856 40 BitMask< uint32_t, 32 >::get_num_on_bits 0 1 289 0
64
inline int BitMask< uint32_t, 32 >::get_num_on_bits(void) const;

1200 16 get_num_off_bits 0 4 1856 41 BitMask< uint32_t, 32 >::get_num_off_bits 0 1 290 0
65
inline int BitMask< uint32_t, 32 >::get_num_off_bits(void) const;

1201 17 get_lowest_on_bit 0 4 1856 42 BitMask< uint32_t, 32 >::get_lowest_on_bit 0 1 291 0
66
inline int BitMask< uint32_t, 32 >::get_lowest_on_bit(void) const;

1202 18 get_lowest_off_bit 0 4 1856 43 BitMask< uint32_t, 32 >::get_lowest_off_bit 0 1 292 0
67
inline int BitMask< uint32_t, 32 >::get_lowest_off_bit(void) const;

1203 18 get_highest_on_bit 0 4 1856 43 BitMask< uint32_t, 32 >::get_highest_on_bit 0 1 293 0
67
inline int BitMask< uint32_t, 32 >::get_highest_on_bit(void) const;

1204 19 get_highest_off_bit 0 4 1856 44 BitMask< uint32_t, 32 >::get_highest_off_bit 0 1 294 0
68
inline int BitMask< uint32_t, 32 >::get_highest_off_bit(void) const;

1205 29 get_next_higher_different_bit 0 4 1856 54 BitMask< uint32_t, 32 >::get_next_higher_different_bit 0 1 295 0
85
inline int BitMask< uint32_t, 32 >::get_next_higher_different_bit(int low_bit) const;

1206 15 invert_in_place 0 4 1856 40 BitMask< uint32_t, 32 >::invert_in_place 0 1 296 0
59
inline void BitMask< uint32_t, 32 >::invert_in_place(void);

1207 18 has_bits_in_common 0 4 1856 43 BitMask< uint32_t, 32 >::has_bits_in_common 0 1 297 0
100
inline bool BitMask< uint32_t, 32 >::has_bits_in_common(BitMask< uint32_t, 32 > const &other) const;

1208 5 clear 0 4 1856 30 BitMask< uint32_t, 32 >::clear 0 1 298 0
49
inline void BitMask< uint32_t, 32 >::clear(void);

1209 6 output 0 4 1856 31 BitMask< uint32_t, 32 >::output 0 1 299 0
57
void BitMask< uint32_t, 32 >::output(ostream &out) const;

1210 13 output_binary 0 4 1856 38 BitMask< uint32_t, 32 >::output_binary 0 1 300 0
86
void BitMask< uint32_t, 32 >::output_binary(ostream &out, int spaces_every = 4) const;

1211 10 output_hex 0 4 1856 35 BitMask< uint32_t, 32 >::output_hex 0 1 301 0
83
void BitMask< uint32_t, 32 >::output_hex(ostream &out, int spaces_every = 4) const;

1212 5 write 0 4 1856 30 BitMask< uint32_t, 32 >::write 0 1 302 0
78
void BitMask< uint32_t, 32 >::write(ostream &out, int indent_level = 0) const;

1213 11 operator == 0 4 1856 36 BitMask< uint32_t, 32 >::operator == 0 1 303 0
93
inline bool BitMask< uint32_t, 32 >::operator ==(BitMask< uint32_t, 32 > const &other) const;

1214 11 operator != 0 4 1856 36 BitMask< uint32_t, 32 >::operator != 0 1 304 0
93
inline bool BitMask< uint32_t, 32 >::operator !=(BitMask< uint32_t, 32 > const &other) const;

1215 10 operator < 0 4 1856 35 BitMask< uint32_t, 32 >::operator < 0 1 305 0
92
inline bool BitMask< uint32_t, 32 >::operator <(BitMask< uint32_t, 32 > const &other) const;

1216 10 compare_to 0 4 1856 35 BitMask< uint32_t, 32 >::compare_to 0 1 306 0
91
inline int BitMask< uint32_t, 32 >::compare_to(BitMask< uint32_t, 32 > const &other) const;

1217 10 operator & 0 4 1856 35 BitMask< uint32_t, 32 >::operator & 0 1 307 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator &(BitMask< uint32_t, 32 > const &other) const;

1218 10 operator | 0 4 1856 35 BitMask< uint32_t, 32 >::operator | 0 1 308 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator |(BitMask< uint32_t, 32 > const &other) const;

1219 10 operator ^ 0 4 1856 35 BitMask< uint32_t, 32 >::operator ^ 0 1 309 0
111
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ^(BitMask< uint32_t, 32 > const &other) const;

1220 10 operator ~ 0 68 1856 35 BitMask< uint32_t, 32 >::operator ~ 0 1 310 0
79
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator ~(void) const;

1221 11 operator << 0 4 1856 36 BitMask< uint32_t, 32 >::operator << 0 1 311 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator <<(int shift) const;

1222 11 operator >> 0 4 1856 36 BitMask< uint32_t, 32 >::operator >> 0 1 312 0
85
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::operator >>(int shift) const;

1223 11 operator &= 0 4 1856 36 BitMask< uint32_t, 32 >::operator &= 0 1 313 0
87
inline void BitMask< uint32_t, 32 >::operator &=(BitMask< uint32_t, 32 > const &other);

1224 11 operator |= 0 4 1856 36 BitMask< uint32_t, 32 >::operator |= 0 1 314 0
87
inline void BitMask< uint32_t, 32 >::operator |=(BitMask< uint32_t, 32 > const &other);

1225 11 operator ^= 0 4 1856 36 BitMask< uint32_t, 32 >::operator ^= 0 1 315 0
87
inline void BitMask< uint32_t, 32 >::operator ^=(BitMask< uint32_t, 32 > const &other);

1226 12 operator <<= 0 4 1856 37 BitMask< uint32_t, 32 >::operator <<= 0 1 316 0
61
inline void BitMask< uint32_t, 32 >::operator <<=(int shift);

1227 12 operator >>= 0 4 1856 37 BitMask< uint32_t, 32 >::operator >>= 0 1 317 0
61
inline void BitMask< uint32_t, 32 >::operator >>=(int shift);

1228 19 flood_down_in_place 0 4 1856 44 BitMask< uint32_t, 32 >::flood_down_in_place 0 1 318 0
63
inline void BitMask< uint32_t, 32 >::flood_down_in_place(void);

1229 17 flood_up_in_place 0 4 1856 42 BitMask< uint32_t, 32 >::flood_up_in_place 0 1 319 0
61
inline void BitMask< uint32_t, 32 >::flood_up_in_place(void);

1230 15 flood_bits_down 0 4 1856 40 BitMask< uint32_t, 32 >::flood_bits_down 0 1 320 0
84
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_down(void) const;

1231 13 flood_bits_up 0 4 1856 38 BitMask< uint32_t, 32 >::flood_bits_up 0 1 321 0
82
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::flood_bits_up(void) const;

1232 21 keep_next_highest_bit 0 4 1856 46 BitMask< uint32_t, 32 >::keep_next_highest_bit 0 3 322 323 324 0
309
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_highest_bit(BitMask< uint32_t, 32 > const &other) const;

1233 20 keep_next_lowest_bit 0 4 1856 45 BitMask< uint32_t, 32 >::keep_next_lowest_bit 0 3 325 326 327 0
306
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(void) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint32_t, 32 > BitMask< uint32_t, 32 >::keep_next_lowest_bit(BitMask< uint32_t, 32 > const &other) const;

1234 7 get_key 0 4 1856 32 BitMask< uint32_t, 32 >::get_key 0 1 328 0
56
inline int BitMask< uint32_t, 32 >::get_key(void) const;

1235 11 __nonzero__ 0 4 1856 36 BitMask< uint32_t, 32 >::__nonzero__ 0 1 329 0
61
inline bool BitMask< uint32_t, 32 >::__nonzero__(void) const;

1236 14 get_class_type 0 4 1856 39 BitMask< uint32_t, 32 >::get_class_type 0 1 330 0
64
static TypeHandle BitMask< uint32_t, 32 >::get_class_type(void);

1237 7 BitMask 0 4 1858 32 BitMask< uint64_t, 64 >::BitMask 0 3 331 332 333 0
186
inline BitMask< uint64_t, 64 >::BitMask(void);
inline BitMask< uint64_t, 64 >::BitMask(uint64_t init_value);
inline BitMask< uint64_t, 64 >::BitMask(BitMask< uint64_t, 64 > const &copy);

1238 10 operator = 0 4 1858 35 BitMask< uint64_t, 64 >::operator = 0 1 334 0
105
inline BitMask< uint64_t, 64 > &BitMask< uint64_t, 64 >::operator =(BitMask< uint64_t, 64 > const &copy);

1239 6 all_on 0 4 1858 31 BitMask< uint64_t, 64 >::all_on 0 1 335 0
76
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_on(void);

1240 7 all_off 0 4 1858 32 BitMask< uint64_t, 64 >::all_off 0 1 336 0
77
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::all_off(void);

1241 8 lower_on 0 4 1858 33 BitMask< uint64_t, 64 >::lower_on 0 1 337 0
85
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::lower_on(int on_bits);

1242 3 bit 0 4 1858 28 BitMask< uint64_t, 64 >::bit 0 1 338 0
78
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::bit(int index);

1243 5 range 0 4 1858 30 BitMask< uint64_t, 64 >::range 0 1 339 0
92
static inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::range(int low_bit, int size);

1244 8 ~BitMask 0 4 1858 33 BitMask< uint64_t, 64 >::~BitMask 0 0 0
47
inline BitMask< uint64_t, 64 >::~BitMask(void);

1245 16 has_max_num_bits 0 4 1858 41 BitMask< uint64_t, 64 >::has_max_num_bits 0 1 340 0
70
static constexpr bool BitMask< uint64_t, 64 >::has_max_num_bits(void);

1246 16 get_max_num_bits 0 4 1858 41 BitMask< uint64_t, 64 >::get_max_num_bits 0 1 341 0
69
static constexpr int BitMask< uint64_t, 64 >::get_max_num_bits(void);

1247 12 get_num_bits 0 4 1858 37 BitMask< uint64_t, 64 >::get_num_bits 0 1 342 0
65
static constexpr int BitMask< uint64_t, 64 >::get_num_bits(void);

1248 7 get_bit 0 4 1858 32 BitMask< uint64_t, 64 >::get_bit 0 1 343 0
62
inline bool BitMask< uint64_t, 64 >::get_bit(int index) const;

1249 7 set_bit 0 4 1858 32 BitMask< uint64_t, 64 >::set_bit 0 1 344 0
56
inline void BitMask< uint64_t, 64 >::set_bit(int index);

1250 9 clear_bit 0 4 1858 34 BitMask< uint64_t, 64 >::clear_bit 0 1 345 0
58
inline void BitMask< uint64_t, 64 >::clear_bit(int index);

1251 10 set_bit_to 0 4 1858 35 BitMask< uint64_t, 64 >::set_bit_to 0 1 346 0
71
inline void BitMask< uint64_t, 64 >::set_bit_to(int index, bool value);

1252 7 is_zero 0 4 1858 32 BitMask< uint64_t, 64 >::is_zero 0 1 347 0
57
inline bool BitMask< uint64_t, 64 >::is_zero(void) const;

1253 9 is_all_on 0 4 1858 34 BitMask< uint64_t, 64 >::is_all_on 0 1 348 0
59
inline bool BitMask< uint64_t, 64 >::is_all_on(void) const;

1254 7 extract 0 4 1858 32 BitMask< uint64_t, 64 >::extract 0 1 349 0
78
inline uint64_t BitMask< uint64_t, 64 >::extract(int low_bit, int size) const;

1255 5 store 0 4 1858 30 BitMask< uint64_t, 64 >::store 0 1 350 0
82
inline void BitMask< uint64_t, 64 >::store(uint64_t value, int low_bit, int size);

1256 10 has_any_of 0 4 1858 35 BitMask< uint64_t, 64 >::has_any_of 0 1 351 0
77
inline bool BitMask< uint64_t, 64 >::has_any_of(int low_bit, int size) const;

1257 10 has_all_of 0 4 1858 35 BitMask< uint64_t, 64 >::has_all_of 0 1 352 0
77
inline bool BitMask< uint64_t, 64 >::has_all_of(int low_bit, int size) const;

1258 9 set_range 0 4 1858 34 BitMask< uint64_t, 64 >::set_range 0 1 353 0
70
inline void BitMask< uint64_t, 64 >::set_range(int low_bit, int size);

1259 11 clear_range 0 4 1858 36 BitMask< uint64_t, 64 >::clear_range 0 1 354 0
72
inline void BitMask< uint64_t, 64 >::clear_range(int low_bit, int size);

1260 12 set_range_to 0 4 1858 37 BitMask< uint64_t, 64 >::set_range_to 0 1 355 0
85
inline void BitMask< uint64_t, 64 >::set_range_to(bool value, int low_bit, int size);

1261 8 get_word 0 4 1858 33 BitMask< uint64_t, 64 >::get_word 0 1 356 0
62
inline uint64_t BitMask< uint64_t, 64 >::get_word(void) const;

1262 8 set_word 0 4 1858 33 BitMask< uint64_t, 64 >::set_word 0 1 357 0
62
inline void BitMask< uint64_t, 64 >::set_word(uint64_t value);

1263 15 get_num_on_bits 0 4 1858 40 BitMask< uint64_t, 64 >::get_num_on_bits 0 1 358 0
64
inline int BitMask< uint64_t, 64 >::get_num_on_bits(void) const;

1264 16 get_num_off_bits 0 4 1858 41 BitMask< uint64_t, 64 >::get_num_off_bits 0 1 359 0
65
inline int BitMask< uint64_t, 64 >::get_num_off_bits(void) const;

1265 17 get_lowest_on_bit 0 4 1858 42 BitMask< uint64_t, 64 >::get_lowest_on_bit 0 1 360 0
66
inline int BitMask< uint64_t, 64 >::get_lowest_on_bit(void) const;

1266 18 get_lowest_off_bit 0 4 1858 43 BitMask< uint64_t, 64 >::get_lowest_off_bit 0 1 361 0
67
inline int BitMask< uint64_t, 64 >::get_lowest_off_bit(void) const;

1267 18 get_highest_on_bit 0 4 1858 43 BitMask< uint64_t, 64 >::get_highest_on_bit 0 1 362 0
67
inline int BitMask< uint64_t, 64 >::get_highest_on_bit(void) const;

1268 19 get_highest_off_bit 0 4 1858 44 BitMask< uint64_t, 64 >::get_highest_off_bit 0 1 363 0
68
inline int BitMask< uint64_t, 64 >::get_highest_off_bit(void) const;

1269 29 get_next_higher_different_bit 0 4 1858 54 BitMask< uint64_t, 64 >::get_next_higher_different_bit 0 1 364 0
85
inline int BitMask< uint64_t, 64 >::get_next_higher_different_bit(int low_bit) const;

1270 15 invert_in_place 0 4 1858 40 BitMask< uint64_t, 64 >::invert_in_place 0 1 365 0
59
inline void BitMask< uint64_t, 64 >::invert_in_place(void);

1271 18 has_bits_in_common 0 4 1858 43 BitMask< uint64_t, 64 >::has_bits_in_common 0 1 366 0
100
inline bool BitMask< uint64_t, 64 >::has_bits_in_common(BitMask< uint64_t, 64 > const &other) const;

1272 5 clear 0 4 1858 30 BitMask< uint64_t, 64 >::clear 0 1 367 0
49
inline void BitMask< uint64_t, 64 >::clear(void);

1273 6 output 0 4 1858 31 BitMask< uint64_t, 64 >::output 0 1 368 0
57
void BitMask< uint64_t, 64 >::output(ostream &out) const;

1274 13 output_binary 0 4 1858 38 BitMask< uint64_t, 64 >::output_binary 0 1 369 0
86
void BitMask< uint64_t, 64 >::output_binary(ostream &out, int spaces_every = 4) const;

1275 10 output_hex 0 4 1858 35 BitMask< uint64_t, 64 >::output_hex 0 1 370 0
83
void BitMask< uint64_t, 64 >::output_hex(ostream &out, int spaces_every = 4) const;

1276 5 write 0 4 1858 30 BitMask< uint64_t, 64 >::write 0 1 371 0
78
void BitMask< uint64_t, 64 >::write(ostream &out, int indent_level = 0) const;

1277 11 operator == 0 4 1858 36 BitMask< uint64_t, 64 >::operator == 0 1 372 0
93
inline bool BitMask< uint64_t, 64 >::operator ==(BitMask< uint64_t, 64 > const &other) const;

1278 11 operator != 0 4 1858 36 BitMask< uint64_t, 64 >::operator != 0 1 373 0
93
inline bool BitMask< uint64_t, 64 >::operator !=(BitMask< uint64_t, 64 > const &other) const;

1279 10 operator < 0 4 1858 35 BitMask< uint64_t, 64 >::operator < 0 1 374 0
92
inline bool BitMask< uint64_t, 64 >::operator <(BitMask< uint64_t, 64 > const &other) const;

1280 10 compare_to 0 4 1858 35 BitMask< uint64_t, 64 >::compare_to 0 1 375 0
91
inline int BitMask< uint64_t, 64 >::compare_to(BitMask< uint64_t, 64 > const &other) const;

1281 10 operator & 0 4 1858 35 BitMask< uint64_t, 64 >::operator & 0 1 376 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator &(BitMask< uint64_t, 64 > const &other) const;

1282 10 operator | 0 4 1858 35 BitMask< uint64_t, 64 >::operator | 0 1 377 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator |(BitMask< uint64_t, 64 > const &other) const;

1283 10 operator ^ 0 4 1858 35 BitMask< uint64_t, 64 >::operator ^ 0 1 378 0
111
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ^(BitMask< uint64_t, 64 > const &other) const;

1284 10 operator ~ 0 68 1858 35 BitMask< uint64_t, 64 >::operator ~ 0 1 379 0
79
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator ~(void) const;

1285 11 operator << 0 4 1858 36 BitMask< uint64_t, 64 >::operator << 0 1 380 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator <<(int shift) const;

1286 11 operator >> 0 4 1858 36 BitMask< uint64_t, 64 >::operator >> 0 1 381 0
85
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::operator >>(int shift) const;

1287 11 operator &= 0 4 1858 36 BitMask< uint64_t, 64 >::operator &= 0 1 382 0
87
inline void BitMask< uint64_t, 64 >::operator &=(BitMask< uint64_t, 64 > const &other);

1288 11 operator |= 0 4 1858 36 BitMask< uint64_t, 64 >::operator |= 0 1 383 0
87
inline void BitMask< uint64_t, 64 >::operator |=(BitMask< uint64_t, 64 > const &other);

1289 11 operator ^= 0 4 1858 36 BitMask< uint64_t, 64 >::operator ^= 0 1 384 0
87
inline void BitMask< uint64_t, 64 >::operator ^=(BitMask< uint64_t, 64 > const &other);

1290 12 operator <<= 0 4 1858 37 BitMask< uint64_t, 64 >::operator <<= 0 1 385 0
61
inline void BitMask< uint64_t, 64 >::operator <<=(int shift);

1291 12 operator >>= 0 4 1858 37 BitMask< uint64_t, 64 >::operator >>= 0 1 386 0
61
inline void BitMask< uint64_t, 64 >::operator >>=(int shift);

1292 19 flood_down_in_place 0 4 1858 44 BitMask< uint64_t, 64 >::flood_down_in_place 0 1 387 0
63
inline void BitMask< uint64_t, 64 >::flood_down_in_place(void);

1293 17 flood_up_in_place 0 4 1858 42 BitMask< uint64_t, 64 >::flood_up_in_place 0 1 388 0
61
inline void BitMask< uint64_t, 64 >::flood_up_in_place(void);

1294 15 flood_bits_down 0 4 1858 40 BitMask< uint64_t, 64 >::flood_bits_down 0 1 389 0
84
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_down(void) const;

1295 13 flood_bits_up 0 4 1858 38 BitMask< uint64_t, 64 >::flood_bits_up 0 1 390 0
82
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::flood_bits_up(void) const;

1296 21 keep_next_highest_bit 0 4 1858 46 BitMask< uint64_t, 64 >::keep_next_highest_bit 0 3 391 392 393 0
309
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_highest_bit(BitMask< uint64_t, 64 > const &other) const;

1297 20 keep_next_lowest_bit 0 4 1858 45 BitMask< uint64_t, 64 >::keep_next_lowest_bit 0 3 394 395 396 0
306
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(void) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(int index) const;
inline BitMask< uint64_t, 64 > BitMask< uint64_t, 64 >::keep_next_lowest_bit(BitMask< uint64_t, 64 > const &other) const;

1298 7 get_key 0 4 1858 32 BitMask< uint64_t, 64 >::get_key 0 1 397 0
56
inline int BitMask< uint64_t, 64 >::get_key(void) const;

1299 11 __nonzero__ 0 4 1858 36 BitMask< uint64_t, 64 >::__nonzero__ 0 1 398 0
61
inline bool BitMask< uint64_t, 64 >::__nonzero__(void) const;

1300 14 get_class_type 0 4 1858 39 BitMask< uint64_t, 64 >::get_class_type 0 1 399 0
64
static TypeHandle BitMask< uint64_t, 64 >::get_class_type(void);

1301 8 BitArray 0 4 1861 18 BitArray::BitArray 0 4 400 401 402 403 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
184
inline BitArray::BitArray(void);
inline BitArray::BitArray(BitArray::WordType init_value);
inline BitArray::BitArray(BitArray const &copy);
BitArray::BitArray(SparseArray const &from);

1302 10 operator = 0 4 1861 20 BitArray::operator = 0 1 404 10
/**
 *
 */
60
inline BitArray &BitArray::operator =(BitArray const &copy);

1303 6 all_on 0 4 1861 16 BitArray::all_on 0 1 405 69
/**
 * Returns a BitArray with an infinite array of bits, all on.
 */
46
static inline BitArray BitArray::all_on(void);

1304 7 all_off 0 4 1861 17 BitArray::all_off 0 1 406 53
/**
 * Returns a BitArray whose bits are all off.
 */
47
static inline BitArray BitArray::all_off(void);

1305 8 lower_on 0 4 1861 18 BitArray::lower_on 0 1 407 62
/**
 * Returns a BitArray whose lower on_bits bits are on.
 */
55
static inline BitArray BitArray::lower_on(int on_bits);

1306 3 bit 0 4 1861 13 BitArray::bit 0 1 408 61
/**
 * Returns a BitArray with only the indicated bit on.
 */
48
static inline BitArray BitArray::bit(int index);

1307 5 range 0 4 1861 15 BitArray::range 0 1 409 76
/**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */
62
static inline BitArray BitArray::range(int low_bit, int size);

1308 9 ~BitArray 0 4 1861 19 BitArray::~BitArray 0 0 10
/**
 *
 */
33
inline BitArray::~BitArray(void);

1309 16 has_max_num_bits 0 4 1861 26 BitArray::has_max_num_bits 0 1 410 387
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */
55
static constexpr bool BitArray::has_max_num_bits(void);

1310 16 get_max_num_bits 0 4 1861 26 BitArray::get_max_num_bits 0 1 411 422
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */
54
static constexpr int BitArray::get_max_num_bits(void);

1311 21 get_num_bits_per_word 0 4 1861 31 BitArray::get_num_bits_per_word 0 1 412 203
/**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */
59
static constexpr int BitArray::get_num_bits_per_word(void);

1312 12 get_num_bits 0 4 1861 22 BitArray::get_num_bits 0 1 413 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
54
inline std::size_t BitArray::get_num_bits(void) const;

1313 7 get_bit 0 4 1861 17 BitArray::get_bit 0 1 414 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
47
inline bool BitArray::get_bit(int index) const;

1314 7 set_bit 0 4 1861 17 BitArray::set_bit 0 1 415 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
41
inline void BitArray::set_bit(int index);

1315 9 clear_bit 0 4 1861 19 BitArray::clear_bit 0 1 416 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
43
inline void BitArray::clear_bit(int index);

1316 10 set_bit_to 0 4 1861 20 BitArray::set_bit_to 0 1 417 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
56
inline void BitArray::set_bit_to(int index, bool value);

1317 16 get_highest_bits 0 4 1861 26 BitArray::get_highest_bits 0 1 418 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
51
inline bool BitArray::get_highest_bits(void) const;

1318 7 is_zero 0 4 1861 17 BitArray::is_zero 0 1 419 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
35
bool BitArray::is_zero(void) const;

1319 9 is_all_on 0 4 1861 19 BitArray::is_all_on 0 1 420 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
37
bool BitArray::is_all_on(void) const;

1320 7 extract 0 4 1861 17 BitArray::extract 0 1 421 187
/**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */
73
inline BitArray::WordType BitArray::extract(int low_bit, int size) const;

1321 5 store 0 4 1861 15 BitArray::store 0 1 422 92
/**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */
77
inline void BitArray::store(BitArray::WordType value, int low_bit, int size);

1322 10 has_any_of 0 4 1861 20 BitArray::has_any_of 0 1 423 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
55
bool BitArray::has_any_of(int low_bit, int size) const;

1323 10 has_all_of 0 4 1861 20 BitArray::has_all_of 0 1 424 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
55
bool BitArray::has_all_of(int low_bit, int size) const;

1324 9 set_range 0 4 1861 19 BitArray::set_range 0 1 425 47
/**
 * Sets the indicated range of bits on.
 */
48
void BitArray::set_range(int low_bit, int size);

1325 11 clear_range 0 4 1861 21 BitArray::clear_range 0 1 426 48
/**
 * Sets the indicated range of bits off.
 */
50
void BitArray::clear_range(int low_bit, int size);

1326 12 set_range_to 0 4 1861 22 BitArray::set_range_to 0 1 427 64
/**
 * Sets the indicated range of bits to either on or off.
 */
70
inline void BitArray::set_range_to(bool value, int low_bit, int size);

1327 15 get_num_on_bits 0 4 1861 25 BitArray::get_num_on_bits 0 1 428 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
42
int BitArray::get_num_on_bits(void) const;

1328 16 get_num_off_bits 0 4 1861 26 BitArray::get_num_off_bits 0 1 429 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
43
int BitArray::get_num_off_bits(void) const;

1329 17 get_lowest_on_bit 0 4 1861 27 BitArray::get_lowest_on_bit 0 1 430 101
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */
44
int BitArray::get_lowest_on_bit(void) const;

1330 18 get_lowest_off_bit 0 4 1861 28 BitArray::get_lowest_off_bit 0 1 431 101
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */
45
int BitArray::get_lowest_off_bit(void) const;

1331 18 get_highest_on_bit 0 4 1861 28 BitArray::get_highest_on_bit 0 1 432 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
45
int BitArray::get_highest_on_bit(void) const;

1332 19 get_highest_off_bit 0 4 1861 29 BitArray::get_highest_off_bit 0 1 433 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
46
int BitArray::get_highest_off_bit(void) const;

1333 29 get_next_higher_different_bit 0 4 1861 39 BitArray::get_next_higher_different_bit 0 1 434 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
63
int BitArray::get_next_higher_different_bit(int low_bit) const;

1334 13 get_num_words 0 4 1861 23 BitArray::get_num_words 0 1 435 75
/**
 * Returns the number of possibly-unique words stored in the array.
 */
55
inline std::size_t BitArray::get_num_words(void) const;

1335 8 get_word 0 4 1861 18 BitArray::get_word 0 1 436 175
/**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */
66
inline BitArray::MaskType BitArray::get_word(std::size_t n) const;

1336 8 set_word 0 4 1861 18 BitArray::set_word 0 1 437 113
/**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */
72
inline void BitArray::set_word(std::size_t n, BitArray::WordType value);

1337 15 invert_in_place 0 4 1861 25 BitArray::invert_in_place 0 1 438 90
/**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */
37
void BitArray::invert_in_place(void);

1338 18 has_bits_in_common 0 4 1861 28 BitArray::has_bits_in_common 0 1 439 178
/**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
63
bool BitArray::has_bits_in_common(BitArray const &other) const;

1339 5 clear 0 4 1861 15 BitArray::clear 0 1 440 49
/**
 * Sets all the bits in the BitArray off.
 */
34
inline void BitArray::clear(void);

1340 6 output 0 4 1861 16 BitArray::output 0 1 441 193
/**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */
42
void BitArray::output(ostream &out) const;

1341 13 output_binary 0 4 1861 23 BitArray::output_binary 0 1 442 83
/**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */
71
void BitArray::output_binary(ostream &out, int spaces_every = 4) const;

1342 10 output_hex 0 4 1861 20 BitArray::output_hex 0 1 443 93
/**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */
68
void BitArray::output_hex(ostream &out, int spaces_every = 4) const;

1343 5 write 0 4 1861 15 BitArray::write 0 1 444 99
/**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */
63
void BitArray::write(ostream &out, int indent_level = 0) const;

1344 11 operator == 0 4 1861 21 BitArray::operator == 0 1 445 0
63
inline bool BitArray::operator ==(BitArray const &other) const;

1345 11 operator != 0 4 1861 21 BitArray::operator != 0 1 446 0
63
inline bool BitArray::operator !=(BitArray const &other) const;

1346 10 operator < 0 4 1861 20 BitArray::operator < 0 1 447 0
62
inline bool BitArray::operator <(BitArray const &other) const;

1347 10 compare_to 0 4 1861 20 BitArray::compare_to 0 1 448 233
/**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */
54
int BitArray::compare_to(BitArray const &other) const;

1348 10 operator & 0 4 1861 20 BitArray::operator & 0 1 449 0
66
inline BitArray BitArray::operator &(BitArray const &other) const;

1349 10 operator | 0 4 1861 20 BitArray::operator | 0 1 450 0
66
inline BitArray BitArray::operator |(BitArray const &other) const;

1350 10 operator ^ 0 4 1861 20 BitArray::operator ^ 0 1 451 0
66
inline BitArray BitArray::operator ^(BitArray const &other) const;

1351 10 operator ~ 0 68 1861 20 BitArray::operator ~ 0 1 452 0
49
inline BitArray BitArray::operator ~(void) const;

1352 11 operator << 0 4 1861 21 BitArray::operator << 0 1 453 0
55
inline BitArray BitArray::operator <<(int shift) const;

1353 11 operator >> 0 4 1861 21 BitArray::operator >> 0 1 454 0
55
inline BitArray BitArray::operator >>(int shift) const;

1354 11 operator &= 0 4 1861 21 BitArray::operator &= 0 1 455 0
50
void BitArray::operator &=(BitArray const &other);

1355 11 operator |= 0 4 1861 21 BitArray::operator |= 0 1 456 0
50
void BitArray::operator |=(BitArray const &other);

1356 11 operator ^= 0 4 1861 21 BitArray::operator ^= 0 1 457 0
50
void BitArray::operator ^=(BitArray const &other);

1357 12 operator <<= 0 4 1861 22 BitArray::operator <<= 0 1 458 0
39
void BitArray::operator <<=(int shift);

1358 12 operator >>= 0 4 1861 22 BitArray::operator >>= 0 1 459 0
39
void BitArray::operator >>=(int shift);

1359 14 get_class_type 0 4 1861 24 BitArray::get_class_type 0 1 460 0
49
static TypeHandle BitArray::get_class_type(void);

1360 12 ButtonHandle 0 4 1863 26 ButtonHandle::ButtonHandle 0 4 461 462 463 464 770
// The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer!

/**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */

/**
 *
 */

/**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */
213
inline ButtonHandle::ButtonHandle(void) = default;
constexpr ButtonHandle::ButtonHandle(int index);
inline ButtonHandle::ButtonHandle(ButtonHandle const &copy);
ButtonHandle::ButtonHandle(std::string const &name);

1361 11 operator == 0 4 1863 25 ButtonHandle::operator == 0 1 465 0
71
inline bool ButtonHandle::operator ==(ButtonHandle const &other) const;

1362 11 operator != 0 4 1863 25 ButtonHandle::operator != 0 1 466 0
71
inline bool ButtonHandle::operator !=(ButtonHandle const &other) const;

1363 10 operator < 0 4 1863 24 ButtonHandle::operator < 0 1 467 0
70
inline bool ButtonHandle::operator <(ButtonHandle const &other) const;

1364 11 operator <= 0 4 1863 25 ButtonHandle::operator <= 0 1 468 0
71
inline bool ButtonHandle::operator <=(ButtonHandle const &other) const;

1365 10 operator > 0 4 1863 24 ButtonHandle::operator > 0 1 469 0
70
inline bool ButtonHandle::operator >(ButtonHandle const &other) const;

1366 11 operator >= 0 4 1863 25 ButtonHandle::operator >= 0 1 470 0
71
inline bool ButtonHandle::operator >=(ButtonHandle const &other) const;

1367 10 compare_to 0 4 1863 24 ButtonHandle::compare_to 0 1 471 209
/**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */
69
inline int ButtonHandle::compare_to(ButtonHandle const &other) const;

1368 8 get_hash 0 4 1863 22 ButtonHandle::get_hash 0 1 472 54
/**
 * Returns a hash code suitable for phash_map.
 */
54
inline std::size_t ButtonHandle::get_hash(void) const;

1369 8 get_name 0 4 1863 22 ButtonHandle::get_name 0 1 473 42
/**
 * Returns the name of the button.
 */
47
std::string ButtonHandle::get_name(void) const;

1370 20 has_ascii_equivalent 0 4 1863 34 ButtonHandle::has_ascii_equivalent 0 1 474 121
/**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */
59
inline bool ButtonHandle::has_ascii_equivalent(void) const;

1371 20 get_ascii_equivalent 0 4 1863 34 ButtonHandle::get_ascii_equivalent 0 1 475 109
/**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */
59
inline char ButtonHandle::get_ascii_equivalent(void) const;

1372 9 get_alias 0 4 1863 23 ButtonHandle::get_alias 0 1 476 373
/**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */
49
ButtonHandle ButtonHandle::get_alias(void) const;

1373 7 matches 0 4 1863 21 ButtonHandle::matches 0 1 477 263
/**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */
67
inline bool ButtonHandle::matches(ButtonHandle const &other) const;

1374 9 get_index 0 4 1863 23 ButtonHandle::get_index 0 1 478 363
/**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */
50
constexpr int ButtonHandle::get_index(void) const;

1375 6 output 0 4 1863 20 ButtonHandle::output 0 1 479 10
/**
 *
 */
53
inline void ButtonHandle::output(ostream &out) const;

1376 4 none 0 4 1863 18 ButtonHandle::none 0 1 480 92
/**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */
52
static inline ButtonHandle ButtonHandle::none(void);

1377 22 operator typecast bool 0 132 1863 36 ButtonHandle::operator typecast bool 0 1 482 0
61
inline bool ButtonHandle::operator typecast bool(void) const;

1378 14 get_class_type 0 4 1863 28 ButtonHandle::get_class_type 0 1 481 0
53
static TypeHandle ButtonHandle::get_class_type(void);

1379 13 ~ButtonHandle 0 4 1863 27 ButtonHandle::~ButtonHandle 0 0 0
34
ButtonHandle::~ButtonHandle(void);

1380 10 get_button 0 4 1867 26 ButtonRegistry::get_button 0 1 484 150
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */
65
ButtonHandle ButtonRegistry::get_button(std::string const &name);

1381 11 find_button 0 4 1867 27 ButtonRegistry::find_button 0 1 485 144
/**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */
66
ButtonHandle ButtonRegistry::find_button(std::string const &name);

1382 17 find_ascii_button 0 4 1867 33 ButtonRegistry::find_ascii_button 0 1 486 169
/**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */
76
ButtonHandle ButtonRegistry::find_ascii_button(char ascii_equivalent) const;

1383 5 write 0 4 1867 21 ButtonRegistry::write 0 1 487 10
/**
 *
 */
47
void ButtonRegistry::write(ostream &out) const;

1384 3 ptr 0 4 1867 19 ButtonRegistry::ptr 0 1 488 134
// ptr() returns the pointer to the global ButtonRegistry object.

/**
 * Returns the pointer to the global ButtonRegistry object.
 */
56
static inline ButtonRegistry *ButtonRegistry::ptr(void);

1385 14 ButtonRegistry 0 4 1867 30 ButtonRegistry::ButtonRegistry 0 1 483 10
/**
 *
 */
72
inline ButtonRegistry::ButtonRegistry(ButtonRegistry const &) = default;

1386 15 ~ButtonRegistry 0 4 1867 31 ButtonRegistry::~ButtonRegistry 0 0 0
38
ButtonRegistry::~ButtonRegistry(void);

1387 15 get_num_buttons 0 4 1868 26 ButtonMap::get_num_buttons 0 1 491 76
/**
 * Returns the number of buttons that this button mapping specifies.
 */
58
inline std::size_t ButtonMap::get_num_buttons(void) const;

1388 14 get_raw_button 0 4 1868 25 ButtonMap::get_raw_button 0 1 492 76
/**
 * Returns the underlying raw button associated with the nth button.
 */
67
inline ButtonHandle ButtonMap::get_raw_button(std::size_t i) const;

1389 17 get_mapped_button 0 4 1868 28 ButtonMap::get_mapped_button 0 3 493 494 495 437
/**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */

/**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */
229
inline ButtonHandle ButtonMap::get_mapped_button(std::size_t i) const;
inline ButtonHandle ButtonMap::get_mapped_button(ButtonHandle raw) const;
inline ButtonHandle ButtonMap::get_mapped_button(std::string const &raw_name) const;

1390 23 get_mapped_button_label 0 4 1868 34 ButtonMap::get_mapped_button_label 0 3 496 497 498 837
/**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */

/**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */
265
inline std::string const &ButtonMap::get_mapped_button_label(std::size_t i) const;
inline std::string const &ButtonMap::get_mapped_button_label(ButtonHandle raw) const;
inline std::string const &ButtonMap::get_mapped_button_label(std::string const &raw_name) const;

1391 6 output 0 4 1868 17 ButtonMap::output 0 1 499 10
/**
 *
 */
43
void ButtonMap::output(ostream &out) const;

1392 5 write 0 4 1868 16 ButtonMap::write 0 1 500 10
/**
 *
 */
64
void ButtonMap::write(ostream &out, int indent_level = 0) const;

1393 14 get_class_type 0 4 1868 25 ButtonMap::get_class_type 0 1 501 0
50
static TypeHandle ButtonMap::get_class_type(void);

1394 9 ButtonMap 0 4 1868 20 ButtonMap::ButtonMap 0 2 489 490 0
102
inline ButtonMap::ButtonMap(void) = default;
inline ButtonMap::ButtonMap(ButtonMap const &) = default;

1395 10 ~ButtonMap 0 4 1868 21 ButtonMap::~ButtonMap 0 0 0
28
ButtonMap::~ButtonMap(void);

1396 6 output 0 6 1870 22 CallbackObject::output 0 1 503 10
/**
 *
 */
56
virtual void CallbackObject::output(ostream &out) const;

1397 4 make 0 4 1870 20 CallbackObject::make 0 1 504 0
76
static PointerTo< CallbackObject > CallbackObject::make(PyObject *function);

1398 14 get_class_type 0 4 1870 30 CallbackObject::get_class_type 0 1 505 0
55
static TypeHandle CallbackObject::get_class_type(void);

1399 14 CallbackObject 0 4 1870 30 CallbackObject::CallbackObject 0 1 502 10
/**
 *
 */
72
inline CallbackObject::CallbackObject(CallbackObject const &) = default;

1400 15 ~CallbackObject 0 4 1870 31 CallbackObject::~CallbackObject 0 0 0
38
CallbackObject::~CallbackObject(void);

1401 19 get_cache_ref_count 0 4 1871 54 CachedTypedWritableReferenceCount::get_cache_ref_count 0 1 506 47
/**
 * Returns the current reference count.
 */
78
inline int CachedTypedWritableReferenceCount::get_cache_ref_count(void) const;

1402 9 cache_ref 0 4 1871 44 CachedTypedWritableReferenceCount::cache_ref 0 1 507 108
/**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */
69
inline void CachedTypedWritableReferenceCount::cache_ref(void) const;

1403 11 cache_unref 0 4 1871 46 CachedTypedWritableReferenceCount::cache_unref 0 1 508 202
/**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
71
inline bool CachedTypedWritableReferenceCount::cache_unref(void) const;

1404 24 test_ref_count_integrity 0 4 1871 59 CachedTypedWritableReferenceCount::test_ref_count_integrity 0 1 509 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
84
inline bool CachedTypedWritableReferenceCount::test_ref_count_integrity(void) const;

1405 14 get_class_type 0 4 1871 49 CachedTypedWritableReferenceCount::get_class_type 0 1 510 0
74
static TypeHandle CachedTypedWritableReferenceCount::get_class_type(void);

1406 6 output 0 6 1872 20 CallbackData::output 0 1 511 10
/**
 *
 */
54
virtual void CallbackData::output(ostream &out) const;

1407 6 upcall 0 6 1872 20 CallbackData::upcall 0 1 512 159
/**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */
40
virtual void CallbackData::upcall(void);

1408 14 get_class_type 0 4 1872 28 CallbackData::get_class_type 0 1 513 0
53
static TypeHandle CallbackData::get_class_type(void);

1409 13 ~CallbackData 0 4 1872 27 CallbackData::~CallbackData 0 0 0
34
CallbackData::~CallbackData(void);

1410 20 PythonCallbackObject 0 4 1873 42 PythonCallbackObject::PythonCallbackObject 0 2 514 515 10
/**
 *
 */
177
PythonCallbackObject::PythonCallbackObject(PyObject *function = (& ::_Py_NoneStruct));
inline PythonCallbackObject::PythonCallbackObject(PythonCallbackObject const &) = default;

1411 12 validate_ptr 0 4 1873 34 PythonCallbackObject::validate_ptr 0 0 0
71
static inline bool PythonCallbackObject::validate_ptr(void const *ptr);

1412 12 set_function 0 4 1873 34 PythonCallbackObject::set_function 0 1 516 126
/**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */
60
void PythonCallbackObject::set_function(PyObject *function);

1413 12 get_function 0 4 1873 34 PythonCallbackObject::get_function 0 1 517 64
/**
 * Returns the function that is called for the callback.
 */
51
PyObject *PythonCallbackObject::get_function(void);

1414 14 get_class_type 0 4 1873 36 PythonCallbackObject::get_class_type 0 1 518 0
61
static TypeHandle PythonCallbackObject::get_class_type(void);

1415 7 TimeVal 0 4 1874 16 TimeVal::TimeVal 0 1 519 10
/**
 *
 */
30
inline TimeVal::TimeVal(void);

1416 7 get_sec 0 4 1874 16 TimeVal::get_sec 0 1 520 10
/**
 *
 */
42
inline ulong TimeVal::get_sec(void) const;

1417 8 get_usec 0 4 1874 17 TimeVal::get_usec 0 1 521 10
/**
 *
 */
43
inline ulong TimeVal::get_usec(void) const;

1418 6 get_tv 0 20 1874 15 TimeVal::get_tv 0 1 523 32
getter for ulong TimeVal::tv[2];
35
ulong *TimeVal::get_tv(void) const;

1419 6 set_tv 0 36 1874 15 TimeVal::set_tv 0 1 522 32
setter for ulong TimeVal::tv[2];
37
void TimeVal::set_tv(ulong value[2]);

1420 8 ~TimeVal 0 4 1874 17 TimeVal::~TimeVal 0 0 0
24
TimeVal::~TimeVal(void);

1421 11 ClockObject 0 4 1878 24 ClockObject::ClockObject 0 2 524 525 22
/**
 *
 */

/**
 *
 */
82
ClockObject::ClockObject(void);
ClockObject::ClockObject(ClockObject const &copy);

1422 8 set_mode 0 4 1878 21 ClockObject::set_mode 0 1 526 1841
/**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */
51
void ClockObject::set_mode(ClockObject::Mode mode);

1423 8 get_mode 0 4 1878 21 ClockObject::get_mode 0 1 527 66
/**
 * Returns the current mode of the clock.  See set_mode().
 */
59
inline ClockObject::Mode ClockObject::get_mode(void) const;

1424 14 get_frame_time 0 4 1878 27 ClockObject::get_frame_time 0 1 528 350
/**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */
103
inline double ClockObject::get_frame_time(Thread *current_thread = Thread::get_current_thread()) const;

1425 13 get_real_time 0 4 1878 26 ClockObject::get_real_time 0 1 529 434
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */
53
inline double ClockObject::get_real_time(void) const;

1426 13 get_long_time 0 4 1878 26 ClockObject::get_long_time 0 1 530 440
/**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */
53
inline double ClockObject::get_long_time(void) const;

1427 5 reset 0 4 1878 18 ClockObject::reset 0 1 531 75
/**
 * Simultaneously resets both the time and the frame count to zero.
 */
37
inline void ClockObject::reset(void);

1428 13 set_real_time 0 4 1878 26 ClockObject::set_real_time 0 1 532 316
/**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */
45
void ClockObject::set_real_time(double time);

1429 14 set_frame_time 0 4 1878 27 ClockObject::set_frame_time 0 1 533 215
/**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */
101
void ClockObject::set_frame_time(double time, Thread *current_thread = Thread::get_current_thread());

1430 15 set_frame_count 0 4 1878 28 ClockObject::set_frame_count 0 1 534 132
/**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */
106
void ClockObject::set_frame_count(int frame_count, Thread *current_thread = Thread::get_current_thread());

1431 15 get_frame_count 0 4 1878 28 ClockObject::get_frame_count 0 1 535 195
/**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */
101
inline int ClockObject::get_frame_count(Thread *current_thread = Thread::get_current_thread()) const;

1432 18 get_net_frame_rate 0 4 1878 31 ClockObject::get_net_frame_rate 0 1 536 245
/**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */
107
inline double ClockObject::get_net_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1433 6 get_dt 0 4 1878 19 ClockObject::get_dt 0 1 537 130
/**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */
95
inline double ClockObject::get_dt(Thread *current_thread = Thread::get_current_thread()) const;

1434 6 set_dt 0 4 1878 19 ClockObject::set_dt 0 1 538 291
/**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */
36
void ClockObject::set_dt(double dt);

1435 14 set_frame_rate 0 4 1878 27 ClockObject::set_frame_rate 0 1 539 291
/**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */
52
void ClockObject::set_frame_rate(double frame_rate);

1436 10 get_max_dt 0 4 1878 23 ClockObject::get_max_dt 0 1 540 106
/**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */
50
inline double ClockObject::get_max_dt(void) const;

1437 10 set_max_dt 0 4 1878 23 ClockObject::set_max_dt 0 1 541 511
/**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */
51
inline void ClockObject::set_max_dt(double max_dt);

1438 18 get_degrade_factor 0 4 1878 31 ClockObject::get_degrade_factor 0 1 542 265
/**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
58
inline double ClockObject::get_degrade_factor(void) const;

1439 18 set_degrade_factor 0 4 1878 31 ClockObject::set_degrade_factor 0 1 543 262
/**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */
67
inline void ClockObject::set_degrade_factor(double degrade_factor);

1440 31 set_average_frame_rate_interval 0 4 1878 44 ClockObject::set_average_frame_rate_interval 0 1 544 393
/**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */
70
inline void ClockObject::set_average_frame_rate_interval(double time);

1441 31 get_average_frame_rate_interval 0 4 1878 44 ClockObject::get_average_frame_rate_interval 0 1 545 162
/**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */
71
inline double ClockObject::get_average_frame_rate_interval(void) const;

1442 22 get_average_frame_rate 0 4 1878 35 ClockObject::get_average_frame_rate 0 1 546 214
/**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */
104
double ClockObject::get_average_frame_rate(Thread *current_thread = Thread::get_current_thread()) const;

1443 22 get_max_frame_duration 0 4 1878 35 ClockObject::get_max_frame_duration 0 1 547 105
/**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */
104
double ClockObject::get_max_frame_duration(Thread *current_thread = Thread::get_current_thread()) const;

1444 25 calc_frame_rate_deviation 0 4 1878 38 ClockObject::calc_frame_rate_deviation 0 1 548 539
/**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */
107
double ClockObject::calc_frame_rate_deviation(Thread *current_thread = Thread::get_current_thread()) const;

1445 4 tick 0 4 1878 17 ClockObject::tick 0 1 549 285
/**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */
78
void ClockObject::tick(Thread *current_thread = Thread::get_current_thread());

1446 15 sync_frame_time 0 4 1878 28 ClockObject::sync_frame_time 0 1 550 417
/**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */
89
void ClockObject::sync_frame_time(Thread *current_thread = Thread::get_current_thread());

1447 12 check_errors 0 4 1878 25 ClockObject::check_errors 0 1 551 322
/**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */
62
inline bool ClockObject::check_errors(Thread *current_thread);

1448 16 get_global_clock 0 4 1878 29 ClockObject::get_global_clock 0 1 552 159
/**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */
63
static inline ClockObject *ClockObject::get_global_clock(void);

1449 14 get_class_type 0 4 1878 27 ClockObject::get_class_type 0 1 553 0
52
static TypeHandle ClockObject::get_class_type(void);

1450 24 parse_color_space_string 0 1 0 24 parse_color_space_string 0 1 907 0
60
ColorSpace parse_color_space_string(std::string const &str);

1451 18 format_color_space 0 1 0 18 format_color_space 0 1 908 0
46
std::string format_color_space(ColorSpace cs);

1452 14 get_model_path 0 1 0 14 get_model_path 0 1 909 0
47
ConfigVariableSearchPath &get_model_path(void);

1453 15 get_plugin_path 0 1 0 15 get_plugin_path 0 1 910 0
48
ConfigVariableSearchPath &get_plugin_path(void);

1454 9 cache_ref 0 4 1882 28 CopyOnWriteObject::cache_ref 0 1 554 62
/**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */
53
inline void CopyOnWriteObject::cache_ref(void) const;

1455 11 cache_unref 0 4 1882 30 CopyOnWriteObject::cache_unref 0 1 555 64
/**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */
55
inline bool CopyOnWriteObject::cache_unref(void) const;

1456 14 get_class_type 0 4 1882 33 CopyOnWriteObject::get_class_type 0 1 556 0
58
static TypeHandle CopyOnWriteObject::get_class_type(void);

1457 18 ~CopyOnWriteObject 0 4 1882 37 CopyOnWriteObject::~CopyOnWriteObject 0 0 0
44
CopyOnWriteObject::~CopyOnWriteObject(void);

1458 17 DatagramInputFile 0 4 1883 36 DatagramInputFile::DatagramInputFile 0 1 557 10
/**
 *
 */
50
inline DatagramInputFile::DatagramInputFile(void);

1459 4 open 0 4 1883 23 DatagramInputFile::open 0 3 558 559 560 432
/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */

/**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */
201
bool DatagramInputFile::open(FileReference const *file);
inline bool DatagramInputFile::open(Filename const &filename);
bool DatagramInputFile::open(istream &in, Filename const &filename = Filename());

1460 10 get_stream 0 4 1883 29 DatagramInputFile::get_stream 0 1 561 61
/**
 * Returns the istream represented by the input file.
 */
52
inline istream &DatagramInputFile::get_stream(void);

1461 5 close 0 4 1883 24 DatagramInputFile::close 0 1 562 98
/**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */
36
void DatagramInputFile::close(void);

1462 11 read_header 0 4 1883 30 DatagramInputFile::read_header 0 0 257
/**
 * Reads a sequence of bytes from the beginning of the datagram file.  This
 * may be called any number of times after the file has been opened and before
 * the first datagram is read.  It may not be called once the first datagram
 * has been read.
 */
80
bool DatagramInputFile::read_header(std::string &header, std::size_t num_bytes);

1463 13 DoubleBitMask 0 4 1884 45 DoubleBitMask< BitMaskNative >::DoubleBitMask 0 2 563 564 0
157
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< BitMaskNative >::DoubleBitMask(DoubleBitMask< BitMaskNative > const &copy);

1464 10 operator = 0 4 1884 42 DoubleBitMask< BitMaskNative >::operator = 0 1 565 0
126
inline DoubleBitMask< BitMaskNative > &DoubleBitMask< BitMaskNative >::operator =(DoubleBitMask< BitMaskNative > const &copy);

1465 6 all_on 0 4 1884 38 DoubleBitMask< BitMaskNative >::all_on 0 1 566 0
90
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_on(void);

1466 7 all_off 0 4 1884 39 DoubleBitMask< BitMaskNative >::all_off 0 1 567 0
91
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::all_off(void);

1467 8 lower_on 0 4 1884 40 DoubleBitMask< BitMaskNative >::lower_on 0 1 568 0
99
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::lower_on(int on_bits);

1468 3 bit 0 4 1884 35 DoubleBitMask< BitMaskNative >::bit 0 1 569 0
92
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::bit(int index);

1469 5 range 0 4 1884 37 DoubleBitMask< BitMaskNative >::range 0 1 570 0
106
static inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::range(int low_bit, int size);

1470 14 ~DoubleBitMask 0 4 1884 46 DoubleBitMask< BitMaskNative >::~DoubleBitMask 0 0 0
60
inline DoubleBitMask< BitMaskNative >::~DoubleBitMask(void);

1471 16 has_max_num_bits 0 4 1884 48 DoubleBitMask< BitMaskNative >::has_max_num_bits 0 1 571 0
77
static constexpr bool DoubleBitMask< BitMaskNative >::has_max_num_bits(void);

1472 16 get_max_num_bits 0 4 1884 48 DoubleBitMask< BitMaskNative >::get_max_num_bits 0 1 572 0
76
static constexpr int DoubleBitMask< BitMaskNative >::get_max_num_bits(void);

1473 12 get_num_bits 0 4 1884 44 DoubleBitMask< BitMaskNative >::get_num_bits 0 1 573 0
72
static constexpr int DoubleBitMask< BitMaskNative >::get_num_bits(void);

1474 7 get_bit 0 4 1884 39 DoubleBitMask< BitMaskNative >::get_bit 0 1 574 0
69
inline bool DoubleBitMask< BitMaskNative >::get_bit(int index) const;

1475 7 set_bit 0 4 1884 39 DoubleBitMask< BitMaskNative >::set_bit 0 1 575 0
63
inline void DoubleBitMask< BitMaskNative >::set_bit(int index);

1476 9 clear_bit 0 4 1884 41 DoubleBitMask< BitMaskNative >::clear_bit 0 1 576 0
65
inline void DoubleBitMask< BitMaskNative >::clear_bit(int index);

1477 10 set_bit_to 0 4 1884 42 DoubleBitMask< BitMaskNative >::set_bit_to 0 1 577 0
78
inline void DoubleBitMask< BitMaskNative >::set_bit_to(int index, bool value);

1478 7 is_zero 0 4 1884 39 DoubleBitMask< BitMaskNative >::is_zero 0 1 578 0
64
inline bool DoubleBitMask< BitMaskNative >::is_zero(void) const;

1479 9 is_all_on 0 4 1884 41 DoubleBitMask< BitMaskNative >::is_all_on 0 1 579 0
66
inline bool DoubleBitMask< BitMaskNative >::is_all_on(void) const;

1480 7 extract 0 4 1884 39 DoubleBitMask< BitMaskNative >::extract 0 1 580 0
85
inline uint32_t DoubleBitMask< BitMaskNative >::extract(int low_bit, int size) const;

1481 5 store 0 4 1884 37 DoubleBitMask< BitMaskNative >::store 0 1 581 0
89
inline void DoubleBitMask< BitMaskNative >::store(uint32_t value, int low_bit, int size);

1482 10 has_any_of 0 4 1884 42 DoubleBitMask< BitMaskNative >::has_any_of 0 1 582 0
84
inline bool DoubleBitMask< BitMaskNative >::has_any_of(int low_bit, int size) const;

1483 10 has_all_of 0 4 1884 42 DoubleBitMask< BitMaskNative >::has_all_of 0 1 583 0
84
inline bool DoubleBitMask< BitMaskNative >::has_all_of(int low_bit, int size) const;

1484 9 set_range 0 4 1884 41 DoubleBitMask< BitMaskNative >::set_range 0 1 584 0
77
inline void DoubleBitMask< BitMaskNative >::set_range(int low_bit, int size);

1485 11 clear_range 0 4 1884 43 DoubleBitMask< BitMaskNative >::clear_range 0 1 585 0
79
inline void DoubleBitMask< BitMaskNative >::clear_range(int low_bit, int size);

1486 12 set_range_to 0 4 1884 44 DoubleBitMask< BitMaskNative >::set_range_to 0 1 586 0
92
inline void DoubleBitMask< BitMaskNative >::set_range_to(bool value, int low_bit, int size);

1487 15 get_num_on_bits 0 4 1884 47 DoubleBitMask< BitMaskNative >::get_num_on_bits 0 1 587 0
71
inline int DoubleBitMask< BitMaskNative >::get_num_on_bits(void) const;

1488 16 get_num_off_bits 0 4 1884 48 DoubleBitMask< BitMaskNative >::get_num_off_bits 0 1 588 0
72
inline int DoubleBitMask< BitMaskNative >::get_num_off_bits(void) const;

1489 17 get_lowest_on_bit 0 4 1884 49 DoubleBitMask< BitMaskNative >::get_lowest_on_bit 0 1 589 0
73
inline int DoubleBitMask< BitMaskNative >::get_lowest_on_bit(void) const;

1490 18 get_lowest_off_bit 0 4 1884 50 DoubleBitMask< BitMaskNative >::get_lowest_off_bit 0 1 590 0
74
inline int DoubleBitMask< BitMaskNative >::get_lowest_off_bit(void) const;

1491 18 get_highest_on_bit 0 4 1884 50 DoubleBitMask< BitMaskNative >::get_highest_on_bit 0 1 591 0
74
inline int DoubleBitMask< BitMaskNative >::get_highest_on_bit(void) const;

1492 19 get_highest_off_bit 0 4 1884 51 DoubleBitMask< BitMaskNative >::get_highest_off_bit 0 1 592 0
75
inline int DoubleBitMask< BitMaskNative >::get_highest_off_bit(void) const;

1493 29 get_next_higher_different_bit 0 4 1884 61 DoubleBitMask< BitMaskNative >::get_next_higher_different_bit 0 1 593 0
92
inline int DoubleBitMask< BitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1494 15 invert_in_place 0 4 1884 47 DoubleBitMask< BitMaskNative >::invert_in_place 0 1 594 0
66
inline void DoubleBitMask< BitMaskNative >::invert_in_place(void);

1495 18 has_bits_in_common 0 4 1884 50 DoubleBitMask< BitMaskNative >::has_bits_in_common 0 1 595 0
114
inline bool DoubleBitMask< BitMaskNative >::has_bits_in_common(DoubleBitMask< BitMaskNative > const &other) const;

1496 5 clear 0 4 1884 37 DoubleBitMask< BitMaskNative >::clear 0 1 596 0
56
inline void DoubleBitMask< BitMaskNative >::clear(void);

1497 6 output 0 4 1884 38 DoubleBitMask< BitMaskNative >::output 0 1 597 0
64
void DoubleBitMask< BitMaskNative >::output(ostream &out) const;

1498 13 output_binary 0 4 1884 45 DoubleBitMask< BitMaskNative >::output_binary 0 1 598 0
93
void DoubleBitMask< BitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1499 10 output_hex 0 4 1884 42 DoubleBitMask< BitMaskNative >::output_hex 0 1 599 0
90
void DoubleBitMask< BitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1500 5 write 0 4 1884 37 DoubleBitMask< BitMaskNative >::write 0 1 600 0
85
void DoubleBitMask< BitMaskNative >::write(ostream &out, int indent_level = 0) const;

1501 11 operator == 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator == 0 1 601 0
107
inline bool DoubleBitMask< BitMaskNative >::operator ==(DoubleBitMask< BitMaskNative > const &other) const;

1502 11 operator != 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator != 0 1 602 0
107
inline bool DoubleBitMask< BitMaskNative >::operator !=(DoubleBitMask< BitMaskNative > const &other) const;

1503 10 operator < 0 4 1884 42 DoubleBitMask< BitMaskNative >::operator < 0 1 603 0
106
inline bool DoubleBitMask< BitMaskNative >::operator <(DoubleBitMask< BitMaskNative > const &other) const;

1504 10 compare_to 0 4 1884 42 DoubleBitMask< BitMaskNative >::compare_to 0 1 604 0
105
inline int DoubleBitMask< BitMaskNative >::compare_to(DoubleBitMask< BitMaskNative > const &other) const;

1505 10 operator & 0 4 1884 42 DoubleBitMask< BitMaskNative >::operator & 0 1 605 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator &(DoubleBitMask< BitMaskNative > const &other) const;

1506 10 operator | 0 4 1884 42 DoubleBitMask< BitMaskNative >::operator | 0 1 606 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator |(DoubleBitMask< BitMaskNative > const &other) const;

1507 10 operator ^ 0 4 1884 42 DoubleBitMask< BitMaskNative >::operator ^ 0 1 607 0
132
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ^(DoubleBitMask< BitMaskNative > const &other) const;

1508 10 operator ~ 0 68 1884 42 DoubleBitMask< BitMaskNative >::operator ~ 0 1 608 0
93
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator ~(void) const;

1509 11 operator << 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator << 0 1 609 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator <<(int shift) const;

1510 11 operator >> 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator >> 0 1 610 0
99
inline DoubleBitMask< BitMaskNative > DoubleBitMask< BitMaskNative >::operator >>(int shift) const;

1511 11 operator &= 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator &= 0 1 611 0
101
inline void DoubleBitMask< BitMaskNative >::operator &=(DoubleBitMask< BitMaskNative > const &other);

1512 11 operator |= 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator |= 0 1 612 0
101
inline void DoubleBitMask< BitMaskNative >::operator |=(DoubleBitMask< BitMaskNative > const &other);

1513 11 operator ^= 0 4 1884 43 DoubleBitMask< BitMaskNative >::operator ^= 0 1 613 0
101
inline void DoubleBitMask< BitMaskNative >::operator ^=(DoubleBitMask< BitMaskNative > const &other);

1514 12 operator <<= 0 4 1884 44 DoubleBitMask< BitMaskNative >::operator <<= 0 1 614 0
68
inline void DoubleBitMask< BitMaskNative >::operator <<=(int shift);

1515 12 operator >>= 0 4 1884 44 DoubleBitMask< BitMaskNative >::operator >>= 0 1 615 0
68
inline void DoubleBitMask< BitMaskNative >::operator >>=(int shift);

1516 14 get_class_type 0 4 1884 46 DoubleBitMask< BitMaskNative >::get_class_type 0 1 616 0
71
static TypeHandle DoubleBitMask< BitMaskNative >::get_class_type(void);

1517 13 DoubleBitMask 0 4 1886 51 DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask 0 2 617 618 0
175
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(void);
inline DoubleBitMask< DoubleBitMaskNative >::DoubleBitMask(DoubleBitMask< DoubleBitMaskNative > const &copy);

1518 10 operator = 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator = 0 1 619 0
144
inline DoubleBitMask< DoubleBitMaskNative > &DoubleBitMask< DoubleBitMaskNative >::operator =(DoubleBitMask< DoubleBitMaskNative > const &copy);

1519 6 all_on 0 4 1886 44 DoubleBitMask< DoubleBitMaskNative >::all_on 0 1 620 0
102
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_on(void);

1520 7 all_off 0 4 1886 45 DoubleBitMask< DoubleBitMaskNative >::all_off 0 1 621 0
103
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::all_off(void);

1521 8 lower_on 0 4 1886 46 DoubleBitMask< DoubleBitMaskNative >::lower_on 0 1 622 0
111
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::lower_on(int on_bits);

1522 3 bit 0 4 1886 41 DoubleBitMask< DoubleBitMaskNative >::bit 0 1 623 0
104
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::bit(int index);

1523 5 range 0 4 1886 43 DoubleBitMask< DoubleBitMaskNative >::range 0 1 624 0
118
static inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::range(int low_bit, int size);

1524 14 ~DoubleBitMask 0 4 1886 52 DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask 0 0 0
66
inline DoubleBitMask< DoubleBitMaskNative >::~DoubleBitMask(void);

1525 16 has_max_num_bits 0 4 1886 54 DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits 0 1 625 0
83
static constexpr bool DoubleBitMask< DoubleBitMaskNative >::has_max_num_bits(void);

1526 16 get_max_num_bits 0 4 1886 54 DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits 0 1 626 0
82
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_max_num_bits(void);

1527 12 get_num_bits 0 4 1886 50 DoubleBitMask< DoubleBitMaskNative >::get_num_bits 0 1 627 0
78
static constexpr int DoubleBitMask< DoubleBitMaskNative >::get_num_bits(void);

1528 7 get_bit 0 4 1886 45 DoubleBitMask< DoubleBitMaskNative >::get_bit 0 1 628 0
75
inline bool DoubleBitMask< DoubleBitMaskNative >::get_bit(int index) const;

1529 7 set_bit 0 4 1886 45 DoubleBitMask< DoubleBitMaskNative >::set_bit 0 1 629 0
69
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit(int index);

1530 9 clear_bit 0 4 1886 47 DoubleBitMask< DoubleBitMaskNative >::clear_bit 0 1 630 0
71
inline void DoubleBitMask< DoubleBitMaskNative >::clear_bit(int index);

1531 10 set_bit_to 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::set_bit_to 0 1 631 0
84
inline void DoubleBitMask< DoubleBitMaskNative >::set_bit_to(int index, bool value);

1532 7 is_zero 0 4 1886 45 DoubleBitMask< DoubleBitMaskNative >::is_zero 0 1 632 0
70
inline bool DoubleBitMask< DoubleBitMaskNative >::is_zero(void) const;

1533 9 is_all_on 0 4 1886 47 DoubleBitMask< DoubleBitMaskNative >::is_all_on 0 1 633 0
72
inline bool DoubleBitMask< DoubleBitMaskNative >::is_all_on(void) const;

1534 7 extract 0 4 1886 45 DoubleBitMask< DoubleBitMaskNative >::extract 0 1 634 0
91
inline uint32_t DoubleBitMask< DoubleBitMaskNative >::extract(int low_bit, int size) const;

1535 5 store 0 4 1886 43 DoubleBitMask< DoubleBitMaskNative >::store 0 1 635 0
95
inline void DoubleBitMask< DoubleBitMaskNative >::store(uint32_t value, int low_bit, int size);

1536 10 has_any_of 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::has_any_of 0 1 636 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_any_of(int low_bit, int size) const;

1537 10 has_all_of 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::has_all_of 0 1 637 0
90
inline bool DoubleBitMask< DoubleBitMaskNative >::has_all_of(int low_bit, int size) const;

1538 9 set_range 0 4 1886 47 DoubleBitMask< DoubleBitMaskNative >::set_range 0 1 638 0
83
inline void DoubleBitMask< DoubleBitMaskNative >::set_range(int low_bit, int size);

1539 11 clear_range 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::clear_range 0 1 639 0
85
inline void DoubleBitMask< DoubleBitMaskNative >::clear_range(int low_bit, int size);

1540 12 set_range_to 0 4 1886 50 DoubleBitMask< DoubleBitMaskNative >::set_range_to 0 1 640 0
98
inline void DoubleBitMask< DoubleBitMaskNative >::set_range_to(bool value, int low_bit, int size);

1541 15 get_num_on_bits 0 4 1886 53 DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits 0 1 641 0
77
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_on_bits(void) const;

1542 16 get_num_off_bits 0 4 1886 54 DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits 0 1 642 0
78
inline int DoubleBitMask< DoubleBitMaskNative >::get_num_off_bits(void) const;

1543 17 get_lowest_on_bit 0 4 1886 55 DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit 0 1 643 0
79
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_on_bit(void) const;

1544 18 get_lowest_off_bit 0 4 1886 56 DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit 0 1 644 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_lowest_off_bit(void) const;

1545 18 get_highest_on_bit 0 4 1886 56 DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit 0 1 645 0
80
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_on_bit(void) const;

1546 19 get_highest_off_bit 0 4 1886 57 DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit 0 1 646 0
81
inline int DoubleBitMask< DoubleBitMaskNative >::get_highest_off_bit(void) const;

1547 29 get_next_higher_different_bit 0 4 1886 67 DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit 0 1 647 0
98
inline int DoubleBitMask< DoubleBitMaskNative >::get_next_higher_different_bit(int low_bit) const;

1548 15 invert_in_place 0 4 1886 53 DoubleBitMask< DoubleBitMaskNative >::invert_in_place 0 1 648 0
72
inline void DoubleBitMask< DoubleBitMaskNative >::invert_in_place(void);

1549 18 has_bits_in_common 0 4 1886 56 DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common 0 1 649 0
126
inline bool DoubleBitMask< DoubleBitMaskNative >::has_bits_in_common(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1550 5 clear 0 4 1886 43 DoubleBitMask< DoubleBitMaskNative >::clear 0 1 650 0
62
inline void DoubleBitMask< DoubleBitMaskNative >::clear(void);

1551 6 output 0 4 1886 44 DoubleBitMask< DoubleBitMaskNative >::output 0 1 651 0
70
void DoubleBitMask< DoubleBitMaskNative >::output(ostream &out) const;

1552 13 output_binary 0 4 1886 51 DoubleBitMask< DoubleBitMaskNative >::output_binary 0 1 652 0
99
void DoubleBitMask< DoubleBitMaskNative >::output_binary(ostream &out, int spaces_every = 4) const;

1553 10 output_hex 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::output_hex 0 1 653 0
96
void DoubleBitMask< DoubleBitMaskNative >::output_hex(ostream &out, int spaces_every = 4) const;

1554 5 write 0 4 1886 43 DoubleBitMask< DoubleBitMaskNative >::write 0 1 654 0
91
void DoubleBitMask< DoubleBitMaskNative >::write(ostream &out, int indent_level = 0) const;

1555 11 operator == 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator == 0 1 655 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator ==(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1556 11 operator != 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator != 0 1 656 0
119
inline bool DoubleBitMask< DoubleBitMaskNative >::operator !=(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1557 10 operator < 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator < 0 1 657 0
118
inline bool DoubleBitMask< DoubleBitMaskNative >::operator <(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1558 10 compare_to 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::compare_to 0 1 658 0
117
inline int DoubleBitMask< DoubleBitMaskNative >::compare_to(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1559 10 operator & 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator & 0 1 659 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator &(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1560 10 operator | 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator | 0 1 660 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator |(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1561 10 operator ^ 0 4 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator ^ 0 1 661 0
150
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ^(DoubleBitMask< DoubleBitMaskNative > const &other) const;

1562 10 operator ~ 0 68 1886 48 DoubleBitMask< DoubleBitMaskNative >::operator ~ 0 1 662 0
105
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator ~(void) const;

1563 11 operator << 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator << 0 1 663 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator <<(int shift) const;

1564 11 operator >> 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator >> 0 1 664 0
111
inline DoubleBitMask< DoubleBitMaskNative > DoubleBitMask< DoubleBitMaskNative >::operator >>(int shift) const;

1565 11 operator &= 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator &= 0 1 665 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator &=(DoubleBitMask< DoubleBitMaskNative > const &other);

1566 11 operator |= 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator |= 0 1 666 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator |=(DoubleBitMask< DoubleBitMaskNative > const &other);

1567 11 operator ^= 0 4 1886 49 DoubleBitMask< DoubleBitMaskNative >::operator ^= 0 1 667 0
113
inline void DoubleBitMask< DoubleBitMaskNative >::operator ^=(DoubleBitMask< DoubleBitMaskNative > const &other);

1568 12 operator <<= 0 4 1886 50 DoubleBitMask< DoubleBitMaskNative >::operator <<= 0 1 668 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator <<=(int shift);

1569 12 operator >>= 0 4 1886 50 DoubleBitMask< DoubleBitMaskNative >::operator >>= 0 1 669 0
74
inline void DoubleBitMask< DoubleBitMaskNative >::operator >>=(int shift);

1570 14 get_class_type 0 4 1886 52 DoubleBitMask< DoubleBitMaskNative >::get_class_type 0 1 670 0
77
static TypeHandle DoubleBitMask< DoubleBitMaskNative >::get_class_type(void);

1571 9 ascii_key 0 4 1889 25 KeyboardButton::ascii_key 0 1 673 144
/**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */
69
static ButtonHandle KeyboardButton::ascii_key(char ascii_equivalent);

1572 5 space 0 4 1889 21 KeyboardButton::space 0 1 674 0
48
static ButtonHandle KeyboardButton::space(void);

1573 9 backspace 0 4 1889 25 KeyboardButton::backspace 0 1 675 0
52
static ButtonHandle KeyboardButton::backspace(void);

1574 3 tab 0 4 1889 19 KeyboardButton::tab 0 1 676 0
46
static ButtonHandle KeyboardButton::tab(void);

1575 5 enter 0 4 1889 21 KeyboardButton::enter 0 1 677 0
48
static ButtonHandle KeyboardButton::enter(void);

1576 6 escape 0 4 1889 22 KeyboardButton::escape 0 1 678 0
49
static ButtonHandle KeyboardButton::escape(void);

1577 2 f1 0 4 1889 18 KeyboardButton::f1 0 1 679 0
45
static ButtonHandle KeyboardButton::f1(void);

1578 2 f2 0 4 1889 18 KeyboardButton::f2 0 1 680 0
45
static ButtonHandle KeyboardButton::f2(void);

1579 2 f3 0 4 1889 18 KeyboardButton::f3 0 1 681 0
45
static ButtonHandle KeyboardButton::f3(void);

1580 2 f4 0 4 1889 18 KeyboardButton::f4 0 1 682 0
45
static ButtonHandle KeyboardButton::f4(void);

1581 2 f5 0 4 1889 18 KeyboardButton::f5 0 1 683 0
45
static ButtonHandle KeyboardButton::f5(void);

1582 2 f6 0 4 1889 18 KeyboardButton::f6 0 1 684 0
45
static ButtonHandle KeyboardButton::f6(void);

1583 2 f7 0 4 1889 18 KeyboardButton::f7 0 1 685 0
45
static ButtonHandle KeyboardButton::f7(void);

1584 2 f8 0 4 1889 18 KeyboardButton::f8 0 1 686 0
45
static ButtonHandle KeyboardButton::f8(void);

1585 2 f9 0 4 1889 18 KeyboardButton::f9 0 1 687 0
45
static ButtonHandle KeyboardButton::f9(void);

1586 3 f10 0 4 1889 19 KeyboardButton::f10 0 1 688 0
46
static ButtonHandle KeyboardButton::f10(void);

1587 3 f11 0 4 1889 19 KeyboardButton::f11 0 1 689 0
46
static ButtonHandle KeyboardButton::f11(void);

1588 3 f12 0 4 1889 19 KeyboardButton::f12 0 1 690 0
46
static ButtonHandle KeyboardButton::f12(void);

1589 3 f13 0 4 1889 19 KeyboardButton::f13 0 1 691 59
// PC keyboards don't have these four buttons, but Macs do.
46
static ButtonHandle KeyboardButton::f13(void);

1590 3 f14 0 4 1889 19 KeyboardButton::f14 0 1 692 0
46
static ButtonHandle KeyboardButton::f14(void);

1591 3 f15 0 4 1889 19 KeyboardButton::f15 0 1 693 0
46
static ButtonHandle KeyboardButton::f15(void);

1592 3 f16 0 4 1889 19 KeyboardButton::f16 0 1 694 0
46
static ButtonHandle KeyboardButton::f16(void);

1593 4 left 0 4 1889 20 KeyboardButton::left 0 1 695 0
47
static ButtonHandle KeyboardButton::left(void);

1594 5 right 0 4 1889 21 KeyboardButton::right 0 1 696 0
48
static ButtonHandle KeyboardButton::right(void);

1595 2 up 0 4 1889 18 KeyboardButton::up 0 1 697 0
45
static ButtonHandle KeyboardButton::up(void);

1596 4 down 0 4 1889 20 KeyboardButton::down 0 1 698 0
47
static ButtonHandle KeyboardButton::down(void);

1597 7 page_up 0 4 1889 23 KeyboardButton::page_up 0 1 699 0
50
static ButtonHandle KeyboardButton::page_up(void);

1598 9 page_down 0 4 1889 25 KeyboardButton::page_down 0 1 700 0
52
static ButtonHandle KeyboardButton::page_down(void);

1599 4 home 0 4 1889 20 KeyboardButton::home 0 1 701 0
47
static ButtonHandle KeyboardButton::home(void);

1600 3 end 0 4 1889 19 KeyboardButton::end 0 1 702 0
46
static ButtonHandle KeyboardButton::end(void);

1601 6 insert 0 4 1889 22 KeyboardButton::insert 0 1 703 0
49
static ButtonHandle KeyboardButton::insert(void);

1602 3 del 0 4 1889 19 KeyboardButton::del 0 1 704 27
// delete is a C++ keyword.
46
static ButtonHandle KeyboardButton::del(void);

1603 4 help 0 4 1889 20 KeyboardButton::help 0 1 705 27
// delete is a C++ keyword.
47
static ButtonHandle KeyboardButton::help(void);

1604 4 menu 0 4 1889 20 KeyboardButton::menu 0 1 706 0
47
static ButtonHandle KeyboardButton::menu(void);

1605 5 shift 0 4 1889 21 KeyboardButton::shift 0 1 707 0
48
static ButtonHandle KeyboardButton::shift(void);

1606 7 control 0 4 1889 23 KeyboardButton::control 0 1 708 0
50
static ButtonHandle KeyboardButton::control(void);

1607 3 alt 0 4 1889 19 KeyboardButton::alt 0 1 709 0
46
static ButtonHandle KeyboardButton::alt(void);

1608 4 meta 0 4 1889 20 KeyboardButton::meta 0 1 710 0
47
static ButtonHandle KeyboardButton::meta(void);

1609 9 caps_lock 0 4 1889 25 KeyboardButton::caps_lock 0 1 711 0
52
static ButtonHandle KeyboardButton::caps_lock(void);

1610 10 shift_lock 0 4 1889 26 KeyboardButton::shift_lock 0 1 712 0
53
static ButtonHandle KeyboardButton::shift_lock(void);

1611 8 num_lock 0 4 1889 24 KeyboardButton::num_lock 0 1 713 0
51
static ButtonHandle KeyboardButton::num_lock(void);

1612 11 scroll_lock 0 4 1889 27 KeyboardButton::scroll_lock 0 1 714 0
54
static ButtonHandle KeyboardButton::scroll_lock(void);

1613 12 print_screen 0 4 1889 28 KeyboardButton::print_screen 0 1 715 0
55
static ButtonHandle KeyboardButton::print_screen(void);

1614 5 pause 0 4 1889 21 KeyboardButton::pause 0 1 716 0
48
static ButtonHandle KeyboardButton::pause(void);

1615 6 lshift 0 4 1889 22 KeyboardButton::lshift 0 1 717 0
49
static ButtonHandle KeyboardButton::lshift(void);

1616 6 rshift 0 4 1889 22 KeyboardButton::rshift 0 1 718 0
49
static ButtonHandle KeyboardButton::rshift(void);

1617 8 lcontrol 0 4 1889 24 KeyboardButton::lcontrol 0 1 719 0
51
static ButtonHandle KeyboardButton::lcontrol(void);

1618 8 rcontrol 0 4 1889 24 KeyboardButton::rcontrol 0 1 720 0
51
static ButtonHandle KeyboardButton::rcontrol(void);

1619 4 lalt 0 4 1889 20 KeyboardButton::lalt 0 1 721 0
47
static ButtonHandle KeyboardButton::lalt(void);

1620 4 ralt 0 4 1889 20 KeyboardButton::ralt 0 1 722 0
47
static ButtonHandle KeyboardButton::ralt(void);

1621 5 lmeta 0 4 1889 21 KeyboardButton::lmeta 0 1 723 0
48
static ButtonHandle KeyboardButton::lmeta(void);

1622 5 rmeta 0 4 1889 21 KeyboardButton::rmeta 0 1 724 0
48
static ButtonHandle KeyboardButton::rmeta(void);

1623 14 KeyboardButton 0 4 1889 30 KeyboardButton::KeyboardButton 0 2 671 672 0
127
inline KeyboardButton::KeyboardButton(void) = default;
inline KeyboardButton::KeyboardButton(KeyboardButton const &) = default;

1624 15 ~KeyboardButton 0 4 1889 31 KeyboardButton::~KeyboardButton 0 0 0
38
KeyboardButton::~KeyboardButton(void);

1625 13 load_prc_file 0 1 0 13 load_prc_file 0 1 911 1206
/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */

/**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */
52
ConfigPage *load_prc_file(Filename const &filename);

1626 18 load_prc_file_data 0 1 0 18 load_prc_file_data 0 1 912 794
/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */

/**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */
81
ConfigPage *load_prc_file_data(std::string const &name, std::string const &data);

1627 15 unload_prc_file 0 1 0 15 unload_prc_file 0 1 913 0
39
bool unload_prc_file(ConfigPage *page);

1628 18 hash_prc_variables 0 1 0 18 hash_prc_variables 0 1 914 0
39
void hash_prc_variables(HashVal &hash);

1629 15 ModifierButtons 0 4 1890 32 ModifierButtons::ModifierButtons 0 2 725 726 22
/**
 *
 */

/**
 *
 */
102
ModifierButtons::ModifierButtons(void);
ModifierButtons::ModifierButtons(ModifierButtons const &copy);

1630 16 ~ModifierButtons 0 4 1890 33 ModifierButtons::~ModifierButtons 0 0 10
/**
 *
 */
40
ModifierButtons::~ModifierButtons(void);

1631 10 operator = 0 4 1890 27 ModifierButtons::operator = 0 1 727 0
69
inline void ModifierButtons::operator =(ModifierButtons const &copy);

1632 11 operator == 0 4 1890 28 ModifierButtons::operator == 0 1 728 0
77
inline bool ModifierButtons::operator ==(ModifierButtons const &other) const;

1633 11 operator != 0 4 1890 28 ModifierButtons::operator != 0 1 729 0
77
inline bool ModifierButtons::operator !=(ModifierButtons const &other) const;

1634 10 operator < 0 4 1890 27 ModifierButtons::operator < 0 1 730 0
76
inline bool ModifierButtons::operator <(ModifierButtons const &other) const;

1635 10 operator & 0 4 1890 27 ModifierButtons::operator & 0 1 731 0
87
inline ModifierButtons ModifierButtons::operator &(ModifierButtons const &other) const;

1636 10 operator | 0 4 1890 27 ModifierButtons::operator | 0 1 732 0
87
inline ModifierButtons ModifierButtons::operator |(ModifierButtons const &other) const;

1637 11 operator &= 0 4 1890 28 ModifierButtons::operator &= 0 1 733 0
64
void ModifierButtons::operator &=(ModifierButtons const &other);

1638 11 operator |= 0 4 1890 28 ModifierButtons::operator |= 0 1 734 0
64
void ModifierButtons::operator |=(ModifierButtons const &other);

1639 15 set_button_list 0 4 1890 32 ModifierButtons::set_button_list 0 1 735 374
/**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */
68
void ModifierButtons::set_button_list(ModifierButtons const &other);

1640 7 matches 0 4 1890 24 ModifierButtons::matches 0 1 736 232
/**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */
66
bool ModifierButtons::matches(ModifierButtons const &other) const;

1641 10 add_button 0 4 1890 27 ModifierButtons::add_button 0 1 737 248
/**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */
54
bool ModifierButtons::add_button(ButtonHandle button);

1642 10 has_button 0 4 1890 27 ModifierButtons::has_button 0 1 738 109
/**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */
60
bool ModifierButtons::has_button(ButtonHandle button) const;

1643 13 remove_button 0 4 1890 30 ModifierButtons::remove_button 0 1 739 313
/**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */
57
bool ModifierButtons::remove_button(ButtonHandle button);

1644 15 get_num_buttons 0 4 1890 32 ModifierButtons::get_num_buttons 0 1 740 143
/**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */
56
inline int ModifierButtons::get_num_buttons(void) const;

1645 10 get_button 0 4 1890 27 ModifierButtons::get_button 0 1 741 185
/**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */
65
inline ButtonHandle ModifierButtons::get_button(int index) const;

1646 11 button_down 0 4 1890 28 ModifierButtons::button_down 0 1 742 305
/**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
55
bool ModifierButtons::button_down(ButtonHandle button);

1647 9 button_up 0 4 1890 26 ModifierButtons::button_up 0 1 743 306
/**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */
53
bool ModifierButtons::button_up(ButtonHandle button);

1648 14 all_buttons_up 0 4 1890 31 ModifierButtons::all_buttons_up 0 1 744 66
/**
 * Marks all monitored buttons as being in the "up" state.
 */
50
inline void ModifierButtons::all_buttons_up(void);

1649 7 is_down 0 4 1890 24 ModifierButtons::is_down 0 2 745 746 264
/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */

/**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */
112
bool ModifierButtons::is_down(ButtonHandle button) const;
inline bool ModifierButtons::is_down(int index) const;

1650 11 is_any_down 0 4 1890 28 ModifierButtons::is_any_down 0 1 747 109
/**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */
53
inline bool ModifierButtons::is_any_down(void) const;

1651 10 get_prefix 0 4 1890 27 ModifierButtons::get_prefix 0 1 748 150
/**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */
52
std::string ModifierButtons::get_prefix(void) const;

1652 6 output 0 4 1890 23 ModifierButtons::output 0 1 749 69
/**
 * Writes a one-line summary of the buttons known to be down.
 */
49
void ModifierButtons::output(ostream &out) const;

1653 5 write 0 4 1890 22 ModifierButtons::write 0 1 750 123
/**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */
48
void ModifierButtons::write(ostream &out) const;

1654 6 button 0 4 1891 19 MouseButton::button 0 1 753 166
/**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */
59
static ButtonHandle MouseButton::button(int button_number);

1655 3 one 0 4 1891 16 MouseButton::one 0 1 754 75
/**
 * Returns the ButtonHandle associated with the first mouse button.
 */
43
static ButtonHandle MouseButton::one(void);

1656 3 two 0 4 1891 16 MouseButton::two 0 1 755 76
/**
 * Returns the ButtonHandle associated with the second mouse button.
 */
43
static ButtonHandle MouseButton::two(void);

1657 5 three 0 4 1891 18 MouseButton::three 0 1 756 75
/**
 * Returns the ButtonHandle associated with the third mouse button.
 */
45
static ButtonHandle MouseButton::three(void);

1658 4 four 0 4 1891 17 MouseButton::four 0 1 757 76
/**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */
44
static ButtonHandle MouseButton::four(void);

1659 4 five 0 4 1891 17 MouseButton::five 0 1 758 75
/**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */
44
static ButtonHandle MouseButton::five(void);

1660 8 wheel_up 0 4 1891 21 MouseButton::wheel_up 0 1 759 98
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */
48
static ButtonHandle MouseButton::wheel_up(void);

1661 10 wheel_down 0 4 1891 23 MouseButton::wheel_down 0 1 760 100
/**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */
50
static ButtonHandle MouseButton::wheel_down(void);

1662 10 wheel_left 0 4 1891 23 MouseButton::wheel_left 0 1 761 148
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
50
static ButtonHandle MouseButton::wheel_left(void);

1663 11 wheel_right 0 4 1891 24 MouseButton::wheel_right 0 1 762 149
/**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */
51
static ButtonHandle MouseButton::wheel_right(void);

1664 15 is_mouse_button 0 4 1891 28 MouseButton::is_mouse_button 0 1 763 117
/**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */
62
static bool MouseButton::is_mouse_button(ButtonHandle button);

1665 11 MouseButton 0 4 1891 24 MouseButton::MouseButton 0 2 751 752 0
112
inline MouseButton::MouseButton(void) = default;
inline MouseButton::MouseButton(MouseButton const &) = default;

1666 12 ~MouseButton 0 4 1891 25 MouseButton::~MouseButton 0 0 0
32
MouseButton::~MouseButton(void);

1667 9 MouseData 0 4 1892 20 MouseData::MouseData 0 2 764 765 22
/**
 *
 */

/**
 *
 */
86
inline MouseData::MouseData(void);
inline MouseData::MouseData(MouseData const &copy);

1668 10 operator = 0 4 1892 21 MouseData::operator = 0 1 766 0
57
inline void MouseData::operator =(MouseData const &copy);

1669 5 get_x 0 4 1892 16 MouseData::get_x 0 1 767 10
/**
 *
 */
43
inline double MouseData::get_x(void) const;

1670 5 get_y 0 4 1892 16 MouseData::get_y 0 1 768 10
/**
 *
 */
43
inline double MouseData::get_y(void) const;

1671 13 get_in_window 0 4 1892 24 MouseData::get_in_window 0 1 769 10
/**
 *
 */
49
inline bool MouseData::get_in_window(void) const;

1672 6 output 0 4 1892 17 MouseData::output 0 1 770 10
/**
 *
 */
43
void MouseData::output(ostream &out) const;

1673 10 ~MouseData 0 4 1892 21 MouseData::~MouseData 0 0 0
28
MouseData::~MouseData(void);

1674 18 get_node_ref_count 0 4 1893 44 NodeCachedReferenceCount::get_node_ref_count 0 1 771 47
/**
 * Returns the current reference count.
 */
68
inline int NodeCachedReferenceCount::get_node_ref_count(void) const;

1675 8 node_ref 0 4 1893 34 NodeCachedReferenceCount::node_ref 0 1 772 349
/**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
59
inline void NodeCachedReferenceCount::node_ref(void) const;

1676 10 node_unref 0 4 1893 36 NodeCachedReferenceCount::node_unref 0 1 773 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
61
inline bool NodeCachedReferenceCount::node_unref(void) const;

1677 24 test_ref_count_integrity 0 4 1893 50 NodeCachedReferenceCount::test_ref_count_integrity 0 1 774 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
75
inline bool NodeCachedReferenceCount::test_ref_count_integrity(void) const;

1678 19 get_referenced_bits 0 4 1893 45 NodeCachedReferenceCount::get_referenced_bits 0 1 775 293
/**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */
69
inline int NodeCachedReferenceCount::get_referenced_bits(void) const;

1679 14 get_class_type 0 4 1893 40 NodeCachedReferenceCount::get_class_type 0 1 776 0
65
static TypeHandle NodeCachedReferenceCount::get_class_type(void);

1680 11 SparseArray 0 4 1895 24 SparseArray::SparseArray 0 3 777 778 779 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
144
inline SparseArray::SparseArray(void);
inline SparseArray::SparseArray(SparseArray const &copy);
SparseArray::SparseArray(BitArray const &from);

1681 10 operator = 0 4 1895 23 SparseArray::operator = 0 1 780 10
/**
 *
 */
69
inline SparseArray &SparseArray::operator =(SparseArray const &copy);

1682 6 all_on 0 4 1895 19 SparseArray::all_on 0 1 781 72
/**
 * Returns a SparseArray with an infinite array of bits, all on.
 */
52
static inline SparseArray SparseArray::all_on(void);

1683 7 all_off 0 4 1895 20 SparseArray::all_off 0 1 782 56
/**
 * Returns a SparseArray whose bits are all off.
 */
53
static inline SparseArray SparseArray::all_off(void);

1684 8 lower_on 0 4 1895 21 SparseArray::lower_on 0 1 783 65
/**
 * Returns a SparseArray whose lower on_bits bits are on.
 */
61
static inline SparseArray SparseArray::lower_on(int on_bits);

1685 3 bit 0 4 1895 16 SparseArray::bit 0 1 784 64
/**
 * Returns a SparseArray with only the indicated bit on.
 */
54
static inline SparseArray SparseArray::bit(int index);

1686 5 range 0 4 1895 18 SparseArray::range 0 1 785 79
/**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */
68
static inline SparseArray SparseArray::range(int low_bit, int size);

1687 12 ~SparseArray 0 4 1895 25 SparseArray::~SparseArray 0 0 10
/**
 *
 */
39
inline SparseArray::~SparseArray(void);

1688 16 has_max_num_bits 0 4 1895 29 SparseArray::has_max_num_bits 0 1 786 393
/**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */
55
static inline bool SparseArray::has_max_num_bits(void);

1689 16 get_max_num_bits 0 4 1895 29 SparseArray::get_max_num_bits 0 1 787 428
/**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */
54
static inline int SparseArray::get_max_num_bits(void);

1690 12 get_num_bits 0 4 1895 25 SparseArray::get_num_bits 0 1 788 300
/**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */
49
inline int SparseArray::get_num_bits(void) const;

1691 7 get_bit 0 4 1895 20 SparseArray::get_bit 0 1 789 191
/**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */
50
inline bool SparseArray::get_bit(int index) const;

1692 7 set_bit 0 4 1895 20 SparseArray::set_bit 0 1 790 97
/**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
44
inline void SparseArray::set_bit(int index);

1693 9 clear_bit 0 4 1895 22 SparseArray::clear_bit 0 1 791 98
/**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */
46
inline void SparseArray::clear_bit(int index);

1694 10 set_bit_to 0 4 1895 23 SparseArray::set_bit_to 0 1 792 84
/**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */
59
inline void SparseArray::set_bit_to(int index, bool value);

1695 16 get_highest_bits 0 4 1895 29 SparseArray::get_highest_bits 0 1 793 118
/**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */
54
inline bool SparseArray::get_highest_bits(void) const;

1696 7 is_zero 0 4 1895 20 SparseArray::is_zero 0 1 794 71
/**
 * Returns true if the entire bitmask is zero, false otherwise.
 */
45
inline bool SparseArray::is_zero(void) const;

1697 9 is_all_on 0 4 1895 22 SparseArray::is_all_on 0 1 795 70
/**
 * Returns true if the entire bitmask is one, false otherwise.
 */
47
inline bool SparseArray::is_all_on(void) const;

1698 10 has_any_of 0 4 1895 23 SparseArray::has_any_of 0 1 796 82
/**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */
65
inline bool SparseArray::has_any_of(int low_bit, int size) const;

1699 10 has_all_of 0 4 1895 23 SparseArray::has_all_of 0 1 797 84
/**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */
65
inline bool SparseArray::has_all_of(int low_bit, int size) const;

1700 9 set_range 0 4 1895 22 SparseArray::set_range 0 1 798 47
/**
 * Sets the indicated range of bits on.
 */
58
inline void SparseArray::set_range(int low_bit, int size);

1701 11 clear_range 0 4 1895 24 SparseArray::clear_range 0 1 799 48
/**
 * Sets the indicated range of bits off.
 */
60
inline void SparseArray::clear_range(int low_bit, int size);

1702 12 set_range_to 0 4 1895 25 SparseArray::set_range_to 0 1 800 64
/**
 * Sets the indicated range of bits to either on or off.
 */
73
inline void SparseArray::set_range_to(bool value, int low_bit, int size);

1703 15 get_num_on_bits 0 4 1895 28 SparseArray::get_num_on_bits 0 1 801 127
/**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */
45
int SparseArray::get_num_on_bits(void) const;

1704 16 get_num_off_bits 0 4 1895 29 SparseArray::get_num_off_bits 0 1 802 127
/**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */
46
int SparseArray::get_num_off_bits(void) const;

1705 17 get_lowest_on_bit 0 4 1895 30 SparseArray::get_lowest_on_bit 0 1 803 146
/**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */
47
int SparseArray::get_lowest_on_bit(void) const;

1706 18 get_lowest_off_bit 0 4 1895 31 SparseArray::get_lowest_off_bit 0 1 804 146
/**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */
48
int SparseArray::get_lowest_off_bit(void) const;

1707 18 get_highest_on_bit 0 4 1895 31 SparseArray::get_highest_on_bit 0 1 805 143
/**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */
48
int SparseArray::get_highest_on_bit(void) const;

1708 19 get_highest_off_bit 0 4 1895 32 SparseArray::get_highest_off_bit 0 1 806 143
/**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */
49
int SparseArray::get_highest_off_bit(void) const;

1709 29 get_next_higher_different_bit 0 4 1895 42 SparseArray::get_next_higher_different_bit 0 1 807 287
/**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */
66
int SparseArray::get_next_higher_different_bit(int low_bit) const;

1710 15 invert_in_place 0 4 1895 28 SparseArray::invert_in_place 0 1 808 93
/**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */
47
inline void SparseArray::invert_in_place(void);

1711 18 has_bits_in_common 0 4 1895 31 SparseArray::has_bits_in_common 0 1 809 181
/**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */
69
bool SparseArray::has_bits_in_common(SparseArray const &other) const;

1712 5 clear 0 4 1895 18 SparseArray::clear 0 1 810 52
/**
 * Sets all the bits in the SparseArray off.
 */
37
inline void SparseArray::clear(void);

1713 6 output 0 4 1895 19 SparseArray::output 0 1 811 10
/**
 *
 */
45
void SparseArray::output(ostream &out) const;

1714 11 operator == 0 4 1895 24 SparseArray::operator == 0 1 812 0
69
inline bool SparseArray::operator ==(SparseArray const &other) const;

1715 11 operator != 0 4 1895 24 SparseArray::operator != 0 1 813 0
69
inline bool SparseArray::operator !=(SparseArray const &other) const;

1716 10 operator < 0 4 1895 23 SparseArray::operator < 0 1 814 0
68
inline bool SparseArray::operator <(SparseArray const &other) const;

1717 10 compare_to 0 4 1895 23 SparseArray::compare_to 0 1 815 242
/**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */
60
int SparseArray::compare_to(SparseArray const &other) const;

1718 10 operator & 0 4 1895 23 SparseArray::operator & 0 1 816 0
75
inline SparseArray SparseArray::operator &(SparseArray const &other) const;

1719 10 operator | 0 4 1895 23 SparseArray::operator | 0 1 817 0
75
inline SparseArray SparseArray::operator |(SparseArray const &other) const;

1720 10 operator ^ 0 4 1895 23 SparseArray::operator ^ 0 1 818 0
75
inline SparseArray SparseArray::operator ^(SparseArray const &other) const;

1721 10 operator ~ 0 68 1895 23 SparseArray::operator ~ 0 1 819 0
55
inline SparseArray SparseArray::operator ~(void) const;

1722 11 operator << 0 4 1895 24 SparseArray::operator << 0 1 820 0
61
inline SparseArray SparseArray::operator <<(int shift) const;

1723 11 operator >> 0 4 1895 24 SparseArray::operator >> 0 1 821 0
61
inline SparseArray SparseArray::operator >>(int shift) const;

1724 11 operator &= 0 4 1895 24 SparseArray::operator &= 0 1 822 0
56
void SparseArray::operator &=(SparseArray const &other);

1725 11 operator |= 0 4 1895 24 SparseArray::operator |= 0 1 823 0
56
void SparseArray::operator |=(SparseArray const &other);

1726 11 operator ^= 0 4 1895 24 SparseArray::operator ^= 0 1 824 0
56
void SparseArray::operator ^=(SparseArray const &other);

1727 12 operator <<= 0 4 1895 25 SparseArray::operator <<= 0 1 825 0
49
inline void SparseArray::operator <<=(int shift);

1728 12 operator >>= 0 4 1895 25 SparseArray::operator >>= 0 1 826 0
49
inline void SparseArray::operator >>=(int shift);

1729 10 is_inverse 0 4 1895 23 SparseArray::is_inverse 0 1 827 330
/**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */
48
inline bool SparseArray::is_inverse(void) const;

1730 17 get_num_subranges 0 4 1895 30 SparseArray::get_num_subranges 0 1 828 237
/**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */
62
inline std::size_t SparseArray::get_num_subranges(void) const;

1731 18 get_subrange_begin 0 4 1895 31 SparseArray::get_subrange_begin 0 1 829 94
/**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */
64
inline int SparseArray::get_subrange_begin(std::size_t n) const;

1732 16 get_subrange_end 0 4 1895 29 SparseArray::get_subrange_end 0 1 830 104
/**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */
62
inline int SparseArray::get_subrange_end(std::size_t n) const;

1733 14 get_class_type 0 4 1895 27 SparseArray::get_class_type 0 1 831 0
52
static TypeHandle SparseArray::get_class_type(void);

1734 14 get_value_type 0 6 1896 30 ParamValueBase::get_value_type 0 1 832 52
/**
 * Returns the type of the underlying value.
 */
69
virtual inline TypeHandle ParamValueBase::get_value_type(void) const;

1735 6 output 0 6 1896 22 ParamValueBase::output 0 1 833 0
60
virtual void ParamValueBase::output(ostream &out) const = 0;

1736 14 get_class_type 0 4 1896 30 ParamValueBase::get_class_type 0 1 834 0
55
static TypeHandle ParamValueBase::get_class_type(void);

1737 18 ParamTypedRefCount 0 4 1897 38 ParamTypedRefCount::ParamTypedRefCount 0 1 835 10
/**
 *
 */
80
inline ParamTypedRefCount::ParamTypedRefCount(TypedReferenceCount const *value);

1738 9 get_value 0 4 1897 29 ParamTypedRefCount::get_value 0 1 836 55
/**
 * Retrieves the value stored in the parameter.
 */
70
inline TypedReferenceCount *ParamTypedRefCount::get_value(void) const;

1739 14 get_class_type 0 4 1897 34 ParamTypedRefCount::get_class_type 0 1 837 0
59
static TypeHandle ParamTypedRefCount::get_class_type(void);

1740 10 ParamValue 0 4 1899 32 ParamValue< string >::ParamValue 0 1 838 0
66
inline ParamValue< string >::ParamValue(std::string const &value);

1741 9 set_value 0 4 1899 31 ParamValue< string >::set_value 0 1 839 0
134
inline void ParamValue< string >::set_value(std::string const &value);
inline void ParamValue< string >::set_value(Type const &value);

1742 9 get_value 0 4 1899 31 ParamValue< string >::get_value 0 1 840 0
70
inline std::string const &ParamValue< string >::get_value(void) const;

1743 14 get_class_type 0 4 1899 36 ParamValue< string >::get_class_type 0 1 841 0
61
static TypeHandle ParamValue< string >::get_class_type(void);

1744 10 ParamValue 0 4 1902 33 ParamValue< wstring >::ParamValue 0 1 842 0
68
inline ParamValue< wstring >::ParamValue(std::wstring const &value);

1745 9 set_value 0 4 1902 32 ParamValue< wstring >::set_value 0 1 843 0
137
inline void ParamValue< wstring >::set_value(std::wstring const &value);
inline void ParamValue< wstring >::set_value(Type const &value);

1746 9 get_value 0 4 1902 32 ParamValue< wstring >::get_value 0 1 844 0
72
inline std::wstring const &ParamValue< wstring >::get_value(void) const;

1747 14 get_class_type 0 4 1902 37 ParamValue< wstring >::get_class_type 0 1 845 0
62
static TypeHandle ParamValue< wstring >::get_class_type(void);

1748 10 ParamValue 0 4 1904 36 ParamValue< LVecBase2d >::ParamValue 0 1 846 0
69
inline ParamValue< LVecBase2d >::ParamValue(LVecBase2d const &value);

1749 9 set_value 0 4 1904 35 ParamValue< LVecBase2d >::set_value 0 1 847 0
141
inline void ParamValue< LVecBase2d >::set_value(LVecBase2d const &value);
inline void ParamValue< LVecBase2d >::set_value(Type const &value);

1750 9 get_value 0 4 1904 35 ParamValue< LVecBase2d >::get_value 0 1 848 0
73
inline LVecBase2d const &ParamValue< LVecBase2d >::get_value(void) const;

1751 14 get_class_type 0 4 1904 40 ParamValue< LVecBase2d >::get_class_type 0 1 849 0
65
static TypeHandle ParamValue< LVecBase2d >::get_class_type(void);

1752 10 ParamValue 0 4 1906 36 ParamValue< LVecBase2f >::ParamValue 0 1 850 0
69
inline ParamValue< LVecBase2f >::ParamValue(LVecBase2f const &value);

1753 9 set_value 0 4 1906 35 ParamValue< LVecBase2f >::set_value 0 1 851 0
141
inline void ParamValue< LVecBase2f >::set_value(LVecBase2f const &value);
inline void ParamValue< LVecBase2f >::set_value(Type const &value);

1754 9 get_value 0 4 1906 35 ParamValue< LVecBase2f >::get_value 0 1 852 0
73
inline LVecBase2f const &ParamValue< LVecBase2f >::get_value(void) const;

1755 14 get_class_type 0 4 1906 40 ParamValue< LVecBase2f >::get_class_type 0 1 853 0
65
static TypeHandle ParamValue< LVecBase2f >::get_class_type(void);

1756 10 ParamValue 0 4 1908 36 ParamValue< LVecBase2i >::ParamValue 0 1 854 0
69
inline ParamValue< LVecBase2i >::ParamValue(LVecBase2i const &value);

1757 9 set_value 0 4 1908 35 ParamValue< LVecBase2i >::set_value 0 1 855 0
141
inline void ParamValue< LVecBase2i >::set_value(LVecBase2i const &value);
inline void ParamValue< LVecBase2i >::set_value(Type const &value);

1758 9 get_value 0 4 1908 35 ParamValue< LVecBase2i >::get_value 0 1 856 0
73
inline LVecBase2i const &ParamValue< LVecBase2i >::get_value(void) const;

1759 14 get_class_type 0 4 1908 40 ParamValue< LVecBase2i >::get_class_type 0 1 857 0
65
static TypeHandle ParamValue< LVecBase2i >::get_class_type(void);

1760 10 ParamValue 0 4 1910 36 ParamValue< LVecBase3d >::ParamValue 0 1 858 0
69
inline ParamValue< LVecBase3d >::ParamValue(LVecBase3d const &value);

1761 9 set_value 0 4 1910 35 ParamValue< LVecBase3d >::set_value 0 1 859 0
141
inline void ParamValue< LVecBase3d >::set_value(LVecBase3d const &value);
inline void ParamValue< LVecBase3d >::set_value(Type const &value);

1762 9 get_value 0 4 1910 35 ParamValue< LVecBase3d >::get_value 0 1 860 0
73
inline LVecBase3d const &ParamValue< LVecBase3d >::get_value(void) const;

1763 14 get_class_type 0 4 1910 40 ParamValue< LVecBase3d >::get_class_type 0 1 861 0
65
static TypeHandle ParamValue< LVecBase3d >::get_class_type(void);

1764 10 ParamValue 0 4 1912 36 ParamValue< LVecBase3f >::ParamValue 0 1 862 0
69
inline ParamValue< LVecBase3f >::ParamValue(LVecBase3f const &value);

1765 9 set_value 0 4 1912 35 ParamValue< LVecBase3f >::set_value 0 1 863 0
141
inline void ParamValue< LVecBase3f >::set_value(LVecBase3f const &value);
inline void ParamValue< LVecBase3f >::set_value(Type const &value);

1766 9 get_value 0 4 1912 35 ParamValue< LVecBase3f >::get_value 0 1 864 0
73
inline LVecBase3f const &ParamValue< LVecBase3f >::get_value(void) const;

1767 14 get_class_type 0 4 1912 40 ParamValue< LVecBase3f >::get_class_type 0 1 865 0
65
static TypeHandle ParamValue< LVecBase3f >::get_class_type(void);

1768 10 ParamValue 0 4 1914 36 ParamValue< LVecBase3i >::ParamValue 0 1 866 0
69
inline ParamValue< LVecBase3i >::ParamValue(LVecBase3i const &value);

1769 9 set_value 0 4 1914 35 ParamValue< LVecBase3i >::set_value 0 1 867 0
141
inline void ParamValue< LVecBase3i >::set_value(LVecBase3i const &value);
inline void ParamValue< LVecBase3i >::set_value(Type const &value);

1770 9 get_value 0 4 1914 35 ParamValue< LVecBase3i >::get_value 0 1 868 0
73
inline LVecBase3i const &ParamValue< LVecBase3i >::get_value(void) const;

1771 14 get_class_type 0 4 1914 40 ParamValue< LVecBase3i >::get_class_type 0 1 869 0
65
static TypeHandle ParamValue< LVecBase3i >::get_class_type(void);

1772 10 ParamValue 0 4 1916 36 ParamValue< LVecBase4d >::ParamValue 0 1 870 0
69
inline ParamValue< LVecBase4d >::ParamValue(LVecBase4d const &value);

1773 9 set_value 0 4 1916 35 ParamValue< LVecBase4d >::set_value 0 1 871 0
141
inline void ParamValue< LVecBase4d >::set_value(LVecBase4d const &value);
inline void ParamValue< LVecBase4d >::set_value(Type const &value);

1774 9 get_value 0 4 1916 35 ParamValue< LVecBase4d >::get_value 0 1 872 0
73
inline LVecBase4d const &ParamValue< LVecBase4d >::get_value(void) const;

1775 14 get_class_type 0 4 1916 40 ParamValue< LVecBase4d >::get_class_type 0 1 873 0
65
static TypeHandle ParamValue< LVecBase4d >::get_class_type(void);

1776 10 ParamValue 0 4 1918 36 ParamValue< LVecBase4f >::ParamValue 0 1 874 0
69
inline ParamValue< LVecBase4f >::ParamValue(LVecBase4f const &value);

1777 9 set_value 0 4 1918 35 ParamValue< LVecBase4f >::set_value 0 1 875 0
141
inline void ParamValue< LVecBase4f >::set_value(LVecBase4f const &value);
inline void ParamValue< LVecBase4f >::set_value(Type const &value);

1778 9 get_value 0 4 1918 35 ParamValue< LVecBase4f >::get_value 0 1 876 0
73
inline LVecBase4f const &ParamValue< LVecBase4f >::get_value(void) const;

1779 14 get_class_type 0 4 1918 40 ParamValue< LVecBase4f >::get_class_type 0 1 877 0
65
static TypeHandle ParamValue< LVecBase4f >::get_class_type(void);

1780 10 ParamValue 0 4 1920 36 ParamValue< LVecBase4i >::ParamValue 0 1 878 0
69
inline ParamValue< LVecBase4i >::ParamValue(LVecBase4i const &value);

1781 9 set_value 0 4 1920 35 ParamValue< LVecBase4i >::set_value 0 1 879 0
141
inline void ParamValue< LVecBase4i >::set_value(LVecBase4i const &value);
inline void ParamValue< LVecBase4i >::set_value(Type const &value);

1782 9 get_value 0 4 1920 35 ParamValue< LVecBase4i >::get_value 0 1 880 0
73
inline LVecBase4i const &ParamValue< LVecBase4i >::get_value(void) const;

1783 14 get_class_type 0 4 1920 40 ParamValue< LVecBase4i >::get_class_type 0 1 881 0
65
static TypeHandle ParamValue< LVecBase4i >::get_class_type(void);

1784 10 ParamValue 0 4 1922 35 ParamValue< LMatrix3d >::ParamValue 0 1 882 0
67
inline ParamValue< LMatrix3d >::ParamValue(LMatrix3d const &value);

1785 9 set_value 0 4 1922 34 ParamValue< LMatrix3d >::set_value 0 1 883 0
138
inline void ParamValue< LMatrix3d >::set_value(LMatrix3d const &value);
inline void ParamValue< LMatrix3d >::set_value(Type const &value);

1786 9 get_value 0 4 1922 34 ParamValue< LMatrix3d >::get_value 0 1 884 0
71
inline LMatrix3d const &ParamValue< LMatrix3d >::get_value(void) const;

1787 14 get_class_type 0 4 1922 39 ParamValue< LMatrix3d >::get_class_type 0 1 885 0
64
static TypeHandle ParamValue< LMatrix3d >::get_class_type(void);

1788 10 ParamValue 0 4 1924 35 ParamValue< LMatrix3f >::ParamValue 0 1 886 0
67
inline ParamValue< LMatrix3f >::ParamValue(LMatrix3f const &value);

1789 9 set_value 0 4 1924 34 ParamValue< LMatrix3f >::set_value 0 1 887 0
138
inline void ParamValue< LMatrix3f >::set_value(LMatrix3f const &value);
inline void ParamValue< LMatrix3f >::set_value(Type const &value);

1790 9 get_value 0 4 1924 34 ParamValue< LMatrix3f >::get_value 0 1 888 0
71
inline LMatrix3f const &ParamValue< LMatrix3f >::get_value(void) const;

1791 14 get_class_type 0 4 1924 39 ParamValue< LMatrix3f >::get_class_type 0 1 889 0
64
static TypeHandle ParamValue< LMatrix3f >::get_class_type(void);

1792 10 ParamValue 0 4 1926 35 ParamValue< LMatrix4d >::ParamValue 0 1 890 0
67
inline ParamValue< LMatrix4d >::ParamValue(LMatrix4d const &value);

1793 9 set_value 0 4 1926 34 ParamValue< LMatrix4d >::set_value 0 1 891 0
138
inline void ParamValue< LMatrix4d >::set_value(LMatrix4d const &value);
inline void ParamValue< LMatrix4d >::set_value(Type const &value);

1794 9 get_value 0 4 1926 34 ParamValue< LMatrix4d >::get_value 0 1 892 0
71
inline LMatrix4d const &ParamValue< LMatrix4d >::get_value(void) const;

1795 14 get_class_type 0 4 1926 39 ParamValue< LMatrix4d >::get_class_type 0 1 893 0
64
static TypeHandle ParamValue< LMatrix4d >::get_class_type(void);

1796 10 ParamValue 0 4 1928 35 ParamValue< LMatrix4f >::ParamValue 0 1 894 0
67
inline ParamValue< LMatrix4f >::ParamValue(LMatrix4f const &value);

1797 9 set_value 0 4 1928 34 ParamValue< LMatrix4f >::set_value 0 1 895 0
138
inline void ParamValue< LMatrix4f >::set_value(LMatrix4f const &value);
inline void ParamValue< LMatrix4f >::set_value(Type const &value);

1798 9 get_value 0 4 1928 34 ParamValue< LMatrix4f >::get_value 0 1 896 0
71
inline LMatrix4f const &ParamValue< LMatrix4f >::get_value(void) const;

1799 14 get_class_type 0 4 1928 39 ParamValue< LMatrix4f >::get_class_type 0 1 897 0
64
static TypeHandle ParamValue< LMatrix4f >::get_class_type(void);

1800 14 get_class_type 0 4 1935 36 WritableConfigurable::get_class_type 0 1 898 0
61
static TypeHandle WritableConfigurable::get_class_type(void);

1801 21 ~WritableConfigurable 0 4 1935 43 WritableConfigurable::~WritableConfigurable 0 0 0
50
WritableConfigurable::~WritableConfigurable(void);

1802 17 UniqueIdAllocator 0 4 1936 36 UniqueIdAllocator::UniqueIdAllocator 0 2 899 900 56
/**
 * Create a free id pool in the range [min:max].
 */
156
UniqueIdAllocator::UniqueIdAllocator(uint32_t min = 0, uint32_t max = 20);
inline UniqueIdAllocator::UniqueIdAllocator(UniqueIdAllocator const &) = default;

1803 18 ~UniqueIdAllocator 0 4 1936 37 UniqueIdAllocator::~UniqueIdAllocator 0 0 10
/**
 *
 */
44
UniqueIdAllocator::~UniqueIdAllocator(void);

1804 8 allocate 0 4 1936 27 UniqueIdAllocator::allocate 0 1 901 134
/**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */
43
uint32_t UniqueIdAllocator::allocate(void);

1805 18 initial_reserve_id 0 4 1936 37 UniqueIdAllocator::initial_reserve_id 0 1 902 518
/**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */
56
void UniqueIdAllocator::initial_reserve_id(uint32_t id);

1806 4 free 0 4 1936 23 UniqueIdAllocator::free 0 1 903 112
/**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */
45
void UniqueIdAllocator::free(uint32_t index);

1807 13 fraction_used 0 4 1936 32 UniqueIdAllocator::fraction_used 0 1 904 117
/**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */
57
PN_stdfloat UniqueIdAllocator::fraction_used(void) const;

1808 6 output 0 4 1936 25 UniqueIdAllocator::output 0 1 905 42
/**
 * ...intended for debugging only.
 */
51
void UniqueIdAllocator::output(ostream &out) const;

1809 5 write 0 4 1936 24 UniqueIdAllocator::write 0 1 906 42
/**
 * ...intended for debugging only.
 */
50
void UniqueIdAllocator::write(ostream &out) const;

1810 39 py_decode_TypedWritable_from_bam_stream 0 1 0 39 py_decode_TypedWritable_from_bam_stream 0 1 915 203
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */
97
PyObject *py_decode_TypedWritable_from_bam_stream(PyObject *this_class, std::string const &data);

1811 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 0 47 py_decode_TypedWritable_from_bam_stream_persist 0 1 916 398
/**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */
126
PyObject *py_decode_TypedWritable_from_bam_stream_persist(PyObject *unpickler, PyObject *this_class, std::string const &data);

916
1 0 0 7 8 1940 930 0 0 1 4 copy 1 1938  
2 0 0 7 8 1940 930 0 0 1 4 copy 1 1941  
3 0 0 7 8 1940 930 0 0 1 6 source 1 1848  
4 0 0 6 9 1877 0 0 0 1 4 this 3 1938  
5 0 0 6 10 1943 0 0 0 2 4 this 3 1938  1 n 1 1877  
6 0 0 6 11 1943 0 0 0 2 4 this 3 1938  1 n 1 1877  
7 0 0 6 12 1945 0 0 0 1 4 this 3 1938  
8 0 0 6 13 1945 0 0 0 3 4 this 3 1938  1 n 1 1877  5 count 1 1877  
9 0 0 6 14 1819 0 0 0 1 4 this 3 1938  
10 0 0 6 15 1819 0 0 0 1 4 this 3 1938  
11 0 0 6 16 1819 0 0 0 3 4 this 3 1938  4 view 1 1946  5 flags 1 1819  
12 0 0 4 17 1949 0 0 0 2 4 this 3 1938  4 view 1 1946  
13 0 0 4 5 1949 0 0 0 1 4 this 3 1950  
14 0 0 4 6 1949 0 0 0 2 4 this 3 1951  3 out 1 1953  
15 0 0 7 20 1955 948 0 0 1 4 copy 1 1941  
16 0 0 7 20 1955 948 0 0 1 6 source 1 1848  
17 0 0 7 20 1955 948 0 0 1 11 type_handle 1 1956  
18 0 0 7 21 1955 948 0 0 2 1 n 1 1877  11 type_handle 1 1956  
19 0 0 6 22 1877 0 0 0 1 4 this 3 1941  
20 0 0 4 23 1949 0 0 0 2 4 this 3 1955  1 x 1 1943  
21 0 0 4 24 1949 0 0 0 1 4 this 3 1955  
22 0 0 6 25 1943 0 0 0 2 4 this 3 1941  1 n 1 1877  
23 0 0 4 26 1949 0 0 0 3 4 this 3 1955  1 n 1 1877  5 value 1 1943  
24 0 0 6 27 1943 0 0 0 2 4 this 3 1941  1 n 1 1877  
25 0 0 4 28 1949 0 0 0 3 4 this 3 1955  1 n 1 1877  5 value 1 1943  
26 0 0 6 29 1945 0 0 0 1 4 this 3 1941  
27 0 0 4 30 1949 0 0 0 2 4 this 3 1955  4 data 1 1945  
28 0 0 6 31 1945 0 0 0 3 4 this 3 1941  1 n 1 1877  5 count 1 1877  
29 0 0 4 32 1949 0 0 0 4 4 this 3 1955  1 n 1 1877  5 count 1 1877  4 data 1 1945  
30 0 0 6 33 1819 0 0 0 1 4 this 3 1941  
31 0 0 6 34 1819 0 0 0 1 4 this 3 1941  
32 0 0 6 35 1819 0 0 0 3 4 this 3 1955  4 view 1 1946  5 flags 1 1819  
33 0 0 4 36 1949 0 0 0 2 4 this 3 1941  4 view 1 1946  
34 0 0 4 40 1949 0 0 69 /**
 * Runs the entire animation from beginning to end and stops.
 */ 1 4 this 3 1958  
35 0 0 4 40 1949 0 0 406 /**
 * Runs the animation from the frame "from" to and including the frame "to",
 * at which point the animation is stopped.  Both "from" and "to" frame
 * numbers may be outside the range (0, get_num_frames()) and the animation
 * will follow the range correctly, reporting numbers modulo get_num_frames().
 * For instance, play(0, get_num_frames() * 2) will play the animation twice
 * and then stop.
 */ 3 4 this 3 1958  4 from 1 1818  2 to 1 1818  
36 0 0 4 41 1949 0 0 169 /**
 * Starts the entire animation looping.  If restart is true, the animation is
 * restarted from the beginning; otherwise, it continues from the current
 * frame.
 */ 2 4 this 3 1958  7 restart 1 1820  
37 0 0 4 41 1949 0 0 221 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * indefinitely.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 4 4 this 3 1958  7 restart 1 1820  4 from 1 1818  2 to 1 1818  
38 0 0 4 42 1949 0 0 224 /**
 * Starts the entire animation bouncing back and forth between its first frame
 * and last frame.  If restart is true, the animation is restarted from the
 * beginning; otherwise, it continues from the current frame.
 */ 2 4 this 3 1958  7 restart 1 1820  
39 0 0 4 42 1949 0 0 143 /**
 * Loops the animation from the frame "from" to and including the frame "to",
 * and then back in the opposite direction, indefinitely.
 */ 4 4 this 3 1958  7 restart 1 1820  4 from 1 1818  2 to 1 1818  
40 0 0 4 43 1949 0 0 130 /**
 * Stops a currently playing or looping animation right where it is.  The
 * animation remains posed at the current frame.
 */ 1 4 this 3 1958  
41 0 0 4 44 1949 0 0 72 /**
 * Sets the animation to the indicated frame and holds it there.
 */ 2 4 this 3 1958  5 frame 1 1818  
42 0 0 4 45 1949 0 0 243 /**
 * Changes the rate at which the animation plays.  1.0 is the normal speed,
 * 2.0 is twice normal speed, and 0.5 is half normal speed.  0.0 is legal to
 * pause the animation, and a negative value will play the animation
 * backwards.
 */ 2 4 this 3 1958  9 play_rate 1 1818  
43 0 0 6 46 1818 0 0 79 /**
 * Returns the rate at which the animation plays.  See set_play_rate().
 */ 1 4 this 3 1959  
44 0 0 6 47 1818 0 0 234 /**
 * Returns the native frame rate of the animation.  This is the number of
 * frames per second that will elapse when the play_rate is set to 1.0.  It is
 * a fixed property of the animation and may not be adjusted by the user.
 */ 1 4 this 3 1959  
45 0 0 6 48 1819 0 0 278 /**
 * Returns the number of frames in the animation.  This is a property of the
 * animation and may not be directly adjusted by the user (although it may
 * change without warning with certain kinds of animations, since this is a
 * virtual method that may be overridden).
 */ 1 4 this 3 1959  
46 0 0 6 49 1819 0 0 116 /**
 * Returns the current integer frame number.  This number will be in the range
 * 0 <= f < get_num_frames().
 */ 1 4 this 3 1959  
47 0 0 6 50 1819 0 0 330 /**
 * Returns the current integer frame number + 1, constrained to the range 0 <=
 * f < get_num_frames().
 *
 * If the play mode is PM_play, this will clamp to the same value as
 * get_frame() at the end of the animation.  If the play mode is any other
 * value, this will wrap around to frame 0 at the end of the animation.
 */ 1 4 this 3 1959  
48 0 0 6 51 1818 0 0 314 /**
 * Returns the fractional part of the current frame.  Normally, this is in the
 * range 0.0 <= f < 1.0, but in the one special case of an animation playing
 * to its end frame and stopping, it might exactly equal 1.0.
 *
 * It will always be true that get_full_frame() + get_frac() ==
 * get_full_fframe().
 */ 1 4 this 3 1959  
49 0 0 6 52 1819 0 0 372 /**
 * Returns the current integer frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_fframe(), this return value will
 * never exceed the value passed to to_frame in the play() method.
 */ 1 4 this 3 1959  
50 0 0 6 53 1818 0 0 490 /**
 * Returns the current floating-point frame number.
 *
 * Unlike the value returned by get_frame(), this frame number may extend
 * beyond the range of get_num_frames() if the frame range passed to play(),
 * loop(), etc.  did.
 *
 * Unlike the value returned by get_full_frame(), this return value may equal
 * (to_frame + 1.0), when the animation has played to its natural end.
 * However, in this case the return value of get_full_frame() will be
 * to_frame, not (to_frame + 1).
 */ 1 4 this 3 1959  
51 0 0 6 54 1820 0 0 208 /**
 * Returns true if the animation is currently playing, false if it is stopped
 * (e.g.  because stop() or pose() was called, or because it reached the end
 * of the animation after play() was called).
 */ 1 4 this 3 1959  
52 0 0 4 55 1949 0 0 10 /**
 *
 */ 2 4 this 3 1959  3 out 1 1953  
53 0 0 7 68 1956 0 0 0 0 
54 0 0 7 71 1961 987 0 55 /**
 * Creates an UpdateSeq in the 'initial' state.
 */ 0 
55 0 0 7 71 1961 987 0 10 /**
 *
 */ 1 4 copy 1 1962  
56 0 0 7 72 1961 987 0 55 /**
 * Returns an UpdateSeq in the 'initial' state.
 */ 0 
57 0 0 7 73 1961 987 0 51 /**
 * Returns an UpdateSeq in the 'old' state.
 */ 0 
58 0 0 7 74 1961 987 0 53 /**
 * Returns an UpdateSeq in the 'fresh' state.
 */ 0 
59 0 0 6 75 1961 0 0 10 /**
 *
 */ 2 4 this 3 1961  4 copy 1 1962  
60 0 0 4 76 1949 0 0 55 /**
 * Resets the UpdateSeq to the 'initial' state.
 */ 1 4 this 3 1961  
61 0 0 6 77 1820 0 0 67 /**
 * Returns true if the UpdateSeq is in the 'initial' state.
 */ 1 4 this 3 1962  
62 0 0 6 78 1820 0 0 63 /**
 * Returns true if the UpdateSeq is in the 'old' state.
 */ 1 4 this 3 1962  
63 0 0 6 79 1820 0 0 65 /**
 * Returns true if the UpdateSeq is in the 'fresh' state.
 */ 1 4 this 3 1962  
64 0 0 6 80 1820 0 0 105 /**
 * Returns true if the UpdateSeq is in any special states, i.e.  'initial',
 * 'old', or 'fresh'.
 */ 1 4 this 3 1962  
65 0 0 6 81 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
66 0 0 6 82 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
67 0 0 6 83 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
68 0 0 6 84 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
69 0 0 6 85 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
70 0 0 6 86 1820 0 0 0 2 4 this 3 1962  5 other 1 1962  
71 0 0 7 87 1961 987 0 0 1 4 this 3 1961  
72 0 0 7 88 1961 987 0 0 2 4 this 3 1961  6 param0 0 1819  
73 0 0 6 89 1823 0 0 107 /**
 * Returns the internal integer value associated with the UpdateSeq.  Useful
 * for debugging only.
 */ 1 4 this 3 1962  
74 0 0 4 94 1949 0 0 10 /**
 *
 */ 2 4 this 3 1962  3 out 1 1953  
75 0 0 4 98 1949 0 0 308 /**
 * This internal function is intended to be called by each class's
 * make_from_bam() method to read in all of the relevant data from the BamFile
 * for the new object.  It is also called directly by the BamReader to re-read
 * the data for an object that has been placed on the stream for an update.
 */ 3 4 this 3 1835  4 scan 1 1964  7 manager 1 1966  
76 0 0 4 99 1949 0 0 345 /**
 * Increments the bam_modified counter, so that this object will be
 * invalidated and retransmitted on any open bam streams.  This should
 * normally not need to be called by user code; it should be called internally
 * when the object has been changed in a way that legitimately requires its
 * retransmission to any connected clients.
 */ 1 4 this 3 1835  
77 0 0 7 100 1961 987 0 140 /**
 * Returns the current bam_modified counter.  This counter is normally
 * incremented automatically whenever the object is modified.
 */ 1 4 this 3 1967  
78 0 0 6 101 1848 0 0 0 1 4 this 3 1967  
79 0 0 6 102 1848 0 0 0 2 4 this 3 1967  7 pickler 1 1848  
80 0 0 6 103 1945 0 0 415 /**
 * Converts the TypedWritable object into a single stream of data using a
 * BamWriter, and returns that data as a string string.  Returns empty string
 * on failure.
 *
 * This is a convenience method particularly useful for cases when you are
 * only serializing a single object.  If you have many objects to process, it
 * is more efficient to use the same BamWriter to serialize all of them
 * together.
 */ 1 4 this 3 1967  
81 0 0 7 105 1956 0 0 0 0 
82 0 0 7 112 1969 1002 0 492 /**
 * Reads the string created by a previous call to encode_to_bam_stream(), and
 * extracts and returns the single object on that string.  Returns NULL on
 * error.
 *
 * This method is intended to replace decode_raw_from_bam_stream() when you
 * know the stream in question returns an object of type
 * TypedWritableReferenceCount, allowing for easier reference count
 * management.  Note that the caller is still responsible for maintaining the
 * reference count on the return value.
 */ 2 4 data 1 1945  6 reader 1 1966  
83 0 0 7 113 1956 0 0 0 0 
84 0 0 6 107 1835 0 0 0 1 4 this 3 1969  
85 0 0 7 108 1969 1002 0 0 1 4 this 3 1835  
86 0 0 7 110 1970 0 0 0 1 4 this 3 1969  
87 0 0 7 111 1969 1002 0 0 1 4 this 3 1970  
88 0 0 7 122 1973 1007 0 179 /**
 * Returns a duplicate of the BamCacheRecord.  The duplicate will not have a
 * data pointer set, even though one may have been assigned to the original
 * via set_data().
 */ 1 4 this 3 1971  
89 0 0 6 123 1820 0 0 0 2 4 this 3 1971  5 other 1 1971  
90 0 0 6 124 1974 0 0 237 /**
 * Returns the full pathname to the source file that originally generated this
 * cache request.  In some cases, for instance in the case of a of a multipage
 * texture like "cube_#.png", this may not not a true filename on disk.
 */ 1 4 this 3 1971  
91 0 0 6 125 1974 0 0 230 /**
 * Returns the name of the cache file as hashed from the source_pathname.
 * This will be relative to the root of the cache directory, and it will not
 * include any suffixes that may be appended to resolve hash conflicts.
 */ 1 4 this 3 1971  
92 0 0 6 126 1834 0 0 204 /**
 * Returns the file timestamp of the original source file that generated this
 * cache record, if available.  In some cases the original file timestamp is
 * not available, and this will return 0.
 */ 1 4 this 3 1971  
93 0 0 6 127 1834 0 0 84 /**
 * Returns the time at which this particular record was recorded or updated.
 */ 1 4 this 3 1971  
94 0 0 6 135 1819 0 0 75 /**
 * Returns the number of source files that contribute to the cache.
 */ 1 4 this 3 1971  
95 0 0 6 136 1974 0 0 94 /**
 * Returns the full pathname of the nth source files that contributes to the
 * cache.
 */ 2 4 this 3 1971  1 n 1 1819  
96 0 0 6 137 1820 0 0 124 /**
 * Returns true if all of the dependent files are still the same as when the
 * cache was recorded, false otherwise.
 */ 1 4 this 3 1971  
97 0 0 4 138 1949 0 0 80 /**
 * Empties the list of files that contribute to the data in this record.
 */ 1 4 this 3 1973  
98 0 0 4 139 1949 0 0 225 /**
 * Adds the indicated file to the list of files that will be loaded to
 * generate the data in this record.  This should be called once for the
 * primary source file, and again for each secondary source file, if any.
 */ 2 4 this 3 1973  8 pathname 1 1974  
99 0 0 4 139 1949 0 0 82 /**
 * Variant of add_dependent_file that takes an already opened VirtualFile.
 */ 2 4 this 3 1973  4 file 1 1975  
100 0 0 6 140 1820 0 0 130 /**
 * Returns true if this cache record has an in-memory data object associated--
 * that is, the object stored in the cache.
 */ 1 4 this 3 1971  
101 0 0 4 141 1949 0 0 147 /**
 * Removes the in-memory data object associated with this record, if any.
 * This does not affect the on-disk representation of the record.
 */ 1 4 this 3 1973  
102 0 0 6 142 1835 0 0 139 /**
 * Returns a pointer to the data stored in the record, or NULL if there is no
 * data.  The pointer is not removed from the record.
 */ 1 4 this 3 1971  
103 0 0 4 144 1949 0 0 104 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritable.
 */ 2 4 this 3 1973  3 ptr 1 1835  
104 0 0 4 144 1949 0 0 573 /**
 * Stores a new data object on the record.  You should pass the same pointer
 * twice, to both parameters; this allows the C++ typecasting to automatically
 * convert the pointer into both a TypedWritable and a ReferenceCount pointer,
 * so that the BamCacheRecord object can reliably manage the reference counts.
 *
 * You may pass 0 or NULL as the second parameter.  If you do this, the
 * BamCacheRecord will not manage the object's reference count; it will be up
 * to you to ensure the object is not deleted during the lifetime of the
 * BamCacheRecord object.
 */ 3 4 this 3 1973  3 ptr 1 1835  7 ref_ptr 1 1970  
105 0 0 4 144 1949 0 0 115 /**
 * This variant on set_data() is provided just to allow Python code to pass a
 * 0 as the second parameter.
 */ 3 4 this 3 1973  3 ptr 1 1835  5 dummy 1 1819  
106 0 0 4 144 1949 0 0 118 /**
 * This variant on set_data() is provided to easily pass objects deriving from
 * TypedWritableReferenceCount.
 */ 2 4 this 3 1973  3 ptr 1 1969  
107 0 0 4 147 1949 0 0 10 /**
 *
 */ 2 4 this 3 1971  3 out 1 1953  
108 0 0 4 148 1949 0 0 10 /**
 *
 */ 3 4 this 3 1971  3 out 1 1953  12 indent_level 1 1819  
109 0 0 7 149 1956 0 0 0 0 
110 0 0 7 116 1969 1002 0 0 1 4 this 3 1973  
111 0 0 7 117 1973 1007 0 0 1 4 this 3 1969  
112 0 0 7 151 1978 1028 0 10 /**
 *
 */ 0 
113 0 0 4 153 1949 0 0 347 /**
 * Changes the state of the active flag.  "active" means that the cache should
 * be consulted automatically on loads, "not active" means that objects should
 * be loaded directly without consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 2 4 this 3 1978  4 flag 1 1820  
114 0 0 6 154 1820 0 0 381 /**
 * Returns true if the BamCache is currently active, false if it is not.
 * "active" means that the cache should be consulted automatically on loads,
 * "not active" means that objects should be loaded directly without
 * consulting the cache.
 *
 * This represents the global flag.  Also see the individual cache_models,
 * cache_textures, cache_compressed_textures flags.
 */ 1 4 this 3 1979  
115 0 0 4 155 1949 0 0 118 /**
 * Indicates whether model files (e.g.  egg files and bam files) will be
 * stored in the cache, as bam files.
 */ 2 4 this 3 1978  4 flag 1 1820  
116 0 0 6 156 1820 0 0 172 /**
 * Returns whether model files (e.g.  egg files and bam files) will be stored
 * in the cache, as bam files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1979  
117 0 0 4 157 1949 0 0 101 /**
 * Indicates whether texture files will be stored in the cache, as
 * uncompressed txo files.
 */ 2 4 this 3 1978  4 flag 1 1820  
118 0 0 6 158 1820 0 0 174 /**
 * Returns whether texture files (e.g.  egg files and bam files) will be
 * stored in the cache, as txo files.
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1979  
119 0 0 4 159 1949 0 0 722 /**
 * Indicates whether compressed texture files will be stored in the cache, as
 * compressed txo files.  The compressed data may either be generated in-CPU,
 * via the squish library, or it may be extracted from the GSG after the
 * texture has been loaded.
 *
 * This may be set in conjunction with set_cache_textures(), or independently
 * of it.  If set_cache_textures() is true and this is false, all textures
 * will be cached in their uncompressed form.  If set_cache_textures() is
 * false and this is true, only compressed textures will be cached, and they
 * will be cached in their compressed form.  If both are true, all textures
 * will be cached, in their uncompressed or compressed form appropriately.
 */ 2 4 this 3 1978  4 flag 1 1820  
120 0 0 6 160 1820 0 0 202 /**
 * Returns whether compressed texture files will be stored in the cache, as
 * compressed txo files.  See set_cache_compressed_textures().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1979  
121 0 0 4 161 1949 0 0 184 /**
 * Indicates whether compiled shader programs will be stored in the cache, as
 * binary .sho files.  This may not be supported by all shader languages or
 * graphics renderers.
 */ 2 4 this 3 1978  4 flag 1 1820  
122 0 0 6 162 1820 0 0 196 /**
 * Returns whether compiled shader programs will be stored in the cache, as
 * binary .txo files.  See set_cache_compiled_shaders().
 *
 * This also returns false if get_active() is false.
 */ 1 4 this 3 1979  
123 0 0 4 163 1949 0 0 372 /**
 * Changes the current root pathname of the cache.  This specifies where the
 * cache files are stored on disk.  This should name a directory that is on a
 * disk local to the machine (not on a network-mounted disk), for instance,
 * /tmp/panda-cache or /c/panda-cache.
 *
 * If the directory does not already exist, it will be created as a result of
 * this call.
 */ 2 4 this 3 1978  4 root 1 1974  
124 0 0 7 164 1981 0 0 75 /**
 * Returns the current root pathname of the cache.  See set_root().
 */ 1 4 this 3 1979  
125 0 0 4 165 1949 0 0 86 /**
 * Specifies the time in seconds between automatic flushes of the cache index.
 */ 2 4 this 3 1978  10 flush_time 1 1819  
126 0 0 6 166 1819 0 0 84 /**
 * Returns the time in seconds between automatic flushes of the cache index.
 */ 1 4 this 3 1979  
127 0 0 4 167 1949 0 0 430 /**
 * Specifies the maximum size, in kilobytes, which the cache is allowed to
 * grow to.  If a newly cached file would exceed this size, an older file is
 * removed from the cache.
 *
 * Note that in the case of multiple different processes simultaneously
 * operating on the same cache directory, the actual cache size may slightly
 * exceed this value from time to time due to latency in checking between the
 * processes.
 */ 2 4 this 3 1978  10 max_kbytes 1 1819  
128 0 0 6 168 1819 0 0 121 /**
 * Returns the maximum size, in kilobytes, which the cache is allowed to grow
 * to.  See set_cache_max_kbytes().
 */ 1 4 this 3 1979  
129 0 0 4 169 1949 0 0 252 /**
 * Can be used to put the cache in read-only mode, or take it out of read-only
 * mode.  Note that if you put it into read-write mode, and it discovers that
 * it does not have write access, it will put itself right back into read-only
 * mode.
 */ 2 4 this 3 1978  2 ro 1 1820  
130 0 0 6 170 1820 0 0 230 /**
 * Returns true if the cache is in read-only mode.  Normally, the cache starts
 * in read-write mode.  It can put itself into read-only mode automatically if
 * it discovers that it does not have write access to the cache.
 */ 1 4 this 3 1979  
131 0 0 7 171 1973 1007 0 782 /**
 * Looks up a file in the cache.
 *
 * If the file is cacheable, then regardless of whether the file is found in
 * the cache or not, this returns a BamCacheRecord.  On the other hand, if the
 * file cannot be cached, returns NULL.
 *
 * If record->has_data() returns true, then the file was found in the cache,
 * and you may call record->extract_data() to get the object.  If
 * record->has_data() returns false, then the file was not found in the cache
 * or the cache was stale; and you should reload the source file (calling
 * record->add_dependent_file() for each file loaded, including the original
 * source file), and then call record->set_data() to record the resulting
 * loaded object; and finally, you should call store() to write the cached
 * record to disk.
 */ 3 4 this 3 1978  15 source_filename 1 1974  15 cache_extension 1 1945  
132 0 0 6 172 1820 0 0 212 /**
 * Flushes a cache entry to disk.  You must have retrieved the cache record
 * via a prior call to lookup(), and then stored the data via
 * record->set_data().  Returns true on success, false on failure.
 */ 2 4 this 3 1978  6 record 1 1973  
133 0 0 4 173 1949 0 0 92 /**
 * Flushes the index if enough time has elapsed since the index was last
 * flushed.
 */ 1 4 this 3 1978  
134 0 0 4 174 1949 0 0 48 /**
 * Ensures the index is written to disk.
 */ 1 4 this 3 1978  
135 0 0 4 175 1949 0 0 63 /**
 * Writes the contents of the index to standard output.
 */ 3 4 this 3 1979  3 out 1 1953  12 indent_level 1 1819  
136 0 0 6 176 1978 0 0 124 /**
 * Returns a pointer to the global BamCache object, which is used
 * automatically by the ModelPool and TexturePool.
 */ 0 
137 0 0 4 177 1949 0 0 84 /**
 * If there is a global BamCache object, calls consider_flush_index() on it.
 */ 0 
138 0 0 4 178 1949 0 0 75 /**
 * If there is a global BamCache object, calls flush_index() on it.
 */ 0 
139 0 0 7 192 1982 1056 0 0 0 
140 0 0 7 192 1982 1056 0 0 1 6 param0 0 1983  
141 0 0 7 197 1986 1068 0 10 /**
 *
 */ 1 4 copy 1 1985  
142 0 0 7 197 1986 1068 0 10 /**
 *
 */ 1 5 flags 1 1819  
143 0 0 7 197 1986 1068 0 10 /**
 *
 */ 2 5 flags 1 1819  13 texture_flags 1 1819  
144 0 0 6 198 1986 0 0 0 2 4 this 3 1986  4 copy 1 1985  
145 0 0 4 199 1949 0 0 10 /**
 *
 */ 2 4 this 3 1986  5 flags 1 1819  
146 0 0 6 200 1819 0 0 10 /**
 *
 */ 1 4 this 3 1985  
147 0 0 4 202 1949 0 0 10 /**
 *
 */ 2 4 this 3 1986  5 flags 1 1819  
148 0 0 6 203 1819 0 0 10 /**
 *
 */ 1 4 this 3 1985  
149 0 0 4 204 1949 0 0 459 /**
 * Specifies the expected number of views to load for the texture.  This is
 * ignored unless TF_multiview is included in texture_flags.  This must be
 * specified when loading a 3-d multiview texture or 2-d texture array, in
 * which case it is used to differentiate z levels from separate views; it
 * may be zero in the case of 2-d textures or cube maps, in which case the
 * number of views can be inferred from the number of images found on disk.
 */ 2 4 this 3 1986  9 num_views 1 1819  
150 0 0 6 205 1819 0 0 39 /**
 * See set_texture_num_views().
 */ 1 4 this 3 1985  
151 0 0 4 208 1949 0 0 209 /**
 * Set this flag to ATS_none, ATS_up, ATS_down, or ATS_pad to control how a
 * texture is scaled from disk when it is subsequently loaded.  Set it to
 * ATS_unspecified to restore the default behavior.
 */ 2 4 this 3 1986  5 scale 1 1821  
152 0 0 6 209 1821 0 0 40 /**
 * See set_auto_texture_scale().
 */ 1 4 this 3 1985  
153 0 0 4 211 1949 0 0 10 /**
 *
 */ 2 4 this 3 1985  3 out 1 1953  
154 0 0 7 214 1966 1070 0 38 // The primary interface for a caller. 1 6 source 1 1845  
155 0 0 4 216 1949 0 0 142 /**
 * Changes the source of future datagrams for this BamReader.  This also
 * implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1966  6 source 1 1845  
156 0 0 6 217 1845 0 0 100 /**
 * Returns the current source of the BamReader as set by set_source() or the
 * constructor.
 */ 1 4 this 3 1966  
157 0 0 6 218 1820 0 0 210 /**
 * Initializes the BamReader prior to reading any objects from its source.
 * This includes reading the Bam header.
 *
 * This returns true if the BamReader successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1966  
158 0 0 4 219 1949 0 0 1007 /**
 * Associates an arbitrary block of data with the indicated object (or NULL),
 * and the indicated name.
 *
 * This is intended to provide a place for temporary storage for objects
 * reading themselves from the bam file.  To use it, inherit from
 * BamReader::AuxData and store whatever data you like there.  Then associate
 * your AuxData with the object as it is being read with set_aux_data().  You
 * may later set the aux data to NULL to remove it; or it will automatically
 * be removed (and deleted) after finalize() is called for the object in
 * question.
 *
 * If the TypedWritable pointer is NULL, the the aux data is stored globally
 * for the BamReader in general.  This pointer is available to any bam
 * objects, and will not be automatically removed until the BamReader itself
 * destructs.
 *
 * In either case, the name is just an arbitrary user-defined key.  If there
 * is already a data pointer stored for the obj/name pair, that data pointer
 * will be replaced (and deleted).
 */ 4 4 this 3 1966  3 obj 1 1835  4 name 1 1945  4 data 1 1987  
159 0 0 7 220 1987 0 0 173 /**
 * Returns the pointer previously associated with the bam reader by a previous
 * call to set_aux_data(), or NULL if data with the indicated key has not been
 * set.
 */ 3 4 this 3 1989  3 obj 1 1835  4 name 1 1945  
160 0 0 6 221 1974 0 0 199 /**
 * If a BAM is a file, then the BamReader should contain the name of the file.
 * This enables the reader to interpret pathnames in the BAM as relative to
 * the directory containing the BAM.
 */ 1 4 this 3 1989  
161 0 0 6 222 1985 0 0 98 /**
 * Returns the LoaderOptions passed to the loader when the model was
 * requested, if any.
 */ 1 4 this 3 1989  
162 0 0 4 223 1949 0 0 58 /**
 * Specifies the LoaderOptions for this BamReader.
 */ 2 4 this 3 1966  7 options 1 1985  
163 0 0 6 224 1835 0 0 1059 /**
 * Reads a single object from the Bam file.  If the object type is known, a
 * new object of the appropriate type is created and returned; otherwise, NULL
 * is returned.  NULL is also returned when the end of the file is reached.
 * is_eof() may be called to differentiate between these two cases.
 *
 * This may be called repeatedly to extract out all the objects in the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is retrieved directly from the Bam file:
 * the root of the scene graph.  The remaining objects will all be retrieved
 * recursively by the first object.
 *
 * Note that the object returned may not yet be complete.  In particular, some
 * of its pointers may not be filled in; you must call resolve() to fill in
 * all the available pointers before you can safely use any objects returned
 * by read_object().
 *
 * This flavor of read_object() requires the caller to know what type of
 * object it has received in order to properly manage the reference counts.
 */ 1 4 this 3 1966  
164 0 0 6 225 1820 0 0 138 /**
 * Returns true if the reader has reached end-of-file, false otherwise.  This
 * call is only valid after a call to read_object().
 */ 1 4 this 3 1989  
165 0 0 6 226 1820 0 0 565 /**
 * This may be called at any time during processing of the Bam file to resolve
 * all the known pointers so far.  It is usually called at the end of the
 * processing, after all objects have been read, which is generally the best
 * time to call it.
 *
 * This must be called at least once after reading a particular object via
 * get_object() in order to validate that object.
 *
 * The return value is true if all objects have been resolved, or false if
 * some objects are still outstanding (in which case you will need to call
 * resolve() again later).
 */ 1 4 this 3 1966  
166 0 0 6 227 1820 0 0 406 /**
 * Indicates that an object recently read from the bam stream should be
 * replaced with a new object.  Any future occurrences of the original object
 * in the stream will henceforth return the new object instead.
 *
 * The return value is true if the replacement was successfully made, or false
 * if the object was not read from the stream (or if change_pointer had
 * already been called on it).
 */ 3 4 this 3 1966  12 orig_pointer 1 1967  11 new_pointer 1 1967  
167 0 0 6 228 1819 0 0 81 /**
 * Returns the major version number of the Bam file currently being read.
 */ 1 4 this 3 1989  
168 0 0 6 229 1819 0 0 81 /**
 * Returns the minor version number of the Bam file currently being read.
 */ 1 4 this 3 1989  
169 0 0 6 230 1838 0 0 254 /**
 * Returns the endian preference indicated by the Bam file currently being
 * read.  This does not imply that every number is stored using the indicated
 * convention, but individual objects may choose to respect this flag when
 * recording data.
 */ 1 4 this 3 1989  
170 0 0 6 231 1820 0 0 220 /**
 * Returns true if the file stores all "standard" floats as 64-bit doubles, or
 * false if they are 32-bit floats.  This is determined by the compilation
 * flags of the version of Panda that generated this file.
 */ 1 4 this 3 1989  
171 0 0 6 232 1819 0 0 174 /**
 * Returns the major version number of Bam files supported by the current code
 * base.  This must match get_file_major_ver() in order to successfully read a
 * file.
 */ 1 4 this 3 1989  
172 0 0 6 233 1819 0 0 184 /**
 * Returns the minor version number of Bam files supported by the current code
 * base.  This must match or exceed get_file_minor_ver() in order to
 * successfully read a file.
 */ 1 4 this 3 1989  
173 0 0 6 234 1848 0 0 0 1 4 this 3 1989  
174 0 0 4 247 1949 0 0 0 2 6 handle 1 1956  4 func 1 1848  
175 0 0 7 249 1993 1092 0 0 1 6 param0 0 1991  
176 0 0 7 249 1993 1092 0 10 /**
 *
 */ 1 6 target 1 1852  
177 0 0 4 251 1949 0 0 153 /**
 * Changes the destination of future datagrams written by the BamWriter.  This
 * also implicitly calls init() if it has not already been called.
 */ 2 4 this 3 1993  6 target 1 1852  
178 0 0 6 252 1852 0 0 100 /**
 * Returns the current target of the BamWriter as set by set_target() or the
 * constructor.
 */ 1 4 this 3 1993  
179 0 0 6 253 1820 0 0 220 /**
 * Initializes the BamWriter prior to writing any objects to its output
 * stream.  This includes writing out the Bam header.
 *
 * This returns true if the BamWriter successfully initialized, false
 * otherwise.
 */ 1 4 this 3 1993  
180 0 0 6 254 1974 0 0 197 /**
 * If a BAM is a file, then the BamWriter should contain the name of the file.
 * This enables the writer to convert pathnames in the BAM to relative to the
 * directory containing the BAM.
 */ 1 4 this 3 1991  
181 0 0 6 255 1820 0 0 736 /**
 * Writes a single object to the Bam file, so that the
 * BamReader::read_object() can later correctly restore the object and all its
 * pointers.
 *
 * This implicitly also writes any additional objects this object references
 * (if they haven't already been written), so that pointers may be fully
 * resolved.
 *
 * This may be called repeatedly to write a sequence of objects to the Bam
 * file, but typically (especially for scene graph files, indicated with the
 * .bam extension), only one object is written directly from the Bam file: the
 * root of the scene graph.  The remaining objects will all be written
 * recursively by the first object.
 *
 * Returns true if the object is successfully written, false otherwise.
 */ 2 4 this 3 1993  3 obj 1 1967  
182 0 0 6 256 1820 0 0 170 /**
 * Returns true if the object has previously been written (or at least
 * requested to be written) to the bam file, or false if we've never heard of
 * it before.
 */ 2 4 this 3 1991  3 obj 1 1967  
183 0 0 4 257 1949 0 0 85 /**
 * Ensures that all data written thus far is manifested on the output stream.
 */ 1 4 this 3 1993  
184 0 0 6 258 1819 0 0 84 /**
 * Returns the major version number of the Bam file currently being written.
 */ 1 4 this 3 1991  
185 0 0 6 259 1819 0 0 84 /**
 * Returns the minor version number of the Bam file currently being written.
 */ 1 4 this 3 1991  
186 0 0 4 260 1949 0 0 232 /**
 * Changes the minor .bam version to write.  This should be called before
 * init().  Each Panda version has only a fairly narrow range of versions it
 * is able to write; consult the .bam documentation for more information.
 */ 2 4 this 3 1993  9 minor_ver 1 1819  
187 0 0 6 261 1838 0 0 257 /**
 * Returns the endian preference indicated by the Bam file currently being
 * written.  This does not imply that every number is stored using the
 * indicated convention, but individual objects may choose to respect this
 * flag when recording data.
 */ 1 4 this 3 1991  
188 0 0 6 262 1820 0 0 248 /**
 * Returns true if the file will store all "standard" floats as 64-bit
 * doubles, or false if they are 32-bit floats.  This isn't runtime settable;
 * it's based on the compilation flags of the version of Panda that generated
 * this file.
 */ 1 4 this 3 1991  
189 0 0 6 263 1840 0 0 196 /**
 * Returns the BamTextureMode preference indicated by the Bam file currently
 * being written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 1 4 this 3 1991  
190 0 0 4 264 1949 0 0 187 /**
 * Changes the BamTextureMode preference for the Bam file currently being
 * written.  Texture objects written to this Bam file will be encoded
 * according to the specified mode.
 */ 2 4 this 3 1993  17 file_texture_mode 1 1840  
191 0 0 6 265 1835 0 0 165 /**
 * Returns the root node of the part of the scene graph we are currently
 * writing out.  This is used for determining what to make NodePaths relative
 * to.
 */ 1 4 this 3 1991  
192 0 0 4 266 1949 0 0 160 /**
 * Sets the root node of the part of the scene graph we are currently writing
 * out.  NodePaths written to this bam file will be relative to this node.
 */ 2 4 this 3 1993  9 root_node 1 1835  
193 0 0 7 276 1994 1116 0 0 0 
194 0 0 7 276 1994 1116 0 0 1 4 copy 1 1995  
195 0 0 7 276 1994 1116 0 0 1 10 init_value 1 1997  
196 0 0 6 277 1994 0 0 0 2 4 this 3 1994  4 copy 1 1995  
197 0 0 7 278 1994 1116 0 0 0 
198 0 0 7 279 1994 1116 0 0 0 
199 0 0 7 280 1994 1116 0 0 1 7 on_bits 1 1819  
200 0 0 7 281 1994 1116 0 0 1 5 index 1 1819  
201 0 0 7 282 1994 1116 0 0 2 7 low_bit 1 1819  4 size 1 1819  
202 0 0 6 284 1820 0 0 0 0 
203 0 0 6 285 1819 0 0 0 0 
204 0 0 6 286 1819 0 0 0 0 
205 0 0 6 287 1820 0 0 0 2 4 this 3 1995  5 index 1 1819  
206 0 0 4 288 1949 0 0 0 2 4 this 3 1994  5 index 1 1819  
207 0 0 4 289 1949 0 0 0 2 4 this 3 1994  5 index 1 1819  
208 0 0 4 290 1949 0 0 0 3 4 this 3 1994  5 index 1 1819  5 value 1 1820  
209 0 0 6 291 1820 0 0 0 1 4 this 3 1995  
210 0 0 6 292 1820 0 0 0 1 4 this 3 1995  
211 0 0 6 293 1997 0 0 0 3 4 this 3 1995  7 low_bit 1 1819  4 size 1 1819  
212 0 0 4 294 1949 0 0 0 4 4 this 3 1994  5 value 1 1997  7 low_bit 1 1819  4 size 1 1819  
213 0 0 6 295 1820 0 0 0 3 4 this 3 1995  7 low_bit 1 1819  4 size 1 1819  
214 0 0 6 296 1820 0 0 0 3 4 this 3 1995  7 low_bit 1 1819  4 size 1 1819  
215 0 0 4 297 1949 0 0 0 3 4 this 3 1994  7 low_bit 1 1819  4 size 1 1819  
216 0 0 4 298 1949 0 0 0 3 4 this 3 1994  7 low_bit 1 1819  4 size 1 1819  
217 0 0 4 299 1949 0 0 0 4 4 this 3 1994  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
218 0 0 6 300 1997 0 0 0 1 4 this 3 1995  
219 0 0 4 301 1949 0 0 0 2 4 this 3 1994  5 value 1 1997  
220 0 0 6 302 1819 0 0 0 1 4 this 3 1995  
221 0 0 6 303 1819 0 0 0 1 4 this 3 1995  
222 0 0 6 304 1819 0 0 0 1 4 this 3 1995  
223 0 0 6 305 1819 0 0 0 1 4 this 3 1995  
224 0 0 6 306 1819 0 0 0 1 4 this 3 1995  
225 0 0 6 307 1819 0 0 0 1 4 this 3 1995  
226 0 0 6 308 1819 0 0 0 2 4 this 3 1995  7 low_bit 1 1819  
227 0 0 4 309 1949 0 0 0 1 4 this 3 1994  
228 0 0 6 310 1820 0 0 0 2 4 this 3 1995  5 other 1 1995  
229 0 0 4 311 1949 0 0 0 1 4 this 3 1994  
230 0 0 4 312 1949 0 0 0 2 4 this 3 1995  3 out 1 1953  
231 0 0 4 313 1949 0 0 0 3 4 this 3 1995  3 out 1 1953  12 spaces_every 1 1819  
232 0 0 4 314 1949 0 0 0 3 4 this 3 1995  3 out 1 1953  12 spaces_every 1 1819  
233 0 0 4 315 1949 0 0 0 3 4 this 3 1995  3 out 1 1953  12 indent_level 1 1819  
234 0 0 6 316 1820 0 0 0 2 4 this 3 1995  5 other 1 1995  
235 0 0 6 317 1820 0 0 0 2 4 this 3 1995  5 other 1 1995  
236 0 0 6 318 1820 0 0 0 2 4 this 3 1995  5 other 1 1995  
237 0 0 6 319 1819 0 0 0 2 4 this 3 1995  5 other 1 1995  
238 0 0 7 320 1994 1116 0 0 2 4 this 3 1995  5 other 1 1995  
239 0 0 7 321 1994 1116 0 0 2 4 this 3 1995  5 other 1 1995  
240 0 0 7 322 1994 1116 0 0 2 4 this 3 1995  5 other 1 1995  
241 0 0 7 323 1994 1116 0 0 1 4 this 3 1995  
242 0 0 7 324 1994 1116 0 0 2 4 this 3 1995  5 shift 1 1819  
243 0 0 7 325 1994 1116 0 0 2 4 this 3 1995  5 shift 1 1819  
244 0 0 6 326 1994 0 0 0 2 4 this 3 1994  5 other 1 1995  
245 0 0 6 327 1994 0 0 0 2 4 this 3 1994  5 other 1 1995  
246 0 0 6 328 1994 0 0 0 2 4 this 3 1994  5 other 1 1995  
247 0 0 6 329 1994 0 0 0 2 4 this 3 1994  5 shift 1 1819  
248 0 0 6 330 1994 0 0 0 2 4 this 3 1994  5 shift 1 1819  
249 0 0 4 331 1949 0 0 0 1 4 this 3 1994  
250 0 0 4 332 1949 0 0 0 1 4 this 3 1994  
251 0 0 7 333 1994 1116 0 0 1 4 this 3 1995  
252 0 0 7 334 1994 1116 0 0 1 4 this 3 1995  
253 0 0 7 335 1994 1116 0 0 1 4 this 3 1995  
254 0 0 7 335 1994 1116 0 0 2 4 this 3 1995  5 other 1 1995  
255 0 0 7 335 1994 1116 0 0 2 4 this 3 1995  5 index 1 1819  
256 0 0 7 336 1994 1116 0 0 1 4 this 3 1995  
257 0 0 7 336 1994 1116 0 0 2 4 this 3 1995  5 other 1 1995  
258 0 0 7 336 1994 1116 0 0 2 4 this 3 1995  5 index 1 1819  
259 0 0 6 337 1819 0 0 0 1 4 this 3 1995  
260 0 0 6 338 1820 0 0 0 1 4 this 3 1995  
261 0 0 7 339 1956 0 0 0 0 
262 0 0 7 342 1998 1180 0 0 0 
263 0 0 7 342 1998 1180 0 0 1 4 copy 1 1999  
264 0 0 7 342 1998 1180 0 0 1 10 init_value 1 2001  
265 0 0 6 343 1998 0 0 0 2 4 this 3 1998  4 copy 1 1999  
266 0 0 7 344 1998 1180 0 0 0 
267 0 0 7 345 1998 1180 0 0 0 
268 0 0 7 346 1998 1180 0 0 1 7 on_bits 1 1819  
269 0 0 7 347 1998 1180 0 0 1 5 index 1 1819  
270 0 0 7 348 1998 1180 0 0 2 7 low_bit 1 1819  4 size 1 1819  
271 0 0 6 350 1820 0 0 0 0 
272 0 0 6 351 1819 0 0 0 0 
273 0 0 6 352 1819 0 0 0 0 
274 0 0 6 353 1820 0 0 0 2 4 this 3 1999  5 index 1 1819  
275 0 0 4 354 1949 0 0 0 2 4 this 3 1998  5 index 1 1819  
276 0 0 4 355 1949 0 0 0 2 4 this 3 1998  5 index 1 1819  
277 0 0 4 356 1949 0 0 0 3 4 this 3 1998  5 index 1 1819  5 value 1 1820  
278 0 0 6 357 1820 0 0 0 1 4 this 3 1999  
279 0 0 6 358 1820 0 0 0 1 4 this 3 1999  
280 0 0 6 359 2001 0 0 0 3 4 this 3 1999  7 low_bit 1 1819  4 size 1 1819  
281 0 0 4 360 1949 0 0 0 4 4 this 3 1998  5 value 1 2001  7 low_bit 1 1819  4 size 1 1819  
282 0 0 6 361 1820 0 0 0 3 4 this 3 1999  7 low_bit 1 1819  4 size 1 1819  
283 0 0 6 362 1820 0 0 0 3 4 this 3 1999  7 low_bit 1 1819  4 size 1 1819  
284 0 0 4 363 1949 0 0 0 3 4 this 3 1998  7 low_bit 1 1819  4 size 1 1819  
285 0 0 4 364 1949 0 0 0 3 4 this 3 1998  7 low_bit 1 1819  4 size 1 1819  
286 0 0 4 365 1949 0 0 0 4 4 this 3 1998  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
287 0 0 6 366 2001 0 0 0 1 4 this 3 1999  
288 0 0 4 367 1949 0 0 0 2 4 this 3 1998  5 value 1 2001  
289 0 0 6 368 1819 0 0 0 1 4 this 3 1999  
290 0 0 6 369 1819 0 0 0 1 4 this 3 1999  
291 0 0 6 370 1819 0 0 0 1 4 this 3 1999  
292 0 0 6 371 1819 0 0 0 1 4 this 3 1999  
293 0 0 6 372 1819 0 0 0 1 4 this 3 1999  
294 0 0 6 373 1819 0 0 0 1 4 this 3 1999  
295 0 0 6 374 1819 0 0 0 2 4 this 3 1999  7 low_bit 1 1819  
296 0 0 4 375 1949 0 0 0 1 4 this 3 1998  
297 0 0 6 376 1820 0 0 0 2 4 this 3 1999  5 other 1 1999  
298 0 0 4 377 1949 0 0 0 1 4 this 3 1998  
299 0 0 4 378 1949 0 0 0 2 4 this 3 1999  3 out 1 1953  
300 0 0 4 379 1949 0 0 0 3 4 this 3 1999  3 out 1 1953  12 spaces_every 1 1819  
301 0 0 4 380 1949 0 0 0 3 4 this 3 1999  3 out 1 1953  12 spaces_every 1 1819  
302 0 0 4 381 1949 0 0 0 3 4 this 3 1999  3 out 1 1953  12 indent_level 1 1819  
303 0 0 6 382 1820 0 0 0 2 4 this 3 1999  5 other 1 1999  
304 0 0 6 383 1820 0 0 0 2 4 this 3 1999  5 other 1 1999  
305 0 0 6 384 1820 0 0 0 2 4 this 3 1999  5 other 1 1999  
306 0 0 6 385 1819 0 0 0 2 4 this 3 1999  5 other 1 1999  
307 0 0 7 386 1998 1180 0 0 2 4 this 3 1999  5 other 1 1999  
308 0 0 7 387 1998 1180 0 0 2 4 this 3 1999  5 other 1 1999  
309 0 0 7 388 1998 1180 0 0 2 4 this 3 1999  5 other 1 1999  
310 0 0 7 389 1998 1180 0 0 1 4 this 3 1999  
311 0 0 7 390 1998 1180 0 0 2 4 this 3 1999  5 shift 1 1819  
312 0 0 7 391 1998 1180 0 0 2 4 this 3 1999  5 shift 1 1819  
313 0 0 6 392 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
314 0 0 6 393 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
315 0 0 6 394 1998 0 0 0 2 4 this 3 1998  5 other 1 1999  
316 0 0 6 395 1998 0 0 0 2 4 this 3 1998  5 shift 1 1819  
317 0 0 6 396 1998 0 0 0 2 4 this 3 1998  5 shift 1 1819  
318 0 0 4 397 1949 0 0 0 1 4 this 3 1998  
319 0 0 4 398 1949 0 0 0 1 4 this 3 1998  
320 0 0 7 399 1998 1180 0 0 1 4 this 3 1999  
321 0 0 7 400 1998 1180 0 0 1 4 this 3 1999  
322 0 0 7 401 1998 1180 0 0 1 4 this 3 1999  
323 0 0 7 401 1998 1180 0 0 2 4 this 3 1999  5 other 1 1999  
324 0 0 7 401 1998 1180 0 0 2 4 this 3 1999  5 index 1 1819  
325 0 0 7 402 1998 1180 0 0 1 4 this 3 1999  
326 0 0 7 402 1998 1180 0 0 2 4 this 3 1999  5 other 1 1999  
327 0 0 7 402 1998 1180 0 0 2 4 this 3 1999  5 index 1 1819  
328 0 0 6 403 1819 0 0 0 1 4 this 3 1999  
329 0 0 6 404 1820 0 0 0 1 4 this 3 1999  
330 0 0 7 405 1956 0 0 0 0 
331 0 0 7 408 2003 1244 0 0 0 
332 0 0 7 408 2003 1244 0 0 1 4 copy 1 2004  
333 0 0 7 408 2003 1244 0 0 1 10 init_value 1 2006  
334 0 0 6 409 2003 0 0 0 2 4 this 3 2003  4 copy 1 2004  
335 0 0 7 410 2003 1244 0 0 0 
336 0 0 7 411 2003 1244 0 0 0 
337 0 0 7 412 2003 1244 0 0 1 7 on_bits 1 1819  
338 0 0 7 413 2003 1244 0 0 1 5 index 1 1819  
339 0 0 7 414 2003 1244 0 0 2 7 low_bit 1 1819  4 size 1 1819  
340 0 0 6 416 1820 0 0 0 0 
341 0 0 6 417 1819 0 0 0 0 
342 0 0 6 418 1819 0 0 0 0 
343 0 0 6 419 1820 0 0 0 2 4 this 3 2004  5 index 1 1819  
344 0 0 4 420 1949 0 0 0 2 4 this 3 2003  5 index 1 1819  
345 0 0 4 421 1949 0 0 0 2 4 this 3 2003  5 index 1 1819  
346 0 0 4 422 1949 0 0 0 3 4 this 3 2003  5 index 1 1819  5 value 1 1820  
347 0 0 6 423 1820 0 0 0 1 4 this 3 2004  
348 0 0 6 424 1820 0 0 0 1 4 this 3 2004  
349 0 0 6 425 2006 0 0 0 3 4 this 3 2004  7 low_bit 1 1819  4 size 1 1819  
350 0 0 4 426 1949 0 0 0 4 4 this 3 2003  5 value 1 2006  7 low_bit 1 1819  4 size 1 1819  
351 0 0 6 427 1820 0 0 0 3 4 this 3 2004  7 low_bit 1 1819  4 size 1 1819  
352 0 0 6 428 1820 0 0 0 3 4 this 3 2004  7 low_bit 1 1819  4 size 1 1819  
353 0 0 4 429 1949 0 0 0 3 4 this 3 2003  7 low_bit 1 1819  4 size 1 1819  
354 0 0 4 430 1949 0 0 0 3 4 this 3 2003  7 low_bit 1 1819  4 size 1 1819  
355 0 0 4 431 1949 0 0 0 4 4 this 3 2003  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
356 0 0 6 432 2006 0 0 0 1 4 this 3 2004  
357 0 0 4 433 1949 0 0 0 2 4 this 3 2003  5 value 1 2006  
358 0 0 6 434 1819 0 0 0 1 4 this 3 2004  
359 0 0 6 435 1819 0 0 0 1 4 this 3 2004  
360 0 0 6 436 1819 0 0 0 1 4 this 3 2004  
361 0 0 6 437 1819 0 0 0 1 4 this 3 2004  
362 0 0 6 438 1819 0 0 0 1 4 this 3 2004  
363 0 0 6 439 1819 0 0 0 1 4 this 3 2004  
364 0 0 6 440 1819 0 0 0 2 4 this 3 2004  7 low_bit 1 1819  
365 0 0 4 441 1949 0 0 0 1 4 this 3 2003  
366 0 0 6 442 1820 0 0 0 2 4 this 3 2004  5 other 1 2004  
367 0 0 4 443 1949 0 0 0 1 4 this 3 2003  
368 0 0 4 444 1949 0 0 0 2 4 this 3 2004  3 out 1 1953  
369 0 0 4 445 1949 0 0 0 3 4 this 3 2004  3 out 1 1953  12 spaces_every 1 1819  
370 0 0 4 446 1949 0 0 0 3 4 this 3 2004  3 out 1 1953  12 spaces_every 1 1819  
371 0 0 4 447 1949 0 0 0 3 4 this 3 2004  3 out 1 1953  12 indent_level 1 1819  
372 0 0 6 448 1820 0 0 0 2 4 this 3 2004  5 other 1 2004  
373 0 0 6 449 1820 0 0 0 2 4 this 3 2004  5 other 1 2004  
374 0 0 6 450 1820 0 0 0 2 4 this 3 2004  5 other 1 2004  
375 0 0 6 451 1819 0 0 0 2 4 this 3 2004  5 other 1 2004  
376 0 0 7 452 2003 1244 0 0 2 4 this 3 2004  5 other 1 2004  
377 0 0 7 453 2003 1244 0 0 2 4 this 3 2004  5 other 1 2004  
378 0 0 7 454 2003 1244 0 0 2 4 this 3 2004  5 other 1 2004  
379 0 0 7 455 2003 1244 0 0 1 4 this 3 2004  
380 0 0 7 456 2003 1244 0 0 2 4 this 3 2004  5 shift 1 1819  
381 0 0 7 457 2003 1244 0 0 2 4 this 3 2004  5 shift 1 1819  
382 0 0 6 458 2003 0 0 0 2 4 this 3 2003  5 other 1 2004  
383 0 0 6 459 2003 0 0 0 2 4 this 3 2003  5 other 1 2004  
384 0 0 6 460 2003 0 0 0 2 4 this 3 2003  5 other 1 2004  
385 0 0 6 461 2003 0 0 0 2 4 this 3 2003  5 shift 1 1819  
386 0 0 6 462 2003 0 0 0 2 4 this 3 2003  5 shift 1 1819  
387 0 0 4 463 1949 0 0 0 1 4 this 3 2003  
388 0 0 4 464 1949 0 0 0 1 4 this 3 2003  
389 0 0 7 465 2003 1244 0 0 1 4 this 3 2004  
390 0 0 7 466 2003 1244 0 0 1 4 this 3 2004  
391 0 0 7 467 2003 1244 0 0 1 4 this 3 2004  
392 0 0 7 467 2003 1244 0 0 2 4 this 3 2004  5 other 1 2004  
393 0 0 7 467 2003 1244 0 0 2 4 this 3 2004  5 index 1 1819  
394 0 0 7 468 2003 1244 0 0 1 4 this 3 2004  
395 0 0 7 468 2003 1244 0 0 2 4 this 3 2004  5 other 1 2004  
396 0 0 7 468 2003 1244 0 0 2 4 this 3 2004  5 index 1 1819  
397 0 0 6 469 1819 0 0 0 1 4 this 3 2004  
398 0 0 6 470 1820 0 0 0 1 4 this 3 2004  
399 0 0 7 471 1956 0 0 0 0 
400 0 0 7 476 2008 1308 0 10 /**
 *
 */ 0 
401 0 0 7 476 2008 1308 0 10 /**
 *
 */ 1 4 copy 1 2009  
402 0 0 7 476 2008 1308 0 10 /**
 *
 */ 1 10 init_value 1 2011  
403 0 0 7 476 2008 1308 0 10 /**
 *
 */ 1 4 from 1 2012  
404 0 0 6 477 2008 0 0 10 /**
 *
 */ 2 4 this 3 2008  4 copy 1 2009  
405 0 0 7 478 2008 1308 0 69 /**
 * Returns a BitArray with an infinite array of bits, all on.
 */ 0 
406 0 0 7 479 2008 1308 0 53 /**
 * Returns a BitArray whose bits are all off.
 */ 0 
407 0 0 7 480 2008 1308 0 62 /**
 * Returns a BitArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1819  
408 0 0 7 481 2008 1308 0 61 /**
 * Returns a BitArray with only the indicated bit on.
 */ 1 5 index 1 1819  
409 0 0 7 482 2008 1308 0 76 /**
 * Returns a BitArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1819  4 size 1 1819  
410 0 0 6 484 1820 0 0 387 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The BitArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or BitArray interchangeably.
 */ 0 
411 0 0 6 485 1819 0 0 422 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The BitArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or BitArray interchangeably.
 */ 0 
412 0 0 6 486 1819 0 0 203 /**
 * Returns the number of bits stored per word internally.  This is of interest
 * only in that it limits the maximum number of bits that may be queried or
 * set at once by extract() and store().
 */ 0 
413 0 0 6 487 2014 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2009  
414 0 0 6 488 1820 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2009  5 index 1 1819  
415 0 0 4 489 1949 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2008  5 index 1 1819  
416 0 0 4 490 1949 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2008  5 index 1 1819  
417 0 0 4 491 1949 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2008  5 index 1 1819  5 value 1 1820  
418 0 0 6 492 1820 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2009  
419 0 0 6 493 1820 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2009  
420 0 0 6 494 1820 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2009  
421 0 0 6 495 2011 0 0 187 /**
 * Returns a word that represents only the indicated range of bits within this
 * BitArray, shifted to the least-significant position.  size must be <=
 * get_num_bits_per_word().
 */ 3 4 this 3 2009  7 low_bit 1 1819  4 size 1 1819  
422 0 0 4 496 1949 0 0 92 /**
 * Stores the indicated word into the indicated range of bits with this
 * BitArray.
 */ 4 4 this 3 2008  5 value 1 2011  7 low_bit 1 1819  4 size 1 1819  
423 0 0 6 497 1820 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2009  7 low_bit 1 1819  4 size 1 1819  
424 0 0 6 498 1820 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2009  7 low_bit 1 1819  4 size 1 1819  
425 0 0 4 499 1949 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2008  7 low_bit 1 1819  4 size 1 1819  
426 0 0 4 500 1949 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2008  7 low_bit 1 1819  4 size 1 1819  
427 0 0 4 501 1949 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2008  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
428 0 0 6 502 1819 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2009  
429 0 0 6 503 1819 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2009  
430 0 0 6 504 1819 0 0 101 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits.
 */ 1 4 this 3 2009  
431 0 0 6 505 1819 0 0 101 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits.
 */ 1 4 this 3 2009  
432 0 0 6 506 1819 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2009  
433 0 0 6 507 1819 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2009  
434 0 0 6 508 1819 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2009  7 low_bit 1 1819  
435 0 0 6 509 2014 0 0 75 /**
 * Returns the number of possibly-unique words stored in the array.
 */ 1 4 this 3 2009  
436 0 0 7 510 2016 0 0 175 /**
 * Returns the nth word in the array.  It is valid for n to be greater than
 * get_num_words(), but the return value beyond get_num_words() will always be
 * the same.
 */ 2 4 this 3 2009  1 n 1 2014  
437 0 0 4 511 1949 0 0 113 /**
 * Replaces the nth word in the array.  If n >= get_num_words(), this
 * automatically extends the array.
 */ 3 4 this 3 2008  1 n 1 2014  5 value 1 2011  
438 0 0 4 512 1949 0 0 90 /**
 * Inverts all the bits in the BitArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2008  
439 0 0 6 513 1820 0 0 178 /**
 * Returns true if this BitArray has any "one" bits in common with the other
 * one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2009  5 other 1 2009  
440 0 0 4 514 1949 0 0 49 /**
 * Sets all the bits in the BitArray off.
 */ 1 4 this 3 2008  
441 0 0 4 515 1949 0 0 193 /**
 * Writes the BitArray out as a hex number.  For a BitArray, this is always
 * the same as output_hex(); it's too confusing for the output format to
 * change back and forth at runtime.
 */ 2 4 this 3 2009  3 out 1 1953  
442 0 0 4 516 1949 0 0 83 /**
 * Writes the BitArray out as a binary number, with spaces every four bits.
 */ 3 4 this 3 2009  3 out 1 1953  12 spaces_every 1 1819  
443 0 0 4 517 1949 0 0 93 /**
 * Writes the BitArray out as a hexadecimal number, with spaces every four
 * digits.
 */ 3 4 this 3 2009  3 out 1 1953  12 spaces_every 1 1819  
444 0 0 4 518 1949 0 0 99 /**
 * Writes the BitArray out as a binary or a hex number, according to the
 * number of bits.
 */ 3 4 this 3 2009  3 out 1 1953  12 indent_level 1 1819  
445 0 0 6 519 1820 0 0 0 2 4 this 3 2009  5 other 1 2009  
446 0 0 6 520 1820 0 0 0 2 4 this 3 2009  5 other 1 2009  
447 0 0 6 521 1820 0 0 0 2 4 this 3 2009  5 other 1 2009  
448 0 0 6 522 1819 0 0 233 /**
 * Returns a number less than zero if this BitArray sorts before the indicated
 * other BitArray, greater than zero if it sorts after, or 0 if they are
 * equivalent.  This is based on the same ordering defined by operator <.
 */ 2 4 this 3 2009  5 other 1 2009  
449 0 0 7 523 2008 1308 0 0 2 4 this 3 2009  5 other 1 2009  
450 0 0 7 524 2008 1308 0 0 2 4 this 3 2009  5 other 1 2009  
451 0 0 7 525 2008 1308 0 0 2 4 this 3 2009  5 other 1 2009  
452 0 0 7 526 2008 1308 0 0 1 4 this 3 2009  
453 0 0 7 527 2008 1308 0 0 2 4 this 3 2009  5 shift 1 1819  
454 0 0 7 528 2008 1308 0 0 2 4 this 3 2009  5 shift 1 1819  
455 0 0 6 529 2008 0 0 0 2 4 this 3 2008  5 other 1 2009  
456 0 0 6 530 2008 0 0 0 2 4 this 3 2008  5 other 1 2009  
457 0 0 6 531 2008 0 0 0 2 4 this 3 2008  5 other 1 2009  
458 0 0 6 532 2008 0 0 0 2 4 this 3 2008  5 shift 1 1819  
459 0 0 6 533 2008 0 0 0 2 4 this 3 2008  5 shift 1 1819  
460 0 0 7 534 1956 0 0 0 0 
461 0 0 7 536 2017 1379 0 259 // The default constructor must do nothing, because we can't guarantee
// ordering of static initializers.  If the constructor tried to initialize
// its value, it  might happen after the value had already been set
// previously by another static initializer! 0 
462 0 0 7 536 2017 1379 0 10 /**
 *
 */ 1 4 copy 1 2018  
463 0 0 7 536 2017 1379 0 154 /**
 * Constructs a ButtonHandle with the corresponding index number, which may
 * have been returned by an earlier call to ButtonHandle::get_index().
 */ 1 5 index 1 1819  
464 0 0 7 536 2017 1379 0 341 /**
 * Constructs a ButtonHandle with the corresponding name, which is looked up
 * in the ButtonRegistry.  This exists for the purpose of being able to
 * automatically coerce a string into a ButtonHandle; for most purposes, you
 * should use either the static KeyboardButton/MouseButton getters or
 * ButtonRegistry::register_button().
 */ 1 4 name 1 1945  
465 0 0 6 537 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
466 0 0 6 538 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
467 0 0 6 539 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
468 0 0 6 540 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
469 0 0 6 541 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
470 0 0 6 542 1820 0 0 0 2 4 this 3 2018  5 other 1 2018  
471 0 0 6 543 1819 0 0 209 /**
 * Sorts ButtonHandles arbitrarily (according to <, >, etc.).  Returns a
 * number less than 0 if this type sorts before the other one, greater than
 * zero if it sorts after, 0 if they are equivalent.
 */ 2 4 this 3 2018  5 other 1 2018  
472 0 0 6 544 2014 0 0 54 /**
 * Returns a hash code suitable for phash_map.
 */ 1 4 this 3 2018  
473 0 0 6 545 1945 0 0 42 /**
 * Returns the name of the button.
 */ 1 4 this 3 2018  
474 0 0 6 546 1820 0 0 121 /**
 * Returns true if the button was created with an ASCII equivalent code (e.g.
 * for a standard keyboard button).
 */ 1 4 this 3 2018  
475 0 0 6 547 1866 0 0 109 /**
 * Returns the character code associated with the button, or '\0' if no ASCII
 * code was associated.
 */ 1 4 this 3 2018  
476 0 0 7 548 2017 1379 0 373 /**
 * Returns the alias (alternate name) associated with the button, if any, or
 * ButtonHandle::none() if the button has no alias.
 *
 * Each button is allowed to have one alias, and multiple different buttons
 * can refer to the same alias.  The alias should be the more general name for
 * the button, for instance, shift is an alias for lshift, but not vice-versa.
 */ 1 4 this 3 2018  
477 0 0 6 549 1820 0 0 263 /**
 * Returns true if this ButtonHandle is the same as the other one, or if the
 * other one is an alias for this one.  (Does not return true if this button
 * is an alias for the other one, however.)
 *
 * This is a more general comparison than operator ==.
 */ 2 4 this 3 2018  5 other 1 2018  
478 0 0 6 550 1819 0 0 363 /**
 * Returns the integer index associated with this ButtonHandle.  Each
 * different ButtonHandle will have a different index.  However, you probably
 * shouldn't be using this method; you should just treat the ButtonHandles as
 * opaque classes.  This is provided for the convenience of non-C++ scripting
 * languages to build a hashtable of ButtonHandles.
 */ 1 4 this 3 2018  
479 0 0 4 551 1949 0 0 10 /**
 *
 */ 2 4 this 3 2018  3 out 1 1953  
480 0 0 7 552 2017 1379 0 92 /**
 * Returns a special zero-valued ButtonHandle that is used to indicate no
 * button.
 */ 0 
481 0 0 7 561 1956 0 0 0 0 
482 0 0 6 553 1820 0 0 0 1 4 this 3 2018  
483 0 0 7 569 2022 1386 0 0 1 6 param0 0 2020  
484 0 0 7 564 2017 1379 0 150 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, registers a new one and returns it.
 */ 2 4 this 3 2022  4 name 1 1945  
485 0 0 7 565 2017 1379 0 144 /**
 * Finds a ButtonHandle in the registry matching the indicated name.  If there
 * is no such ButtonHandle, returns ButtonHandle::none().
 */ 2 4 this 3 2022  4 name 1 1945  
486 0 0 7 566 2017 1379 0 169 /**
 * Finds a ButtonHandle in the registry matching the indicated ASCII
 * equivalent character.  If there is no such ButtonHandle, returns
 * ButtonHandle::none().
 */ 2 4 this 3 2020  16 ascii_equivalent 1 1866  
487 0 0 4 567 1949 0 0 10 /**
 *
 */ 2 4 this 3 2020  3 out 1 1953  
488 0 0 6 568 2022 0 0 67 /**
 * Returns the pointer to the global ButtonRegistry object.
 */ 0 
489 0 0 7 580 2023 1395 0 0 0 
490 0 0 7 580 2023 1395 0 0 1 6 param0 0 2024  
491 0 0 6 573 2014 0 0 76 /**
 * Returns the number of buttons that this button mapping specifies.
 */ 1 4 this 3 2024  
492 0 0 7 574 2017 1379 0 76 /**
 * Returns the underlying raw button associated with the nth button.
 */ 2 4 this 3 2024  1 i 1 2014  
493 0 0 7 575 2017 1379 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2024  3 raw 1 2017  
494 0 0 7 575 2017 1379 0 101 /**
 * Returns the nth mapped button, meaning the button that the nth raw button
 * is mapped to.
 */ 2 4 this 3 2024  1 i 1 2014  
495 0 0 7 575 2017 1379 0 166 /**
 * Returns the button that the given button is mapped to, or
 * ButtonHandle::none() if this map does not specify a mapped button for the
 * given raw button.
 */ 2 4 this 3 2024  8 raw_name 1 1945  
496 0 0 6 576 1945 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2024  3 raw 1 2017  
497 0 0 6 576 1945 0 0 127 /**
 * Returns the label associated with the nth mapped button, meaning the button
 * that the nth raw button is mapped to.
 */ 2 4 this 3 2024  1 i 1 2014  
498 0 0 6 576 1945 0 0 353 /**
 * If the button map specifies a special name for the button (eg.  if the
 * operating system or keyboard device has a localized name describing the
 * key), returns it, or the empty string otherwise.
 *
 * Note that this is not the same as get_mapped_button().get_name(), which
 * returns the name of the Panda event associated with the button.
 */ 2 4 this 3 2024  8 raw_name 1 1945  
499 0 0 4 577 1949 0 0 10 /**
 *
 */ 2 4 this 3 2024  3 out 1 1953  
500 0 0 4 578 1949 0 0 10 /**
 *
 */ 3 4 this 3 2024  3 out 1 1953  12 indent_level 1 1819  
501 0 0 7 579 1956 0 0 0 0 
502 0 0 7 586 2028 1400 0 0 1 6 param0 0 2026  
503 0 0 4 583 1949 0 0 10 /**
 *
 */ 2 4 this 3 2026  3 out 1 1953  
504 0 0 7 584 2028 1400 0 0 1 8 function 1 1848  
505 0 0 7 585 1956 0 0 0 0 
506 0 0 6 589 1819 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2029  
507 0 0 4 590 1949 0 0 108 /**
 * Explicitly increments the cache reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 2029  
508 0 0 6 591 1820 0 0 202 /**
 * Explicitly decrements the cache reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2029  
509 0 0 6 592 1820 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2029  
510 0 0 7 594 1956 0 0 0 0 
511 0 0 4 596 1949 0 0 10 /**
 *
 */ 2 4 this 3 2031  3 out 1 1953  
512 0 0 4 597 1949 0 0 159 /**
 * You should make this call during the callback if you want to continue the
 * normal function that would have been done in the absence of a callback.
 */ 1 4 this 3 2033  
513 0 0 7 598 1956 0 0 0 0 
514 0 0 7 601 2034 1400 0 10 /**
 *
 */ 1 8 function 1 1848  
515 0 0 7 601 2034 1400 0 0 1 6 param0 0 2035  
516 0 0 4 603 1949 0 0 126 /**
 * Replaces the function that is called for the callback.  runs.  The
 * parameter should be a Python callable object.
 */ 2 4 this 3 2034  8 function 1 1848  
517 0 0 6 604 1848 0 0 64 /**
 * Returns the function that is called for the callback.
 */ 1 4 this 3 2034  
518 0 0 7 606 1956 0 0 0 0 
519 0 0 7 608 2037 1420 0 10 /**
 *
 */ 0 
520 0 0 6 609 1876 0 0 10 /**
 *
 */ 1 4 this 3 2038  
521 0 0 6 610 1876 0 0 10 /**
 *
 */ 1 4 this 3 2038  
522 0 0 4 615 1949 0 0 0 2 4 this 3 2037  5 value 1 1875  
523 0 0 4 614 1949 0 0 0 1 4 this 3 2038  
524 0 0 7 620 2040 0 0 10 /**
 *
 */ 0 
525 0 0 7 620 2040 0 0 10 /**
 *
 */ 1 4 copy 1 2041  
526 0 0 4 621 1949 0 0 1841 /**
 * Changes the mode of the clock.  Normally, the clock is in mode M_normal.
 * In this mode, each call to tick() will set the value returned by
 * get_frame_time() to the current real time; thus, the clock simply reports
 * time advancing.
 *
 * Other possible modes:
 *
 * M_non_real_time - the clock ignores real time completely; at each call to
 * tick(), it pretends that exactly dt seconds have elapsed since the last
 * call to tick().  You may set the value of dt with set_dt() or
 * set_frame_rate().
 *
 * M_limited - the clock will run as fast as it can, as in M_normal, but will
 * not run faster than the rate specified by set_frame_rate().  If the
 * application would run faster than this rate, the clock will slow down the
 * application.
 *
 * M_integer - the clock will run as fast as it can, but the rate will be
 * constrained to be an integer multiple or divisor of the rate specified by
 * set_frame_rate().  The clock will slow down the application a bit to
 * guarantee this.
 *
 * M_integer_limited - a combination of M_limited and M_integer; the clock
 * will not run faster than set_frame_rate(), and if it runs slower, it will
 * run at a integer divisor of that rate.
 *
 * M_forced - the clock forces the application to run at the rate specified by
 * set_frame_rate().  If the application would run faster than this rate, the
 * clock will slow down the application; if the application would run slower
 * than this rate, the clock slows down time so that the application believes
 * it is running at the given rate.
 *
 * M_degrade - the clock runs at real time, but the application is slowed down
 * by a set factor of its frame rate, specified by set_degrade_factor().
 *
 * M_slave - the clock does not advance, but relies on the user to call
 * set_frame_time() and/or set_frame_count() each frame.
 */ 2 4 this 3 2040  4 mode 1 1879  
527 0 0 6 622 1879 0 0 66 /**
 * Returns the current mode of the clock.  See set_mode().
 */ 1 4 this 3 2041  
528 0 0 6 624 1818 0 0 350 /**
 * Returns the time in seconds as of the last time tick() was called
 * (typically, this will be as of the start of the current frame).
 *
 * This is generally the kind of time you want to ask for in most rendering
 * and animation contexts, since it's important that all of the animation for
 * a given frame remains in sync with each other.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
529 0 0 6 625 1818 0 0 434 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.  This is useful for doing real timing
 * measurements, e.g.  for performance statistics.
 *
 * This returns the most precise timer we have for short time intervals, but
 * it may tend to drift over the long haul.  If more accurate timekeeping is
 * needed over a long period of time, use get_long_time() instead.
 */ 1 4 this 3 2041  
530 0 0 6 626 1818 0 0 440 /**
 * Returns the actual number of seconds elapsed since the ClockObject was
 * created, or since it was last reset.
 *
 * This is similar to get_real_time(), except that it uses the most accurate
 * counter we have over a long period of time, and so it is less likely to
 * drift.  However, it may not be very precise for measuring short intervals.
 * On Windows, for instace, this is only accurate to within about 55
 * milliseconds.
 */ 1 4 this 3 2041  
531 0 0 4 627 1949 0 0 75 /**
 * Simultaneously resets both the time and the frame count to zero.
 */ 1 4 this 3 2040  
532 0 0 4 628 1949 0 0 316 /**
 * Resets the clock to the indicated time.  This changes only the real time of
 * the clock as reported by get_real_time(), but does not immediately change
 * the time reported by get_frame_time()--that will change after the next call
 * to tick().  Also see reset(), set_frame_time(), and set_frame_count().
 */ 2 4 this 3 2040  4 time 1 1818  
533 0 0 4 629 1949 0 0 215 /**
 * Changes the time as reported for the current frame to the indicated time.
 * Normally, the way to adjust the frame time is via tick(); this function is
 * provided only for occasional special adjustments.
 */ 3 4 this 3 2040  4 time 1 1818  14 current_thread 1 2043  
534 0 0 4 630 1949 0 0 132 /**
 * Resets the number of frames counted to the indicated number.  Also see
 * reset(), set_real_time(), and set_frame_time().
 */ 3 4 this 3 2040  11 frame_count 1 1819  14 current_thread 1 2043  
535 0 0 6 631 1819 0 0 195 /**
 * Returns the number of times tick() has been called since the ClockObject
 * was created, or since it was last reset.  This is generally the number of
 * frames that have been rendered.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
536 0 0 6 632 1818 0 0 245 /**
 * Returns the average frame rate since the last reset.  This is simply the
 * total number of frames divided by the total elapsed time.  This reports the
 * virtual frame rate if the clock is in (or has been in) M_non_real_time
 * mode.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
537 0 0 6 637 1818 0 0 130 /**
 * Returns the elapsed time for the previous frame: the number of seconds
 * elapsed between the last two calls to tick().
 */ 2 4 this 3 2041  14 current_thread 1 2043  
538 0 0 4 638 1949 0 0 291 /**
 * In non-real-time mode, sets the number of seconds that should appear to
 * elapse between frames.  In forced mode or limited mode, sets our target dt.
 * In normal mode, this has no effect.
 *
 * Also see set_frame_rate(), which is a different way to specify the same
 * quantity.
 */ 2 4 this 3 2040  2 dt 1 1818  
539 0 0 4 639 1949 0 0 291 /**
 * In non-real-time mode, sets the number of frames per second that we should
 * appear to be running.  In forced mode or limited mode, sets our target
 * frame rate.  In normal mode, this has no effect.
 *
 * Also see set_dt(), which is a different way to specify the same quantity.
 */ 2 4 this 3 2040  10 frame_rate 1 1818  
540 0 0 6 641 1818 0 0 106 /**
 * Returns the current maximum allowable time elapsed between any two frames.
 * See set_max_dt().
 */ 1 4 this 3 2041  
541 0 0 4 642 1949 0 0 511 /**
 * Sets a limit on the value returned by get_dt().  If this value is less than
 * zero, no limit is imposed; otherwise, this is the maximum value that will
 * ever be returned by get_dt(), regardless of how much time has actually
 * elapsed between frames.
 *
 * This limit is only imposed in real-time mode; in non-real-time mode, the dt
 * is fixed anyway and max_dt is ignored.
 *
 * This is generally used to guarantee reasonable behavior even in the
 * presence of a very slow or chuggy frame rame.
 */ 2 4 this 3 2040  6 max_dt 1 1818  
542 0 0 6 644 1818 0 0 265 /**
 * In degrade mode, returns the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 1 4 this 3 2041  
543 0 0 4 645 1949 0 0 262 /**
 * In degrade mode, sets the ratio by which the performance is degraded.  A
 * value of 2.0 causes the clock to be slowed down by a factor of two
 * (reducing performance to 1/2 what would be otherwise).
 *
 * This has no effect if mode is not M_degrade.
 */ 2 4 this 3 2040  14 degrade_factor 1 1818  
544 0 0 4 647 1949 0 0 393 /**
 * Specifies the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.  Changing this does not necessarily immediately
 * change the result of get_average_frame_rate(), until this interval of time
 * has elapsed again.
 *
 * Setting this to zero disables the computation of get_average_frame_rate().
 */ 2 4 this 3 2040  4 time 1 1818  
545 0 0 6 648 1818 0 0 162 /**
 * Returns the interval of time (in seconds) over which
 * get_average_frame_rate() averages the number of frames per second to
 * compute the frame rate.
 */ 1 4 this 3 2041  
546 0 0 6 650 1818 0 0 214 /**
 * Returns the average frame rate in number of frames per second over the last
 * get_average_frame_rate_interval() seconds.  This measures the virtual frame
 * rate if the clock is in M_non_real_time mode.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
547 0 0 6 651 1818 0 0 105 /**
 * Returns the maximum frame duration over the last
 * get_average_frame_rate_interval() seconds.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
548 0 0 6 652 1818 0 0 539 /**
 * Returns the standard deviation of the frame times of the frames rendered
 * over the past get_average_frame_rate_interval() seconds.  This number gives
 * an estimate of the chugginess of the frame rate; if it is large, there is a
 * large variation in the frame rate; if is small, all of the frames are
 * consistent in length.
 *
 * A large value might also represent just a recent change in frame rate, for
 * instance, because the camera has just rotated from looking at a simple
 * scene to looking at a more complex scene.
 */ 2 4 this 3 2041  14 current_thread 1 2043  
549 0 0 4 655 1949 0 0 285 /**
 * Instructs the clock that a new frame has just begun.  In normal, real-time
 * mode, get_frame_time() will henceforth report the time as of this instant
 * as the current start-of-frame time.  In non-real-time mode,
 * get_frame_time() will be incremented by the value of dt.
 */ 2 4 this 3 2040  14 current_thread 1 2043  
550 0 0 4 656 1949 0 0 417 /**
 * Resets the frame time to the current real time.  This is similar to tick(),
 * except that it does not advance the frame counter and does not affect dt.
 * This is intended to be used in the middle of a particularly long frame to
 * compensate for the time that has already elapsed.
 *
 * In non-real-time mode, this function has no effect (because in this mode
 * all frames take the same length of time).
 */ 2 4 this 3 2040  14 current_thread 1 2043  
551 0 0 6 657 1820 0 0 322 /**
 * Returns true if a clock error was detected since the last time
 * check_errors() was called.  A clock error means that something happened, an
 * OS or BIOS bug, for instance, that makes the current value of the clock
 * somewhat suspect, and an application may wish to resynchronize with any
 * external clocks.
 */ 2 4 this 3 2040  14 current_thread 1 2043  
552 0 0 7 658 2040 0 0 159 /**
 * Returns a pointer to the global ClockObject.  This is the ClockObject that
 * most code should use for handling scene graph rendering and animation.
 */ 0 
553 0 0 7 659 1956 0 0 0 0 
554 0 0 4 667 1949 0 0 62 /**
 * @see CachedTypedWritableReferenceCount::cache_ref()
 */ 1 4 this 3 2045  
555 0 0 6 668 1820 0 0 64 /**
 * @see CachedTypedWritableReferenceCount::cache_unref()
 */ 1 4 this 3 2045  
556 0 0 7 669 1956 0 0 0 0 
557 0 0 7 672 2047 0 0 10 /**
 *
 */ 0 
558 0 0 6 673 1820 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2047  4 file 1 2048  
559 0 0 6 673 1820 0 0 99 /**
 * Opens the indicated filename for reading.  Returns true on success, false
 * on failure.
 */ 2 4 this 3 2047  8 filename 1 1974  
560 0 0 6 673 1820 0 0 230 /**
 * Starts reading from the indicated stream.  Returns true on success, false
 * on failure.  The DatagramInputFile does not take ownership of the stream;
 * you are responsible for closing or deleting it when you are done.
 */ 3 4 this 3 2047  2 in 1 2051  8 filename 1 1974  
561 0 0 6 674 2051 0 0 61 /**
 * Returns the istream represented by the input file.
 */ 1 4 this 3 2047  
562 0 0 4 675 1949 0 0 98 /**
 * Closes the file.  This is also implicitly done when the DatagramInputFile
 * destructs.
 */ 1 4 this 3 2047  
563 0 0 7 678 2053 1470 0 0 0 
564 0 0 7 678 2053 1470 0 0 1 4 copy 1 2054  
565 0 0 6 679 2053 0 0 0 2 4 this 3 2053  4 copy 1 2054  
566 0 0 7 680 2053 1470 0 0 0 
567 0 0 7 681 2053 1470 0 0 0 
568 0 0 7 682 2053 1470 0 0 1 7 on_bits 1 1819  
569 0 0 7 683 2053 1470 0 0 1 5 index 1 1819  
570 0 0 7 684 2053 1470 0 0 2 7 low_bit 1 1819  4 size 1 1819  
571 0 0 6 686 1820 0 0 0 0 
572 0 0 6 687 1819 0 0 0 0 
573 0 0 6 688 1819 0 0 0 0 
574 0 0 6 689 1820 0 0 0 2 4 this 3 2054  5 index 1 1819  
575 0 0 4 690 1949 0 0 0 2 4 this 3 2053  5 index 1 1819  
576 0 0 4 691 1949 0 0 0 2 4 this 3 2053  5 index 1 1819  
577 0 0 4 692 1949 0 0 0 3 4 this 3 2053  5 index 1 1819  5 value 1 1820  
578 0 0 6 693 1820 0 0 0 1 4 this 3 2054  
579 0 0 6 694 1820 0 0 0 1 4 this 3 2054  
580 0 0 6 695 2001 0 0 0 3 4 this 3 2054  7 low_bit 1 1819  4 size 1 1819  
581 0 0 4 696 1949 0 0 0 4 4 this 3 2053  5 value 1 2001  7 low_bit 1 1819  4 size 1 1819  
582 0 0 6 697 1820 0 0 0 3 4 this 3 2054  7 low_bit 1 1819  4 size 1 1819  
583 0 0 6 698 1820 0 0 0 3 4 this 3 2054  7 low_bit 1 1819  4 size 1 1819  
584 0 0 4 699 1949 0 0 0 3 4 this 3 2053  7 low_bit 1 1819  4 size 1 1819  
585 0 0 4 700 1949 0 0 0 3 4 this 3 2053  7 low_bit 1 1819  4 size 1 1819  
586 0 0 4 701 1949 0 0 0 4 4 this 3 2053  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
587 0 0 6 702 1819 0 0 0 1 4 this 3 2054  
588 0 0 6 703 1819 0 0 0 1 4 this 3 2054  
589 0 0 6 704 1819 0 0 0 1 4 this 3 2054  
590 0 0 6 705 1819 0 0 0 1 4 this 3 2054  
591 0 0 6 706 1819 0 0 0 1 4 this 3 2054  
592 0 0 6 707 1819 0 0 0 1 4 this 3 2054  
593 0 0 6 708 1819 0 0 0 2 4 this 3 2054  7 low_bit 1 1819  
594 0 0 4 709 1949 0 0 0 1 4 this 3 2053  
595 0 0 6 710 1820 0 0 0 2 4 this 3 2054  5 other 1 2054  
596 0 0 4 711 1949 0 0 0 1 4 this 3 2053  
597 0 0 4 712 1949 0 0 0 2 4 this 3 2054  3 out 1 1953  
598 0 0 4 713 1949 0 0 0 3 4 this 3 2054  3 out 1 1953  12 spaces_every 1 1819  
599 0 0 4 714 1949 0 0 0 3 4 this 3 2054  3 out 1 1953  12 spaces_every 1 1819  
600 0 0 4 715 1949 0 0 0 3 4 this 3 2054  3 out 1 1953  12 indent_level 1 1819  
601 0 0 6 716 1820 0 0 0 2 4 this 3 2054  5 other 1 2054  
602 0 0 6 717 1820 0 0 0 2 4 this 3 2054  5 other 1 2054  
603 0 0 6 718 1820 0 0 0 2 4 this 3 2054  5 other 1 2054  
604 0 0 6 719 1819 0 0 0 2 4 this 3 2054  5 other 1 2054  
605 0 0 7 720 2053 1470 0 0 2 4 this 3 2054  5 other 1 2054  
606 0 0 7 721 2053 1470 0 0 2 4 this 3 2054  5 other 1 2054  
607 0 0 7 722 2053 1470 0 0 2 4 this 3 2054  5 other 1 2054  
608 0 0 7 723 2053 1470 0 0 1 4 this 3 2054  
609 0 0 7 724 2053 1470 0 0 2 4 this 3 2054  5 shift 1 1819  
610 0 0 7 725 2053 1470 0 0 2 4 this 3 2054  5 shift 1 1819  
611 0 0 6 726 2053 0 0 0 2 4 this 3 2053  5 other 1 2054  
612 0 0 6 727 2053 0 0 0 2 4 this 3 2053  5 other 1 2054  
613 0 0 6 728 2053 0 0 0 2 4 this 3 2053  5 other 1 2054  
614 0 0 6 729 2053 0 0 0 2 4 this 3 2053  5 shift 1 1819  
615 0 0 6 730 2053 0 0 0 2 4 this 3 2053  5 shift 1 1819  
616 0 0 7 731 1956 0 0 0 0 
617 0 0 7 734 2056 1524 0 0 0 
618 0 0 7 734 2056 1524 0 0 1 4 copy 1 2057  
619 0 0 6 735 2056 0 0 0 2 4 this 3 2056  4 copy 1 2057  
620 0 0 7 736 2056 1524 0 0 0 
621 0 0 7 737 2056 1524 0 0 0 
622 0 0 7 738 2056 1524 0 0 1 7 on_bits 1 1819  
623 0 0 7 739 2056 1524 0 0 1 5 index 1 1819  
624 0 0 7 740 2056 1524 0 0 2 7 low_bit 1 1819  4 size 1 1819  
625 0 0 6 742 1820 0 0 0 0 
626 0 0 6 743 1819 0 0 0 0 
627 0 0 6 744 1819 0 0 0 0 
628 0 0 6 745 1820 0 0 0 2 4 this 3 2057  5 index 1 1819  
629 0 0 4 746 1949 0 0 0 2 4 this 3 2056  5 index 1 1819  
630 0 0 4 747 1949 0 0 0 2 4 this 3 2056  5 index 1 1819  
631 0 0 4 748 1949 0 0 0 3 4 this 3 2056  5 index 1 1819  5 value 1 1820  
632 0 0 6 749 1820 0 0 0 1 4 this 3 2057  
633 0 0 6 750 1820 0 0 0 1 4 this 3 2057  
634 0 0 6 751 2001 0 0 0 3 4 this 3 2057  7 low_bit 1 1819  4 size 1 1819  
635 0 0 4 752 1949 0 0 0 4 4 this 3 2056  5 value 1 2001  7 low_bit 1 1819  4 size 1 1819  
636 0 0 6 753 1820 0 0 0 3 4 this 3 2057  7 low_bit 1 1819  4 size 1 1819  
637 0 0 6 754 1820 0 0 0 3 4 this 3 2057  7 low_bit 1 1819  4 size 1 1819  
638 0 0 4 755 1949 0 0 0 3 4 this 3 2056  7 low_bit 1 1819  4 size 1 1819  
639 0 0 4 756 1949 0 0 0 3 4 this 3 2056  7 low_bit 1 1819  4 size 1 1819  
640 0 0 4 757 1949 0 0 0 4 4 this 3 2056  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
641 0 0 6 758 1819 0 0 0 1 4 this 3 2057  
642 0 0 6 759 1819 0 0 0 1 4 this 3 2057  
643 0 0 6 760 1819 0 0 0 1 4 this 3 2057  
644 0 0 6 761 1819 0 0 0 1 4 this 3 2057  
645 0 0 6 762 1819 0 0 0 1 4 this 3 2057  
646 0 0 6 763 1819 0 0 0 1 4 this 3 2057  
647 0 0 6 764 1819 0 0 0 2 4 this 3 2057  7 low_bit 1 1819  
648 0 0 4 765 1949 0 0 0 1 4 this 3 2056  
649 0 0 6 766 1820 0 0 0 2 4 this 3 2057  5 other 1 2057  
650 0 0 4 767 1949 0 0 0 1 4 this 3 2056  
651 0 0 4 768 1949 0 0 0 2 4 this 3 2057  3 out 1 1953  
652 0 0 4 769 1949 0 0 0 3 4 this 3 2057  3 out 1 1953  12 spaces_every 1 1819  
653 0 0 4 770 1949 0 0 0 3 4 this 3 2057  3 out 1 1953  12 spaces_every 1 1819  
654 0 0 4 771 1949 0 0 0 3 4 this 3 2057  3 out 1 1953  12 indent_level 1 1819  
655 0 0 6 772 1820 0 0 0 2 4 this 3 2057  5 other 1 2057  
656 0 0 6 773 1820 0 0 0 2 4 this 3 2057  5 other 1 2057  
657 0 0 6 774 1820 0 0 0 2 4 this 3 2057  5 other 1 2057  
658 0 0 6 775 1819 0 0 0 2 4 this 3 2057  5 other 1 2057  
659 0 0 7 776 2056 1524 0 0 2 4 this 3 2057  5 other 1 2057  
660 0 0 7 777 2056 1524 0 0 2 4 this 3 2057  5 other 1 2057  
661 0 0 7 778 2056 1524 0 0 2 4 this 3 2057  5 other 1 2057  
662 0 0 7 779 2056 1524 0 0 1 4 this 3 2057  
663 0 0 7 780 2056 1524 0 0 2 4 this 3 2057  5 shift 1 1819  
664 0 0 7 781 2056 1524 0 0 2 4 this 3 2057  5 shift 1 1819  
665 0 0 6 782 2056 0 0 0 2 4 this 3 2056  5 other 1 2057  
666 0 0 6 783 2056 0 0 0 2 4 this 3 2056  5 other 1 2057  
667 0 0 6 784 2056 0 0 0 2 4 this 3 2056  5 other 1 2057  
668 0 0 6 785 2056 0 0 0 2 4 this 3 2056  5 shift 1 1819  
669 0 0 6 786 2056 0 0 0 2 4 this 3 2056  5 shift 1 1819  
670 0 0 7 787 1956 0 0 0 0 
671 0 0 7 843 2059 1624 0 0 0 
672 0 0 7 843 2059 1624 0 0 1 6 param0 0 2060  
673 0 0 7 791 2017 1379 0 144 /**
 * Returns the ButtonHandle associated with the particular ASCII character, if
 * there is one, or ButtonHandle::none() if there is not.
 */ 1 16 ascii_equivalent 1 1866  
674 0 0 7 792 2017 1379 0 0 0 
675 0 0 7 793 2017 1379 0 0 0 
676 0 0 7 794 2017 1379 0 0 0 
677 0 0 7 795 2017 1379 0 0 0 
678 0 0 7 796 2017 1379 0 0 0 
679 0 0 7 797 2017 1379 0 0 0 
680 0 0 7 798 2017 1379 0 0 0 
681 0 0 7 799 2017 1379 0 0 0 
682 0 0 7 800 2017 1379 0 0 0 
683 0 0 7 801 2017 1379 0 0 0 
684 0 0 7 802 2017 1379 0 0 0 
685 0 0 7 803 2017 1379 0 0 0 
686 0 0 7 804 2017 1379 0 0 0 
687 0 0 7 805 2017 1379 0 0 0 
688 0 0 7 806 2017 1379 0 0 0 
689 0 0 7 807 2017 1379 0 0 0 
690 0 0 7 808 2017 1379 0 0 0 
691 0 0 7 809 2017 1379 0 59 // PC keyboards don't have these four buttons, but Macs do. 0 
692 0 0 7 810 2017 1379 0 0 0 
693 0 0 7 811 2017 1379 0 0 0 
694 0 0 7 812 2017 1379 0 0 0 
695 0 0 7 813 2017 1379 0 0 0 
696 0 0 7 814 2017 1379 0 0 0 
697 0 0 7 815 2017 1379 0 0 0 
698 0 0 7 816 2017 1379 0 0 0 
699 0 0 7 817 2017 1379 0 0 0 
700 0 0 7 818 2017 1379 0 0 0 
701 0 0 7 819 2017 1379 0 0 0 
702 0 0 7 820 2017 1379 0 0 0 
703 0 0 7 821 2017 1379 0 0 0 
704 0 0 7 822 2017 1379 0 27 // delete is a C++ keyword. 0 
705 0 0 7 823 2017 1379 0 27 // delete is a C++ keyword. 0 
706 0 0 7 824 2017 1379 0 0 0 
707 0 0 7 825 2017 1379 0 0 0 
708 0 0 7 826 2017 1379 0 0 0 
709 0 0 7 827 2017 1379 0 0 0 
710 0 0 7 828 2017 1379 0 0 0 
711 0 0 7 829 2017 1379 0 0 0 
712 0 0 7 830 2017 1379 0 0 0 
713 0 0 7 831 2017 1379 0 0 0 
714 0 0 7 832 2017 1379 0 0 0 
715 0 0 7 833 2017 1379 0 0 0 
716 0 0 7 834 2017 1379 0 0 0 
717 0 0 7 835 2017 1379 0 0 0 
718 0 0 7 836 2017 1379 0 0 0 
719 0 0 7 837 2017 1379 0 0 0 
720 0 0 7 838 2017 1379 0 0 0 
721 0 0 7 839 2017 1379 0 0 0 
722 0 0 7 840 2017 1379 0 0 0 
723 0 0 7 841 2017 1379 0 0 0 
724 0 0 7 842 2017 1379 0 0 0 
725 0 0 7 850 2062 1630 0 10 /**
 *
 */ 0 
726 0 0 7 850 2062 1630 0 10 /**
 *
 */ 1 4 copy 1 2063  
727 0 0 6 852 2062 0 0 0 2 4 this 3 2062  4 copy 1 2063  
728 0 0 6 853 1820 0 0 0 2 4 this 3 2063  5 other 1 2063  
729 0 0 6 854 1820 0 0 0 2 4 this 3 2063  5 other 1 2063  
730 0 0 6 855 1820 0 0 0 2 4 this 3 2063  5 other 1 2063  
731 0 0 7 856 2062 1630 0 0 2 4 this 3 2063  5 other 1 2063  
732 0 0 7 857 2062 1630 0 0 2 4 this 3 2063  5 other 1 2063  
733 0 0 6 858 2062 0 0 0 2 4 this 3 2062  5 other 1 2063  
734 0 0 6 859 2062 0 0 0 2 4 this 3 2062  5 other 1 2063  
735 0 0 4 860 1949 0 0 374 /**
 * Sets the list of buttons to watch to be the same as that of the other
 * ModifierButtons object.  This makes the lists pointer equivalent (until one
 * or the other is later modified).
 *
 * This will preserve the state of any button that was on the original list
 * and is also on the new lists.  Any other buttons will get reset to the
 * default state of "up".
 */ 2 4 this 3 2062  5 other 1 2063  
736 0 0 6 861 1820 0 0 232 /**
 * Returns true if the set of buttons indicated as down by this
 * ModifierButtons object is the same set of buttons indicated as down by the
 * other ModifierButtons object.  The buttons indicated as up are not
 * relevant.
 */ 2 4 this 3 2063  5 other 1 2063  
737 0 0 6 862 1820 0 0 248 /**
 * Adds the indicated button to the set of buttons that will be monitored for
 * upness and downness.  Returns true if the button was added, false if it was
 * already being monitored or if too many buttons are currently being
 * monitored.
 */ 2 4 this 3 2062  6 button 1 2017  
738 0 0 6 863 1820 0 0 109 /**
 * Returns true if the indicated button is in the set of buttons being
 * monitored, false otherwise.
 */ 2 4 this 3 2063  6 button 1 2017  
739 0 0 6 864 1820 0 0 313 /**
 * Removes the indicated button from the set of buttons being monitored.
 * Returns true if the button was removed, false if it was not being monitored
 * in the first place.
 *
 * Unlike the other methods, you cannot remove a button by removing its alias;
 * you have to remove exactly the button itself.
 */ 2 4 this 3 2062  6 button 1 2017  
740 0 0 6 865 1819 0 0 143 /**
 * Returns the number of buttons that the ModifierButtons object is monitoring
 * (e.g.  the number of buttons passed to add_button()).
 */ 1 4 this 3 2063  
741 0 0 7 866 2017 1379 0 185 /**
 * Returns the nth button that the ModifierButtons object is monitoring (the
 * nth button passed to add_button()).  This must be in the range 0 <= index <
 * get_num_buttons().
 */ 2 4 this 3 2063  5 index 1 1819  
742 0 0 6 869 1820 0 0 305 /**
 * Records that a particular button has been pressed.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2062  6 button 1 2017  
743 0 0 6 870 1820 0 0 306 /**
 * Records that a particular button has been released.  If the given button is
 * one of the buttons that is currently being monitored, this will update the
 * internal state appropriately; otherwise, it will do nothing.  Returns true
 * if the button is one that was monitored, or false otherwise.
 */ 2 4 this 3 2062  6 button 1 2017  
744 0 0 4 871 1949 0 0 66 /**
 * Marks all monitored buttons as being in the "up" state.
 */ 1 4 this 3 2062  
745 0 0 6 872 1820 0 0 157 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up or if it is not in the set of buttons being tracked.
 */ 2 4 this 3 2063  6 button 1 2017  
746 0 0 6 872 1820 0 0 105 /**
 * Returns true if the indicated button is known to be down, or false if it is
 * known to be up.
 */ 2 4 this 3 2063  5 index 1 1819  
747 0 0 6 873 1820 0 0 109 /**
 * Returns true if any of the tracked button are known to be down, or false if
 * all of them are up.
 */ 1 4 this 3 2063  
748 0 0 6 874 1945 0 0 150 /**
 * Returns a string which can be used to prefix any button name or event name
 * with the unique set of modifier buttons currently being held.
 */ 1 4 this 3 2063  
749 0 0 4 875 1949 0 0 69 /**
 * Writes a one-line summary of the buttons known to be down.
 */ 2 4 this 3 2063  3 out 1 1953  
750 0 0 4 876 1949 0 0 123 /**
 * Writes a multi-line summary including all of the buttons being monitored
 * and which ones are known to be down.
 */ 2 4 this 3 2063  3 out 1 1953  
751 0 0 7 889 2065 1666 0 0 0 
752 0 0 7 889 2065 1666 0 0 1 6 param0 0 2066  
753 0 0 7 878 2017 1379 0 166 /**
 * Returns the ButtonHandle associated with the particular numbered mouse
 * button (zero-based), if there is one, or ButtonHandle::none() if there is
 * not.
 */ 1 13 button_number 1 1819  
754 0 0 7 879 2017 1379 0 75 /**
 * Returns the ButtonHandle associated with the first mouse button.
 */ 0 
755 0 0 7 880 2017 1379 0 76 /**
 * Returns the ButtonHandle associated with the second mouse button.
 */ 0 
756 0 0 7 881 2017 1379 0 75 /**
 * Returns the ButtonHandle associated with the third mouse button.
 */ 0 
757 0 0 7 882 2017 1379 0 76 /**
 * Returns the ButtonHandle associated with the fourth mouse button.
 */ 0 
758 0 0 7 883 2017 1379 0 75 /**
 * Returns the ButtonHandle associated with the fifth mouse button.
 */ 0 
759 0 0 7 884 2017 1379 0 98 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * upwards.
 */ 0 
760 0 0 7 885 2017 1379 0 100 /**
 * Returns the ButtonHandle generated when the mouse wheel is rolled one notch
 * downwards.
 */ 0 
761 0 0 7 886 2017 1379 0 148 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the left.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
762 0 0 7 887 2017 1379 0 149 /**
 * Returns the ButtonHandle generated when the mouse is scrolled to the right.
 * Usually, you'll only find the horizontal scroll on laptops.
 */ 0 
763 0 0 6 888 1820 0 0 117 /**
 * Returns true if the indicated ButtonHandle is a mouse button, false if it
 * is some other kind of button.
 */ 1 6 button 1 2017  
764 0 0 7 892 2068 1673 0 10 /**
 *
 */ 0 
765 0 0 7 892 2068 1673 0 10 /**
 *
 */ 1 4 copy 1 2069  
766 0 0 6 893 2068 0 0 0 2 4 this 3 2068  4 copy 1 2069  
767 0 0 6 894 1818 0 0 10 /**
 *
 */ 1 4 this 3 2069  
768 0 0 6 895 1818 0 0 10 /**
 *
 */ 1 4 this 3 2069  
769 0 0 6 896 1820 0 0 10 /**
 *
 */ 1 4 this 3 2069  
770 0 0 4 897 1949 0 0 10 /**
 *
 */ 2 4 this 3 2069  3 out 1 1953  
771 0 0 6 903 1819 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 2071  
772 0 0 4 904 1949 0 0 349 /**
 * Explicitly increments the reference count.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 2071  
773 0 0 6 905 1820 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 2071  
774 0 0 6 906 1820 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 2071  
775 0 0 6 908 1819 0 0 293 /**
 * Returns the union of the values defined in the Referenced enum that
 * represents the various things that appear to be holding a pointer to this
 * object.
 *
 * If R_node is included, at least one node is holding a pointer; if R_cache
 * is included, at least one cache element is.
 */ 1 4 this 3 2071  
776 0 0 7 909 1956 0 0 0 0 
777 0 0 7 911 2073 1687 0 10 /**
 *
 */ 0 
778 0 0 7 911 2073 1687 0 10 /**
 *
 */ 1 4 from 1 2009  
779 0 0 7 911 2073 1687 0 10 /**
 *
 */ 1 4 copy 1 2012  
780 0 0 6 912 2073 0 0 10 /**
 *
 */ 2 4 this 3 2073  4 copy 1 2012  
781 0 0 7 913 2073 1687 0 72 /**
 * Returns a SparseArray with an infinite array of bits, all on.
 */ 0 
782 0 0 7 914 2073 1687 0 56 /**
 * Returns a SparseArray whose bits are all off.
 */ 0 
783 0 0 7 915 2073 1687 0 65 /**
 * Returns a SparseArray whose lower on_bits bits are on.
 */ 1 7 on_bits 1 1819  
784 0 0 7 916 2073 1687 0 64 /**
 * Returns a SparseArray with only the indicated bit on.
 */ 1 5 index 1 1819  
785 0 0 7 917 2073 1687 0 79 /**
 * Returns a SparseArray whose size bits, beginning at low_bit, are on.
 */ 2 7 low_bit 1 1819  4 size 1 1819  
786 0 0 6 919 1820 0 0 393 /**
 * Returns true if there is a maximum number of bits that may be stored in
 * this structure, false otherwise.  If this returns true, the number may be
 * queried in get_max_num_bits().
 *
 * This method always returns false.  The SparseArray has no maximum number of
 * bits.  This method is defined so generic programming algorithms can use
 * BitMask or SparseArray interchangeably.
 */ 0 
787 0 0 6 920 1819 0 0 428 /**
 * If get_max_num_bits() returned true, this method may be called to return
 * the maximum number of bits that may be stored in this structure.  It is an
 * error to call this if get_max_num_bits() return false.
 *
 * It is always an error to call this method.  The SparseArray has no maximum
 * number of bits.  This method is defined so generic programming algorithms
 * can use BitMask or SparseArray interchangeably.
 */ 0 
788 0 0 6 921 1819 0 0 300 /**
 * Returns the current number of possibly different bits in this array.  There
 * are actually an infinite number of bits, but every bit higher than this bit
 * will have the same value, either 0 or 1 (see get_highest_bits()).
 *
 * This number may grow and/or shrink automatically as needed.
 */ 1 4 this 3 2012  
789 0 0 6 922 1820 0 0 191 /**
 * Returns true if the nth bit is set, false if it is cleared.  It is valid
 * for n to increase beyond get_num_bits(), but the return value
 * get_num_bits() will always be the same.
 */ 2 4 this 3 2012  5 index 1 1819  
790 0 0 4 923 1949 0 0 97 /**
 * Sets the nth bit on.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2073  5 index 1 1819  
791 0 0 4 924 1949 0 0 98 /**
 * Sets the nth bit off.  If n >= get_num_bits(), this automatically extends
 * the array.
 */ 2 4 this 3 2073  5 index 1 1819  
792 0 0 4 925 1949 0 0 84 /**
 * Sets the nth bit either on or off, according to the indicated bool value.
 */ 3 4 this 3 2073  5 index 1 1819  5 value 1 1820  
793 0 0 6 926 1820 0 0 118 /**
 * Returns true if the infinite set of bits beyond get_num_bits() are all on,
 * or false of they are all off.
 */ 1 4 this 3 2012  
794 0 0 6 927 1820 0 0 71 /**
 * Returns true if the entire bitmask is zero, false otherwise.
 */ 1 4 this 3 2012  
795 0 0 6 928 1820 0 0 70 /**
 * Returns true if the entire bitmask is one, false otherwise.
 */ 1 4 this 3 2012  
796 0 0 6 929 1820 0 0 82 /**
 * Returns true if any bit in the indicated range is set, false otherwise.
 */ 3 4 this 3 2012  7 low_bit 1 1819  4 size 1 1819  
797 0 0 6 930 1820 0 0 84 /**
 * Returns true if all bits in the indicated range are set, false otherwise.
 */ 3 4 this 3 2012  7 low_bit 1 1819  4 size 1 1819  
798 0 0 4 931 1949 0 0 47 /**
 * Sets the indicated range of bits on.
 */ 3 4 this 3 2073  7 low_bit 1 1819  4 size 1 1819  
799 0 0 4 932 1949 0 0 48 /**
 * Sets the indicated range of bits off.
 */ 3 4 this 3 2073  7 low_bit 1 1819  4 size 1 1819  
800 0 0 4 933 1949 0 0 64 /**
 * Sets the indicated range of bits to either on or off.
 */ 4 4 this 3 2073  5 value 1 1820  7 low_bit 1 1819  4 size 1 1819  
801 0 0 6 934 1819 0 0 127 /**
 * Returns the number of bits that are set to 1 in the array.  Returns -1 if
 * there are an infinite number of 1 bits.
 */ 1 4 this 3 2012  
802 0 0 6 935 1819 0 0 127 /**
 * Returns the number of bits that are set to 0 in the array.  Returns -1 if
 * there are an infinite number of 0 bits.
 */ 1 4 this 3 2012  
803 0 0 6 936 1819 0 0 146 /**
 * Returns the index of the lowest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2012  
804 0 0 6 937 1819 0 0 146 /**
 * Returns the index of the lowest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there are an infinite number of 1 bits.
 */ 1 4 this 3 2012  
805 0 0 6 938 1819 0 0 143 /**
 * Returns the index of the highest 1 bit in the array.  Returns -1 if there
 * are no 1 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2012  
806 0 0 6 939 1819 0 0 143 /**
 * Returns the index of the highest 0 bit in the array.  Returns -1 if there
 * are no 0 bits or if there an infinite number of 1 bits.
 */ 1 4 this 3 2012  
807 0 0 6 940 1819 0 0 287 /**
 * Returns the index of the next bit in the array, above low_bit, whose value
 * is different that the value of low_bit.  Returns low_bit again if all bits
 * higher than low_bit have the same value.
 *
 * This can be used to quickly iterate through all of the bits in the array.
 */ 2 4 this 3 2012  7 low_bit 1 1819  
808 0 0 4 941 1949 0 0 93 /**
 * Inverts all the bits in the SparseArray.  This is equivalent to array =
 * ~array.
 */ 1 4 this 3 2073  
809 0 0 6 942 1820 0 0 181 /**
 * Returns true if this SparseArray has any "one" bits in common with the
 * other one, false otherwise.
 *
 * This is equivalent to (array & other) != 0, but may be faster.
 */ 2 4 this 3 2012  5 other 1 2012  
810 0 0 4 943 1949 0 0 52 /**
 * Sets all the bits in the SparseArray off.
 */ 1 4 this 3 2073  
811 0 0 4 944 1949 0 0 10 /**
 *
 */ 2 4 this 3 2012  3 out 1 1953  
812 0 0 6 945 1820 0 0 0 2 4 this 3 2012  5 other 1 2012  
813 0 0 6 946 1820 0 0 0 2 4 this 3 2012  5 other 1 2012  
814 0 0 6 947 1820 0 0 0 2 4 this 3 2012  5 other 1 2012  
815 0 0 6 948 1819 0 0 242 /**
 * Returns a number less than zero if this SparseArray sorts before the
 * indicated other SparseArray, greater than zero if it sorts after, or 0 if
 * they are equivalent.  This is based on the same ordering defined by
 * operator <.
 */ 2 4 this 3 2012  5 other 1 2012  
816 0 0 7 949 2073 1687 0 0 2 4 this 3 2012  5 other 1 2012  
817 0 0 7 950 2073 1687 0 0 2 4 this 3 2012  5 other 1 2012  
818 0 0 7 951 2073 1687 0 0 2 4 this 3 2012  5 other 1 2012  
819 0 0 7 952 2073 1687 0 0 1 4 this 3 2012  
820 0 0 7 953 2073 1687 0 0 2 4 this 3 2012  5 shift 1 1819  
821 0 0 7 954 2073 1687 0 0 2 4 this 3 2012  5 shift 1 1819  
822 0 0 6 955 2073 0 0 0 2 4 this 3 2073  5 other 1 2012  
823 0 0 6 956 2073 0 0 0 2 4 this 3 2073  5 other 1 2012  
824 0 0 6 957 2073 0 0 0 2 4 this 3 2073  5 other 1 2012  
825 0 0 6 958 2073 0 0 0 2 4 this 3 2073  5 shift 1 1819  
826 0 0 6 959 2073 0 0 0 2 4 this 3 2073  5 shift 1 1819  
827 0 0 6 960 1820 0 0 330 /**
 * If this is true, the SparseArray is actually defined as a list of subranges
 * of integers that are *not* in the set.  If this is false (the default),
 * then the subranges define the integers that *are* in the set.  This affects
 * the interpretation of the values returned by iterating through
 * get_num_subranges().
 */ 1 4 this 3 2012  
828 0 0 6 961 2014 0 0 237 /**
 * Returns the number of separate subranges stored in the SparseArray.  You
 * can use this limit to iterate through the subranges, calling
 * get_subrange_begin() and get_subrange_end() for each one.
 *
 * Also see is_inverse().
 */ 1 4 this 3 2012  
829 0 0 6 962 1819 0 0 94 /**
 * Returns the first numeric element in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2012  1 n 1 2014  
830 0 0 6 963 1819 0 0 104 /**
 * Returns the last numeric element, plus one, in the nth subrange.
 *
 * Also see is_inverse().
 */ 2 4 this 3 2012  1 n 1 2014  
831 0 0 7 964 1956 0 0 0 0 
832 0 0 7 966 1956 0 0 52 /**
 * Returns the type of the underlying value.
 */ 1 4 this 3 2074  
833 0 0 4 967 1949 0 0 0 2 4 this 3 2074  3 out 1 1953  
834 0 0 7 968 1956 0 0 0 0 
835 0 0 7 970 2078 1002 0 10 /**
 *
 */ 1 5 value 1 2076  
836 0 0 7 971 1898 0 0 55 /**
 * Retrieves the value stored in the parameter.
 */ 1 4 this 3 2079  
837 0 0 7 974 1956 0 0 0 0 
838 0 0 7 976 2081 1002 0 0 1 5 value 1 1945  
839 0 0 4 977 1949 0 0 0 2 4 this 3 2081  5 value 1 1945  
840 0 0 6 978 1945 0 0 0 1 4 this 3 2082  
841 0 0 7 982 1956 0 0 0 0 
842 0 0 7 985 2084 1002 0 0 1 5 value 1 1945  
843 0 0 4 986 1949 0 0 0 2 4 this 3 2084  5 value 1 1945  
844 0 0 6 987 1945 0 0 0 1 4 this 3 2085  
845 0 0 7 989 1956 0 0 0 0 
846 0 0 7 992 2090 1002 0 0 1 5 value 1 2087  
847 0 0 4 993 1949 0 0 0 2 4 this 3 2090  5 value 1 2087  
848 0 0 6 994 2087 0 0 0 1 4 this 3 2091  
849 0 0 7 996 1956 0 0 0 0 
850 0 0 7 999 2096 1002 0 0 1 5 value 1 2093  
851 0 0 4 1000 1949 0 0 0 2 4 this 3 2096  5 value 1 2093  
852 0 0 6 1001 2093 0 0 0 1 4 this 3 2097  
853 0 0 7 1003 1956 0 0 0 0 
854 0 0 7 1006 2102 1002 0 0 1 5 value 1 2099  
855 0 0 4 1007 1949 0 0 0 2 4 this 3 2102  5 value 1 2099  
856 0 0 6 1008 2099 0 0 0 1 4 this 3 2103  
857 0 0 7 1010 1956 0 0 0 0 
858 0 0 7 1013 2108 1002 0 0 1 5 value 1 2105  
859 0 0 4 1014 1949 0 0 0 2 4 this 3 2108  5 value 1 2105  
860 0 0 6 1015 2105 0 0 0 1 4 this 3 2109  
861 0 0 7 1017 1956 0 0 0 0 
862 0 0 7 1020 2114 1002 0 0 1 5 value 1 2111  
863 0 0 4 1021 1949 0 0 0 2 4 this 3 2114  5 value 1 2111  
864 0 0 6 1022 2111 0 0 0 1 4 this 3 2115  
865 0 0 7 1024 1956 0 0 0 0 
866 0 0 7 1027 2120 1002 0 0 1 5 value 1 2117  
867 0 0 4 1028 1949 0 0 0 2 4 this 3 2120  5 value 1 2117  
868 0 0 6 1029 2117 0 0 0 1 4 this 3 2121  
869 0 0 7 1031 1956 0 0 0 0 
870 0 0 7 1034 2126 1002 0 0 1 5 value 1 2123  
871 0 0 4 1035 1949 0 0 0 2 4 this 3 2126  5 value 1 2123  
872 0 0 6 1036 2123 0 0 0 1 4 this 3 2127  
873 0 0 7 1038 1956 0 0 0 0 
874 0 0 7 1041 2132 1002 0 0 1 5 value 1 2129  
875 0 0 4 1042 1949 0 0 0 2 4 this 3 2132  5 value 1 2129  
876 0 0 6 1043 2129 0 0 0 1 4 this 3 2133  
877 0 0 7 1045 1956 0 0 0 0 
878 0 0 7 1048 2138 1002 0 0 1 5 value 1 2135  
879 0 0 4 1049 1949 0 0 0 2 4 this 3 2138  5 value 1 2135  
880 0 0 6 1050 2135 0 0 0 1 4 this 3 2139  
881 0 0 7 1052 1956 0 0 0 0 
882 0 0 7 1055 2144 1002 0 0 1 5 value 1 2141  
883 0 0 4 1056 1949 0 0 0 2 4 this 3 2144  5 value 1 2141  
884 0 0 6 1057 2141 0 0 0 1 4 this 3 2145  
885 0 0 7 1059 1956 0 0 0 0 
886 0 0 7 1062 2150 1002 0 0 1 5 value 1 2147  
887 0 0 4 1063 1949 0 0 0 2 4 this 3 2150  5 value 1 2147  
888 0 0 6 1064 2147 0 0 0 1 4 this 3 2151  
889 0 0 7 1066 1956 0 0 0 0 
890 0 0 7 1069 2156 1002 0 0 1 5 value 1 2153  
891 0 0 4 1070 1949 0 0 0 2 4 this 3 2156  5 value 1 2153  
892 0 0 6 1071 2153 0 0 0 1 4 this 3 2157  
893 0 0 7 1073 1956 0 0 0 0 
894 0 0 7 1076 2162 1002 0 0 1 5 value 1 2159  
895 0 0 4 1077 1949 0 0 0 2 4 this 3 2162  5 value 1 2159  
896 0 0 6 1078 2159 0 0 0 1 4 this 3 2163  
897 0 0 7 1080 1956 0 0 0 0 
898 0 0 7 1088 1956 0 0 0 0 
899 0 0 7 1091 2167 1803 0 0 1 6 param0 0 2165  
900 0 0 7 1091 2167 1803 0 56 /**
 * Create a free id pool in the range [min:max].
 */ 2 3 min 1 2001  3 max 1 2001  
901 0 0 6 1093 2001 0 0 134 /**
 * Returns an id between _min and _max (that were passed to the constructor).
 * IndexEnd is returned if no ids are available.
 */ 1 4 this 3 2167  
902 0 0 4 1094 1949 0 0 518 /**
 * This may be called to mark a particular id as having already been allocated
 * (for instance, by a prior pass).  The specified id is removed from the
 * available pool.
 *
 * Because of the limitations of this algorithm, this is most efficient when
 * it is called before the first call to allocate(), and when all the calls to
 * initial_reserve_id() are made in descending order by id.  However, this is
 * a performance warning only; if performance is not an issue, any id may be
 * reserved at any time.
 */ 2 4 this 3 2167  2 id 1 2001  
903 0 0 4 1095 1949 0 0 112 /**
 * Free an allocated index (index must be between _min and _max that were
 * passed to the constructor).
 */ 2 4 this 3 2167  5 index 1 2001  
904 0 0 6 1096 2168 0 0 117 /**
 * return the decimal fraction of the pool that is used.  The range is 0 to
 * 1.0 (e.g.  75% would be 0.75).
 */ 1 4 this 3 2165  
905 0 0 4 1097 1949 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2165  3 out 1 1953  
906 0 0 4 1098 1949 0 0 42 /**
 * ...intended for debugging only.
 */ 2 4 this 3 2165  3 out 1 1953  
907 0 0 6 662 1881 0 0 0 1 3 str 1 1945  
908 0 0 6 663 1945 0 0 0 1 2 cs 1 1881  
909 0 0 6 664 2170 0 0 0 0 
910 0 0 6 665 2170 0 0 0 0 
911 0 0 6 845 2172 0 0 602 /**
 * A convenience function for loading explicit prc files from a disk file or
 * from within a multifile (via the virtual file system).  Save the return
 * value and pass it to unload_prc_file() if you ever want to unload this file
 * later.
 *
 * The filename is first searched along the default prc search path, and then
 * also along the model path, for convenience.
 *
 * This function is defined in putil instead of in dtool with the read of the
 * prc stuff, so that it can take advantage of the virtual file system (which
 * is defined in express), and the model path (which is in putil).
 */ 1 8 filename 1 1974  
912 0 0 6 846 2172 0 0 396 /**
 * Another convenience function to load a prc file from an explicit string,
 * which represents the contents of the prc file.
 *
 * The first parameter is an arbitrary name to assign to this in-memory prc
 * file.  Supply a filename if the data was read from a file, or use any other
 * name that is meaningful to you.  The name is only used when the set of
 * loaded prc files is listed.
 */ 2 4 name 1 1945  4 data 1 1945  
913 0 0 6 847 1820 0 0 0 1 4 page 1 2172  
914 0 0 4 848 1949 0 0 0 1 4 hash 1 2174  
915 0 0 6 1099 1848 0 0 203 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This hooks into the native pickle and cPickle modules, but it cannot
 * properly handle self-referential BAM objects.
 */ 2 10 this_class 1 1848  4 data 1 1945  
916 0 0 6 1100 1848 0 0 398 /**
 * This wrapper is defined as a global function to suit pickle's needs.
 *
 * This is similar to py_decode_TypedWritable_from_bam_stream, but it provides
 * additional support for the missing persistent-state object needed to
 * properly support self-referential BAM objects written to the pickle stream.
 * This hooks into the pickle and cPickle modules implemented in
 * direct/src/stdpy.
 */ 3 9 unpickler 1 1848  10 this_class 1 1848  4 data 1 1945  
364
1812 29 ConstPointerToArray< ushort > 0 141313 29 ConstPointerToArray< ushort > 29 ConstPointerToArray< ushort > 0 0 0 1 920 930 0 9 921 922 923 924 925 926 927 928 929 0 0 1 0 1813 0 0 0 0 0

1813 28 PointerToArrayBase< ushort > 0 26625 28 PointerToArrayBase< ushort > 28 PointerToArrayBase< ushort > 0 0 0 0 919 0 0 0 0 1 0 1814 0 0 0 0 0

1814 49 PointerToBase< ReferenceCountedVector< ushort > > 0 43009 49 PointerToBase< ReferenceCountedVector< ushort > > 49 PointerToBase< ReferenceCountedVector< ushort > > 0 0 0 0 0 0 2 917 918 0 0 1 0 1815 0 0 0 0 0

1815 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1816 24 PointerToArray< ushort > 0 141313 24 PointerToArray< ushort > 24 PointerToArray< ushort > 0 0 0 1 931 948 0 16 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 0 0 1 0 1813 0 0 0 0 0

1817 13 AnimInterface 0 26625 13 AnimInterface 13 AnimInterface 0 0 0 0 949 9 2176 2177 2178 2179 2180 2181 2182 2183 2184 17 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 0 0 0 0 0 226
/**
 * This is the fundamental interface for things that have a play/loop/stop
 * type interface for frame-based animation, such as animated characters.
 * This is the base class for AnimControl and other, similar classes.
 */

1818 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1819 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1820 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1821 16 AutoTextureScale 0 532481 16 AutoTextureScale 16 AutoTextureScale 0 0 0 0 0 0 0 0 0 0 5 8 ATS_none 8 ATS_none 0
0 8 ATS_down 8 ATS_down 0
1 6 ATS_up 6 ATS_up 0
2 7 ATS_pad 7 ATS_pad 0
3 15 ATS_unspecified 15 ATS_unspecified 0
4 0 0

1822 9 UpdateSeq 0 141313 9 UpdateSeq 9 UpdateSeq 0 0 0 1 967 987 1 2185 19 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 0 0 0 0 0 761
/**
 * This is a sequence number that increments monotonically.  It can be used to
 * track cache updates, or serve as a kind of timestamp for any changing
 * properties.
 *
 * A special class is used instead of simply an int, so we can elegantly
 * handle such things as wraparound and special cases.  There are two special
 * cases.  Firstly, a sequence number is 'initial' when it is first created.
 * This sequence is older than any other sequence number.  Secondly, a
 * sequence number may be explicitly set to 'old'.  This is older than any
 * other sequence number except 'initial'.  Finally, we have the explicit
 * number 'fresh', which is newer than any other sequence number.  All other
 * sequences are numeric and are monotonically increasing.
 */

1823 7 Integer 0 2367488 21 AtomicAdjust::Integer 21 AtomicAdjust::Integer 1824 0 1825 0 0 0 0 0 0 0 0 0 0

1824 12 AtomicAdjust 0 1024 12 AtomicAdjust 12 AtomicAdjust 0 0 0 0 0 0 0 0 0 0 0 0 0

1825 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1826 13 TypedWritable 0 75777 13 TypedWritable 13 TypedWritable 0 0 0 0 0 0 8 988 989 990 991 992 993 994 995 0 0 1 0 1827 0 0 0 0 135
/**
 * Base class for objects that can be written to and read from Bam files.
 *
 * See also TypedObject for detailed instructions.
 */

1827 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

1828 27 TypedWritableReferenceCount 0 141313 27 TypedWritableReferenceCount 27 TypedWritableReferenceCount 0 0 0 0 1002 0 2 1000 1001 0 0 2 3 1826 996 997 3 1829 998 999 0 0 414
/**
 * A base class for things which need to inherit from both TypedWritable and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedWritables and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1829 14 ReferenceCount 0 2049 14 ReferenceCount 14 ReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1830 14 BamCacheRecord 0 26625 14 BamCacheRecord 14 BamCacheRecord 0 0 0 0 1007 5 2186 2187 2188 2189 2190 19 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 0 0 2 3 1828 1003 1004 3 1831 1005 1006 0 0 231
/**
 * An instance of this class is written to the front of a Bam or Txo file to
 * make the file a cached instance of some other loadable resource.  This
 * record contains information needed to test the validity of the cache.
 */

1831 14 LinkedListNode 0 1050625 14 LinkedListNode 14 LinkedListNode 0 0 0 0 0 0 0 0 0 0 0 0 468
/**
 * This just stores the pointers to implement a doubly-linked list of some
 * kind of object.  There are occasions when a hand-rolled linked list is more
 * appropriate than an STL container.
 *
 * Typically, each node of the linked list, as well as the root of the list,
 * will inherit from this class.
 *
 * Note that this class is not inherently thread-safe; derived classes are
 * responsible for protecting any calls into it within mutexes, if necessary.
 */

1832 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1833 0 0 0 0 0 0 0 0 0 0

1833 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1834 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1825 0 0 0 0 0 0 0 0 0 0

1835 15 TypedWritable * 0 8576 15 TypedWritable * 15 TypedWritable * 0 0 1826 0 0 0 0 0 0 0 0 0 0

1836 8 BamCache 0 26625 8 BamCache 8 BamCache 0 0 0 1 1027 1028 9 2191 2192 2193 2194 2195 2196 2197 2198 2199 26 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 0 0 0 0 0 615
/**
 * This class maintains a cache of Bam and/or Txo objects generated from model
 * files and texture images (as well as possibly other kinds of loadable
 * objects that can be stored in bam file format).
 *
 * This class also maintains a persistent index that lists all of the cached
 * objects (see BamCacheIndex). We go through some considerable effort to make
 * sure this index gets saved correctly to disk, even in the presence of
 * multiple different processes writing to the same index, and without relying
 * too heavily on low-level os-provided file locks (which work poorly with C++
 * iostreams).
 */

1837 8 BamEnums 0 141313 8 BamEnums 8 BamEnums 0 0 0 1 1055 1056 0 0 0 0 0 0 3 1838 1839 1840 104
/**
 * This class exists just to provide scoping for the enums shared by BamReader
 * and BamWriter.
 */

1838 9 BamEndian 0 794624 19 BamEnums::BamEndian 19 BamEnums::BamEndian 1837 0 0 0 0 0 0 0 0 0 3 12 BE_bigendian 22 BamEnums::BE_bigendian 0
0 15 BE_littleendian 25 BamEnums::BE_littleendian 0
1 9 BE_native 19 BamEnums::BE_native 0
1 0 345
// This defines an enumerated type used to represent the endianness of
// certain numeric values stored in a Bam file.  It really has only two
// possible values, either BE_bigendian or BE_littleendian; but through a
// preprocessor trick we also add BE_native, which is the same numerically
// as whichever value the hardware supports natively.

1839 13 BamObjectCode 0 794624 23 BamEnums::BamObjectCode 23 BamEnums::BamObjectCode 1837 0 0 0 0 0 0 0 0 0 5 8 BOC_push 18 BamEnums::BOC_push 0
0 7 BOC_pop 17 BamEnums::BOC_pop 0
1 11 BOC_adjunct 21 BamEnums::BOC_adjunct 0
2 10 BOC_remove 20 BamEnums::BOC_remove 0
3 13 BOC_file_data 23 BamEnums::BOC_file_data 0
4 0 569
/*
 * This is the code written along with each object.  It is used to control
 * object scoping.  A BOC_push includes an object definition, and will always
 * be eventually paired with a BOC_pop (which does not).  A BOC_adjunct
 * includes an object definition but does not push the level; it is associated
 * with the current level.  BOC_remove lists object ID's that have been
 * deallocated on the sender end.  BOC_file_data may appear at any level and
 * indicates the following datagram contains auxiliary file data that may be
 * referenced by a later object.
 */

1840 14 BamTextureMode 0 794624 24 BamEnums::BamTextureMode 24 BamEnums::BamTextureMode 1837 0 0 0 0 0 0 0 0 0 5 13 BTM_unchanged 23 BamEnums::BTM_unchanged 0
0 12 BTM_fullpath 22 BamEnums::BTM_fullpath 0
1 12 BTM_relative 22 BamEnums::BTM_relative 0
2 12 BTM_basename 22 BamEnums::BTM_basename 0
3 11 BTM_rawdata 21 BamEnums::BTM_rawdata 0
4 0 73
// This enum is used to control how textures are written to a bam stream.

1841 13 LoaderOptions 0 141313 13 LoaderOptions 13 LoaderOptions 0 0 0 1 1057 1068 4 2200 2201 2202 2203 10 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 0 0 0 0 2 1842 1843 65
/**
 * Specifies parameters that may be passed to the loader.
 */

1842 11 LoaderFlags 0 794624 26 LoaderOptions::LoaderFlags 26 LoaderOptions::LoaderFlags 1841 0 0 0 0 0 0 0 0 0 10 9 LF_search 24 LoaderOptions::LF_search 0
1 16 LF_report_errors 31 LoaderOptions::LF_report_errors 0
2 19 LF_convert_skeleton 34 LoaderOptions::LF_convert_skeleton 0
4 19 LF_convert_channels 34 LoaderOptions::LF_convert_channels 0
8 15 LF_convert_anim 30 LoaderOptions::LF_convert_anim 22
// skeleton + channels
12 16 LF_no_disk_cache 31 LoaderOptions::LF_no_disk_cache 20
// disallow BamCache
16 15 LF_no_ram_cache 30 LoaderOptions::LF_no_ram_cache 21
// disallow ModelPool
32 11 LF_no_cache 26 LoaderOptions::LF_no_cache 19
// no_disk + no_ram
48 13 LF_cache_only 28 LoaderOptions::LF_cache_only 23
// fail if not in cache
64 17 LF_allow_instance 32 LoaderOptions::LF_allow_instance 35
// returned pointer might be shared
128 0 33
// Flags for loading model files.

1843 12 TextureFlags 0 794624 27 LoaderOptions::TextureFlags 27 LoaderOptions::TextureFlags 1841 0 0 0 0 0 0 0 0 0 8 10 TF_preload 25 LoaderOptions::TF_preload 30
// Texture will have RAM image
4 17 TF_preload_simple 32 LoaderOptions::TF_preload_simple 37
// Texture will have simple RAM image
8 11 TF_allow_1d 26 LoaderOptions::TF_allow_1d 40
// If texture is Nx1, make a 1-d texture
16 19 TF_generate_mipmaps 34 LoaderOptions::TF_generate_mipmaps 30
// Consider generating mipmaps
32 12 TF_multiview 27 LoaderOptions::TF_multiview 36
// Load a multiview texture in pages
64 10 TF_integer 25 LoaderOptions::TF_integer 35
// Load as an integer (RGB) texture
128 8 TF_float 23 LoaderOptions::TF_float 43
// Load as a floating-point (depth) texture
256 20 TF_allow_compression 35 LoaderOptions::TF_allow_compression 33
// Consider compressing RAM image
512 0 35
// Flags for loading texture files.

1844 9 BamReader 0 26625 9 BamReader 9 BamReader 0 0 0 1 1069 1070 6 2204 2205 2206 2207 2208 2209 20 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 0 0 1 0 1837 0 0 0 0 1311
/**
 * This is the fundamental interface for extracting binary objects from a Bam
 * file, as generated by a BamWriter.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects
 * within the Bam file; the BamReader automatically manages these (with help
 * from code within each class) and restores the pointers correctly.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramGenerator of some kind, which is simply a
 * linear source of Datagrams.  It is probably from a disk file, but it might
 * conceivably be streamed directly from a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1845 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1846 0 0 0 0 0 0 0 0 0 0

1846 17 DatagramGenerator 0 2049 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1847 19 LoaderOptions const 0 8832 19 LoaderOptions const 19 LoaderOptions const 0 0 1841 0 0 0 0 0 0 0 0 0 0

1848 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1849 0 0 0 0 0 0 0 0 0 0

1849 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1850 0 0 0 0 0 0 0 0 0 0

1850 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1851 9 BamWriter 0 26625 9 BamWriter 9 BamWriter 0 0 0 1 1091 1092 6 2210 2211 2212 2213 2214 2215 16 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 0 0 1 0 1837 0 0 0 0 1376
/**
 * This is the fundamental interface for writing binary objects to a Bam file,
 * to be extracted later by a BamReader.
 *
 * A Bam file can be thought of as a linear collection of objects.  Each
 * object is an instance of a class that inherits, directly or indirectly,
 * from TypedWritable.  The objects may include pointers to other objects; the
 * BamWriter automatically manages these (with help from code within each
 * class) and writes all referenced objects to the file in such a way that the
 * pointers may be correctly restored later.
 *
 * This is the abstract interface and does not specifically deal with disk
 * files, but rather with a DatagramSink of some kind, which simply accepts a
 * linear stream of Datagrams.  It is probably written to a disk file, but it
 * might conceivably be streamed directly to a network or some such nonsense.
 *
 * Bam files are most often used to store scene graphs or subgraphs, and by
 * convention they are given filenames ending in the extension ".bam" when
 * they are used for this purpose.  However, a Bam file may store any
 * arbitrary list of TypedWritable objects; in this more general usage, they
 * are given filenames ending in ".boo" to differentiate them from the more
 * common scene graph files.
 *
 * See also BamFile, which defines a higher-level interface to read and write
 * Bam files on disk.
 */

1852 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1853 0 0 0 0 0 0 0 0 0 0

1853 12 DatagramSink 0 2048 12 DatagramSink 12 DatagramSink 0 0 0 0 0 0 0 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1854 23 BitMask< uint16_t, 16 > 0 26625 23 BitMask< uint16_t, 16 > 23 BitMask< uint16_t, 16 > 0 0 0 1 1109 1116 0 62 1110 1111 1112 1113 1114 1115 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 0 0 0 0 0 0

1855 9 BitMask16 0 2105345 9 BitMask16 9 BitMask16 0 0 1854 0 0 0 0 0 0 0 0 0 0

1856 23 BitMask< uint32_t, 32 > 0 26625 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 1 1173 1180 0 62 1174 1175 1176 1177 1178 1179 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 0 0 0 0 0 0

1857 9 BitMask32 0 2105345 9 BitMask32 9 BitMask32 0 0 1856 0 0 0 0 0 0 0 0 0 0

1858 23 BitMask< uint64_t, 64 > 0 26625 23 BitMask< uint64_t, 64 > 23 BitMask< uint64_t, 64 > 0 0 0 1 1237 1244 0 62 1238 1239 1240 1241 1242 1243 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 0 0 0 0 0 0

1859 9 BitMask64 0 2105345 9 BitMask64 9 BitMask64 0 0 1858 0 0 0 0 0 0 0 0 0 0

1860 13 BitMaskNative 0 1 13 BitMaskNative 13 BitMaskNative 0 0 0 0 0 0 0 0 0 0 0 0 0

1861 8 BitArray 0 26625 8 BitArray 8 BitArray 0 0 0 1 1301 1308 0 57 1302 1303 1304 1305 1306 1307 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 0 0 0 0 1 1862 210
/**
 * A dynamic array with an unlimited number of bits.
 *
 * This is similar to a BitMask, except it appears to contain an infinite
 * number of bits.  You can use it very much as you would use a BitMask.
 */

1862 0 0 794624 10 BitArray:: 0 1861 0 0 0 0 0 0 0 0 0 1 17 num_bits_per_word 27 BitArray::num_bits_per_word 0
32 0 0

1863 12 ButtonHandle 0 141313 12 ButtonHandle 12 ButtonHandle 0 0 0 1 1360 1379 4 2216 2217 2218 2219 17 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1378 0 1 1377 0 0 0 162
/**
 * A ButtonHandle represents a single button from any device, including
 * keyboard buttons and mouse buttons (but see KeyboardButton and
 * MouseButton).
 */

1864 6 string 0 2105344 11 std::string 11 std::string 0 0 1865 0 0 0 0 0 0 0 0 0 0

1865 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1866 4 char 0 8194 4 char 4 char 0 5 0 0 0 0 0 0 0 0 0 0 0

1867 14 ButtonRegistry 0 141313 14 ButtonRegistry 14 ButtonRegistry 0 0 0 1 1385 1386 0 5 1380 1381 1382 1383 1384 0 0 0 0 0 188
/**
 * The ButtonRegistry class maintains all the assigned ButtonHandles in a
 * given system.  There should be only one ButtonRegistry class during the
 * lifetime of the application.
 */

1868 9 ButtonMap 0 141313 9 ButtonMap 9 ButtonMap 0 0 0 1 1394 1395 0 7 1387 1388 1389 1390 1391 1392 1393 0 0 1 0 1869 0 0 0 0 328
/**
 * This class represents a map containing all of the buttons of a (keyboard)
 * device, though it can also be used as a generic mapping between
 * ButtonHandles.  It maps an underlying 'raw' button to a 'virtual' button,
 * which may optionally be associated with an appropriate platform-specific
 * name for the button.
 */

1869 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1870 14 CallbackObject 0 141313 14 CallbackObject 14 CallbackObject 0 0 0 1 1399 1400 0 3 1396 1397 1398 0 0 1 0 1869 0 0 0 0 276
/**
 * This is a generic object that can be assigned to a callback at various
 * points in the rendering process.  This is actually a base class for a
 * handful of specialized callback object types.  You can also subclass it
 * yourself to make your own callback handler.
 */

1871 33 CachedTypedWritableReferenceCount 0 43009 33 CachedTypedWritableReferenceCount 33 CachedTypedWritableReferenceCount 0 0 0 0 0 1 2220 5 1401 1402 1403 1404 1405 0 0 1 0 1828 0 0 0 0 722
/**
 * This is a special extension to ReferenceCount that includes dual reference
 * counts: the standard reference count number, which includes all references
 * to the object, and a separate number (the cache reference count) that
 * counts the number of references to the object just within its cache alone.
 * When get_ref_count() == get_cache_ref_count(), the object is not referenced
 * outside the cache.
 *
 * The cache refs must be explicitly maintained; there is no PointerTo<> class
 * to maintain the cache reference counts automatically.  The cache reference
 * count is automatically included in the overall reference count: calling
 * cache_ref() and cache_unref() automatically calls ref() and unref().
 */

1872 12 CallbackData 0 141313 12 CallbackData 12 CallbackData 0 0 0 0 1409 0 3 1406 1407 1408 0 0 1 0 1827 0 0 0 0 348
/**
 * This is a generic data block that is passed along to a CallbackObject when
 * a callback is made.  It contains data specific to the particular callback
 * type in question.
 *
 * This is actually an abstract base class and contains no data.
 * Specializations of this class will contain the actual data relevant to each
 * callback type.
 */

1873 20 PythonCallbackObject 0 75777 20 PythonCallbackObject 20 PythonCallbackObject 0 0 0 1 1410 1400 1 2221 4 1411 1412 1413 1414 0 0 1 0 1870 0 0 0 0 158
/**
 * This is a specialization on CallbackObject to allow a callback to directly
 * call an arbitarary Python function.  Powerful!  But use with caution.
 */

1874 7 TimeVal 0 141313 7 TimeVal 7 TimeVal 0 0 0 1 1415 1420 1 2222 2 1416 1417 0 0 0 0 0 0

1875 9 ulong [2] 0 4202496 9 ulong [2] 9 ulong [2] 0 0 1876 2 0 0 0 0 0 0 0 0 0 0

1876 5 ulong 0 2105344 5 ulong 5 ulong 0 0 1877 0 0 0 0 0 0 0 0 0 0

1877 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1878 11 ClockObject 0 75777 11 ClockObject 11 ClockObject 0 0 0 1 1421 0 11 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 28 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 0 0 1 0 1829 0 0 0 1 1879 1000
/**
 * A ClockObject keeps track of elapsed real time and discrete time.  In
 * normal mode, get_frame_time() returns the time as of the last time tick()
 * was called.  This is the "discrete" time, and is usually used to get the
 * time as of, for instance, the beginning of the current frame.
 *
 * In other modes, as set by set_mode() or the clock-mode config variable,
 * get_frame_time() may return other values to simulate different timing
 * effects, for instance to perform non-real-time animation.  See set_mode().
 *
 * In all modes, get_real_time() always returns the elapsed real time in
 * seconds since the ClockObject was constructed, or since it was last reset.
 *
 * You can create your own ClockObject whenever you want to have your own
 * local timer.  There is also a default, global ClockObject intended to
 * represent global time for the application; this is normally set up to tick
 * every frame so that its get_frame_time() will return the time for the
 * current frame.
 */

1879 4 Mode 0 794624 17 ClockObject::Mode 17 ClockObject::Mode 1878 0 0 0 0 0 0 0 0 0 8 8 M_normal 21 ClockObject::M_normal 0
0 15 M_non_real_time 28 ClockObject::M_non_real_time 0
1 8 M_forced 21 ClockObject::M_forced 0
2 9 M_degrade 22 ClockObject::M_degrade 0
3 7 M_slave 20 ClockObject::M_slave 0
4 9 M_limited 22 ClockObject::M_limited 0
5 9 M_integer 22 ClockObject::M_integer 0
6 17 M_integer_limited 30 ClockObject::M_integer_limited 0
7 0 0

1880 11 CollideMask 0 2105345 11 CollideMask 11 CollideMask 0 0 1857 0 0 0 0 0 0 0 0 0 0

1881 10 ColorSpace 0 532481 10 ColorSpace 10 ColorSpace 0 0 0 0 0 0 0 0 0 0 4 14 CS_unspecified 14 CS_unspecified 105
// This value is not a color space, but is used to indicate that a color
// space has not been specified.
0 9 CS_linear 9 CS_linear 389
// CS_linear is not a color space per se, but represents the working color
// space of graphics APIs, which is linearized.  Since the conversion from
// sRGB to linear is defined, one could posit that it has the ITU-R BT.709
// primaries, but this isn't meaningful as modern graphics APIs do not
// perform color management.  All colors in Panda3D are linear unless
// otherwise specified.
1 7 CS_sRGB 7 CS_sRGB 107
// This is the standard, gamma-2.2-corrected sRGB color space, as used by
// the majority of image formats.
2 8 CS_scRGB 8 CS_scRGB 110
// This is a 16-bit encoded linear color space capable of encoding color
// values in the -0.5...7.4999 range.
3 0 0

1882 17 CopyOnWriteObject 0 141313 17 CopyOnWriteObject 17 CopyOnWriteObject 0 0 0 0 1457 0 3 1454 1455 1456 0 0 1 0 1871 0 0 0 0 169
/**
 * This base class provides basic reference counting, but also can be used
 * with a CopyOnWritePointer to provide get_read_pointer() and
 * get_write_pointer().
 */

1883 17 DatagramInputFile 0 75777 17 DatagramInputFile 17 DatagramInputFile 0 0 0 1 1458 0 0 4 1459 1460 1461 1462 0 0 1 0 1846 0 0 0 0 130
/**
 * This class can be used to read a binary file that consists of an arbitrary
 * header followed by a number of datagrams.
 */

1884 30 DoubleBitMask< BitMaskNative > 0 26625 30 DoubleBitMask< BitMaskNative > 30 DoubleBitMask< BitMaskNative > 0 0 0 1 1463 1470 0 52 1464 1465 1466 1467 1468 1469 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 0 0 0 0 0 0

1885 19 DoubleBitMaskNative 0 2105345 19 DoubleBitMaskNative 19 DoubleBitMaskNative 0 0 1884 0 0 0 0 0 0 0 0 0 0

1886 36 DoubleBitMask< DoubleBitMaskNative > 0 26625 36 DoubleBitMask< DoubleBitMaskNative > 36 DoubleBitMask< DoubleBitMaskNative > 0 0 0 1 1517 1524 0 52 1518 1519 1520 1521 1522 1523 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 0 0 0 0 0 0

1887 17 QuadBitMaskNative 0 2105345 17 QuadBitMaskNative 17 QuadBitMaskNative 0 0 1886 0 0 0 0 0 0 0 0 0 0

1888 8 DrawMask 0 2105345 8 DrawMask 8 DrawMask 0 0 1857 0 0 0 0 0 0 0 0 0 0

1889 14 KeyboardButton 0 141313 14 KeyboardButton 14 KeyboardButton 0 0 0 1 1623 1624 0 52 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard keyboard keys.
 */

1890 15 ModifierButtons 0 26625 15 ModifierButtons 15 ModifierButtons 0 0 0 1 1629 1630 1 2234 23 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1 2254 0 0 0 0 135
/**
 * This class monitors the state of a number of individual buttons and tracks
 * whether each button is known to be down or up.
 */

1891 11 MouseButton 0 141313 11 MouseButton 11 MouseButton 0 0 0 1 1665 1666 0 11 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 0 0 0 0 0 162
/**
 * This class is just used as a convenient namespace for grouping all of these
 * handy functions that return buttons which map to standard mouse buttons.
 */

1892 9 MouseData 0 141313 9 MouseData 9 MouseData 0 0 0 1 1667 1673 3 2235 2236 2237 5 1668 1669 1670 1671 1672 0 0 0 0 0 124
/**
 * Holds the data that might be generated by a 2-d pointer input device, such
 * as the mouse in the GraphicsWindow.
 */

1893 24 NodeCachedReferenceCount 0 43009 24 NodeCachedReferenceCount 24 NodeCachedReferenceCount 0 0 0 0 0 0 6 1674 1675 1676 1677 1678 1679 0 0 1 0 1871 0 0 0 1 1894 1495
/**
 * This class further specializes CachedTypedWritableReferenceCount to also
 * add a node_ref_count, for the purposes of counting the number of times the
 * object is referenced by a "node", presumably a PandaNode.
 *
 * This essentially combines the functionality of NodeReferenceCount and
 * CachedTypedWritableReferenceCount, so that a derivative of this object
 * actually has three counters: the standard reference count, the "cache"
 * reference count, and the "node" reference count.  Rather than multiply
 * inheriting from the two reference count classes, we inherit only from
 * CachedTypedWritableReferenceCount and simply duplicate the functionality of
 * NodeReferenceCount, to avoid all of the problems associated with multiple
 * inheritance.
 *
 * The intended design is to use this as a base class for RenderState and
 * TransformState, both of which are held by PandaNodes, and also have caches
 * which are independently maintained.  By keeping track of how many nodes
 * hold a pointer to a particular object, we can classify each object into
 * node-referenced, cache-referenced, or other, which is primarily useful for
 * PStats reporting.
 *
 * As with CachedTypedWritableReferenceCount's cache_ref() and cache_unref(),
 * the new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  In this case, however,
 * there does exist a NodePointerTo<> class to maintain the node_ref counters
 * automatically.
 */

1894 10 Referenced 0 794624 36 NodeCachedReferenceCount::Referenced 36 NodeCachedReferenceCount::Referenced 1893 0 0 0 0 0 0 0 0 0 2 6 R_node 32 NodeCachedReferenceCount::R_node 0
1 7 R_cache 33 NodeCachedReferenceCount::R_cache 0
2 0 0

1895 11 SparseArray 0 26625 11 SparseArray 11 SparseArray 0 0 0 1 1680 1687 0 52 1681 1682 1683 1684 1685 1686 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 0 0 0 0 0 736
/**
 * This class records a set of integers, where each integer is either present
 * or not present in the set.
 *
 * It is similar in principle and in interface to a BitArray (which can be
 * thought of as a set of integers, one integer corresponding to each
 * different bit position), but the SparseArray is implemented as a list of
 * min/max subrange lists, rather than as a bitmask.
 *
 * This makes it particularly efficient for storing sets which consist of
 * large sections of consecutively included or consecutively excluded
 * elements, with arbitrarily large integers, but particularly inefficient for
 * doing boolean operations such as & or |.
 *
 * Also, unlike BitArray, the SparseArray can store negative integers.
 */

1896 14 ParamValueBase 0 75777 14 ParamValueBase 14 ParamValueBase 0 0 0 0 1002 0 3 1734 1735 1736 0 0 1 0 1828 0 0 0 0 141
/**
 * A non-template base class of ParamValue (below), which serves mainly to
 * define the placeholder for the virtual output function.
 */

1897 18 ParamTypedRefCount 0 75777 18 ParamTypedRefCount 18 ParamTypedRefCount 0 0 0 1 1737 1002 1 2238 2 1738 1739 0 0 1 0 1896 0 0 0 0 143
/**
 * A class object for storing specifically objects of type
 * TypedReferenceCount, which is different than TypedWritableReferenceCount.
 */

1898 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1869 0 0 0 0 0 0 0 0 0 0

1899 20 ParamValue< string > 0 75777 25 ParamValue< std::string > 25 ParamValue< std::string > 0 0 0 1 1740 1002 1 2239 3 1741 1742 1743 0 0 1 0 1896 0 0 0 0 0

1900 10 Type const 0 8832 10 Type const 10 Type const 0 0 0 0 0 0 0 0 0 0 0 0 0

1901 11 ParamString 0 2105345 11 ParamString 11 ParamString 0 0 1899 0 0 0 0 0 0 0 0 0 0

1902 21 ParamValue< wstring > 0 75777 26 ParamValue< std::wstring > 26 ParamValue< std::wstring > 0 0 0 1 1744 1002 1 2240 3 1745 1746 1747 0 0 1 0 1896 0 0 0 0 0

1903 12 ParamWstring 0 2105345 12 ParamWstring 12 ParamWstring 0 0 1902 0 0 0 0 0 0 0 0 0 0

1904 24 ParamValue< LVecBase2d > 0 75777 24 ParamValue< LVecBase2d > 24 ParamValue< LVecBase2d > 0 0 0 1 1748 1002 1 2241 3 1749 1750 1751 0 0 1 0 1896 0 0 0 0 0

1905 14 ParamVecBase2d 0 2105345 14 ParamVecBase2d 14 ParamVecBase2d 0 0 1904 0 0 0 0 0 0 0 0 0 0

1906 24 ParamValue< LVecBase2f > 0 75777 24 ParamValue< LVecBase2f > 24 ParamValue< LVecBase2f > 0 0 0 1 1752 1002 1 2242 3 1753 1754 1755 0 0 1 0 1896 0 0 0 0 0

1907 14 ParamVecBase2f 0 2105345 14 ParamVecBase2f 14 ParamVecBase2f 0 0 1906 0 0 0 0 0 0 0 0 0 0

1908 24 ParamValue< LVecBase2i > 0 75777 24 ParamValue< LVecBase2i > 24 ParamValue< LVecBase2i > 0 0 0 1 1756 1002 1 2243 3 1757 1758 1759 0 0 1 0 1896 0 0 0 0 0

1909 14 ParamVecBase2i 0 2105345 14 ParamVecBase2i 14 ParamVecBase2i 0 0 1908 0 0 0 0 0 0 0 0 0 0

1910 24 ParamValue< LVecBase3d > 0 75777 24 ParamValue< LVecBase3d > 24 ParamValue< LVecBase3d > 0 0 0 1 1760 1002 1 2244 3 1761 1762 1763 0 0 1 0 1896 0 0 0 0 0

1911 14 ParamVecBase3d 0 2105345 14 ParamVecBase3d 14 ParamVecBase3d 0 0 1910 0 0 0 0 0 0 0 0 0 0

1912 24 ParamValue< LVecBase3f > 0 75777 24 ParamValue< LVecBase3f > 24 ParamValue< LVecBase3f > 0 0 0 1 1764 1002 1 2245 3 1765 1766 1767 0 0 1 0 1896 0 0 0 0 0

1913 14 ParamVecBase3f 0 2105345 14 ParamVecBase3f 14 ParamVecBase3f 0 0 1912 0 0 0 0 0 0 0 0 0 0

1914 24 ParamValue< LVecBase3i > 0 75777 24 ParamValue< LVecBase3i > 24 ParamValue< LVecBase3i > 0 0 0 1 1768 1002 1 2246 3 1769 1770 1771 0 0 1 0 1896 0 0 0 0 0

1915 14 ParamVecBase3i 0 2105345 14 ParamVecBase3i 14 ParamVecBase3i 0 0 1914 0 0 0 0 0 0 0 0 0 0

1916 24 ParamValue< LVecBase4d > 0 75777 24 ParamValue< LVecBase4d > 24 ParamValue< LVecBase4d > 0 0 0 1 1772 1002 1 2247 3 1773 1774 1775 0 0 1 0 1896 0 0 0 0 0

1917 14 ParamVecBase4d 0 2105345 14 ParamVecBase4d 14 ParamVecBase4d 0 0 1916 0 0 0 0 0 0 0 0 0 0

1918 24 ParamValue< LVecBase4f > 0 75777 24 ParamValue< LVecBase4f > 24 ParamValue< LVecBase4f > 0 0 0 1 1776 1002 1 2248 3 1777 1778 1779 0 0 1 0 1896 0 0 0 0 0

1919 14 ParamVecBase4f 0 2105345 14 ParamVecBase4f 14 ParamVecBase4f 0 0 1918 0 0 0 0 0 0 0 0 0 0

1920 24 ParamValue< LVecBase4i > 0 75777 24 ParamValue< LVecBase4i > 24 ParamValue< LVecBase4i > 0 0 0 1 1780 1002 1 2249 3 1781 1782 1783 0 0 1 0 1896 0 0 0 0 0

1921 14 ParamVecBase4i 0 2105345 14 ParamVecBase4i 14 ParamVecBase4i 0 0 1920 0 0 0 0 0 0 0 0 0 0

1922 23 ParamValue< LMatrix3d > 0 75777 23 ParamValue< LMatrix3d > 23 ParamValue< LMatrix3d > 0 0 0 1 1784 1002 1 2250 3 1785 1786 1787 0 0 1 0 1896 0 0 0 0 0

1923 13 ParamMatrix3d 0 2105345 13 ParamMatrix3d 13 ParamMatrix3d 0 0 1922 0 0 0 0 0 0 0 0 0 0

1924 23 ParamValue< LMatrix3f > 0 75777 23 ParamValue< LMatrix3f > 23 ParamValue< LMatrix3f > 0 0 0 1 1788 1002 1 2251 3 1789 1790 1791 0 0 1 0 1896 0 0 0 0 0

1925 13 ParamMatrix3f 0 2105345 13 ParamMatrix3f 13 ParamMatrix3f 0 0 1924 0 0 0 0 0 0 0 0 0 0

1926 23 ParamValue< LMatrix4d > 0 75777 23 ParamValue< LMatrix4d > 23 ParamValue< LMatrix4d > 0 0 0 1 1792 1002 1 2252 3 1793 1794 1795 0 0 1 0 1896 0 0 0 0 0

1927 13 ParamMatrix4d 0 2105345 13 ParamMatrix4d 13 ParamMatrix4d 0 0 1926 0 0 0 0 0 0 0 0 0 0

1928 23 ParamValue< LMatrix4f > 0 75777 23 ParamValue< LMatrix4f > 23 ParamValue< LMatrix4f > 0 0 0 1 1796 1002 1 2253 3 1797 1798 1799 0 0 1 0 1896 0 0 0 0 0

1929 13 ParamMatrix4f 0 2105345 13 ParamMatrix4f 13 ParamMatrix4f 0 0 1928 0 0 0 0 0 0 0 0 0 0

1930 13 ParamVecBase2 0 2105345 13 ParamVecBase2 13 ParamVecBase2 0 0 1907 0 0 0 0 0 0 0 0 0 0

1931 13 ParamVecBase3 0 2105345 13 ParamVecBase3 13 ParamVecBase3 0 0 1913 0 0 0 0 0 0 0 0 0 0

1932 13 ParamVecBase4 0 2105345 13 ParamVecBase4 13 ParamVecBase4 0 0 1919 0 0 0 0 0 0 0 0 0 0

1933 12 ParamMatrix3 0 2105345 12 ParamMatrix3 12 ParamMatrix3 0 0 1925 0 0 0 0 0 0 0 0 0 0

1934 12 ParamMatrix4 0 2105345 12 ParamMatrix4 12 ParamMatrix4 0 0 1929 0 0 0 0 0 0 0 0 0 0

1935 20 WritableConfigurable 0 141313 20 WritableConfigurable 20 WritableConfigurable 0 0 0 0 1801 0 1 1800 0 0 1 0 1826 0 0 0 0 379
/**
 * Defined as a fix to allow creating Configurable and Writable objects.
 * Otherwise the compiler gets confused since both TypedWritable and
 * Configurable inherit from TypedObject.
 *
 * An object that has data or parameters that are set less frequently (at
 * least occasionally) than every frame.  We can cache the configuration info
 * by by using the "dirty" flag.
 */

1936 17 UniqueIdAllocator 0 26625 17 UniqueIdAllocator 17 UniqueIdAllocator 0 0 0 1 1802 1803 0 6 1804 1805 1806 1807 1808 1809 0 0 0 0 0 812
/**
 * Manage a set of ID values from min to max inclusive.  The ID numbers that
 * are freed will be allocated (reused) in the same order.  I.e.  the oldest
 * ID numbers will be allocated.
 *
 * This implementation will use 4 bytes per id number, plus a few bytes of
 * management data.  e.g.  10,000 ID numbers will use 40KB.
 *
 * Also be advised that ID -1 and -2 are used internally by the allocator.  If
 * allocate returns IndexEnd (-1) then the allocator is out of free ID
 * numbers.
 *
 * There are other implementations that can better leverage runs of used or
 * unused IDs or use bit arrays for the IDs.  But, it takes extra work to
 * track the age of freed IDs, which is required for what we wanted.  If you
 * would like to kick around other implementation ideas, please contact
 * Schuyler.
 */

1937 10 PortalMask 0 2105345 10 PortalMask 10 PortalMask 0 0 1857 0 0 0 0 0 0 0 0 0 0

1938 37 ConstPointerToArray< ushort > const * 0 8576 37 ConstPointerToArray< ushort > const * 37 ConstPointerToArray< ushort > const * 0 0 1939 0 0 0 0 0 0 0 0 0 0

1939 35 ConstPointerToArray< ushort > const 0 8832 35 ConstPointerToArray< ushort > const 35 ConstPointerToArray< ushort > const 0 0 1812 0 0 0 0 0 0 0 0 0 0

1940 31 ConstPointerToArray< ushort > * 0 8576 31 ConstPointerToArray< ushort > * 31 ConstPointerToArray< ushort > * 0 0 1812 0 0 0 0 0 0 0 0 0 0

1941 32 PointerToArray< ushort > const * 0 8576 32 PointerToArray< ushort > const * 32 PointerToArray< ushort > const * 0 0 1942 0 0 0 0 0 0 0 0 0 0

1942 30 PointerToArray< ushort > const 0 8832 30 PointerToArray< ushort > const 30 PointerToArray< ushort > const 0 0 1816 0 0 0 0 0 0 0 0 0 0

1943 6 ushort 0 2105344 6 ushort 6 ushort 0 0 1944 0 0 0 0 0 0 0 0 0 0

1944 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1945 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1946 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1947 0 0 0 0 0 0 0 0 0 0

1947 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1948 0 0 0 0 0 0 0 0 0 0

1948 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1949 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1950 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 8576 51 PointerToBase< ReferenceCountedVector< ushort > > * 51 PointerToBase< ReferenceCountedVector< ushort > > * 0 0 1814 0 0 0 0 0 0 0 0 0 0

1951 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< ushort > > const * 57 PointerToBase< ReferenceCountedVector< ushort > > const * 0 0 1952 0 0 0 0 0 0 0 0 0 0

1952 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 8832 55 PointerToBase< ReferenceCountedVector< ushort > > const 55 PointerToBase< ReferenceCountedVector< ushort > > const 0 0 1814 0 0 0 0 0 0 0 0 0 0

1953 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1954 0 0 0 0 0 0 0 0 0 0

1954 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1955 26 PointerToArray< ushort > * 0 8576 26 PointerToArray< ushort > * 26 PointerToArray< ushort > * 0 0 1816 0 0 0 0 0 0 0 0 0 0

1956 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1957 0 0 0 0 0 0 0 0 0 0

1957 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1958 15 AnimInterface * 0 8576 15 AnimInterface * 15 AnimInterface * 0 0 1817 0 0 0 0 0 0 0 0 0 0

1959 21 AnimInterface const * 0 8576 21 AnimInterface const * 21 AnimInterface const * 0 0 1960 0 0 0 0 0 0 0 0 0 0

1960 19 AnimInterface const 0 8832 19 AnimInterface const 19 AnimInterface const 0 0 1817 0 0 0 0 0 0 0 0 0 0

1961 11 UpdateSeq * 0 8576 11 UpdateSeq * 11 UpdateSeq * 0 0 1822 0 0 0 0 0 0 0 0 0 0

1962 17 UpdateSeq const * 0 8576 17 UpdateSeq const * 17 UpdateSeq const * 0 0 1963 0 0 0 0 0 0 0 0 0 0

1963 15 UpdateSeq const 0 8832 15 UpdateSeq const 15 UpdateSeq const 0 0 1822 0 0 0 0 0 0 0 0 0 0

1964 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1965 0 0 0 0 0 0 0 0 0 0

1965 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 0

1966 11 BamReader * 0 8576 11 BamReader * 11 BamReader * 0 0 1844 0 0 0 0 0 0 0 0 0 0

1967 21 TypedWritable const * 0 8576 21 TypedWritable const * 21 TypedWritable const * 0 0 1968 0 0 0 0 0 0 0 0 0 0

1968 19 TypedWritable const 0 8832 19 TypedWritable const 19 TypedWritable const 0 0 1826 0 0 0 0 0 0 0 0 0 0

1969 29 TypedWritableReferenceCount * 0 8576 29 TypedWritableReferenceCount * 29 TypedWritableReferenceCount * 0 0 1828 0 0 0 0 0 0 0 0 0 0

1970 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1829 0 0 0 0 0 0 0 0 0 0

1971 22 BamCacheRecord const * 0 8576 22 BamCacheRecord const * 22 BamCacheRecord const * 0 0 1972 0 0 0 0 0 0 0 0 0 0

1972 20 BamCacheRecord const 0 8832 20 BamCacheRecord const 20 BamCacheRecord const 0 0 1830 0 0 0 0 0 0 0 0 0 0

1973 16 BamCacheRecord * 0 8576 16 BamCacheRecord * 16 BamCacheRecord * 0 0 1830 0 0 0 0 0 0 0 0 0 0

1974 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1832 0 0 0 0 0 0 0 0 0 0

1975 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1976 0 0 0 0 0 0 0 0 0 0

1976 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1977 0 0 0 0 0 0 0 0 0 0

1977 11 VirtualFile 0 2048 11 VirtualFile 11 VirtualFile 0 0 0 0 0 0 0 0 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1978 10 BamCache * 0 8576 10 BamCache * 10 BamCache * 0 0 1836 0 0 0 0 0 0 0 0 0 0

1979 16 BamCache const * 0 8576 16 BamCache const * 16 BamCache const * 0 0 1980 0 0 0 0 0 0 0 0 0 0

1980 14 BamCache const 0 8832 14 BamCache const 14 BamCache const 0 0 1836 0 0 0 0 0 0 0 0 0 0

1981 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1833 0 0 0 0 0 0 0 0 0 0

1982 10 BamEnums * 0 8576 10 BamEnums * 10 BamEnums * 0 0 1837 0 0 0 0 0 0 0 0 0 0

1983 16 BamEnums const * 0 8576 16 BamEnums const * 16 BamEnums const * 0 0 1984 0 0 0 0 0 0 0 0 0 0

1984 14 BamEnums const 0 8832 14 BamEnums const 14 BamEnums const 0 0 1837 0 0 0 0 0 0 0 0 0 0

1985 21 LoaderOptions const * 0 8576 21 LoaderOptions const * 21 LoaderOptions const * 0 0 1847 0 0 0 0 0 0 0 0 0 0

1986 15 LoaderOptions * 0 8576 15 LoaderOptions * 15 LoaderOptions * 0 0 1841 0 0 0 0 0 0 0 0 0 0

1987 9 AuxData * 0 8576 20 BamReader::AuxData * 20 BamReader::AuxData * 0 0 1988 0 0 0 0 0 0 0 0 0 0

1988 7 AuxData 0 1312768 18 BamReader::AuxData 18 BamReader::AuxData 1844 0 0 0 0 0 0 0 0 0 0 0 187
// Inherit from this class to piggyback additional temporary data on the
// bamReader (via set_aux_data() and get_aux_data()) for any particular
// objects during the bam reading process.

1989 17 BamReader const * 0 8576 17 BamReader const * 17 BamReader const * 0 0 1990 0 0 0 0 0 0 0 0 0 0

1990 15 BamReader const 0 8832 15 BamReader const 15 BamReader const 0 0 1844 0 0 0 0 0 0 0 0 0 0

1991 17 BamWriter const * 0 8576 17 BamWriter const * 17 BamWriter const * 0 0 1992 0 0 0 0 0 0 0 0 0 0

1992 15 BamWriter const 0 8832 15 BamWriter const 15 BamWriter const 0 0 1851 0 0 0 0 0 0 0 0 0 0

1993 11 BamWriter * 0 8576 11 BamWriter * 11 BamWriter * 0 0 1851 0 0 0 0 0 0 0 0 0 0

1994 25 BitMask< uint16_t, 16 > * 0 8576 25 BitMask< uint16_t, 16 > * 25 BitMask< uint16_t, 16 > * 0 0 1854 0 0 0 0 0 0 0 0 0 0

1995 31 BitMask< uint16_t, 16 > const * 0 8576 31 BitMask< uint16_t, 16 > const * 31 BitMask< uint16_t, 16 > const * 0 0 1996 0 0 0 0 0 0 0 0 0 0

1996 29 BitMask< uint16_t, 16 > const 0 8832 29 BitMask< uint16_t, 16 > const 29 BitMask< uint16_t, 16 > const 0 0 1854 0 0 0 0 0 0 0 0 0 0

1997 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1944 0 0 0 0 0 0 0 0 0 0

1998 25 BitMask< uint32_t, 32 > * 0 8576 25 BitMask< uint32_t, 32 > * 25 BitMask< uint32_t, 32 > * 0 0 1856 0 0 0 0 0 0 0 0 0 0

1999 31 BitMask< uint32_t, 32 > const * 0 8576 31 BitMask< uint32_t, 32 > const * 31 BitMask< uint32_t, 32 > const * 0 0 2000 0 0 0 0 0 0 0 0 0 0

2000 29 BitMask< uint32_t, 32 > const 0 8832 29 BitMask< uint32_t, 32 > const 29 BitMask< uint32_t, 32 > const 0 0 1856 0 0 0 0 0 0 0 0 0 0

2001 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 2002 0 0 0 0 0 0 0 0 0 0

2002 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

2003 25 BitMask< uint64_t, 64 > * 0 8576 25 BitMask< uint64_t, 64 > * 25 BitMask< uint64_t, 64 > * 0 0 1858 0 0 0 0 0 0 0 0 0 0

2004 31 BitMask< uint64_t, 64 > const * 0 8576 31 BitMask< uint64_t, 64 > const * 31 BitMask< uint64_t, 64 > const * 0 0 2005 0 0 0 0 0 0 0 0 0 0

2005 29 BitMask< uint64_t, 64 > const 0 8832 29 BitMask< uint64_t, 64 > const 29 BitMask< uint64_t, 64 > const 0 0 1858 0 0 0 0 0 0 0 0 0 0

2006 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 2007 0 0 0 0 0 0 0 0 0 0

2007 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

2008 10 BitArray * 0 8576 10 BitArray * 10 BitArray * 0 0 1861 0 0 0 0 0 0 0 0 0 0

2009 16 BitArray const * 0 8576 16 BitArray const * 16 BitArray const * 0 0 2010 0 0 0 0 0 0 0 0 0 0

2010 14 BitArray const 0 8832 14 BitArray const 14 BitArray const 0 0 1861 0 0 0 0 0 0 0 0 0 0

2011 8 WordType 0 2367488 18 BitArray::WordType 18 BitArray::WordType 1861 0 2001 0 0 0 0 0 0 0 0 0 0

2012 19 SparseArray const * 0 8576 19 SparseArray const * 19 SparseArray const * 0 0 2013 0 0 0 0 0 0 0 0 0 0

2013 17 SparseArray const 0 8832 17 SparseArray const 17 SparseArray const 0 0 1895 0 0 0 0 0 0 0 0 0 0

2014 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1877 0 0 0 0 0 0 0 0 0 0

2015 8 MaskType 0 2367488 18 BitArray::MaskType 18 BitArray::MaskType 1861 0 1860 0 0 0 0 0 0 0 0 0 0

2016 10 MaskType * 0 8576 20 BitArray::MaskType * 20 BitArray::MaskType * 0 0 2015 0 0 0 0 0 0 0 0 0 0

2017 14 ButtonHandle * 0 8576 14 ButtonHandle * 14 ButtonHandle * 0 0 1863 0 0 0 0 0 0 0 0 0 0

2018 20 ButtonHandle const * 0 8576 20 ButtonHandle const * 20 ButtonHandle const * 0 0 2019 0 0 0 0 0 0 0 0 0 0

2019 18 ButtonHandle const 0 8832 18 ButtonHandle const 18 ButtonHandle const 0 0 1863 0 0 0 0 0 0 0 0 0 0

2020 22 ButtonRegistry const * 0 8576 22 ButtonRegistry const * 22 ButtonRegistry const * 0 0 2021 0 0 0 0 0 0 0 0 0 0

2021 20 ButtonRegistry const 0 8832 20 ButtonRegistry const 20 ButtonRegistry const 0 0 1867 0 0 0 0 0 0 0 0 0 0

2022 16 ButtonRegistry * 0 8576 16 ButtonRegistry * 16 ButtonRegistry * 0 0 1867 0 0 0 0 0 0 0 0 0 0

2023 11 ButtonMap * 0 8576 11 ButtonMap * 11 ButtonMap * 0 0 1868 0 0 0 0 0 0 0 0 0 0

2024 17 ButtonMap const * 0 8576 17 ButtonMap const * 17 ButtonMap const * 0 0 2025 0 0 0 0 0 0 0 0 0 0

2025 15 ButtonMap const 0 8832 15 ButtonMap const 15 ButtonMap const 0 0 1868 0 0 0 0 0 0 0 0 0 0

2026 22 CallbackObject const * 0 8576 22 CallbackObject const * 22 CallbackObject const * 0 0 2027 0 0 0 0 0 0 0 0 0 0

2027 20 CallbackObject const 0 8832 20 CallbackObject const 20 CallbackObject const 0 0 1870 0 0 0 0 0 0 0 0 0 0

2028 16 CallbackObject * 0 8576 16 CallbackObject * 16 CallbackObject * 0 0 1870 0 0 0 0 0 0 0 0 0 0

2029 41 CachedTypedWritableReferenceCount const * 0 8576 41 CachedTypedWritableReferenceCount const * 41 CachedTypedWritableReferenceCount const * 0 0 2030 0 0 0 0 0 0 0 0 0 0

2030 39 CachedTypedWritableReferenceCount const 0 8832 39 CachedTypedWritableReferenceCount const 39 CachedTypedWritableReferenceCount const 0 0 1871 0 0 0 0 0 0 0 0 0 0

2031 20 CallbackData const * 0 8576 20 CallbackData const * 20 CallbackData const * 0 0 2032 0 0 0 0 0 0 0 0 0 0

2032 18 CallbackData const 0 8832 18 CallbackData const 18 CallbackData const 0 0 1872 0 0 0 0 0 0 0 0 0 0

2033 14 CallbackData * 0 8576 14 CallbackData * 14 CallbackData * 0 0 1872 0 0 0 0 0 0 0 0 0 0

2034 22 PythonCallbackObject * 0 8576 22 PythonCallbackObject * 22 PythonCallbackObject * 0 0 1873 0 0 0 0 0 0 0 0 0 0

2035 28 PythonCallbackObject const * 0 8576 28 PythonCallbackObject const * 28 PythonCallbackObject const * 0 0 2036 0 0 0 0 0 0 0 0 0 0

2036 26 PythonCallbackObject const 0 8832 26 PythonCallbackObject const 26 PythonCallbackObject const 0 0 1873 0 0 0 0 0 0 0 0 0 0

2037 9 TimeVal * 0 8576 9 TimeVal * 9 TimeVal * 0 0 1874 0 0 0 0 0 0 0 0 0 0

2038 15 TimeVal const * 0 8576 15 TimeVal const * 15 TimeVal const * 0 0 2039 0 0 0 0 0 0 0 0 0 0

2039 13 TimeVal const 0 8832 13 TimeVal const 13 TimeVal const 0 0 1874 0 0 0 0 0 0 0 0 0 0

2040 13 ClockObject * 0 8576 13 ClockObject * 13 ClockObject * 0 0 1878 0 0 0 0 0 0 0 0 0 0

2041 19 ClockObject const * 0 8576 19 ClockObject const * 19 ClockObject const * 0 0 2042 0 0 0 0 0 0 0 0 0 0

2042 17 ClockObject const 0 8832 17 ClockObject const 17 ClockObject const 0 0 1878 0 0 0 0 0 0 0 0 0 0

2043 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 2044 0 0 0 0 0 0 0 0 0 0

2044 6 Thread 0 2048 6 Thread 6 Thread 0 0 0 0 0 0 0 0 0 0 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

2045 25 CopyOnWriteObject const * 0 8576 25 CopyOnWriteObject const * 25 CopyOnWriteObject const * 0 0 2046 0 0 0 0 0 0 0 0 0 0

2046 23 CopyOnWriteObject const 0 8832 23 CopyOnWriteObject const 23 CopyOnWriteObject const 0 0 1882 0 0 0 0 0 0 0 0 0 0

2047 19 DatagramInputFile * 0 8576 19 DatagramInputFile * 19 DatagramInputFile * 0 0 1883 0 0 0 0 0 0 0 0 0 0

2048 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 2049 0 0 0 0 0 0 0 0 0 0

2049 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 2050 0 0 0 0 0 0 0 0 0 0

2050 13 FileReference 0 2048 13 FileReference 13 FileReference 0 0 0 0 0 0 0 0 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

2051 9 istream * 0 8576 9 istream * 9 istream * 0 0 2052 0 0 0 0 0 0 0 0 0 0

2052 7 istream 0 2048 7 istream 7 istream 0 0 0 0 0 0 0 0 0 0 0 0 0

2053 32 DoubleBitMask< BitMaskNative > * 0 8576 32 DoubleBitMask< BitMaskNative > * 32 DoubleBitMask< BitMaskNative > * 0 0 1884 0 0 0 0 0 0 0 0 0 0

2054 38 DoubleBitMask< BitMaskNative > const * 0 8576 38 DoubleBitMask< BitMaskNative > const * 38 DoubleBitMask< BitMaskNative > const * 0 0 2055 0 0 0 0 0 0 0 0 0 0

2055 36 DoubleBitMask< BitMaskNative > const 0 8832 36 DoubleBitMask< BitMaskNative > const 36 DoubleBitMask< BitMaskNative > const 0 0 1884 0 0 0 0 0 0 0 0 0 0

2056 38 DoubleBitMask< DoubleBitMaskNative > * 0 8576 38 DoubleBitMask< DoubleBitMaskNative > * 38 DoubleBitMask< DoubleBitMaskNative > * 0 0 1886 0 0 0 0 0 0 0 0 0 0

2057 44 DoubleBitMask< DoubleBitMaskNative > const * 0 8576 44 DoubleBitMask< DoubleBitMaskNative > const * 44 DoubleBitMask< DoubleBitMaskNative > const * 0 0 2058 0 0 0 0 0 0 0 0 0 0

2058 42 DoubleBitMask< DoubleBitMaskNative > const 0 8832 42 DoubleBitMask< DoubleBitMaskNative > const 42 DoubleBitMask< DoubleBitMaskNative > const 0 0 1886 0 0 0 0 0 0 0 0 0 0

2059 16 KeyboardButton * 0 8576 16 KeyboardButton * 16 KeyboardButton * 0 0 1889 0 0 0 0 0 0 0 0 0 0

2060 22 KeyboardButton const * 0 8576 22 KeyboardButton const * 22 KeyboardButton const * 0 0 2061 0 0 0 0 0 0 0 0 0 0

2061 20 KeyboardButton const 0 8832 20 KeyboardButton const 20 KeyboardButton const 0 0 1889 0 0 0 0 0 0 0 0 0 0

2062 17 ModifierButtons * 0 8576 17 ModifierButtons * 17 ModifierButtons * 0 0 1890 0 0 0 0 0 0 0 0 0 0

2063 23 ModifierButtons const * 0 8576 23 ModifierButtons const * 23 ModifierButtons const * 0 0 2064 0 0 0 0 0 0 0 0 0 0

2064 21 ModifierButtons const 0 8832 21 ModifierButtons const 21 ModifierButtons const 0 0 1890 0 0 0 0 0 0 0 0 0 0

2065 13 MouseButton * 0 8576 13 MouseButton * 13 MouseButton * 0 0 1891 0 0 0 0 0 0 0 0 0 0

2066 19 MouseButton const * 0 8576 19 MouseButton const * 19 MouseButton const * 0 0 2067 0 0 0 0 0 0 0 0 0 0

2067 17 MouseButton const 0 8832 17 MouseButton const 17 MouseButton const 0 0 1891 0 0 0 0 0 0 0 0 0 0

2068 11 MouseData * 0 8576 11 MouseData * 11 MouseData * 0 0 1892 0 0 0 0 0 0 0 0 0 0

2069 17 MouseData const * 0 8576 17 MouseData const * 17 MouseData const * 0 0 2070 0 0 0 0 0 0 0 0 0 0

2070 15 MouseData const 0 8832 15 MouseData const 15 MouseData const 0 0 1892 0 0 0 0 0 0 0 0 0 0

2071 32 NodeCachedReferenceCount const * 0 8576 32 NodeCachedReferenceCount const * 32 NodeCachedReferenceCount const * 0 0 2072 0 0 0 0 0 0 0 0 0 0

2072 30 NodeCachedReferenceCount const 0 8832 30 NodeCachedReferenceCount const 30 NodeCachedReferenceCount const 0 0 1893 0 0 0 0 0 0 0 0 0 0

2073 13 SparseArray * 0 8576 13 SparseArray * 13 SparseArray * 0 0 1895 0 0 0 0 0 0 0 0 0 0

2074 22 ParamValueBase const * 0 8576 22 ParamValueBase const * 22 ParamValueBase const * 0 0 2075 0 0 0 0 0 0 0 0 0 0

2075 20 ParamValueBase const 0 8832 20 ParamValueBase const 20 ParamValueBase const 0 0 1896 0 0 0 0 0 0 0 0 0 0

2076 27 TypedReferenceCount const * 0 8576 27 TypedReferenceCount const * 27 TypedReferenceCount const * 0 0 2077 0 0 0 0 0 0 0 0 0 0

2077 25 TypedReferenceCount const 0 8832 25 TypedReferenceCount const 25 TypedReferenceCount const 0 0 1869 0 0 0 0 0 0 0 0 0 0

2078 20 ParamTypedRefCount * 0 8576 20 ParamTypedRefCount * 20 ParamTypedRefCount * 0 0 1897 0 0 0 0 0 0 0 0 0 0

2079 26 ParamTypedRefCount const * 0 8576 26 ParamTypedRefCount const * 26 ParamTypedRefCount const * 0 0 2080 0 0 0 0 0 0 0 0 0 0

2080 24 ParamTypedRefCount const 0 8832 24 ParamTypedRefCount const 24 ParamTypedRefCount const 0 0 1897 0 0 0 0 0 0 0 0 0 0

2081 22 ParamValue< string > * 0 8576 27 ParamValue< std::string > * 27 ParamValue< std::string > * 0 0 1899 0 0 0 0 0 0 0 0 0 0

2082 28 ParamValue< string > const * 0 8576 33 ParamValue< std::string > const * 33 ParamValue< std::string > const * 0 0 2083 0 0 0 0 0 0 0 0 0 0

2083 26 ParamValue< string > const 0 8832 31 ParamValue< std::string > const 31 ParamValue< std::string > const 0 0 1899 0 0 0 0 0 0 0 0 0 0

2084 23 ParamValue< wstring > * 0 8576 28 ParamValue< std::wstring > * 28 ParamValue< std::wstring > * 0 0 1902 0 0 0 0 0 0 0 0 0 0

2085 29 ParamValue< wstring > const * 0 8576 34 ParamValue< std::wstring > const * 34 ParamValue< std::wstring > const * 0 0 2086 0 0 0 0 0 0 0 0 0 0

2086 27 ParamValue< wstring > const 0 8832 32 ParamValue< std::wstring > const 32 ParamValue< std::wstring > const 0 0 1902 0 0 0 0 0 0 0 0 0 0

2087 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 2088 0 0 0 0 0 0 0 0 0 0

2088 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 2089 0 0 0 0 0 0 0 0 0 0

2089 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2090 26 ParamValue< LVecBase2d > * 0 8576 26 ParamValue< LVecBase2d > * 26 ParamValue< LVecBase2d > * 0 0 1904 0 0 0 0 0 0 0 0 0 0

2091 32 ParamValue< LVecBase2d > const * 0 8576 32 ParamValue< LVecBase2d > const * 32 ParamValue< LVecBase2d > const * 0 0 2092 0 0 0 0 0 0 0 0 0 0

2092 30 ParamValue< LVecBase2d > const 0 8832 30 ParamValue< LVecBase2d > const 30 ParamValue< LVecBase2d > const 0 0 1904 0 0 0 0 0 0 0 0 0 0

2093 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 2094 0 0 0 0 0 0 0 0 0 0

2094 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 2095 0 0 0 0 0 0 0 0 0 0

2095 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2096 26 ParamValue< LVecBase2f > * 0 8576 26 ParamValue< LVecBase2f > * 26 ParamValue< LVecBase2f > * 0 0 1906 0 0 0 0 0 0 0 0 0 0

2097 32 ParamValue< LVecBase2f > const * 0 8576 32 ParamValue< LVecBase2f > const * 32 ParamValue< LVecBase2f > const * 0 0 2098 0 0 0 0 0 0 0 0 0 0

2098 30 ParamValue< LVecBase2f > const 0 8832 30 ParamValue< LVecBase2f > const 30 ParamValue< LVecBase2f > const 0 0 1906 0 0 0 0 0 0 0 0 0 0

2099 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 2100 0 0 0 0 0 0 0 0 0 0

2100 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 2101 0 0 0 0 0 0 0 0 0 0

2101 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

2102 26 ParamValue< LVecBase2i > * 0 8576 26 ParamValue< LVecBase2i > * 26 ParamValue< LVecBase2i > * 0 0 1908 0 0 0 0 0 0 0 0 0 0

2103 32 ParamValue< LVecBase2i > const * 0 8576 32 ParamValue< LVecBase2i > const * 32 ParamValue< LVecBase2i > const * 0 0 2104 0 0 0 0 0 0 0 0 0 0

2104 30 ParamValue< LVecBase2i > const 0 8832 30 ParamValue< LVecBase2i > const 30 ParamValue< LVecBase2i > const 0 0 1908 0 0 0 0 0 0 0 0 0 0

2105 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 2106 0 0 0 0 0 0 0 0 0 0

2106 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 2107 0 0 0 0 0 0 0 0 0 0

2107 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2108 26 ParamValue< LVecBase3d > * 0 8576 26 ParamValue< LVecBase3d > * 26 ParamValue< LVecBase3d > * 0 0 1910 0 0 0 0 0 0 0 0 0 0

2109 32 ParamValue< LVecBase3d > const * 0 8576 32 ParamValue< LVecBase3d > const * 32 ParamValue< LVecBase3d > const * 0 0 2110 0 0 0 0 0 0 0 0 0 0

2110 30 ParamValue< LVecBase3d > const 0 8832 30 ParamValue< LVecBase3d > const 30 ParamValue< LVecBase3d > const 0 0 1910 0 0 0 0 0 0 0 0 0 0

2111 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 2112 0 0 0 0 0 0 0 0 0 0

2112 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 2113 0 0 0 0 0 0 0 0 0 0

2113 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2114 26 ParamValue< LVecBase3f > * 0 8576 26 ParamValue< LVecBase3f > * 26 ParamValue< LVecBase3f > * 0 0 1912 0 0 0 0 0 0 0 0 0 0

2115 32 ParamValue< LVecBase3f > const * 0 8576 32 ParamValue< LVecBase3f > const * 32 ParamValue< LVecBase3f > const * 0 0 2116 0 0 0 0 0 0 0 0 0 0

2116 30 ParamValue< LVecBase3f > const 0 8832 30 ParamValue< LVecBase3f > const 30 ParamValue< LVecBase3f > const 0 0 1912 0 0 0 0 0 0 0 0 0 0

2117 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 2118 0 0 0 0 0 0 0 0 0 0

2118 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 2119 0 0 0 0 0 0 0 0 0 0

2119 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2120 26 ParamValue< LVecBase3i > * 0 8576 26 ParamValue< LVecBase3i > * 26 ParamValue< LVecBase3i > * 0 0 1914 0 0 0 0 0 0 0 0 0 0

2121 32 ParamValue< LVecBase3i > const * 0 8576 32 ParamValue< LVecBase3i > const * 32 ParamValue< LVecBase3i > const * 0 0 2122 0 0 0 0 0 0 0 0 0 0

2122 30 ParamValue< LVecBase3i > const 0 8832 30 ParamValue< LVecBase3i > const 30 ParamValue< LVecBase3i > const 0 0 1914 0 0 0 0 0 0 0 0 0 0

2123 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 2124 0 0 0 0 0 0 0 0 0 0

2124 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 2125 0 0 0 0 0 0 0 0 0 0

2125 10 LVecBase4d 0 2048 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2126 26 ParamValue< LVecBase4d > * 0 8576 26 ParamValue< LVecBase4d > * 26 ParamValue< LVecBase4d > * 0 0 1916 0 0 0 0 0 0 0 0 0 0

2127 32 ParamValue< LVecBase4d > const * 0 8576 32 ParamValue< LVecBase4d > const * 32 ParamValue< LVecBase4d > const * 0 0 2128 0 0 0 0 0 0 0 0 0 0

2128 30 ParamValue< LVecBase4d > const 0 8832 30 ParamValue< LVecBase4d > const 30 ParamValue< LVecBase4d > const 0 0 1916 0 0 0 0 0 0 0 0 0 0

2129 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 2130 0 0 0 0 0 0 0 0 0 0

2130 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 2131 0 0 0 0 0 0 0 0 0 0

2131 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2132 26 ParamValue< LVecBase4f > * 0 8576 26 ParamValue< LVecBase4f > * 26 ParamValue< LVecBase4f > * 0 0 1918 0 0 0 0 0 0 0 0 0 0

2133 32 ParamValue< LVecBase4f > const * 0 8576 32 ParamValue< LVecBase4f > const * 32 ParamValue< LVecBase4f > const * 0 0 2134 0 0 0 0 0 0 0 0 0 0

2134 30 ParamValue< LVecBase4f > const 0 8832 30 ParamValue< LVecBase4f > const 30 ParamValue< LVecBase4f > const 0 0 1918 0 0 0 0 0 0 0 0 0 0

2135 18 LVecBase4i const * 0 8576 18 LVecBase4i const * 18 LVecBase4i const * 0 0 2136 0 0 0 0 0 0 0 0 0 0

2136 16 LVecBase4i const 0 8832 16 LVecBase4i const 16 LVecBase4i const 0 0 2137 0 0 0 0 0 0 0 0 0 0

2137 10 LVecBase4i 0 2048 10 LVecBase4i 10 LVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

2138 26 ParamValue< LVecBase4i > * 0 8576 26 ParamValue< LVecBase4i > * 26 ParamValue< LVecBase4i > * 0 0 1920 0 0 0 0 0 0 0 0 0 0

2139 32 ParamValue< LVecBase4i > const * 0 8576 32 ParamValue< LVecBase4i > const * 32 ParamValue< LVecBase4i > const * 0 0 2140 0 0 0 0 0 0 0 0 0 0

2140 30 ParamValue< LVecBase4i > const 0 8832 30 ParamValue< LVecBase4i > const 30 ParamValue< LVecBase4i > const 0 0 1920 0 0 0 0 0 0 0 0 0 0

2141 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 2142 0 0 0 0 0 0 0 0 0 0

2142 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 2143 0 0 0 0 0 0 0 0 0 0

2143 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2144 25 ParamValue< LMatrix3d > * 0 8576 25 ParamValue< LMatrix3d > * 25 ParamValue< LMatrix3d > * 0 0 1922 0 0 0 0 0 0 0 0 0 0

2145 31 ParamValue< LMatrix3d > const * 0 8576 31 ParamValue< LMatrix3d > const * 31 ParamValue< LMatrix3d > const * 0 0 2146 0 0 0 0 0 0 0 0 0 0

2146 29 ParamValue< LMatrix3d > const 0 8832 29 ParamValue< LMatrix3d > const 29 ParamValue< LMatrix3d > const 0 0 1922 0 0 0 0 0 0 0 0 0 0

2147 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 2148 0 0 0 0 0 0 0 0 0 0

2148 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 2149 0 0 0 0 0 0 0 0 0 0

2149 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

2150 25 ParamValue< LMatrix3f > * 0 8576 25 ParamValue< LMatrix3f > * 25 ParamValue< LMatrix3f > * 0 0 1924 0 0 0 0 0 0 0 0 0 0

2151 31 ParamValue< LMatrix3f > const * 0 8576 31 ParamValue< LMatrix3f > const * 31 ParamValue< LMatrix3f > const * 0 0 2152 0 0 0 0 0 0 0 0 0 0

2152 29 ParamValue< LMatrix3f > const 0 8832 29 ParamValue< LMatrix3f > const 29 ParamValue< LMatrix3f > const 0 0 1924 0 0 0 0 0 0 0 0 0 0

2153 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 2154 0 0 0 0 0 0 0 0 0 0

2154 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 2155 0 0 0 0 0 0 0 0 0 0

2155 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2156 25 ParamValue< LMatrix4d > * 0 8576 25 ParamValue< LMatrix4d > * 25 ParamValue< LMatrix4d > * 0 0 1926 0 0 0 0 0 0 0 0 0 0

2157 31 ParamValue< LMatrix4d > const * 0 8576 31 ParamValue< LMatrix4d > const * 31 ParamValue< LMatrix4d > const * 0 0 2158 0 0 0 0 0 0 0 0 0 0

2158 29 ParamValue< LMatrix4d > const 0 8832 29 ParamValue< LMatrix4d > const 29 ParamValue< LMatrix4d > const 0 0 1926 0 0 0 0 0 0 0 0 0 0

2159 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 2160 0 0 0 0 0 0 0 0 0 0

2160 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 2161 0 0 0 0 0 0 0 0 0 0

2161 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

2162 25 ParamValue< LMatrix4f > * 0 8576 25 ParamValue< LMatrix4f > * 25 ParamValue< LMatrix4f > * 0 0 1928 0 0 0 0 0 0 0 0 0 0

2163 31 ParamValue< LMatrix4f > const * 0 8576 31 ParamValue< LMatrix4f > const * 31 ParamValue< LMatrix4f > const * 0 0 2164 0 0 0 0 0 0 0 0 0 0

2164 29 ParamValue< LMatrix4f > const 0 8832 29 ParamValue< LMatrix4f > const 29 ParamValue< LMatrix4f > const 0 0 1928 0 0 0 0 0 0 0 0 0 0

2165 25 UniqueIdAllocator const * 0 8576 25 UniqueIdAllocator const * 25 UniqueIdAllocator const * 0 0 2166 0 0 0 0 0 0 0 0 0 0

2166 23 UniqueIdAllocator const 0 8832 23 UniqueIdAllocator const 23 UniqueIdAllocator const 0 0 1936 0 0 0 0 0 0 0 0 0 0

2167 19 UniqueIdAllocator * 0 8576 19 UniqueIdAllocator * 19 UniqueIdAllocator * 0 0 1936 0 0 0 0 0 0 0 0 0 0

2168 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 2169 0 0 0 0 0 0 0 0 0 0

2169 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

2170 26 ConfigVariableSearchPath * 0 8576 26 ConfigVariableSearchPath * 26 ConfigVariableSearchPath * 0 0 2171 0 0 0 0 0 0 0 0 0 0

2171 24 ConfigVariableSearchPath 0 2048 24 ConfigVariableSearchPath 24 ConfigVariableSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 731
/**
 * This is similar to a ConfigVariableList, but it returns its list as a
 * DSearchPath, as a list of directories.
 *
 * You may locally append directories to the end of the search path with the
 * methods here, or prepend them to the beginning.  Use these methods to make
 * adjustments to the path; do not attempt to directly modify the const
 * DSearchPath object returned by get_value().
 *
 * Unlike other ConfigVariable types, local changes (made by calling
 * append_directory() and prepend_directory()) are specific to this particular
 * instance of the ConfigVariableSearchPath.  A separate instance of the same
 * variable, created by using the same name to the constructor, will not
 * reflect the local changes.
 */

2172 12 ConfigPage * 0 8576 12 ConfigPage * 12 ConfigPage * 0 0 2173 0 0 0 0 0 0 0 0 0 0

2173 10 ConfigPage 0 2048 10 ConfigPage 10 ConfigPage 0 0 0 0 0 0 0 0 0 0 0 0 262
/**
 * A page of ConfigDeclarations that may be loaded or unloaded.  Typically
 * this represents a single .prc file that is read from disk at runtime, but
 * it may also represent a list of declarations built up by application code
 * and explicitly loaded.
 */

2174 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 2175 0 0 0 0 0 0 0 0 0 0

2175 7 HashVal 0 2048 7 HashVal 7 HashVal 0 0 0 0 0 0 0 0 0 0 0 0 0

0
78
2176 9 play_rate 0 6 1818 956 955 0 0 0 0 24 AnimInterface::play_rate 0

2177 10 frame_rate 0 2 1818 957 0 0 0 0 0 25 AnimInterface::frame_rate 0

2178 10 num_frames 0 2 1819 958 0 0 0 0 0 25 AnimInterface::num_frames 0

2179 5 frame 0 2 1819 959 0 0 0 0 0 20 AnimInterface::frame 0

2180 10 next_frame 0 2 1819 960 0 0 0 0 0 25 AnimInterface::next_frame 0

2181 4 frac 0 2 1818 961 0 0 0 0 0 19 AnimInterface::frac 0

2182 10 full_frame 0 2 1819 962 0 0 0 0 0 25 AnimInterface::full_frame 0

2183 11 full_fframe 0 2 1818 963 0 0 0 0 0 26 AnimInterface::full_fframe 0

2184 7 playing 0 2 1820 964 0 0 0 0 0 22 AnimInterface::playing 0

2185 3 seq 0 2 1823 985 0 0 0 0 0 14 UpdateSeq::seq 0

2186 15 source_pathname 0 2 1832 1010 0 0 0 0 0 31 BamCacheRecord::source_pathname 0

2187 14 cache_filename 0 2 1832 1011 0 0 0 0 0 30 BamCacheRecord::cache_filename 0

2188 16 source_timestamp 0 2 1834 1012 0 0 0 0 0 32 BamCacheRecord::source_timestamp 0

2189 13 recorded_time 0 2 1834 1013 0 0 0 0 0 29 BamCacheRecord::recorded_time 0

2190 4 data 0 30 1835 1021 1023 1019 1020 0 0 20 BamCacheRecord::data 0

2191 6 active 0 6 1820 1030 1029 0 0 0 0 16 BamCache::active 0

2192 12 cache_models 0 6 1820 1032 1031 0 0 0 0 22 BamCache::cache_models 0

2193 14 cache_textures 0 6 1820 1034 1033 0 0 0 0 24 BamCache::cache_textures 0

2194 25 cache_compressed_textures 0 6 1820 1036 1035 0 0 0 0 35 BamCache::cache_compressed_textures 0

2195 22 cache_compiled_shaders 0 6 1820 1038 1037 0 0 0 0 32 BamCache::cache_compiled_shaders 0

2196 4 root 0 6 1833 1040 1039 0 0 0 0 14 BamCache::root 0

2197 10 flush_time 0 6 1819 1042 1041 0 0 0 0 20 BamCache::flush_time 0

2198 16 cache_max_kbytes 0 6 1819 1044 1043 0 0 0 0 26 BamCache::cache_max_kbytes 0

2199 9 read_only 0 6 1820 1046 1045 0 0 0 0 19 BamCache::read_only 0

2200 5 flags 0 6 1819 1060 1059 0 0 0 0 20 LoaderOptions::flags 0

2201 13 texture_flags 0 6 1819 1062 1061 0 0 0 0 28 LoaderOptions::texture_flags 0

2202 17 texture_num_views 0 6 1819 1064 1063 0 0 0 0 32 LoaderOptions::texture_num_views 0

2203 18 auto_texture_scale 0 6 1821 1066 1065 0 0 0 0 33 LoaderOptions::auto_texture_scale 0

2204 6 source 0 6 1845 1072 1071 0 0 0 0 17 BamReader::source 0

2205 8 filename 0 2 1832 1076 0 0 0 0 0 19 BamReader::filename 0

2206 14 loader_options 0 6 1847 1077 1078 0 0 0 0 25 BamReader::loader_options 0

2207 12 file_version 0 2 1848 1089 0 0 0 0 0 23 BamReader::file_version 0

2208 11 file_endian 0 2 1838 1085 0 0 0 0 0 22 BamReader::file_endian 0

2209 20 file_stdfloat_double 0 2 1820 1086 0 0 0 0 0 31 BamReader::file_stdfloat_double 0

2210 6 target 0 6 1852 1094 1093 0 0 0 0 17 BamWriter::target 0

2211 8 filename 0 2 1832 1096 0 0 0 0 0 19 BamWriter::filename 0

2212 11 file_endian 0 2 1838 1103 0 0 0 0 0 22 BamWriter::file_endian 0

2213 20 file_stdfloat_double 0 2 1820 1104 0 0 0 0 0 31 BamWriter::file_stdfloat_double 0

2214 17 file_texture_mode 0 2 1840 1105 0 0 0 0 0 28 BamWriter::file_texture_mode 0

2215 9 root_node 0 6 1835 1107 1108 0 0 0 0 20 BamWriter::root_node 0

2216 5 index 0 2 1819 1374 0 0 0 0 0 19 ButtonHandle::index 0

2217 4 name 0 2 1864 1369 0 0 0 0 0 18 ButtonHandle::name 0

2218 16 ascii_equivalent 0 10 1866 1371 0 1370 0 0 0 30 ButtonHandle::ascii_equivalent 0

2219 5 alias 0 2 1863 1372 0 0 0 0 0 19 ButtonHandle::alias 0

2220 15 cache_ref_count 0 2 1819 1401 0 0 0 0 0 50 CachedTypedWritableReferenceCount::cache_ref_count 0

2221 8 function 0 6 1848 1413 1412 0 0 0 0 30 PythonCallbackObject::function 0

2222 2 tv 0 6 1875 1418 1419 0 0 0 0 11 TimeVal::tv 0

2223 4 mode 0 6 1879 1423 1422 0 0 0 0 17 ClockObject::mode 0

2224 10 frame_time 0 6 1818 1424 1429 0 0 0 0 23 ClockObject::frame_time 0

2225 9 real_time 0 6 1818 1425 1428 0 0 0 0 22 ClockObject::real_time 0

2226 9 long_time 0 2 1818 1426 0 0 0 0 0 22 ClockObject::long_time 0

2227 11 frame_count 0 6 1819 1431 1430 0 0 0 0 24 ClockObject::frame_count 0

2228 2 dt 0 6 1818 1433 1434 0 0 0 0 15 ClockObject::dt 0

2229 6 max_dt 0 6 1818 1436 1437 0 0 0 0 19 ClockObject::max_dt 0

2230 14 degrade_factor 0 6 1818 1438 1439 0 0 0 0 27 ClockObject::degrade_factor 0

2231 27 average_frame_rate_interval 0 6 1818 1441 1440 0 0 0 0 40 ClockObject::average_frame_rate_interval 0

2232 18 average_frame_rate 0 2 1818 1442 0 0 0 0 0 31 ClockObject::average_frame_rate 0

2233 18 max_frame_duration 0 2 1818 1443 0 0 0 0 0 31 ClockObject::max_frame_duration 0

2234 7 buttons 0 66 1863 1645 0 0 0 0 1644 24 ModifierButtons::buttons 0

2235 1 x 0 2 1818 1669 0 0 0 0 0 12 MouseData::x 0

2236 1 y 0 2 1818 1670 0 0 0 0 0 12 MouseData::y 0

2237 9 in_window 0 2 1820 1671 0 0 0 0 0 20 MouseData::in_window 0

2238 5 value 0 2 1898 1738 0 0 0 0 0 25 ParamTypedRefCount::value 0

2239 5 value 0 6 1900 1742 1741 0 0 0 0 27 ParamValue< string >::value 0

2240 5 value 0 6 1900 1746 1745 0 0 0 0 28 ParamValue< wstring >::value 0

2241 5 value 0 6 1900 1750 1749 0 0 0 0 31 ParamValue< LVecBase2d >::value 0

2242 5 value 0 6 1900 1754 1753 0 0 0 0 31 ParamValue< LVecBase2f >::value 0

2243 5 value 0 6 1900 1758 1757 0 0 0 0 31 ParamValue< LVecBase2i >::value 0

2244 5 value 0 6 1900 1762 1761 0 0 0 0 31 ParamValue< LVecBase3d >::value 0

2245 5 value 0 6 1900 1766 1765 0 0 0 0 31 ParamValue< LVecBase3f >::value 0

2246 5 value 0 6 1900 1770 1769 0 0 0 0 31 ParamValue< LVecBase3i >::value 0

2247 5 value 0 6 1900 1774 1773 0 0 0 0 31 ParamValue< LVecBase4d >::value 0

2248 5 value 0 6 1900 1778 1777 0 0 0 0 31 ParamValue< LVecBase4f >::value 0

2249 5 value 0 6 1900 1782 1781 0 0 0 0 31 ParamValue< LVecBase4i >::value 0

2250 5 value 0 6 1900 1786 1785 0 0 0 0 30 ParamValue< LMatrix3d >::value 0

2251 5 value 0 6 1900 1790 1789 0 0 0 0 30 ParamValue< LMatrix3f >::value 0

2252 5 value 0 6 1900 1794 1793 0 0 0 0 30 ParamValue< LMatrix4d >::value 0

2253 5 value 0 6 1900 1798 1797 0 0 0 0 30 ParamValue< LMatrix4f >::value 0

1
2254 11 get_buttons 0 1644 1645 28 ModifierButtons::get_buttons 0

