1481294144
3 2
13 libp3mathutil 4 LL_p 12 panda3d.core 
636
703 5 clear 0 4 1341 59 PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear 0 1 13 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3d > >::clear(void);

704 6 output 0 4 1341 60 PointerToBase< ReferenceCountedVector< LMatrix3d > >::output 0 1 14 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3d > >::output(ostream &out) const;

705 19 ~PointerToArrayBase 0 4 1340 52 PointerToArrayBase< LMatrix3d >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3d >::~PointerToArrayBase(void);

706 19 ConstPointerToArray 0 4 1339 53 ConstPointerToArray< LMatrix3d >::ConstPointerToArray 0 3 1 2 3 0
299
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PointerToArray< LMatrix3d > const &copy);
inline ConstPointerToArray< LMatrix3d >::ConstPointerToArray(ConstPointerToArray< LMatrix3d > const &copy);
ConstPointerToArray< LMatrix3d >::ConstPointerToArray(PyObject *self, PyObject *source);

707 4 size 0 4 1339 38 ConstPointerToArray< LMatrix3d >::size 0 1 4 0
76
inline unsigned long int ConstPointerToArray< LMatrix3d >::size(void) const;

708 11 get_element 0 4 1339 45 ConstPointerToArray< LMatrix3d >::get_element 0 1 5 0
97
inline LMatrix3d const &ConstPointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

709 11 __getitem__ 0 4 1339 45 ConstPointerToArray< LMatrix3d >::__getitem__ 0 1 6 0
90
LMatrix3d const &ConstPointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

710 8 get_data 0 4 1339 42 ConstPointerToArray< LMatrix3d >::get_data 0 1 7 0
88
inline std::basic_string< char > ConstPointerToArray< LMatrix3d >::get_data(void) const;

711 11 get_subdata 0 4 1339 45 ConstPointerToArray< LMatrix3d >::get_subdata 0 1 8 0
131
inline std::basic_string< char > ConstPointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

712 13 get_ref_count 0 4 1339 47 ConstPointerToArray< LMatrix3d >::get_ref_count 0 1 9 0
71
inline int ConstPointerToArray< LMatrix3d >::get_ref_count(void) const;

713 18 get_node_ref_count 0 4 1339 52 ConstPointerToArray< LMatrix3d >::get_node_ref_count 0 1 10 0
76
inline int ConstPointerToArray< LMatrix3d >::get_node_ref_count(void) const;

714 13 __getbuffer__ 0 4 1339 47 ConstPointerToArray< LMatrix3d >::__getbuffer__ 0 1 11 0
102
int ConstPointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

715 17 __releasebuffer__ 0 4 1339 51 ConstPointerToArray< LMatrix3d >::__releasebuffer__ 0 1 12 0
96
void ConstPointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

716 20 ~ConstPointerToArray 0 4 1339 54 ConstPointerToArray< LMatrix3d >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3d >::~ConstPointerToArray(void);

717 5 clear 0 4 1345 59 PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear 0 1 27 0
78
inline void PointerToBase< ReferenceCountedVector< LMatrix3f > >::clear(void);

718 6 output 0 4 1345 60 PointerToBase< ReferenceCountedVector< LMatrix3f > >::output 0 1 28 0
86
void PointerToBase< ReferenceCountedVector< LMatrix3f > >::output(ostream &out) const;

719 19 ~PointerToArrayBase 0 4 1344 52 PointerToArrayBase< LMatrix3f >::~PointerToArrayBase 0 0 0
66
inline PointerToArrayBase< LMatrix3f >::~PointerToArrayBase(void);

720 19 ConstPointerToArray 0 4 1343 53 ConstPointerToArray< LMatrix3f >::ConstPointerToArray 0 3 15 16 17 0
299
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PointerToArray< LMatrix3f > const &copy);
inline ConstPointerToArray< LMatrix3f >::ConstPointerToArray(ConstPointerToArray< LMatrix3f > const &copy);
ConstPointerToArray< LMatrix3f >::ConstPointerToArray(PyObject *self, PyObject *source);

721 4 size 0 4 1343 38 ConstPointerToArray< LMatrix3f >::size 0 1 18 0
76
inline unsigned long int ConstPointerToArray< LMatrix3f >::size(void) const;

722 11 get_element 0 4 1343 45 ConstPointerToArray< LMatrix3f >::get_element 0 1 19 0
97
inline LMatrix3f const &ConstPointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

723 11 __getitem__ 0 4 1343 45 ConstPointerToArray< LMatrix3f >::__getitem__ 0 1 20 0
90
LMatrix3f const &ConstPointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

724 8 get_data 0 4 1343 42 ConstPointerToArray< LMatrix3f >::get_data 0 1 21 0
88
inline std::basic_string< char > ConstPointerToArray< LMatrix3f >::get_data(void) const;

725 11 get_subdata 0 4 1343 45 ConstPointerToArray< LMatrix3f >::get_subdata 0 1 22 0
131
inline std::basic_string< char > ConstPointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

726 13 get_ref_count 0 4 1343 47 ConstPointerToArray< LMatrix3f >::get_ref_count 0 1 23 0
71
inline int ConstPointerToArray< LMatrix3f >::get_ref_count(void) const;

727 18 get_node_ref_count 0 4 1343 52 ConstPointerToArray< LMatrix3f >::get_node_ref_count 0 1 24 0
76
inline int ConstPointerToArray< LMatrix3f >::get_node_ref_count(void) const;

728 13 __getbuffer__ 0 4 1343 47 ConstPointerToArray< LMatrix3f >::__getbuffer__ 0 1 25 0
102
int ConstPointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

729 17 __releasebuffer__ 0 4 1343 51 ConstPointerToArray< LMatrix3f >::__releasebuffer__ 0 1 26 0
96
void ConstPointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

730 20 ~ConstPointerToArray 0 4 1343 54 ConstPointerToArray< LMatrix3f >::~ConstPointerToArray 0 0 0
61
ConstPointerToArray< LMatrix3f >::~ConstPointerToArray(void);

731 5 clear 0 4 1348 60 PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear 0 1 41 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2d > >::clear(void);

732 6 output 0 4 1348 61 PointerToBase< ReferenceCountedVector< LVecBase2d > >::output 0 1 42 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2d > >::output(ostream &out) const;

733 19 ~PointerToArrayBase 0 4 1347 53 PointerToArrayBase< LVecBase2d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2d >::~PointerToArrayBase(void);

734 19 ConstPointerToArray 0 4 1346 54 ConstPointerToArray< LVecBase2d >::ConstPointerToArray 0 3 29 30 31 0
304
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PointerToArray< LVecBase2d > const &copy);
inline ConstPointerToArray< LVecBase2d >::ConstPointerToArray(ConstPointerToArray< LVecBase2d > const &copy);
ConstPointerToArray< LVecBase2d >::ConstPointerToArray(PyObject *self, PyObject *source);

735 4 size 0 4 1346 39 ConstPointerToArray< LVecBase2d >::size 0 1 32 0
77
inline unsigned long int ConstPointerToArray< LVecBase2d >::size(void) const;

736 11 get_element 0 4 1346 46 ConstPointerToArray< LVecBase2d >::get_element 0 1 33 0
99
inline LVecBase2d const &ConstPointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

737 11 __getitem__ 0 4 1346 46 ConstPointerToArray< LVecBase2d >::__getitem__ 0 1 34 0
92
LVecBase2d const &ConstPointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

738 8 get_data 0 4 1346 43 ConstPointerToArray< LVecBase2d >::get_data 0 1 35 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2d >::get_data(void) const;

739 11 get_subdata 0 4 1346 46 ConstPointerToArray< LVecBase2d >::get_subdata 0 1 36 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

740 13 get_ref_count 0 4 1346 48 ConstPointerToArray< LVecBase2d >::get_ref_count 0 1 37 0
72
inline int ConstPointerToArray< LVecBase2d >::get_ref_count(void) const;

741 18 get_node_ref_count 0 4 1346 53 ConstPointerToArray< LVecBase2d >::get_node_ref_count 0 1 38 0
77
inline int ConstPointerToArray< LVecBase2d >::get_node_ref_count(void) const;

742 13 __getbuffer__ 0 4 1346 48 ConstPointerToArray< LVecBase2d >::__getbuffer__ 0 1 39 0
103
int ConstPointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

743 17 __releasebuffer__ 0 4 1346 52 ConstPointerToArray< LVecBase2d >::__releasebuffer__ 0 1 40 0
97
void ConstPointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

744 20 ~ConstPointerToArray 0 4 1346 55 ConstPointerToArray< LVecBase2d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2d >::~ConstPointerToArray(void);

745 5 clear 0 4 1351 60 PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear 0 1 55 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2f > >::clear(void);

746 6 output 0 4 1351 61 PointerToBase< ReferenceCountedVector< LVecBase2f > >::output 0 1 56 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2f > >::output(ostream &out) const;

747 19 ~PointerToArrayBase 0 4 1350 53 PointerToArrayBase< LVecBase2f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2f >::~PointerToArrayBase(void);

748 19 ConstPointerToArray 0 4 1349 54 ConstPointerToArray< LVecBase2f >::ConstPointerToArray 0 3 43 44 45 0
304
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PointerToArray< LVecBase2f > const &copy);
inline ConstPointerToArray< LVecBase2f >::ConstPointerToArray(ConstPointerToArray< LVecBase2f > const &copy);
ConstPointerToArray< LVecBase2f >::ConstPointerToArray(PyObject *self, PyObject *source);

749 4 size 0 4 1349 39 ConstPointerToArray< LVecBase2f >::size 0 1 46 0
77
inline unsigned long int ConstPointerToArray< LVecBase2f >::size(void) const;

750 11 get_element 0 4 1349 46 ConstPointerToArray< LVecBase2f >::get_element 0 1 47 0
99
inline LVecBase2f const &ConstPointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

751 11 __getitem__ 0 4 1349 46 ConstPointerToArray< LVecBase2f >::__getitem__ 0 1 48 0
92
LVecBase2f const &ConstPointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

752 8 get_data 0 4 1349 43 ConstPointerToArray< LVecBase2f >::get_data 0 1 49 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2f >::get_data(void) const;

753 11 get_subdata 0 4 1349 46 ConstPointerToArray< LVecBase2f >::get_subdata 0 1 50 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

754 13 get_ref_count 0 4 1349 48 ConstPointerToArray< LVecBase2f >::get_ref_count 0 1 51 0
72
inline int ConstPointerToArray< LVecBase2f >::get_ref_count(void) const;

755 18 get_node_ref_count 0 4 1349 53 ConstPointerToArray< LVecBase2f >::get_node_ref_count 0 1 52 0
77
inline int ConstPointerToArray< LVecBase2f >::get_node_ref_count(void) const;

756 13 __getbuffer__ 0 4 1349 48 ConstPointerToArray< LVecBase2f >::__getbuffer__ 0 1 53 0
103
int ConstPointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

757 17 __releasebuffer__ 0 4 1349 52 ConstPointerToArray< LVecBase2f >::__releasebuffer__ 0 1 54 0
97
void ConstPointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

758 20 ~ConstPointerToArray 0 4 1349 55 ConstPointerToArray< LVecBase2f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2f >::~ConstPointerToArray(void);

759 5 clear 0 4 1354 60 PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear 0 1 69 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase2i > >::clear(void);

760 6 output 0 4 1354 61 PointerToBase< ReferenceCountedVector< LVecBase2i > >::output 0 1 70 0
87
void PointerToBase< ReferenceCountedVector< LVecBase2i > >::output(ostream &out) const;

761 19 ~PointerToArrayBase 0 4 1353 53 PointerToArrayBase< LVecBase2i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase2i >::~PointerToArrayBase(void);

762 19 ConstPointerToArray 0 4 1352 54 ConstPointerToArray< LVecBase2i >::ConstPointerToArray 0 3 57 58 59 0
304
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PointerToArray< LVecBase2i > const &copy);
inline ConstPointerToArray< LVecBase2i >::ConstPointerToArray(ConstPointerToArray< LVecBase2i > const &copy);
ConstPointerToArray< LVecBase2i >::ConstPointerToArray(PyObject *self, PyObject *source);

763 4 size 0 4 1352 39 ConstPointerToArray< LVecBase2i >::size 0 1 60 0
77
inline unsigned long int ConstPointerToArray< LVecBase2i >::size(void) const;

764 11 get_element 0 4 1352 46 ConstPointerToArray< LVecBase2i >::get_element 0 1 61 0
99
inline LVecBase2i const &ConstPointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

765 11 __getitem__ 0 4 1352 46 ConstPointerToArray< LVecBase2i >::__getitem__ 0 1 62 0
92
LVecBase2i const &ConstPointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

766 8 get_data 0 4 1352 43 ConstPointerToArray< LVecBase2i >::get_data 0 1 63 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase2i >::get_data(void) const;

767 11 get_subdata 0 4 1352 46 ConstPointerToArray< LVecBase2i >::get_subdata 0 1 64 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

768 13 get_ref_count 0 4 1352 48 ConstPointerToArray< LVecBase2i >::get_ref_count 0 1 65 0
72
inline int ConstPointerToArray< LVecBase2i >::get_ref_count(void) const;

769 18 get_node_ref_count 0 4 1352 53 ConstPointerToArray< LVecBase2i >::get_node_ref_count 0 1 66 0
77
inline int ConstPointerToArray< LVecBase2i >::get_node_ref_count(void) const;

770 13 __getbuffer__ 0 4 1352 48 ConstPointerToArray< LVecBase2i >::__getbuffer__ 0 1 67 0
103
int ConstPointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

771 17 __releasebuffer__ 0 4 1352 52 ConstPointerToArray< LVecBase2i >::__releasebuffer__ 0 1 68 0
97
void ConstPointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

772 20 ~ConstPointerToArray 0 4 1352 55 ConstPointerToArray< LVecBase2i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase2i >::~ConstPointerToArray(void);

773 5 clear 0 4 1357 60 PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear 0 1 83 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3d > >::clear(void);

774 6 output 0 4 1357 61 PointerToBase< ReferenceCountedVector< LVecBase3d > >::output 0 1 84 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3d > >::output(ostream &out) const;

775 19 ~PointerToArrayBase 0 4 1356 53 PointerToArrayBase< LVecBase3d >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3d >::~PointerToArrayBase(void);

776 19 ConstPointerToArray 0 4 1355 54 ConstPointerToArray< LVecBase3d >::ConstPointerToArray 0 3 71 72 73 0
304
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PointerToArray< LVecBase3d > const &copy);
inline ConstPointerToArray< LVecBase3d >::ConstPointerToArray(ConstPointerToArray< LVecBase3d > const &copy);
ConstPointerToArray< LVecBase3d >::ConstPointerToArray(PyObject *self, PyObject *source);

777 4 size 0 4 1355 39 ConstPointerToArray< LVecBase3d >::size 0 1 74 0
77
inline unsigned long int ConstPointerToArray< LVecBase3d >::size(void) const;

778 11 get_element 0 4 1355 46 ConstPointerToArray< LVecBase3d >::get_element 0 1 75 0
99
inline LVecBase3d const &ConstPointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

779 11 __getitem__ 0 4 1355 46 ConstPointerToArray< LVecBase3d >::__getitem__ 0 1 76 0
92
LVecBase3d const &ConstPointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

780 8 get_data 0 4 1355 43 ConstPointerToArray< LVecBase3d >::get_data 0 1 77 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3d >::get_data(void) const;

781 11 get_subdata 0 4 1355 46 ConstPointerToArray< LVecBase3d >::get_subdata 0 1 78 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

782 13 get_ref_count 0 4 1355 48 ConstPointerToArray< LVecBase3d >::get_ref_count 0 1 79 0
72
inline int ConstPointerToArray< LVecBase3d >::get_ref_count(void) const;

783 18 get_node_ref_count 0 4 1355 53 ConstPointerToArray< LVecBase3d >::get_node_ref_count 0 1 80 0
77
inline int ConstPointerToArray< LVecBase3d >::get_node_ref_count(void) const;

784 13 __getbuffer__ 0 4 1355 48 ConstPointerToArray< LVecBase3d >::__getbuffer__ 0 1 81 0
103
int ConstPointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

785 17 __releasebuffer__ 0 4 1355 52 ConstPointerToArray< LVecBase3d >::__releasebuffer__ 0 1 82 0
97
void ConstPointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

786 20 ~ConstPointerToArray 0 4 1355 55 ConstPointerToArray< LVecBase3d >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3d >::~ConstPointerToArray(void);

787 5 clear 0 4 1360 60 PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear 0 1 97 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3f > >::clear(void);

788 6 output 0 4 1360 61 PointerToBase< ReferenceCountedVector< LVecBase3f > >::output 0 1 98 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3f > >::output(ostream &out) const;

789 19 ~PointerToArrayBase 0 4 1359 53 PointerToArrayBase< LVecBase3f >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3f >::~PointerToArrayBase(void);

790 19 ConstPointerToArray 0 4 1358 54 ConstPointerToArray< LVecBase3f >::ConstPointerToArray 0 3 85 86 87 0
304
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PointerToArray< LVecBase3f > const &copy);
inline ConstPointerToArray< LVecBase3f >::ConstPointerToArray(ConstPointerToArray< LVecBase3f > const &copy);
ConstPointerToArray< LVecBase3f >::ConstPointerToArray(PyObject *self, PyObject *source);

791 4 size 0 4 1358 39 ConstPointerToArray< LVecBase3f >::size 0 1 88 0
77
inline unsigned long int ConstPointerToArray< LVecBase3f >::size(void) const;

792 11 get_element 0 4 1358 46 ConstPointerToArray< LVecBase3f >::get_element 0 1 89 0
99
inline LVecBase3f const &ConstPointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

793 11 __getitem__ 0 4 1358 46 ConstPointerToArray< LVecBase3f >::__getitem__ 0 1 90 0
92
LVecBase3f const &ConstPointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

794 8 get_data 0 4 1358 43 ConstPointerToArray< LVecBase3f >::get_data 0 1 91 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3f >::get_data(void) const;

795 11 get_subdata 0 4 1358 46 ConstPointerToArray< LVecBase3f >::get_subdata 0 1 92 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

796 13 get_ref_count 0 4 1358 48 ConstPointerToArray< LVecBase3f >::get_ref_count 0 1 93 0
72
inline int ConstPointerToArray< LVecBase3f >::get_ref_count(void) const;

797 18 get_node_ref_count 0 4 1358 53 ConstPointerToArray< LVecBase3f >::get_node_ref_count 0 1 94 0
77
inline int ConstPointerToArray< LVecBase3f >::get_node_ref_count(void) const;

798 13 __getbuffer__ 0 4 1358 48 ConstPointerToArray< LVecBase3f >::__getbuffer__ 0 1 95 0
103
int ConstPointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

799 17 __releasebuffer__ 0 4 1358 52 ConstPointerToArray< LVecBase3f >::__releasebuffer__ 0 1 96 0
97
void ConstPointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

800 20 ~ConstPointerToArray 0 4 1358 55 ConstPointerToArray< LVecBase3f >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3f >::~ConstPointerToArray(void);

801 5 clear 0 4 1363 60 PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear 0 1 111 0
79
inline void PointerToBase< ReferenceCountedVector< LVecBase3i > >::clear(void);

802 6 output 0 4 1363 61 PointerToBase< ReferenceCountedVector< LVecBase3i > >::output 0 1 112 0
87
void PointerToBase< ReferenceCountedVector< LVecBase3i > >::output(ostream &out) const;

803 19 ~PointerToArrayBase 0 4 1362 53 PointerToArrayBase< LVecBase3i >::~PointerToArrayBase 0 0 0
67
inline PointerToArrayBase< LVecBase3i >::~PointerToArrayBase(void);

804 19 ConstPointerToArray 0 4 1361 54 ConstPointerToArray< LVecBase3i >::ConstPointerToArray 0 3 99 100 101 0
304
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PointerToArray< LVecBase3i > const &copy);
inline ConstPointerToArray< LVecBase3i >::ConstPointerToArray(ConstPointerToArray< LVecBase3i > const &copy);
ConstPointerToArray< LVecBase3i >::ConstPointerToArray(PyObject *self, PyObject *source);

805 4 size 0 4 1361 39 ConstPointerToArray< LVecBase3i >::size 0 1 102 0
77
inline unsigned long int ConstPointerToArray< LVecBase3i >::size(void) const;

806 11 get_element 0 4 1361 46 ConstPointerToArray< LVecBase3i >::get_element 0 1 103 0
99
inline LVecBase3i const &ConstPointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

807 11 __getitem__ 0 4 1361 46 ConstPointerToArray< LVecBase3i >::__getitem__ 0 1 104 0
92
LVecBase3i const &ConstPointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

808 8 get_data 0 4 1361 43 ConstPointerToArray< LVecBase3i >::get_data 0 1 105 0
89
inline std::basic_string< char > ConstPointerToArray< LVecBase3i >::get_data(void) const;

809 11 get_subdata 0 4 1361 46 ConstPointerToArray< LVecBase3i >::get_subdata 0 1 106 0
132
inline std::basic_string< char > ConstPointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

810 13 get_ref_count 0 4 1361 48 ConstPointerToArray< LVecBase3i >::get_ref_count 0 1 107 0
72
inline int ConstPointerToArray< LVecBase3i >::get_ref_count(void) const;

811 18 get_node_ref_count 0 4 1361 53 ConstPointerToArray< LVecBase3i >::get_node_ref_count 0 1 108 0
77
inline int ConstPointerToArray< LVecBase3i >::get_node_ref_count(void) const;

812 13 __getbuffer__ 0 4 1361 48 ConstPointerToArray< LVecBase3i >::__getbuffer__ 0 1 109 0
103
int ConstPointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

813 17 __releasebuffer__ 0 4 1361 52 ConstPointerToArray< LVecBase3i >::__releasebuffer__ 0 1 110 0
97
void ConstPointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

814 20 ~ConstPointerToArray 0 4 1361 55 ConstPointerToArray< LVecBase3i >::~ConstPointerToArray 0 0 0
62
ConstPointerToArray< LVecBase3i >::~ConstPointerToArray(void);

815 5 clear 0 4 1366 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear 0 1 125 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::clear(void);

816 6 output 0 4 1366 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output 0 1 126 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > >::output(ostream &out) const;

817 19 ~PointerToArrayBase 0 4 1365 61 PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4d >::~PointerToArrayBase(void);

818 19 ConstPointerToArray 0 4 1364 62 ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray 0 3 113 114 115 0
344
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4d > const &copy);
ConstPointerToArray< UnalignedLMatrix4d >::ConstPointerToArray(PyObject *self, PyObject *source);

819 4 size 0 4 1364 47 ConstPointerToArray< UnalignedLMatrix4d >::size 0 1 116 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4d >::size(void) const;

820 11 get_element 0 4 1364 54 ConstPointerToArray< UnalignedLMatrix4d >::get_element 0 1 117 0
115
inline UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

821 11 __getitem__ 0 4 1364 54 ConstPointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 118 0
108
UnalignedLMatrix4d const &ConstPointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

822 8 get_data 0 4 1364 51 ConstPointerToArray< UnalignedLMatrix4d >::get_data 0 1 119 0
97
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_data(void) const;

823 11 get_subdata 0 4 1364 54 ConstPointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 120 0
140
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

824 13 get_ref_count 0 4 1364 56 ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 121 0
80
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

825 18 get_node_ref_count 0 4 1364 61 ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 122 0
85
inline int ConstPointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

826 13 __getbuffer__ 0 4 1364 56 ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 123 0
111
int ConstPointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

827 17 __releasebuffer__ 0 4 1364 60 ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 124 0
105
void ConstPointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

828 20 ~ConstPointerToArray 0 4 1364 63 ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4d >::~ConstPointerToArray(void);

829 5 clear 0 4 1369 68 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear 0 1 139 0
87
inline void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::clear(void);

830 6 output 0 4 1369 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output 0 1 140 0
95
void PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > >::output(ostream &out) const;

831 19 ~PointerToArrayBase 0 4 1368 61 PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase 0 0 0
75
inline PointerToArrayBase< UnalignedLMatrix4f >::~PointerToArrayBase(void);

832 19 ConstPointerToArray 0 4 1367 62 ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray 0 3 127 128 129 0
344
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
inline ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLMatrix4f > const &copy);
ConstPointerToArray< UnalignedLMatrix4f >::ConstPointerToArray(PyObject *self, PyObject *source);

833 4 size 0 4 1367 47 ConstPointerToArray< UnalignedLMatrix4f >::size 0 1 130 0
85
inline unsigned long int ConstPointerToArray< UnalignedLMatrix4f >::size(void) const;

834 11 get_element 0 4 1367 54 ConstPointerToArray< UnalignedLMatrix4f >::get_element 0 1 131 0
115
inline UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

835 11 __getitem__ 0 4 1367 54 ConstPointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 132 0
108
UnalignedLMatrix4f const &ConstPointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

836 8 get_data 0 4 1367 51 ConstPointerToArray< UnalignedLMatrix4f >::get_data 0 1 133 0
97
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_data(void) const;

837 11 get_subdata 0 4 1367 54 ConstPointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 134 0
140
inline std::basic_string< char > ConstPointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

838 13 get_ref_count 0 4 1367 56 ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 135 0
80
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

839 18 get_node_ref_count 0 4 1367 61 ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 136 0
85
inline int ConstPointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

840 13 __getbuffer__ 0 4 1367 56 ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 137 0
111
int ConstPointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

841 17 __releasebuffer__ 0 4 1367 60 ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 138 0
105
void ConstPointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

842 20 ~ConstPointerToArray 0 4 1367 63 ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray 0 0 0
70
ConstPointerToArray< UnalignedLMatrix4f >::~ConstPointerToArray(void);

843 5 clear 0 4 1372 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear 0 1 153 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::clear(void);

844 6 output 0 4 1372 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output 0 1 154 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > >::output(ostream &out) const;

845 19 ~PointerToArrayBase 0 4 1371 62 PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4d >::~PointerToArrayBase(void);

846 19 ConstPointerToArray 0 4 1370 63 ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray 0 3 141 142 143 0
349
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4d > const &copy);
ConstPointerToArray< UnalignedLVecBase4d >::ConstPointerToArray(PyObject *self, PyObject *source);

847 4 size 0 4 1370 48 ConstPointerToArray< UnalignedLVecBase4d >::size 0 1 144 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4d >::size(void) const;

848 11 get_element 0 4 1370 55 ConstPointerToArray< UnalignedLVecBase4d >::get_element 0 1 145 0
117
inline UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

849 11 __getitem__ 0 4 1370 55 ConstPointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 146 0
110
UnalignedLVecBase4d const &ConstPointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

850 8 get_data 0 4 1370 52 ConstPointerToArray< UnalignedLVecBase4d >::get_data 0 1 147 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_data(void) const;

851 11 get_subdata 0 4 1370 55 ConstPointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 148 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

852 13 get_ref_count 0 4 1370 57 ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 149 0
81
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

853 18 get_node_ref_count 0 4 1370 62 ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 150 0
86
inline int ConstPointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

854 13 __getbuffer__ 0 4 1370 57 ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 151 0
112
int ConstPointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

855 17 __releasebuffer__ 0 4 1370 61 ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 152 0
106
void ConstPointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

856 20 ~ConstPointerToArray 0 4 1370 64 ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4d >::~ConstPointerToArray(void);

857 5 clear 0 4 1375 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear 0 1 167 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::clear(void);

858 6 output 0 4 1375 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output 0 1 168 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > >::output(ostream &out) const;

859 19 ~PointerToArrayBase 0 4 1374 62 PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4f >::~PointerToArrayBase(void);

860 19 ConstPointerToArray 0 4 1373 63 ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray 0 3 155 156 157 0
349
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4f > const &copy);
ConstPointerToArray< UnalignedLVecBase4f >::ConstPointerToArray(PyObject *self, PyObject *source);

861 4 size 0 4 1373 48 ConstPointerToArray< UnalignedLVecBase4f >::size 0 1 158 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4f >::size(void) const;

862 11 get_element 0 4 1373 55 ConstPointerToArray< UnalignedLVecBase4f >::get_element 0 1 159 0
117
inline UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

863 11 __getitem__ 0 4 1373 55 ConstPointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 160 0
110
UnalignedLVecBase4f const &ConstPointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

864 8 get_data 0 4 1373 52 ConstPointerToArray< UnalignedLVecBase4f >::get_data 0 1 161 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_data(void) const;

865 11 get_subdata 0 4 1373 55 ConstPointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 162 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

866 13 get_ref_count 0 4 1373 57 ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 163 0
81
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

867 18 get_node_ref_count 0 4 1373 62 ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 164 0
86
inline int ConstPointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

868 13 __getbuffer__ 0 4 1373 57 ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 165 0
112
int ConstPointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

869 17 __releasebuffer__ 0 4 1373 61 ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 166 0
106
void ConstPointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

870 20 ~ConstPointerToArray 0 4 1373 64 ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4f >::~ConstPointerToArray(void);

871 5 clear 0 4 1378 69 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear 0 1 181 0
88
inline void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::clear(void);

872 6 output 0 4 1378 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output 0 1 182 0
96
void PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > >::output(ostream &out) const;

873 19 ~PointerToArrayBase 0 4 1377 62 PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase 0 0 0
76
inline PointerToArrayBase< UnalignedLVecBase4i >::~PointerToArrayBase(void);

874 19 ConstPointerToArray 0 4 1376 63 ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray 0 3 169 170 171 0
349
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
inline ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(ConstPointerToArray< UnalignedLVecBase4i > const &copy);
ConstPointerToArray< UnalignedLVecBase4i >::ConstPointerToArray(PyObject *self, PyObject *source);

875 4 size 0 4 1376 48 ConstPointerToArray< UnalignedLVecBase4i >::size 0 1 172 0
86
inline unsigned long int ConstPointerToArray< UnalignedLVecBase4i >::size(void) const;

876 11 get_element 0 4 1376 55 ConstPointerToArray< UnalignedLVecBase4i >::get_element 0 1 173 0
117
inline UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

877 11 __getitem__ 0 4 1376 55 ConstPointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 174 0
110
UnalignedLVecBase4i const &ConstPointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

878 8 get_data 0 4 1376 52 ConstPointerToArray< UnalignedLVecBase4i >::get_data 0 1 175 0
98
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_data(void) const;

879 11 get_subdata 0 4 1376 55 ConstPointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 176 0
141
inline std::basic_string< char > ConstPointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

880 13 get_ref_count 0 4 1376 57 ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 177 0
81
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

881 18 get_node_ref_count 0 4 1376 62 ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 178 0
86
inline int ConstPointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

882 13 __getbuffer__ 0 4 1376 57 ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 179 0
112
int ConstPointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

883 17 __releasebuffer__ 0 4 1376 61 ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 180 0
106
void ConstPointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

884 20 ~ConstPointerToArray 0 4 1376 64 ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray 0 0 0
71
ConstPointerToArray< UnalignedLVecBase4i >::~ConstPointerToArray(void);

885 14 PointerToArray 0 4 1379 43 PointerToArray< LMatrix3d >::PointerToArray 0 3 183 184 185 0
292
inline PointerToArray< LMatrix3d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LMatrix3d const *)(0))));
inline PointerToArray< LMatrix3d >::PointerToArray(PointerToArray< LMatrix3d > const &copy);
PointerToArray< LMatrix3d >::PointerToArray(PyObject *self, PyObject *source);

886 11 empty_array 0 4 1379 40 PointerToArray< LMatrix3d >::empty_array 0 1 186 0
173
static inline PointerToArray< LMatrix3d > PointerToArray< LMatrix3d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LMatrix3d const *)(0))));

887 4 size 0 4 1379 33 PointerToArray< LMatrix3d >::size 0 1 187 0
71
inline unsigned long int PointerToArray< LMatrix3d >::size(void) const;

888 9 push_back 0 4 1379 38 PointerToArray< LMatrix3d >::push_back 0 1 188 0
71
inline void PointerToArray< LMatrix3d >::push_back(LMatrix3d const &x);

889 8 pop_back 0 4 1379 37 PointerToArray< LMatrix3d >::pop_back 0 1 189 0
56
inline void PointerToArray< LMatrix3d >::pop_back(void);

890 11 get_element 0 4 1379 40 PointerToArray< LMatrix3d >::get_element 0 1 190 0
92
inline LMatrix3d const &PointerToArray< LMatrix3d >::get_element(unsigned long int n) const;

891 11 set_element 0 4 1379 40 PointerToArray< LMatrix3d >::set_element 0 1 191 0
98
inline void PointerToArray< LMatrix3d >::set_element(unsigned long int n, LMatrix3d const &value);

892 11 __getitem__ 0 4 1379 40 PointerToArray< LMatrix3d >::__getitem__ 0 1 192 0
85
LMatrix3d const &PointerToArray< LMatrix3d >::__getitem__(unsigned long int n) const;

893 11 __setitem__ 0 4 1379 40 PointerToArray< LMatrix3d >::__setitem__ 0 1 193 0
91
void PointerToArray< LMatrix3d >::__setitem__(unsigned long int n, LMatrix3d const &value);

894 8 get_data 0 4 1379 37 PointerToArray< LMatrix3d >::get_data 0 1 194 0
83
inline std::basic_string< char > PointerToArray< LMatrix3d >::get_data(void) const;

895 8 set_data 0 4 1379 37 PointerToArray< LMatrix3d >::set_data 0 1 195 0
89
inline void PointerToArray< LMatrix3d >::set_data(std::basic_string< char > const &data);

896 11 get_subdata 0 4 1379 40 PointerToArray< LMatrix3d >::get_subdata 0 1 196 0
126
inline std::basic_string< char > PointerToArray< LMatrix3d >::get_subdata(unsigned long int n, unsigned long int count) const;

897 11 set_subdata 0 4 1379 40 PointerToArray< LMatrix3d >::set_subdata 0 1 197 0
138
inline void PointerToArray< LMatrix3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

898 13 get_ref_count 0 4 1379 42 PointerToArray< LMatrix3d >::get_ref_count 0 1 198 0
66
inline int PointerToArray< LMatrix3d >::get_ref_count(void) const;

899 18 get_node_ref_count 0 4 1379 47 PointerToArray< LMatrix3d >::get_node_ref_count 0 1 199 0
71
inline int PointerToArray< LMatrix3d >::get_node_ref_count(void) const;

900 13 __getbuffer__ 0 4 1379 42 PointerToArray< LMatrix3d >::__getbuffer__ 0 1 200 0
91
int PointerToArray< LMatrix3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

901 17 __releasebuffer__ 0 4 1379 46 PointerToArray< LMatrix3d >::__releasebuffer__ 0 1 201 0
91
void PointerToArray< LMatrix3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

902 15 ~PointerToArray 0 4 1379 44 PointerToArray< LMatrix3d >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3d >::~PointerToArray(void);

903 14 PointerToArray 0 4 1380 43 PointerToArray< LMatrix3f >::PointerToArray 0 3 202 203 204 0
292
inline PointerToArray< LMatrix3f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LMatrix3f const *)(0))));
inline PointerToArray< LMatrix3f >::PointerToArray(PointerToArray< LMatrix3f > const &copy);
PointerToArray< LMatrix3f >::PointerToArray(PyObject *self, PyObject *source);

904 11 empty_array 0 4 1380 40 PointerToArray< LMatrix3f >::empty_array 0 1 205 0
173
static inline PointerToArray< LMatrix3f > PointerToArray< LMatrix3f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LMatrix3f const *)(0))));

905 4 size 0 4 1380 33 PointerToArray< LMatrix3f >::size 0 1 206 0
71
inline unsigned long int PointerToArray< LMatrix3f >::size(void) const;

906 9 push_back 0 4 1380 38 PointerToArray< LMatrix3f >::push_back 0 1 207 0
71
inline void PointerToArray< LMatrix3f >::push_back(LMatrix3f const &x);

907 8 pop_back 0 4 1380 37 PointerToArray< LMatrix3f >::pop_back 0 1 208 0
56
inline void PointerToArray< LMatrix3f >::pop_back(void);

908 11 get_element 0 4 1380 40 PointerToArray< LMatrix3f >::get_element 0 1 209 0
92
inline LMatrix3f const &PointerToArray< LMatrix3f >::get_element(unsigned long int n) const;

909 11 set_element 0 4 1380 40 PointerToArray< LMatrix3f >::set_element 0 1 210 0
98
inline void PointerToArray< LMatrix3f >::set_element(unsigned long int n, LMatrix3f const &value);

910 11 __getitem__ 0 4 1380 40 PointerToArray< LMatrix3f >::__getitem__ 0 1 211 0
85
LMatrix3f const &PointerToArray< LMatrix3f >::__getitem__(unsigned long int n) const;

911 11 __setitem__ 0 4 1380 40 PointerToArray< LMatrix3f >::__setitem__ 0 1 212 0
91
void PointerToArray< LMatrix3f >::__setitem__(unsigned long int n, LMatrix3f const &value);

912 8 get_data 0 4 1380 37 PointerToArray< LMatrix3f >::get_data 0 1 213 0
83
inline std::basic_string< char > PointerToArray< LMatrix3f >::get_data(void) const;

913 8 set_data 0 4 1380 37 PointerToArray< LMatrix3f >::set_data 0 1 214 0
89
inline void PointerToArray< LMatrix3f >::set_data(std::basic_string< char > const &data);

914 11 get_subdata 0 4 1380 40 PointerToArray< LMatrix3f >::get_subdata 0 1 215 0
126
inline std::basic_string< char > PointerToArray< LMatrix3f >::get_subdata(unsigned long int n, unsigned long int count) const;

915 11 set_subdata 0 4 1380 40 PointerToArray< LMatrix3f >::set_subdata 0 1 216 0
138
inline void PointerToArray< LMatrix3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

916 13 get_ref_count 0 4 1380 42 PointerToArray< LMatrix3f >::get_ref_count 0 1 217 0
66
inline int PointerToArray< LMatrix3f >::get_ref_count(void) const;

917 18 get_node_ref_count 0 4 1380 47 PointerToArray< LMatrix3f >::get_node_ref_count 0 1 218 0
71
inline int PointerToArray< LMatrix3f >::get_node_ref_count(void) const;

918 13 __getbuffer__ 0 4 1380 42 PointerToArray< LMatrix3f >::__getbuffer__ 0 1 219 0
91
int PointerToArray< LMatrix3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

919 17 __releasebuffer__ 0 4 1380 46 PointerToArray< LMatrix3f >::__releasebuffer__ 0 1 220 0
91
void PointerToArray< LMatrix3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

920 15 ~PointerToArray 0 4 1380 44 PointerToArray< LMatrix3f >::~PointerToArray 0 0 0
51
PointerToArray< LMatrix3f >::~PointerToArray(void);

921 14 PointerToArray 0 4 1381 44 PointerToArray< LVecBase2d >::PointerToArray 0 3 221 222 223 0
297
inline PointerToArray< LVecBase2d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2d const *)(0))));
inline PointerToArray< LVecBase2d >::PointerToArray(PointerToArray< LVecBase2d > const &copy);
PointerToArray< LVecBase2d >::PointerToArray(PyObject *self, PyObject *source);

922 11 empty_array 0 4 1381 41 PointerToArray< LVecBase2d >::empty_array 0 1 224 0
176
static inline PointerToArray< LVecBase2d > PointerToArray< LVecBase2d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2d const *)(0))));

923 4 size 0 4 1381 34 PointerToArray< LVecBase2d >::size 0 1 225 0
72
inline unsigned long int PointerToArray< LVecBase2d >::size(void) const;

924 9 push_back 0 4 1381 39 PointerToArray< LVecBase2d >::push_back 0 1 226 0
73
inline void PointerToArray< LVecBase2d >::push_back(LVecBase2d const &x);

925 8 pop_back 0 4 1381 38 PointerToArray< LVecBase2d >::pop_back 0 1 227 0
57
inline void PointerToArray< LVecBase2d >::pop_back(void);

926 11 get_element 0 4 1381 41 PointerToArray< LVecBase2d >::get_element 0 1 228 0
94
inline LVecBase2d const &PointerToArray< LVecBase2d >::get_element(unsigned long int n) const;

927 11 set_element 0 4 1381 41 PointerToArray< LVecBase2d >::set_element 0 1 229 0
100
inline void PointerToArray< LVecBase2d >::set_element(unsigned long int n, LVecBase2d const &value);

928 11 __getitem__ 0 4 1381 41 PointerToArray< LVecBase2d >::__getitem__ 0 1 230 0
87
LVecBase2d const &PointerToArray< LVecBase2d >::__getitem__(unsigned long int n) const;

929 11 __setitem__ 0 4 1381 41 PointerToArray< LVecBase2d >::__setitem__ 0 1 231 0
93
void PointerToArray< LVecBase2d >::__setitem__(unsigned long int n, LVecBase2d const &value);

930 8 get_data 0 4 1381 38 PointerToArray< LVecBase2d >::get_data 0 1 232 0
84
inline std::basic_string< char > PointerToArray< LVecBase2d >::get_data(void) const;

931 8 set_data 0 4 1381 38 PointerToArray< LVecBase2d >::set_data 0 1 233 0
90
inline void PointerToArray< LVecBase2d >::set_data(std::basic_string< char > const &data);

932 11 get_subdata 0 4 1381 41 PointerToArray< LVecBase2d >::get_subdata 0 1 234 0
127
inline std::basic_string< char > PointerToArray< LVecBase2d >::get_subdata(unsigned long int n, unsigned long int count) const;

933 11 set_subdata 0 4 1381 41 PointerToArray< LVecBase2d >::set_subdata 0 1 235 0
139
inline void PointerToArray< LVecBase2d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

934 13 get_ref_count 0 4 1381 43 PointerToArray< LVecBase2d >::get_ref_count 0 1 236 0
67
inline int PointerToArray< LVecBase2d >::get_ref_count(void) const;

935 18 get_node_ref_count 0 4 1381 48 PointerToArray< LVecBase2d >::get_node_ref_count 0 1 237 0
72
inline int PointerToArray< LVecBase2d >::get_node_ref_count(void) const;

936 13 __getbuffer__ 0 4 1381 43 PointerToArray< LVecBase2d >::__getbuffer__ 0 1 238 0
92
int PointerToArray< LVecBase2d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

937 17 __releasebuffer__ 0 4 1381 47 PointerToArray< LVecBase2d >::__releasebuffer__ 0 1 239 0
92
void PointerToArray< LVecBase2d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

938 15 ~PointerToArray 0 4 1381 45 PointerToArray< LVecBase2d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2d >::~PointerToArray(void);

939 14 PointerToArray 0 4 1382 44 PointerToArray< LVecBase2f >::PointerToArray 0 3 240 241 242 0
297
inline PointerToArray< LVecBase2f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2f const *)(0))));
inline PointerToArray< LVecBase2f >::PointerToArray(PointerToArray< LVecBase2f > const &copy);
PointerToArray< LVecBase2f >::PointerToArray(PyObject *self, PyObject *source);

940 11 empty_array 0 4 1382 41 PointerToArray< LVecBase2f >::empty_array 0 1 243 0
176
static inline PointerToArray< LVecBase2f > PointerToArray< LVecBase2f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2f const *)(0))));

941 4 size 0 4 1382 34 PointerToArray< LVecBase2f >::size 0 1 244 0
72
inline unsigned long int PointerToArray< LVecBase2f >::size(void) const;

942 9 push_back 0 4 1382 39 PointerToArray< LVecBase2f >::push_back 0 1 245 0
73
inline void PointerToArray< LVecBase2f >::push_back(LVecBase2f const &x);

943 8 pop_back 0 4 1382 38 PointerToArray< LVecBase2f >::pop_back 0 1 246 0
57
inline void PointerToArray< LVecBase2f >::pop_back(void);

944 11 get_element 0 4 1382 41 PointerToArray< LVecBase2f >::get_element 0 1 247 0
94
inline LVecBase2f const &PointerToArray< LVecBase2f >::get_element(unsigned long int n) const;

945 11 set_element 0 4 1382 41 PointerToArray< LVecBase2f >::set_element 0 1 248 0
100
inline void PointerToArray< LVecBase2f >::set_element(unsigned long int n, LVecBase2f const &value);

946 11 __getitem__ 0 4 1382 41 PointerToArray< LVecBase2f >::__getitem__ 0 1 249 0
87
LVecBase2f const &PointerToArray< LVecBase2f >::__getitem__(unsigned long int n) const;

947 11 __setitem__ 0 4 1382 41 PointerToArray< LVecBase2f >::__setitem__ 0 1 250 0
93
void PointerToArray< LVecBase2f >::__setitem__(unsigned long int n, LVecBase2f const &value);

948 8 get_data 0 4 1382 38 PointerToArray< LVecBase2f >::get_data 0 1 251 0
84
inline std::basic_string< char > PointerToArray< LVecBase2f >::get_data(void) const;

949 8 set_data 0 4 1382 38 PointerToArray< LVecBase2f >::set_data 0 1 252 0
90
inline void PointerToArray< LVecBase2f >::set_data(std::basic_string< char > const &data);

950 11 get_subdata 0 4 1382 41 PointerToArray< LVecBase2f >::get_subdata 0 1 253 0
127
inline std::basic_string< char > PointerToArray< LVecBase2f >::get_subdata(unsigned long int n, unsigned long int count) const;

951 11 set_subdata 0 4 1382 41 PointerToArray< LVecBase2f >::set_subdata 0 1 254 0
139
inline void PointerToArray< LVecBase2f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

952 13 get_ref_count 0 4 1382 43 PointerToArray< LVecBase2f >::get_ref_count 0 1 255 0
67
inline int PointerToArray< LVecBase2f >::get_ref_count(void) const;

953 18 get_node_ref_count 0 4 1382 48 PointerToArray< LVecBase2f >::get_node_ref_count 0 1 256 0
72
inline int PointerToArray< LVecBase2f >::get_node_ref_count(void) const;

954 13 __getbuffer__ 0 4 1382 43 PointerToArray< LVecBase2f >::__getbuffer__ 0 1 257 0
92
int PointerToArray< LVecBase2f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

955 17 __releasebuffer__ 0 4 1382 47 PointerToArray< LVecBase2f >::__releasebuffer__ 0 1 258 0
92
void PointerToArray< LVecBase2f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

956 15 ~PointerToArray 0 4 1382 45 PointerToArray< LVecBase2f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2f >::~PointerToArray(void);

957 14 PointerToArray 0 4 1383 44 PointerToArray< LVecBase2i >::PointerToArray 0 3 259 260 261 0
297
inline PointerToArray< LVecBase2i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase2i const *)(0))));
inline PointerToArray< LVecBase2i >::PointerToArray(PointerToArray< LVecBase2i > const &copy);
PointerToArray< LVecBase2i >::PointerToArray(PyObject *self, PyObject *source);

958 11 empty_array 0 4 1383 41 PointerToArray< LVecBase2i >::empty_array 0 1 262 0
176
static inline PointerToArray< LVecBase2i > PointerToArray< LVecBase2i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase2i const *)(0))));

959 4 size 0 4 1383 34 PointerToArray< LVecBase2i >::size 0 1 263 0
72
inline unsigned long int PointerToArray< LVecBase2i >::size(void) const;

960 9 push_back 0 4 1383 39 PointerToArray< LVecBase2i >::push_back 0 1 264 0
73
inline void PointerToArray< LVecBase2i >::push_back(LVecBase2i const &x);

961 8 pop_back 0 4 1383 38 PointerToArray< LVecBase2i >::pop_back 0 1 265 0
57
inline void PointerToArray< LVecBase2i >::pop_back(void);

962 11 get_element 0 4 1383 41 PointerToArray< LVecBase2i >::get_element 0 1 266 0
94
inline LVecBase2i const &PointerToArray< LVecBase2i >::get_element(unsigned long int n) const;

963 11 set_element 0 4 1383 41 PointerToArray< LVecBase2i >::set_element 0 1 267 0
100
inline void PointerToArray< LVecBase2i >::set_element(unsigned long int n, LVecBase2i const &value);

964 11 __getitem__ 0 4 1383 41 PointerToArray< LVecBase2i >::__getitem__ 0 1 268 0
87
LVecBase2i const &PointerToArray< LVecBase2i >::__getitem__(unsigned long int n) const;

965 11 __setitem__ 0 4 1383 41 PointerToArray< LVecBase2i >::__setitem__ 0 1 269 0
93
void PointerToArray< LVecBase2i >::__setitem__(unsigned long int n, LVecBase2i const &value);

966 8 get_data 0 4 1383 38 PointerToArray< LVecBase2i >::get_data 0 1 270 0
84
inline std::basic_string< char > PointerToArray< LVecBase2i >::get_data(void) const;

967 8 set_data 0 4 1383 38 PointerToArray< LVecBase2i >::set_data 0 1 271 0
90
inline void PointerToArray< LVecBase2i >::set_data(std::basic_string< char > const &data);

968 11 get_subdata 0 4 1383 41 PointerToArray< LVecBase2i >::get_subdata 0 1 272 0
127
inline std::basic_string< char > PointerToArray< LVecBase2i >::get_subdata(unsigned long int n, unsigned long int count) const;

969 11 set_subdata 0 4 1383 41 PointerToArray< LVecBase2i >::set_subdata 0 1 273 0
139
inline void PointerToArray< LVecBase2i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

970 13 get_ref_count 0 4 1383 43 PointerToArray< LVecBase2i >::get_ref_count 0 1 274 0
67
inline int PointerToArray< LVecBase2i >::get_ref_count(void) const;

971 18 get_node_ref_count 0 4 1383 48 PointerToArray< LVecBase2i >::get_node_ref_count 0 1 275 0
72
inline int PointerToArray< LVecBase2i >::get_node_ref_count(void) const;

972 13 __getbuffer__ 0 4 1383 43 PointerToArray< LVecBase2i >::__getbuffer__ 0 1 276 0
92
int PointerToArray< LVecBase2i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

973 17 __releasebuffer__ 0 4 1383 47 PointerToArray< LVecBase2i >::__releasebuffer__ 0 1 277 0
92
void PointerToArray< LVecBase2i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

974 15 ~PointerToArray 0 4 1383 45 PointerToArray< LVecBase2i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase2i >::~PointerToArray(void);

975 14 PointerToArray 0 4 1384 44 PointerToArray< LVecBase3d >::PointerToArray 0 3 278 279 280 0
297
inline PointerToArray< LVecBase3d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3d const *)(0))));
inline PointerToArray< LVecBase3d >::PointerToArray(PointerToArray< LVecBase3d > const &copy);
PointerToArray< LVecBase3d >::PointerToArray(PyObject *self, PyObject *source);

976 11 empty_array 0 4 1384 41 PointerToArray< LVecBase3d >::empty_array 0 1 281 0
176
static inline PointerToArray< LVecBase3d > PointerToArray< LVecBase3d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3d const *)(0))));

977 4 size 0 4 1384 34 PointerToArray< LVecBase3d >::size 0 1 282 0
72
inline unsigned long int PointerToArray< LVecBase3d >::size(void) const;

978 9 push_back 0 4 1384 39 PointerToArray< LVecBase3d >::push_back 0 1 283 0
73
inline void PointerToArray< LVecBase3d >::push_back(LVecBase3d const &x);

979 8 pop_back 0 4 1384 38 PointerToArray< LVecBase3d >::pop_back 0 1 284 0
57
inline void PointerToArray< LVecBase3d >::pop_back(void);

980 11 get_element 0 4 1384 41 PointerToArray< LVecBase3d >::get_element 0 1 285 0
94
inline LVecBase3d const &PointerToArray< LVecBase3d >::get_element(unsigned long int n) const;

981 11 set_element 0 4 1384 41 PointerToArray< LVecBase3d >::set_element 0 1 286 0
100
inline void PointerToArray< LVecBase3d >::set_element(unsigned long int n, LVecBase3d const &value);

982 11 __getitem__ 0 4 1384 41 PointerToArray< LVecBase3d >::__getitem__ 0 1 287 0
87
LVecBase3d const &PointerToArray< LVecBase3d >::__getitem__(unsigned long int n) const;

983 11 __setitem__ 0 4 1384 41 PointerToArray< LVecBase3d >::__setitem__ 0 1 288 0
93
void PointerToArray< LVecBase3d >::__setitem__(unsigned long int n, LVecBase3d const &value);

984 8 get_data 0 4 1384 38 PointerToArray< LVecBase3d >::get_data 0 1 289 0
84
inline std::basic_string< char > PointerToArray< LVecBase3d >::get_data(void) const;

985 8 set_data 0 4 1384 38 PointerToArray< LVecBase3d >::set_data 0 1 290 0
90
inline void PointerToArray< LVecBase3d >::set_data(std::basic_string< char > const &data);

986 11 get_subdata 0 4 1384 41 PointerToArray< LVecBase3d >::get_subdata 0 1 291 0
127
inline std::basic_string< char > PointerToArray< LVecBase3d >::get_subdata(unsigned long int n, unsigned long int count) const;

987 11 set_subdata 0 4 1384 41 PointerToArray< LVecBase3d >::set_subdata 0 1 292 0
139
inline void PointerToArray< LVecBase3d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

988 13 get_ref_count 0 4 1384 43 PointerToArray< LVecBase3d >::get_ref_count 0 1 293 0
67
inline int PointerToArray< LVecBase3d >::get_ref_count(void) const;

989 18 get_node_ref_count 0 4 1384 48 PointerToArray< LVecBase3d >::get_node_ref_count 0 1 294 0
72
inline int PointerToArray< LVecBase3d >::get_node_ref_count(void) const;

990 13 __getbuffer__ 0 4 1384 43 PointerToArray< LVecBase3d >::__getbuffer__ 0 1 295 0
92
int PointerToArray< LVecBase3d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

991 17 __releasebuffer__ 0 4 1384 47 PointerToArray< LVecBase3d >::__releasebuffer__ 0 1 296 0
92
void PointerToArray< LVecBase3d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

992 15 ~PointerToArray 0 4 1384 45 PointerToArray< LVecBase3d >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3d >::~PointerToArray(void);

993 14 PointerToArray 0 4 1385 44 PointerToArray< LVecBase3f >::PointerToArray 0 3 297 298 299 0
297
inline PointerToArray< LVecBase3f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3f const *)(0))));
inline PointerToArray< LVecBase3f >::PointerToArray(PointerToArray< LVecBase3f > const &copy);
PointerToArray< LVecBase3f >::PointerToArray(PyObject *self, PyObject *source);

994 11 empty_array 0 4 1385 41 PointerToArray< LVecBase3f >::empty_array 0 1 300 0
176
static inline PointerToArray< LVecBase3f > PointerToArray< LVecBase3f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3f const *)(0))));

995 4 size 0 4 1385 34 PointerToArray< LVecBase3f >::size 0 1 301 0
72
inline unsigned long int PointerToArray< LVecBase3f >::size(void) const;

996 9 push_back 0 4 1385 39 PointerToArray< LVecBase3f >::push_back 0 1 302 0
73
inline void PointerToArray< LVecBase3f >::push_back(LVecBase3f const &x);

997 8 pop_back 0 4 1385 38 PointerToArray< LVecBase3f >::pop_back 0 1 303 0
57
inline void PointerToArray< LVecBase3f >::pop_back(void);

998 11 get_element 0 4 1385 41 PointerToArray< LVecBase3f >::get_element 0 1 304 0
94
inline LVecBase3f const &PointerToArray< LVecBase3f >::get_element(unsigned long int n) const;

999 11 set_element 0 4 1385 41 PointerToArray< LVecBase3f >::set_element 0 1 305 0
100
inline void PointerToArray< LVecBase3f >::set_element(unsigned long int n, LVecBase3f const &value);

1000 11 __getitem__ 0 4 1385 41 PointerToArray< LVecBase3f >::__getitem__ 0 1 306 0
87
LVecBase3f const &PointerToArray< LVecBase3f >::__getitem__(unsigned long int n) const;

1001 11 __setitem__ 0 4 1385 41 PointerToArray< LVecBase3f >::__setitem__ 0 1 307 0
93
void PointerToArray< LVecBase3f >::__setitem__(unsigned long int n, LVecBase3f const &value);

1002 8 get_data 0 4 1385 38 PointerToArray< LVecBase3f >::get_data 0 1 308 0
84
inline std::basic_string< char > PointerToArray< LVecBase3f >::get_data(void) const;

1003 8 set_data 0 4 1385 38 PointerToArray< LVecBase3f >::set_data 0 1 309 0
90
inline void PointerToArray< LVecBase3f >::set_data(std::basic_string< char > const &data);

1004 11 get_subdata 0 4 1385 41 PointerToArray< LVecBase3f >::get_subdata 0 1 310 0
127
inline std::basic_string< char > PointerToArray< LVecBase3f >::get_subdata(unsigned long int n, unsigned long int count) const;

1005 11 set_subdata 0 4 1385 41 PointerToArray< LVecBase3f >::set_subdata 0 1 311 0
139
inline void PointerToArray< LVecBase3f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1006 13 get_ref_count 0 4 1385 43 PointerToArray< LVecBase3f >::get_ref_count 0 1 312 0
67
inline int PointerToArray< LVecBase3f >::get_ref_count(void) const;

1007 18 get_node_ref_count 0 4 1385 48 PointerToArray< LVecBase3f >::get_node_ref_count 0 1 313 0
72
inline int PointerToArray< LVecBase3f >::get_node_ref_count(void) const;

1008 13 __getbuffer__ 0 4 1385 43 PointerToArray< LVecBase3f >::__getbuffer__ 0 1 314 0
92
int PointerToArray< LVecBase3f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1009 17 __releasebuffer__ 0 4 1385 47 PointerToArray< LVecBase3f >::__releasebuffer__ 0 1 315 0
92
void PointerToArray< LVecBase3f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1010 15 ~PointerToArray 0 4 1385 45 PointerToArray< LVecBase3f >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3f >::~PointerToArray(void);

1011 14 PointerToArray 0 4 1386 44 PointerToArray< LVecBase3i >::PointerToArray 0 3 316 317 318 0
297
inline PointerToArray< LVecBase3i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((LVecBase3i const *)(0))));
inline PointerToArray< LVecBase3i >::PointerToArray(PointerToArray< LVecBase3i > const &copy);
PointerToArray< LVecBase3i >::PointerToArray(PyObject *self, PyObject *source);

1012 11 empty_array 0 4 1386 41 PointerToArray< LVecBase3i >::empty_array 0 1 319 0
176
static inline PointerToArray< LVecBase3i > PointerToArray< LVecBase3i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((LVecBase3i const *)(0))));

1013 4 size 0 4 1386 34 PointerToArray< LVecBase3i >::size 0 1 320 0
72
inline unsigned long int PointerToArray< LVecBase3i >::size(void) const;

1014 9 push_back 0 4 1386 39 PointerToArray< LVecBase3i >::push_back 0 1 321 0
73
inline void PointerToArray< LVecBase3i >::push_back(LVecBase3i const &x);

1015 8 pop_back 0 4 1386 38 PointerToArray< LVecBase3i >::pop_back 0 1 322 0
57
inline void PointerToArray< LVecBase3i >::pop_back(void);

1016 11 get_element 0 4 1386 41 PointerToArray< LVecBase3i >::get_element 0 1 323 0
94
inline LVecBase3i const &PointerToArray< LVecBase3i >::get_element(unsigned long int n) const;

1017 11 set_element 0 4 1386 41 PointerToArray< LVecBase3i >::set_element 0 1 324 0
100
inline void PointerToArray< LVecBase3i >::set_element(unsigned long int n, LVecBase3i const &value);

1018 11 __getitem__ 0 4 1386 41 PointerToArray< LVecBase3i >::__getitem__ 0 1 325 0
87
LVecBase3i const &PointerToArray< LVecBase3i >::__getitem__(unsigned long int n) const;

1019 11 __setitem__ 0 4 1386 41 PointerToArray< LVecBase3i >::__setitem__ 0 1 326 0
93
void PointerToArray< LVecBase3i >::__setitem__(unsigned long int n, LVecBase3i const &value);

1020 8 get_data 0 4 1386 38 PointerToArray< LVecBase3i >::get_data 0 1 327 0
84
inline std::basic_string< char > PointerToArray< LVecBase3i >::get_data(void) const;

1021 8 set_data 0 4 1386 38 PointerToArray< LVecBase3i >::set_data 0 1 328 0
90
inline void PointerToArray< LVecBase3i >::set_data(std::basic_string< char > const &data);

1022 11 get_subdata 0 4 1386 41 PointerToArray< LVecBase3i >::get_subdata 0 1 329 0
127
inline std::basic_string< char > PointerToArray< LVecBase3i >::get_subdata(unsigned long int n, unsigned long int count) const;

1023 11 set_subdata 0 4 1386 41 PointerToArray< LVecBase3i >::set_subdata 0 1 330 0
139
inline void PointerToArray< LVecBase3i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1024 13 get_ref_count 0 4 1386 43 PointerToArray< LVecBase3i >::get_ref_count 0 1 331 0
67
inline int PointerToArray< LVecBase3i >::get_ref_count(void) const;

1025 18 get_node_ref_count 0 4 1386 48 PointerToArray< LVecBase3i >::get_node_ref_count 0 1 332 0
72
inline int PointerToArray< LVecBase3i >::get_node_ref_count(void) const;

1026 13 __getbuffer__ 0 4 1386 43 PointerToArray< LVecBase3i >::__getbuffer__ 0 1 333 0
92
int PointerToArray< LVecBase3i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1027 17 __releasebuffer__ 0 4 1386 47 PointerToArray< LVecBase3i >::__releasebuffer__ 0 1 334 0
92
void PointerToArray< LVecBase3i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1028 15 ~PointerToArray 0 4 1386 45 PointerToArray< LVecBase3i >::~PointerToArray 0 0 0
52
PointerToArray< LVecBase3i >::~PointerToArray(void);

1029 14 PointerToArray 0 4 1387 52 PointerToArray< UnalignedLMatrix4d >::PointerToArray 0 3 335 336 337 0
337
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4d const *)(0))));
inline PointerToArray< UnalignedLMatrix4d >::PointerToArray(PointerToArray< UnalignedLMatrix4d > const &copy);
PointerToArray< UnalignedLMatrix4d >::PointerToArray(PyObject *self, PyObject *source);

1030 11 empty_array 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::empty_array 0 1 338 0
200
static inline PointerToArray< UnalignedLMatrix4d > PointerToArray< UnalignedLMatrix4d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4d const *)(0))));

1031 4 size 0 4 1387 42 PointerToArray< UnalignedLMatrix4d >::size 0 1 339 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4d >::size(void) const;

1032 9 push_back 0 4 1387 47 PointerToArray< UnalignedLMatrix4d >::push_back 0 1 340 0
89
inline void PointerToArray< UnalignedLMatrix4d >::push_back(UnalignedLMatrix4d const &x);

1033 8 pop_back 0 4 1387 46 PointerToArray< UnalignedLMatrix4d >::pop_back 0 1 341 0
65
inline void PointerToArray< UnalignedLMatrix4d >::pop_back(void);

1034 11 get_element 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::get_element 0 1 342 0
110
inline UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::get_element(unsigned long int n) const;

1035 11 set_element 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::set_element 0 1 343 0
116
inline void PointerToArray< UnalignedLMatrix4d >::set_element(unsigned long int n, UnalignedLMatrix4d const &value);

1036 11 __getitem__ 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::__getitem__ 0 1 344 0
103
UnalignedLMatrix4d const &PointerToArray< UnalignedLMatrix4d >::__getitem__(unsigned long int n) const;

1037 11 __setitem__ 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::__setitem__ 0 1 345 0
109
void PointerToArray< UnalignedLMatrix4d >::__setitem__(unsigned long int n, UnalignedLMatrix4d const &value);

1038 8 get_data 0 4 1387 46 PointerToArray< UnalignedLMatrix4d >::get_data 0 1 346 0
92
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_data(void) const;

1039 8 set_data 0 4 1387 46 PointerToArray< UnalignedLMatrix4d >::set_data 0 1 347 0
98
inline void PointerToArray< UnalignedLMatrix4d >::set_data(std::basic_string< char > const &data);

1040 11 get_subdata 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::get_subdata 0 1 348 0
135
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1041 11 set_subdata 0 4 1387 49 PointerToArray< UnalignedLMatrix4d >::set_subdata 0 1 349 0
147
inline void PointerToArray< UnalignedLMatrix4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1042 13 get_ref_count 0 4 1387 51 PointerToArray< UnalignedLMatrix4d >::get_ref_count 0 1 350 0
75
inline int PointerToArray< UnalignedLMatrix4d >::get_ref_count(void) const;

1043 18 get_node_ref_count 0 4 1387 56 PointerToArray< UnalignedLMatrix4d >::get_node_ref_count 0 1 351 0
80
inline int PointerToArray< UnalignedLMatrix4d >::get_node_ref_count(void) const;

1044 13 __getbuffer__ 0 4 1387 51 PointerToArray< UnalignedLMatrix4d >::__getbuffer__ 0 1 352 0
100
int PointerToArray< UnalignedLMatrix4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1045 17 __releasebuffer__ 0 4 1387 55 PointerToArray< UnalignedLMatrix4d >::__releasebuffer__ 0 1 353 0
100
void PointerToArray< UnalignedLMatrix4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1046 15 ~PointerToArray 0 4 1387 53 PointerToArray< UnalignedLMatrix4d >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4d >::~PointerToArray(void);

1047 14 PointerToArray 0 4 1388 52 PointerToArray< UnalignedLMatrix4f >::PointerToArray 0 3 354 355 356 0
337
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4f const *)(0))));
inline PointerToArray< UnalignedLMatrix4f >::PointerToArray(PointerToArray< UnalignedLMatrix4f > const &copy);
PointerToArray< UnalignedLMatrix4f >::PointerToArray(PyObject *self, PyObject *source);

1048 11 empty_array 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::empty_array 0 1 357 0
200
static inline PointerToArray< UnalignedLMatrix4f > PointerToArray< UnalignedLMatrix4f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLMatrix4f const *)(0))));

1049 4 size 0 4 1388 42 PointerToArray< UnalignedLMatrix4f >::size 0 1 358 0
80
inline unsigned long int PointerToArray< UnalignedLMatrix4f >::size(void) const;

1050 9 push_back 0 4 1388 47 PointerToArray< UnalignedLMatrix4f >::push_back 0 1 359 0
89
inline void PointerToArray< UnalignedLMatrix4f >::push_back(UnalignedLMatrix4f const &x);

1051 8 pop_back 0 4 1388 46 PointerToArray< UnalignedLMatrix4f >::pop_back 0 1 360 0
65
inline void PointerToArray< UnalignedLMatrix4f >::pop_back(void);

1052 11 get_element 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::get_element 0 1 361 0
110
inline UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::get_element(unsigned long int n) const;

1053 11 set_element 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::set_element 0 1 362 0
116
inline void PointerToArray< UnalignedLMatrix4f >::set_element(unsigned long int n, UnalignedLMatrix4f const &value);

1054 11 __getitem__ 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::__getitem__ 0 1 363 0
103
UnalignedLMatrix4f const &PointerToArray< UnalignedLMatrix4f >::__getitem__(unsigned long int n) const;

1055 11 __setitem__ 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::__setitem__ 0 1 364 0
109
void PointerToArray< UnalignedLMatrix4f >::__setitem__(unsigned long int n, UnalignedLMatrix4f const &value);

1056 8 get_data 0 4 1388 46 PointerToArray< UnalignedLMatrix4f >::get_data 0 1 365 0
92
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_data(void) const;

1057 8 set_data 0 4 1388 46 PointerToArray< UnalignedLMatrix4f >::set_data 0 1 366 0
98
inline void PointerToArray< UnalignedLMatrix4f >::set_data(std::basic_string< char > const &data);

1058 11 get_subdata 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::get_subdata 0 1 367 0
135
inline std::basic_string< char > PointerToArray< UnalignedLMatrix4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1059 11 set_subdata 0 4 1388 49 PointerToArray< UnalignedLMatrix4f >::set_subdata 0 1 368 0
147
inline void PointerToArray< UnalignedLMatrix4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1060 13 get_ref_count 0 4 1388 51 PointerToArray< UnalignedLMatrix4f >::get_ref_count 0 1 369 0
75
inline int PointerToArray< UnalignedLMatrix4f >::get_ref_count(void) const;

1061 18 get_node_ref_count 0 4 1388 56 PointerToArray< UnalignedLMatrix4f >::get_node_ref_count 0 1 370 0
80
inline int PointerToArray< UnalignedLMatrix4f >::get_node_ref_count(void) const;

1062 13 __getbuffer__ 0 4 1388 51 PointerToArray< UnalignedLMatrix4f >::__getbuffer__ 0 1 371 0
100
int PointerToArray< UnalignedLMatrix4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1063 17 __releasebuffer__ 0 4 1388 55 PointerToArray< UnalignedLMatrix4f >::__releasebuffer__ 0 1 372 0
100
void PointerToArray< UnalignedLMatrix4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1064 15 ~PointerToArray 0 4 1388 53 PointerToArray< UnalignedLMatrix4f >::~PointerToArray 0 0 0
60
PointerToArray< UnalignedLMatrix4f >::~PointerToArray(void);

1065 14 PointerToArray 0 4 1389 53 PointerToArray< UnalignedLVecBase4d >::PointerToArray 0 3 373 374 375 0
342
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4d const *)(0))));
inline PointerToArray< UnalignedLVecBase4d >::PointerToArray(PointerToArray< UnalignedLVecBase4d > const &copy);
PointerToArray< UnalignedLVecBase4d >::PointerToArray(PyObject *self, PyObject *source);

1066 11 empty_array 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::empty_array 0 1 376 0
203
static inline PointerToArray< UnalignedLVecBase4d > PointerToArray< UnalignedLVecBase4d >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4d const *)(0))));

1067 4 size 0 4 1389 43 PointerToArray< UnalignedLVecBase4d >::size 0 1 377 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4d >::size(void) const;

1068 9 push_back 0 4 1389 48 PointerToArray< UnalignedLVecBase4d >::push_back 0 1 378 0
91
inline void PointerToArray< UnalignedLVecBase4d >::push_back(UnalignedLVecBase4d const &x);

1069 8 pop_back 0 4 1389 47 PointerToArray< UnalignedLVecBase4d >::pop_back 0 1 379 0
66
inline void PointerToArray< UnalignedLVecBase4d >::pop_back(void);

1070 11 get_element 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::get_element 0 1 380 0
112
inline UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::get_element(unsigned long int n) const;

1071 11 set_element 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::set_element 0 1 381 0
118
inline void PointerToArray< UnalignedLVecBase4d >::set_element(unsigned long int n, UnalignedLVecBase4d const &value);

1072 11 __getitem__ 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::__getitem__ 0 1 382 0
105
UnalignedLVecBase4d const &PointerToArray< UnalignedLVecBase4d >::__getitem__(unsigned long int n) const;

1073 11 __setitem__ 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::__setitem__ 0 1 383 0
111
void PointerToArray< UnalignedLVecBase4d >::__setitem__(unsigned long int n, UnalignedLVecBase4d const &value);

1074 8 get_data 0 4 1389 47 PointerToArray< UnalignedLVecBase4d >::get_data 0 1 384 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_data(void) const;

1075 8 set_data 0 4 1389 47 PointerToArray< UnalignedLVecBase4d >::set_data 0 1 385 0
99
inline void PointerToArray< UnalignedLVecBase4d >::set_data(std::basic_string< char > const &data);

1076 11 get_subdata 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::get_subdata 0 1 386 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4d >::get_subdata(unsigned long int n, unsigned long int count) const;

1077 11 set_subdata 0 4 1389 50 PointerToArray< UnalignedLVecBase4d >::set_subdata 0 1 387 0
148
inline void PointerToArray< UnalignedLVecBase4d >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1078 13 get_ref_count 0 4 1389 52 PointerToArray< UnalignedLVecBase4d >::get_ref_count 0 1 388 0
76
inline int PointerToArray< UnalignedLVecBase4d >::get_ref_count(void) const;

1079 18 get_node_ref_count 0 4 1389 57 PointerToArray< UnalignedLVecBase4d >::get_node_ref_count 0 1 389 0
81
inline int PointerToArray< UnalignedLVecBase4d >::get_node_ref_count(void) const;

1080 13 __getbuffer__ 0 4 1389 52 PointerToArray< UnalignedLVecBase4d >::__getbuffer__ 0 1 390 0
101
int PointerToArray< UnalignedLVecBase4d >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1081 17 __releasebuffer__ 0 4 1389 56 PointerToArray< UnalignedLVecBase4d >::__releasebuffer__ 0 1 391 0
101
void PointerToArray< UnalignedLVecBase4d >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1082 15 ~PointerToArray 0 4 1389 54 PointerToArray< UnalignedLVecBase4d >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4d >::~PointerToArray(void);

1083 14 PointerToArray 0 4 1390 53 PointerToArray< UnalignedLVecBase4f >::PointerToArray 0 3 392 393 394 0
342
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4f const *)(0))));
inline PointerToArray< UnalignedLVecBase4f >::PointerToArray(PointerToArray< UnalignedLVecBase4f > const &copy);
PointerToArray< UnalignedLVecBase4f >::PointerToArray(PyObject *self, PyObject *source);

1084 11 empty_array 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::empty_array 0 1 395 0
203
static inline PointerToArray< UnalignedLVecBase4f > PointerToArray< UnalignedLVecBase4f >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4f const *)(0))));

1085 4 size 0 4 1390 43 PointerToArray< UnalignedLVecBase4f >::size 0 1 396 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4f >::size(void) const;

1086 9 push_back 0 4 1390 48 PointerToArray< UnalignedLVecBase4f >::push_back 0 1 397 0
91
inline void PointerToArray< UnalignedLVecBase4f >::push_back(UnalignedLVecBase4f const &x);

1087 8 pop_back 0 4 1390 47 PointerToArray< UnalignedLVecBase4f >::pop_back 0 1 398 0
66
inline void PointerToArray< UnalignedLVecBase4f >::pop_back(void);

1088 11 get_element 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::get_element 0 1 399 0
112
inline UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::get_element(unsigned long int n) const;

1089 11 set_element 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::set_element 0 1 400 0
118
inline void PointerToArray< UnalignedLVecBase4f >::set_element(unsigned long int n, UnalignedLVecBase4f const &value);

1090 11 __getitem__ 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::__getitem__ 0 1 401 0
105
UnalignedLVecBase4f const &PointerToArray< UnalignedLVecBase4f >::__getitem__(unsigned long int n) const;

1091 11 __setitem__ 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::__setitem__ 0 1 402 0
111
void PointerToArray< UnalignedLVecBase4f >::__setitem__(unsigned long int n, UnalignedLVecBase4f const &value);

1092 8 get_data 0 4 1390 47 PointerToArray< UnalignedLVecBase4f >::get_data 0 1 403 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_data(void) const;

1093 8 set_data 0 4 1390 47 PointerToArray< UnalignedLVecBase4f >::set_data 0 1 404 0
99
inline void PointerToArray< UnalignedLVecBase4f >::set_data(std::basic_string< char > const &data);

1094 11 get_subdata 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::get_subdata 0 1 405 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4f >::get_subdata(unsigned long int n, unsigned long int count) const;

1095 11 set_subdata 0 4 1390 50 PointerToArray< UnalignedLVecBase4f >::set_subdata 0 1 406 0
148
inline void PointerToArray< UnalignedLVecBase4f >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1096 13 get_ref_count 0 4 1390 52 PointerToArray< UnalignedLVecBase4f >::get_ref_count 0 1 407 0
76
inline int PointerToArray< UnalignedLVecBase4f >::get_ref_count(void) const;

1097 18 get_node_ref_count 0 4 1390 57 PointerToArray< UnalignedLVecBase4f >::get_node_ref_count 0 1 408 0
81
inline int PointerToArray< UnalignedLVecBase4f >::get_node_ref_count(void) const;

1098 13 __getbuffer__ 0 4 1390 52 PointerToArray< UnalignedLVecBase4f >::__getbuffer__ 0 1 409 0
101
int PointerToArray< UnalignedLVecBase4f >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1099 17 __releasebuffer__ 0 4 1390 56 PointerToArray< UnalignedLVecBase4f >::__releasebuffer__ 0 1 410 0
101
void PointerToArray< UnalignedLVecBase4f >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1100 15 ~PointerToArray 0 4 1390 54 PointerToArray< UnalignedLVecBase4f >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4f >::~PointerToArray(void);

1101 14 PointerToArray 0 4 1391 53 PointerToArray< UnalignedLVecBase4i >::PointerToArray 0 3 411 412 413 0
342
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4i const *)(0))));
inline PointerToArray< UnalignedLVecBase4i >::PointerToArray(PointerToArray< UnalignedLVecBase4i > const &copy);
PointerToArray< UnalignedLVecBase4i >::PointerToArray(PyObject *self, PyObject *source);

1102 11 empty_array 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::empty_array 0 1 414 0
203
static inline PointerToArray< UnalignedLVecBase4i > PointerToArray< UnalignedLVecBase4i >::empty_array(unsigned long int n, TypeHandle type_handle = (_get_type_handle((UnalignedLVecBase4i const *)(0))));

1103 4 size 0 4 1391 43 PointerToArray< UnalignedLVecBase4i >::size 0 1 415 0
81
inline unsigned long int PointerToArray< UnalignedLVecBase4i >::size(void) const;

1104 9 push_back 0 4 1391 48 PointerToArray< UnalignedLVecBase4i >::push_back 0 1 416 0
91
inline void PointerToArray< UnalignedLVecBase4i >::push_back(UnalignedLVecBase4i const &x);

1105 8 pop_back 0 4 1391 47 PointerToArray< UnalignedLVecBase4i >::pop_back 0 1 417 0
66
inline void PointerToArray< UnalignedLVecBase4i >::pop_back(void);

1106 11 get_element 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::get_element 0 1 418 0
112
inline UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::get_element(unsigned long int n) const;

1107 11 set_element 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::set_element 0 1 419 0
118
inline void PointerToArray< UnalignedLVecBase4i >::set_element(unsigned long int n, UnalignedLVecBase4i const &value);

1108 11 __getitem__ 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::__getitem__ 0 1 420 0
105
UnalignedLVecBase4i const &PointerToArray< UnalignedLVecBase4i >::__getitem__(unsigned long int n) const;

1109 11 __setitem__ 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::__setitem__ 0 1 421 0
111
void PointerToArray< UnalignedLVecBase4i >::__setitem__(unsigned long int n, UnalignedLVecBase4i const &value);

1110 8 get_data 0 4 1391 47 PointerToArray< UnalignedLVecBase4i >::get_data 0 1 422 0
93
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_data(void) const;

1111 8 set_data 0 4 1391 47 PointerToArray< UnalignedLVecBase4i >::set_data 0 1 423 0
99
inline void PointerToArray< UnalignedLVecBase4i >::set_data(std::basic_string< char > const &data);

1112 11 get_subdata 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::get_subdata 0 1 424 0
136
inline std::basic_string< char > PointerToArray< UnalignedLVecBase4i >::get_subdata(unsigned long int n, unsigned long int count) const;

1113 11 set_subdata 0 4 1391 50 PointerToArray< UnalignedLVecBase4i >::set_subdata 0 1 425 0
148
inline void PointerToArray< UnalignedLVecBase4i >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

1114 13 get_ref_count 0 4 1391 52 PointerToArray< UnalignedLVecBase4i >::get_ref_count 0 1 426 0
76
inline int PointerToArray< UnalignedLVecBase4i >::get_ref_count(void) const;

1115 18 get_node_ref_count 0 4 1391 57 PointerToArray< UnalignedLVecBase4i >::get_node_ref_count 0 1 427 0
81
inline int PointerToArray< UnalignedLVecBase4i >::get_node_ref_count(void) const;

1116 13 __getbuffer__ 0 4 1391 52 PointerToArray< UnalignedLVecBase4i >::__getbuffer__ 0 1 428 0
101
int PointerToArray< UnalignedLVecBase4i >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

1117 17 __releasebuffer__ 0 4 1391 56 PointerToArray< UnalignedLVecBase4i >::__releasebuffer__ 0 1 429 0
101
void PointerToArray< UnalignedLVecBase4i >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

1118 15 ~PointerToArray 0 4 1391 54 PointerToArray< UnalignedLVecBase4i >::~PointerToArray 0 0 0
61
PointerToArray< UnalignedLVecBase4i >::~PointerToArray(void);

1119 9 make_copy 0 6 1392 25 BoundingVolume::make_copy 0 1 430 0
66
virtual BoundingVolume *BoundingVolume::make_copy(void) const = 0;

1120 8 is_empty 0 4 1392 24 BoundingVolume::is_empty 0 1 431 253
/**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */
49
inline bool BoundingVolume::is_empty(void) const;

1121 11 is_infinite 0 4 1392 27 BoundingVolume::is_infinite 0 1 432 536
/**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */
52
inline bool BoundingVolume::is_infinite(void) const;

1122 12 set_infinite 0 4 1392 28 BoundingVolume::set_infinite 0 1 433 135
/**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */
47
inline void BoundingVolume::set_infinite(void);

1123 9 extend_by 0 4 1392 25 BoundingVolume::extend_by 0 1 434 72
/**
 * Increases the size of the volume to include the given volume.
 */
65
inline bool BoundingVolume::extend_by(BoundingVolume const *vol);

1124 8 contains 0 4 1392 24 BoundingVolume::contains 0 1 435 128
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */
69
inline int BoundingVolume::contains(BoundingVolume const *vol) const;

1125 6 output 0 6 1392 22 BoundingVolume::output 0 1 436 0
60
virtual void BoundingVolume::output(ostream &out) const = 0;

1126 5 write 0 6 1392 21 BoundingVolume::write 0 1 437 10
/**
 *
 */
77
virtual void BoundingVolume::write(ostream &out, int indent_level = 0) const;

1127 14 get_class_type 0 4 1392 30 BoundingVolume::get_class_type 0 1 438 0
55
static TypeHandle BoundingVolume::get_class_type(void);

1128 15 ~BoundingVolume 0 4 1392 31 BoundingVolume::~BoundingVolume 0 0 0
38
BoundingVolume::~BoundingVolume(void);

1129 9 extend_by 0 4 1396 34 GeometricBoundingVolume::extend_by 0 2 439 440 145
/**
 * Increases the size of the volume to include the given volume.
 */

/**
 * Increases the size of the volume to include the given point.
 */
153
inline bool GeometricBoundingVolume::extend_by(GeometricBoundingVolume const *vol);
inline bool GeometricBoundingVolume::extend_by(LPoint3 const &point);

1130 8 contains 0 4 1396 33 GeometricBoundingVolume::contains 0 3 441 442 443 393
/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */

/**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */
249
inline int GeometricBoundingVolume::contains(GeometricBoundingVolume const *vol) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &point) const;
inline int GeometricBoundingVolume::contains(LPoint3 const &a, LPoint3 const &b) const;

1131 17 get_approx_center 0 6 1396 42 GeometricBoundingVolume::get_approx_center 0 1 444 0
75
virtual LPoint3 GeometricBoundingVolume::get_approx_center(void) const = 0;

1132 5 xform 0 6 1396 30 GeometricBoundingVolume::xform 0 1 445 0
69
virtual void GeometricBoundingVolume::xform(LMatrix4 const &mat) = 0;

1133 14 get_class_type 0 4 1396 39 GeometricBoundingVolume::get_class_type 0 1 446 0
64
static TypeHandle GeometricBoundingVolume::get_class_type(void);

1134 24 ~GeometricBoundingVolume 0 4 1396 49 GeometricBoundingVolume::~GeometricBoundingVolume 0 0 0
56
GeometricBoundingVolume::~GeometricBoundingVolume(void);

1135 7 get_min 0 6 1397 29 FiniteBoundingVolume::get_min 0 1 447 0
62
virtual LPoint3 FiniteBoundingVolume::get_min(void) const = 0;

1136 7 get_max 0 6 1397 29 FiniteBoundingVolume::get_max 0 1 448 0
62
virtual LPoint3 FiniteBoundingVolume::get_max(void) const = 0;

1137 10 get_volume 0 6 1397 32 FiniteBoundingVolume::get_volume 0 1 449 10
/**
 *
 */
65
virtual PN_stdfloat FiniteBoundingVolume::get_volume(void) const;

1138 14 get_class_type 0 4 1397 36 FiniteBoundingVolume::get_class_type 0 1 450 0
61
static TypeHandle FiniteBoundingVolume::get_class_type(void);

1139 21 ~FiniteBoundingVolume 0 4 1397 43 FiniteBoundingVolume::~FiniteBoundingVolume 0 0 0
50
FiniteBoundingVolume::~FiniteBoundingVolume(void);

1140 10 LParabolaf 0 4 1398 22 LParabolaf::LParabolaf 0 3 451 452 453 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolaf::LParabolaf(void);
inline LParabolaf::LParabolaf(LVecBase3f const &a, LVecBase3f const &b, LVecBase3f const &c);
inline LParabolaf::LParabolaf(LParabolaf const &copy);

1141 10 operator = 0 4 1398 22 LParabolaf::operator = 0 1 454 0
59
inline void LParabolaf::operator =(LParabolaf const &copy);

1142 11 ~LParabolaf 0 4 1398 23 LParabolaf::~LParabolaf 0 0 10
/**
 *
 */
37
inline LParabolaf::~LParabolaf(void);

1143 5 xform 0 4 1398 17 LParabolaf::xform 0 1 455 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolaf::xform(LMatrix4f const &mat);

1144 5 get_a 0 4 1398 17 LParabolaf::get_a 0 1 456 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3f const &LParabolaf::get_a(void) const;

1145 5 get_b 0 4 1398 17 LParabolaf::get_b 0 1 457 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3f const &LParabolaf::get_b(void) const;

1146 5 get_c 0 4 1398 17 LParabolaf::get_c 0 1 458 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3f const &LParabolaf::get_c(void) const;

1147 10 calc_point 0 4 1398 22 LParabolaf::calc_point 0 1 459 56
/**
 * Computes the point on the parabola at time t.
 */
54
inline LPoint3f LParabolaf::calc_point(float t) const;

1148 6 output 0 4 1398 18 LParabolaf::output 0 1 460 10
/**
 *
 */
44
void LParabolaf::output(ostream &out) const;

1149 5 write 0 4 1398 17 LParabolaf::write 0 1 461 10
/**
 *
 */
65
void LParabolaf::write(ostream &out, int indent_level = 0) const;

1150 20 write_datagram_fixed 0 4 1398 32 LParabolaf::write_datagram_fixed 0 1 462 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolaf::write_datagram_fixed(Datagram &destination) const;

1151 19 read_datagram_fixed 0 4 1398 31 LParabolaf::read_datagram_fixed 0 1 463 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolaf::read_datagram_fixed(DatagramIterator &source);

1152 14 write_datagram 0 4 1398 26 LParabolaf::write_datagram 0 1 464 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolaf::write_datagram(Datagram &destination) const;

1153 13 read_datagram 0 4 1398 25 LParabolaf::read_datagram 0 1 465 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolaf::read_datagram(DatagramIterator &source);

1154 10 LParabolad 0 4 1399 22 LParabolad::LParabolad 0 3 466 467 468 209
/**
 * Constructs a meaningless degenerate parabola.
 */

/**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */

/**
 *
 */
185
inline LParabolad::LParabolad(void);
inline LParabolad::LParabolad(LVecBase3d const &a, LVecBase3d const &b, LVecBase3d const &c);
inline LParabolad::LParabolad(LParabolad const &copy);

1155 10 operator = 0 4 1399 22 LParabolad::operator = 0 1 469 0
59
inline void LParabolad::operator =(LParabolad const &copy);

1156 11 ~LParabolad 0 4 1399 23 LParabolad::~LParabolad 0 0 10
/**
 *
 */
37
inline LParabolad::~LParabolad(void);

1157 5 xform 0 4 1399 17 LParabolad::xform 0 1 470 59
/**
 * Transforms the parabola by the indicated matrix.
 */
45
void LParabolad::xform(LMatrix4d const &mat);

1158 5 get_a 0 4 1399 17 LParabolad::get_a 0 1 471 94
/**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */
55
inline LVecBase3d const &LParabolad::get_a(void) const;

1159 5 get_b 0 4 1399 17 LParabolad::get_b 0 1 472 99
/**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */
55
inline LVecBase3d const &LParabolad::get_b(void) const;

1160 5 get_c 0 4 1399 17 LParabolad::get_c 0 1 473 93
/**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */
55
inline LVecBase3d const &LParabolad::get_c(void) const;

1161 10 calc_point 0 4 1399 22 LParabolad::calc_point 0 1 474 56
/**
 * Computes the point on the parabola at time t.
 */
55
inline LPoint3d LParabolad::calc_point(double t) const;

1162 6 output 0 4 1399 18 LParabolad::output 0 1 475 10
/**
 *
 */
44
void LParabolad::output(ostream &out) const;

1163 5 write 0 4 1399 17 LParabolad::write 0 1 476 10
/**
 *
 */
65
void LParabolad::write(ostream &out, int indent_level = 0) const;

1164 20 write_datagram_fixed 0 4 1399 32 LParabolad::write_datagram_fixed 0 1 477 336
/**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */
67
void LParabolad::write_datagram_fixed(Datagram &destination) const;

1165 19 read_datagram_fixed 0 4 1399 31 LParabolad::read_datagram_fixed 0 1 478 116
/**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */
63
void LParabolad::read_datagram_fixed(DatagramIterator &source);

1166 14 write_datagram 0 4 1399 26 LParabolad::write_datagram 0 1 479 207
/**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */
61
void LParabolad::write_datagram(Datagram &destination) const;

1167 13 read_datagram 0 4 1399 25 LParabolad::read_datagram 0 1 480 69
/**
 * Reads the parabola from the Datagram using get_stdfloat().
 */
57
void LParabolad::read_datagram(DatagramIterator &source);

1168 7 LPlanef 0 4 1401 16 LPlanef::LPlanef 0 6 481 482 483 484 485 486 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
347
inline LPlanef::LPlanef(void);
inline LPlanef::LPlanef(LVecBase4f const &copy);
inline LPlanef::LPlanef(LPoint3f const &a, LPoint3f const &b, LPoint3f const &c);
inline LPlanef::LPlanef(LVector3f const &normal, LPoint3f const &point);
inline LPlanef::LPlanef(float a, float b, float c, float d);
inline LPlanef::LPlanef(LPlanef const &) = default;

1169 10 operator * 0 4 1401 19 LPlanef::operator * 0 2 487 488 0
127
inline LPlanef LPlanef::operator *(LMatrix3f const &mat) const;
inline LPlanef LPlanef::operator *(LMatrix4f const &mat) const;

1170 11 operator *= 0 4 1401 20 LPlanef::operator *= 0 1 489 0
55
inline void LPlanef::operator *=(LMatrix4f const &mat);

1171 5 xform 0 4 1401 14 LPlanef::xform 0 1 490 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlanef::xform(LMatrix4f const &mat);

1172 10 operator - 0 68 1401 19 LPlanef::operator - 0 1 491 0
47
inline LPlanef LPlanef::operator -(void) const;

1173 18 get_reflection_mat 0 4 1401 27 LPlanef::get_reflection_mat 0 1 492 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4f LPlanef::get_reflection_mat(void) const;

1174 10 get_normal 0 4 1401 19 LPlanef::get_normal 0 1 493 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3f LPlanef::get_normal(void) const;

1175 9 get_point 0 4 1401 18 LPlanef::get_point 0 1 494 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3f LPlanef::get_point(void) const;

1176 13 dist_to_plane 0 4 1401 22 LPlanef::dist_to_plane 0 1 495 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
65
inline float LPlanef::dist_to_plane(LPoint3f const &point) const;

1177 7 project 0 4 1401 16 LPlanef::project 0 1 496 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3f LPlanef::project(LPoint3f const &point) const;

1178 4 flip 0 4 1401 13 LPlanef::flip 0 1 497 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlanef::flip(void);

1179 15 intersects_line 0 4 1401 24 LPlanef::intersects_line 0 1 498 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
213
inline bool LPlanef::intersects_line(LPoint3f &intersection_point, LPoint3f const &p1, LPoint3f const &p2) const;
inline bool LPlanef::intersects_line(float &t, LPoint3f const &from, LVector3f const &delta) const;

1180 16 intersects_plane 0 4 1401 25 LPlanef::intersects_plane 0 1 499 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlanef::intersects_plane(LPoint3f &from, LVector3f &delta, LPlanef const &other) const;

1181 19 intersects_parabola 0 4 1401 28 LPlanef::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
90
bool LPlanef::intersects_parabola(float &t1, float &t2, LParabolaf const &parabola) const;

1182 6 output 0 4 1401 15 LPlanef::output 0 1 500 10
/**
 *
 */
41
void LPlanef::output(ostream &out) const;

1183 5 write 0 4 1401 14 LPlanef::write 0 1 501 10
/**
 *
 */
62
void LPlanef::write(ostream &out, int indent_level = 0) const;

1184 8 ~LPlanef 0 4 1401 17 LPlanef::~LPlanef 0 0 0
24
LPlanef::~LPlanef(void);

1185 7 LPlaned 0 4 1403 16 LPlaned::LPlaned 0 6 502 503 504 505 506 507 518
/**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */

/**
 *
 */

/**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */

/**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */

/**
 * Constructs a plane given the four terms of the plane equation.
 */
351
inline LPlaned::LPlaned(void);
inline LPlaned::LPlaned(LVecBase4d const &copy);
inline LPlaned::LPlaned(LPoint3d const &a, LPoint3d const &b, LPoint3d const &c);
inline LPlaned::LPlaned(LVector3d const &normal, LPoint3d const &point);
inline LPlaned::LPlaned(double a, double b, double c, double d);
inline LPlaned::LPlaned(LPlaned const &) = default;

1186 10 operator * 0 4 1403 19 LPlaned::operator * 0 2 508 509 0
127
inline LPlaned LPlaned::operator *(LMatrix3d const &mat) const;
inline LPlaned LPlaned::operator *(LMatrix4d const &mat) const;

1187 11 operator *= 0 4 1403 20 LPlaned::operator *= 0 1 510 0
55
inline void LPlaned::operator *=(LMatrix4d const &mat);

1188 5 xform 0 4 1403 14 LPlaned::xform 0 1 511 56
/**
 * Transforms the plane by the indicated matrix.
 */
49
inline void LPlaned::xform(LMatrix4d const &mat);

1189 10 operator - 0 68 1403 19 LPlaned::operator - 0 1 512 0
47
inline LPlaned LPlaned::operator -(void) const;

1190 18 get_reflection_mat 0 4 1403 27 LPlaned::get_reflection_mat 0 1 513 121
/**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */
50
LMatrix4d LPlaned::get_reflection_mat(void) const;

1191 10 get_normal 0 4 1403 19 LPlaned::get_normal 0 1 514 51
/**
 * Returns the surface normal of the plane.
 */
49
inline LVector3d LPlaned::get_normal(void) const;

1192 9 get_point 0 4 1403 18 LPlaned::get_point 0 1 515 145
/**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */
40
LPoint3d LPlaned::get_point(void) const;

1193 13 dist_to_plane 0 4 1403 22 LPlaned::dist_to_plane 0 1 516 328
/**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */
66
inline double LPlaned::dist_to_plane(LPoint3d const &point) const;

1194 7 project 0 4 1403 16 LPlaned::project 0 1 517 86
/**
 * Returns the point within the plane nearest to the indicated point in space.
 */
62
inline LPoint3d LPlaned::project(LPoint3d const &point) const;

1195 4 flip 0 4 1403 13 LPlaned::flip 0 1 518 115
/**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */
32
inline void LPlaned::flip(void);

1196 15 intersects_line 0 4 1403 24 LPlaned::intersects_line 0 1 519 968
/**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */

/**
 * This flavor of intersects_line() returns a bit more information about the
 * nature of the intersecting point.  The line is defined via the parametric
 * equation from + t * delta for all real values of t.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t undefined.  If there is an intersection with the plane, the
 * function returns true and sets t to the parametric value that defines the
 * point of intersection.  That is, t == 0.0f implies that the intersection
 * occurred exactly at point from, and t == 1.0f implies at point from +
 * delta, with other values of t accordingly.
 */
214
inline bool LPlaned::intersects_line(LPoint3d &intersection_point, LPoint3d const &p1, LPoint3d const &p2) const;
inline bool LPlaned::intersects_line(double &t, LPoint3d const &from, LVector3d const &delta) const;

1197 16 intersects_plane 0 4 1403 25 LPlaned::intersects_plane 0 1 520 300
/**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */
93
bool LPlaned::intersects_plane(LPoint3d &from, LVector3d &delta, LPlaned const &other) const;

1198 19 intersects_parabola 0 4 1403 28 LPlaned::intersects_parabola 0 0 437
/**
 * Determines whether and where the indicated parabola intersects with the
 * plane.
 *
 * If there is no intersection with the plane, the function returns false and
 * leaves t1 and t2 undefined.  If there is an intersection with the plane,
 * the function returns true and sets t1 and t2 to the parametric value that
 * defines the two points of intersection.  If the parabola is exactly tangent
 * to the plane, then t1 == t2.
 */
92
bool LPlaned::intersects_parabola(double &t1, double &t2, LParabolad const &parabola) const;

1199 6 output 0 4 1403 15 LPlaned::output 0 1 521 10
/**
 *
 */
41
void LPlaned::output(ostream &out) const;

1200 5 write 0 4 1403 14 LPlaned::write 0 1 522 10
/**
 *
 */
62
void LPlaned::write(ostream &out, int indent_level = 0) const;

1201 8 ~LPlaned 0 4 1403 17 LPlaned::~LPlaned 0 0 0
24
LPlaned::~LPlaned(void);

1202 11 BoundingBox 0 4 1409 24 BoundingBox::BoundingBox 0 2 523 524 88
/**
 * Constructs an empty box object.
 */

/**
 * Constructs a specific box object.
 */
111
inline BoundingBox::BoundingBox(void);
inline BoundingBox::BoundingBox(LPoint3 const &min, LPoint3 const &max);

1203 12 validate_ptr 0 4 1409 25 BoundingBox::validate_ptr 0 0 0
62
static inline bool BoundingBox::validate_ptr(void const *ptr);

1204 14 get_num_points 0 4 1409 27 BoundingBox::get_num_points 0 1 525 68
/**
 * Returns 8: the number of vertices of a rectangular solid.
 */
51
inline int BoundingBox::get_num_points(void) const;

1205 9 get_point 0 4 1409 22 BoundingBox::get_point 0 1 526 59
/**
 * Returns the nth vertex of the rectangular solid.
 */
51
inline LPoint3 BoundingBox::get_point(int n) const;

1206 14 get_num_planes 0 4 1409 27 BoundingBox::get_num_planes 0 1 527 65
/**
 * Returns 6: the number of faces of a rectangular solid.
 */
51
inline int BoundingBox::get_num_planes(void) const;

1207 9 get_plane 0 4 1409 22 BoundingBox::get_plane 0 1 528 57
/**
 * Returns the nth face of the rectangular solid.
 */
50
inline LPlane BoundingBox::get_plane(int n) const;

1208 11 set_min_max 0 4 1409 24 BoundingBox::set_min_max 0 1 529 63
/**
 * Sets the min and max point of the rectangular solid.
 */
77
inline void BoundingBox::set_min_max(LPoint3 const &min, LPoint3 const &max);

1209 14 get_class_type 0 4 1409 27 BoundingBox::get_class_type 0 1 530 0
52
static TypeHandle BoundingBox::get_class_type(void);

1210 12 ~BoundingBox 0 4 1409 25 BoundingBox::~BoundingBox 0 0 0
32
BoundingBox::~BoundingBox(void);

1211 9 LFrustumf 0 4 1412 20 LFrustumf::LFrustumf 0 2 531 532 10
/**
 *
 */
92
inline LFrustumf::LFrustumf(void);
inline LFrustumf::LFrustumf(LFrustumf const &) = default;

1212 13 make_ortho_2D 0 4 1412 24 LFrustumf::make_ortho_2D 0 2 533 534 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
117
inline void LFrustumf::make_ortho_2D(void);
inline void LFrustumf::make_ortho_2D(float l, float r, float t, float b);

1213 10 make_ortho 0 4 1412 21 LFrustumf::make_ortho 0 2 535 536 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
155
inline void LFrustumf::make_ortho(float fnear, float ffar);
inline void LFrustumf::make_ortho(float fnear, float ffar, float l, float r, float t, float b);

1214 21 make_perspective_hfov 0 4 1412 32 LFrustumf::make_perspective_hfov 0 1 537 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
96
inline void LFrustumf::make_perspective_hfov(float xfov, float aspect, float fnear, float ffar);

1215 21 make_perspective_vfov 0 4 1412 32 LFrustumf::make_perspective_vfov 0 1 538 0
96
inline void LFrustumf::make_perspective_vfov(float yfov, float aspect, float fnear, float ffar);

1216 16 make_perspective 0 4 1412 27 LFrustumf::make_perspective 0 1 539 0
89
inline void LFrustumf::make_perspective(float xfov, float yfov, float fnear, float ffar);

1217 22 get_perspective_params 0 4 1412 33 LFrustumf::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
228
inline void LFrustumf::get_perspective_params(float &yfov, float &aspect, float &fnear, float &ffar) const;
inline void LFrustumf::get_perspective_params(float &xfov, float &yfov, float &aspect, float &fnear, float &ffar) const;

1218 10 ~LFrustumf 0 4 1412 21 LFrustumf::~LFrustumf 0 0 0
28
LFrustumf::~LFrustumf(void);

1219 9 LFrustumd 0 4 1413 20 LFrustumd::LFrustumd 0 2 540 541 10
/**
 *
 */
92
inline LFrustumd::LFrustumd(void);
inline LFrustumd::LFrustumd(LFrustumd const &) = default;

1220 13 make_ortho_2D 0 4 1413 24 LFrustumd::make_ortho_2D 0 2 542 543 116
/**
 * Sets up a two-dimensional orthographic frustum
 */

/**
 * Sets up a two-dimensional orthographic frustum
 */
121
inline void LFrustumd::make_ortho_2D(void);
inline void LFrustumd::make_ortho_2D(double l, double r, double t, double b);

1221 10 make_ortho 0 4 1413 21 LFrustumd::make_ortho 0 2 544 545 66
/**
 * Behaves like gluOrtho
 */

/**
 * Behaves like gluOrtho
 */
163
inline void LFrustumd::make_ortho(double fnear, double ffar);
inline void LFrustumd::make_ortho(double fnear, double ffar, double l, double r, double t, double b);

1222 21 make_perspective_hfov 0 4 1413 32 LFrustumd::make_perspective_hfov 0 1 546 238
/**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */
100
inline void LFrustumd::make_perspective_hfov(double xfov, double aspect, double fnear, double ffar);

1223 21 make_perspective_vfov 0 4 1413 32 LFrustumd::make_perspective_vfov 0 1 547 0
100
inline void LFrustumd::make_perspective_vfov(double yfov, double aspect, double fnear, double ffar);

1224 16 make_perspective 0 4 1413 27 LFrustumd::make_perspective 0 1 548 0
93
inline void LFrustumd::make_perspective(double xfov, double yfov, double fnear, double ffar);

1225 22 get_perspective_params 0 4 1413 33 LFrustumd::get_perspective_params 0 0 22
/**
 *
 */

/**
 *
 */
237
inline void LFrustumd::get_perspective_params(double &yfov, double &aspect, double &fnear, double &ffar) const;
inline void LFrustumd::get_perspective_params(double &xfov, double &yfov, double &aspect, double &fnear, double &ffar) const;

1226 10 ~LFrustumd 0 4 1413 21 LFrustumd::~LFrustumd 0 0 0
28
LFrustumd::~LFrustumd(void);

1227 18 BoundingHexahedron 0 4 1418 38 BoundingHexahedron::BoundingHexahedron 0 2 549 550 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
315
BoundingHexahedron::BoundingHexahedron(LFrustum const &frustum, bool is_ortho, CoordinateSystem cs = ::CS_default);
BoundingHexahedron::BoundingHexahedron(LPoint3 const &fll, LPoint3 const &flr, LPoint3 const &fur, LPoint3 const &ful, LPoint3 const &nll, LPoint3 const &nlr, LPoint3 const &nur, LPoint3 const &nul);

1228 14 get_num_points 0 4 1418 34 BoundingHexahedron::get_num_points 0 1 551 61
/**
 * Returns 8: the number of vertices of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_points(void) const;

1229 9 get_point 0 4 1418 29 BoundingHexahedron::get_point 0 1 552 52
/**
 * Returns the nth vertex of the hexahedron.
 */
58
inline LPoint3 BoundingHexahedron::get_point(int n) const;

1230 14 get_num_planes 0 4 1418 34 BoundingHexahedron::get_num_planes 0 1 553 58
/**
 * Returns 6: the number of faces of a hexahedron.
 */
58
inline int BoundingHexahedron::get_num_planes(void) const;

1231 9 get_plane 0 4 1418 29 BoundingHexahedron::get_plane 0 1 554 50
/**
 * Returns the nth face of the hexahedron.
 */
57
inline LPlane BoundingHexahedron::get_plane(int n) const;

1232 14 get_class_type 0 4 1418 34 BoundingHexahedron::get_class_type 0 1 555 0
59
static TypeHandle BoundingHexahedron::get_class_type(void);

1233 19 ~BoundingHexahedron 0 4 1418 39 BoundingHexahedron::~BoundingHexahedron 0 0 0
46
BoundingHexahedron::~BoundingHexahedron(void);

1234 12 BoundingLine 0 4 1419 26 BoundingLine::BoundingLine 0 1 556 22
/**
 *
 */

/**
 *
 */
70
inline BoundingLine::BoundingLine(LPoint3 const &a, LPoint3 const &b);

1235 12 validate_ptr 0 4 1419 26 BoundingLine::validate_ptr 0 0 0
63
static inline bool BoundingLine::validate_ptr(void const *ptr);

1236 11 get_point_a 0 4 1419 25 BoundingLine::get_point_a 0 1 557 57
/**
 * Returns the first point that defines the line.
 */
60
inline LPoint3 const &BoundingLine::get_point_a(void) const;

1237 11 get_point_b 0 4 1419 25 BoundingLine::get_point_b 0 1 558 58
/**
 * Returns the second point that defines the line.
 */
53
inline LPoint3 BoundingLine::get_point_b(void) const;

1238 14 get_class_type 0 4 1419 28 BoundingLine::get_class_type 0 1 559 0
53
static TypeHandle BoundingLine::get_class_type(void);

1239 13 ~BoundingLine 0 4 1419 27 BoundingLine::~BoundingLine 0 0 0
34
BoundingLine::~BoundingLine(void);

1240 13 BoundingPlane 0 4 1420 28 BoundingPlane::BoundingPlane 0 2 560 561 77
/**
 * Constructs an empty "plane" that has no intersections.
 */

/**
 *
 */
100
inline BoundingPlane::BoundingPlane(void);
inline BoundingPlane::BoundingPlane(LPlane const &plane);

1241 12 validate_ptr 0 4 1420 27 BoundingPlane::validate_ptr 0 0 0
64
static inline bool BoundingPlane::validate_ptr(void const *ptr);

1242 9 get_plane 0 4 1420 24 BoundingPlane::get_plane 0 1 562 10
/**
 *
 */
58
inline LPlane const &BoundingPlane::get_plane(void) const;

1243 14 get_class_type 0 4 1420 29 BoundingPlane::get_class_type 0 1 563 0
54
static TypeHandle BoundingPlane::get_class_type(void);

1244 14 ~BoundingPlane 0 4 1420 29 BoundingPlane::~BoundingPlane 0 0 0
36
BoundingPlane::~BoundingPlane(void);

1245 14 BoundingSphere 0 4 1421 30 BoundingSphere::BoundingSphere 0 2 564 565 80
/**
 * Constructs an empty sphere.
 */

/**
 * Constructs a specific sphere.
 */
126
inline BoundingSphere::BoundingSphere(void);
inline BoundingSphere::BoundingSphere(LPoint3 const &center, PN_stdfloat radius);

1246 12 validate_ptr 0 4 1421 28 BoundingSphere::validate_ptr 0 0 0
65
static inline bool BoundingSphere::validate_ptr(void const *ptr);

1247 10 get_center 0 4 1421 26 BoundingSphere::get_center 0 1 566 10
/**
 *
 */
54
inline LPoint3 BoundingSphere::get_center(void) const;

1248 10 get_radius 0 4 1421 26 BoundingSphere::get_radius 0 1 567 10
/**
 *
 */
58
inline PN_stdfloat BoundingSphere::get_radius(void) const;

1249 10 set_center 0 4 1421 26 BoundingSphere::set_center 0 1 568 47
/**
 * Sets the center point of the sphere.
 */
62
inline void BoundingSphere::set_center(LPoint3 const &center);

1250 10 set_radius 0 4 1421 26 BoundingSphere::set_radius 0 1 569 41
/**
 * Sets the radius of the sphere.
 */
59
inline void BoundingSphere::set_radius(PN_stdfloat radius);

1251 14 get_class_type 0 4 1421 30 BoundingSphere::get_class_type 0 1 570 0
55
static TypeHandle BoundingSphere::get_class_type(void);

1252 15 ~BoundingSphere 0 4 1421 31 BoundingSphere::~BoundingSphere 0 0 0
38
BoundingSphere::~BoundingSphere(void);

1253 26 IntersectionBoundingVolume 0 4 1422 54 IntersectionBoundingVolume::IntersectionBoundingVolume 0 1 571 56
/**
 * Constructs an empty intersection.
 */

/**
 *
 */
68
inline IntersectionBoundingVolume::IntersectionBoundingVolume(void);

1254 12 validate_ptr 0 4 1422 40 IntersectionBoundingVolume::validate_ptr 0 0 0
77
static inline bool IntersectionBoundingVolume::validate_ptr(void const *ptr);

1255 18 get_num_components 0 4 1422 46 IntersectionBoundingVolume::get_num_components 0 1 572 64
/**
 * Returns the number of components in the intersection.
 */
70
inline int IntersectionBoundingVolume::get_num_components(void) const;

1256 13 get_component 0 4 1422 41 IntersectionBoundingVolume::get_component 0 1 573 57
/**
 * Returns the nth component in the intersection.
 */
93
inline GeometricBoundingVolume const *IntersectionBoundingVolume::get_component(int n) const;

1257 16 clear_components 0 4 1422 44 IntersectionBoundingVolume::clear_components 0 1 574 50
/**
 * Removes all components from the volume.
 */
56
void IntersectionBoundingVolume::clear_components(void);

1258 13 add_component 0 4 1422 41 IntersectionBoundingVolume::add_component 0 1 575 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
89
void IntersectionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1259 14 get_class_type 0 4 1422 42 IntersectionBoundingVolume::get_class_type 0 1 576 0
67
static TypeHandle IntersectionBoundingVolume::get_class_type(void);

1260 27 ~IntersectionBoundingVolume 0 4 1422 55 IntersectionBoundingVolume::~IntersectionBoundingVolume 0 0 0
62
IntersectionBoundingVolume::~IntersectionBoundingVolume(void);

1261 8 heads_up 0 1 0 8 heads_up 0 12 675 676 677 678 679 680 681 682 683 684 685 686 0
1297
void heads_up(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void heads_up(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void heads_up(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1262 7 look_at 0 1 0 7 look_at 0 12 687 688 689 690 691 692 693 694 695 696 697 698 0
1285
void look_at(LMatrix3f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4f &mat, LVector3f const &fwd, CoordinateSystem cs);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, LVector3f const &up = LVector3f::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaternionf &quat, LVector3f const &fwd, CoordinateSystem cs);
void look_at(LMatrix3d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix3d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LMatrix4d &mat, LVector3d const &fwd, CoordinateSystem cs);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, LVector3d const &up = LVector3d::up(), CoordinateSystem cs = ::CS_default);
inline void look_at(LQuaterniond &quat, LVector3d const &fwd, CoordinateSystem cs);

1263 8 Mersenne 0 4 1425 18 Mersenne::Mersenne 0 1 577 35
/* initializes mt[N] with a seed */
43
Mersenne::Mersenne(unsigned long int seed);

1264 10 get_uint31 0 4 1425 20 Mersenne::get_uint31 0 1 578 58
/* generates a random number on [0,0x7fffffff]-interval */
45
unsigned long int Mersenne::get_uint31(void);

1265 9 ~Mersenne 0 4 1425 19 Mersenne::~Mersenne 0 0 0
26
Mersenne::~Mersenne(void);

1266 18 OmniBoundingVolume 0 4 1427 38 OmniBoundingVolume::OmniBoundingVolume 0 1 579 10
/**
 *
 */
52
inline OmniBoundingVolume::OmniBoundingVolume(void);

1267 14 get_class_type 0 4 1427 34 OmniBoundingVolume::get_class_type 0 1 580 0
59
static TypeHandle OmniBoundingVolume::get_class_type(void);

1268 19 ~OmniBoundingVolume 0 4 1427 39 OmniBoundingVolume::~OmniBoundingVolume 0 0 0
46
OmniBoundingVolume::~OmniBoundingVolume(void);

1269 19 UnionBoundingVolume 0 4 1428 40 UnionBoundingVolume::UnionBoundingVolume 0 1 581 49
/**
 * Constructs an empty union.
 */

/**
 *
 */
54
inline UnionBoundingVolume::UnionBoundingVolume(void);

1270 12 validate_ptr 0 4 1428 33 UnionBoundingVolume::validate_ptr 0 0 0
70
static inline bool UnionBoundingVolume::validate_ptr(void const *ptr);

1271 18 get_num_components 0 4 1428 39 UnionBoundingVolume::get_num_components 0 1 582 57
/**
 * Returns the number of components in the union.
 */
63
inline int UnionBoundingVolume::get_num_components(void) const;

1272 13 get_component 0 4 1428 34 UnionBoundingVolume::get_component 0 1 583 50
/**
 * Returns the nth component in the union.
 */
86
inline GeometricBoundingVolume const *UnionBoundingVolume::get_component(int n) const;

1273 16 clear_components 0 4 1428 37 UnionBoundingVolume::clear_components 0 1 584 50
/**
 * Removes all components from the volume.
 */
49
void UnionBoundingVolume::clear_components(void);

1274 13 add_component 0 4 1428 34 UnionBoundingVolume::add_component 0 1 585 373
/**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */
82
void UnionBoundingVolume::add_component(GeometricBoundingVolume const *component);

1275 19 filter_intersection 0 4 1428 40 UnionBoundingVolume::filter_intersection 0 1 586 104
/**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */
76
void UnionBoundingVolume::filter_intersection(BoundingVolume const *volume);

1276 14 get_class_type 0 4 1428 35 UnionBoundingVolume::get_class_type 0 1 587 0
60
static TypeHandle UnionBoundingVolume::get_class_type(void);

1277 20 ~UnionBoundingVolume 0 4 1428 41 UnionBoundingVolume::~UnionBoundingVolume 0 0 0
48
UnionBoundingVolume::~UnionBoundingVolume(void);

1278 10 Randomizer 0 4 1429 22 Randomizer::Randomizer 0 2 588 589 120
/**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 *
 */
113
inline Randomizer::Randomizer(unsigned long int seed = 0);
inline Randomizer::Randomizer(Randomizer const &copy);

1279 10 operator = 0 4 1429 22 Randomizer::operator = 0 1 590 0
59
inline void Randomizer::operator =(Randomizer const &copy);

1280 10 random_int 0 4 1429 22 Randomizer::random_int 0 1 591 60
/**
 * Returns a random integer in the range [0, range).
 */
45
inline int Randomizer::random_int(int range);

1281 11 random_real 0 4 1429 23 Randomizer::random_real 0 1 592 59
/**
 * Returns a random double in the range [0, range).
 */
52
inline double Randomizer::random_real(double range);

1282 16 random_real_unit 0 4 1429 28 Randomizer::random_real_unit 0 1 593 60
/**
 * Returns a random double in the range [-0.5, 0.5).
 */
49
inline double Randomizer::random_real_unit(void);

1283 13 get_next_seed 0 4 1429 25 Randomizer::get_next_seed 0 1 594 77
/**
 * Returns a random seed value for the next global Randomizer object.
 */
64
static inline unsigned long int Randomizer::get_next_seed(void);

1284 8 get_seed 0 4 1429 20 Randomizer::get_seed 0 1 595 126
/**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */
52
inline unsigned long int Randomizer::get_seed(void);

1285 11 ~Randomizer 0 4 1429 23 Randomizer::~Randomizer 0 0 0
30
Randomizer::~Randomizer(void);

1286 8 get_seed 0 4 1430 21 PerlinNoise::get_seed 0 1 596 127
/**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */
53
inline unsigned long int PerlinNoise::get_seed(void);

1287 12 ~PerlinNoise 0 4 1430 25 PerlinNoise::~PerlinNoise 0 0 0
32
PerlinNoise::~PerlinNoise(void);

1288 12 PerlinNoise2 0 4 1431 26 PerlinNoise2::PerlinNoise2 0 3 597 598 599 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
208
inline PerlinNoise2::PerlinNoise2(void);
inline PerlinNoise2::PerlinNoise2(double sx, double sy, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise2::PerlinNoise2(PerlinNoise2 const &copy);

1289 10 operator = 0 4 1431 24 PerlinNoise2::operator = 0 1 600 0
63
inline void PerlinNoise2::operator =(PerlinNoise2 const &copy);

1290 9 set_scale 0 4 1431 23 PerlinNoise2::set_scale 0 4 601 602 603 604 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
233
inline void PerlinNoise2::set_scale(double scale);
inline void PerlinNoise2::set_scale(double sx, double sy);
inline void PerlinNoise2::set_scale(LVecBase2f const &scale);
inline void PerlinNoise2::set_scale(LVecBase2d const &scale);

1291 5 noise 0 4 1431 19 PerlinNoise2::noise 0 3 605 606 607 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
184
inline double PerlinNoise2::noise(double x, double y) const;
inline float PerlinNoise2::noise(LVecBase2f const &value) const;
double PerlinNoise2::noise(LVecBase2d const &value) const;

1292 11 operator () 0 4 1431 25 PerlinNoise2::operator () 0 3 608 609 610 0
209
inline double PerlinNoise2::operator ()(double x, double y) const;
inline float PerlinNoise2::operator ()(LVecBase2f const &value) const;
inline double PerlinNoise2::operator ()(LVecBase2d const &value) const;

1293 13 ~PerlinNoise2 0 4 1431 27 PerlinNoise2::~PerlinNoise2 0 0 0
34
PerlinNoise2::~PerlinNoise2(void);

1294 12 PerlinNoise3 0 4 1432 26 PerlinNoise3::PerlinNoise3 0 3 611 612 613 400
/**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */

/**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */

/**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */
219
inline PerlinNoise3::PerlinNoise3(void);
inline PerlinNoise3::PerlinNoise3(double sx, double sy, double sz, int table_size = 256, unsigned long int seed = 0);
inline PerlinNoise3::PerlinNoise3(PerlinNoise3 const &copy);

1295 10 operator = 0 4 1432 24 PerlinNoise3::operator = 0 1 614 0
63
inline void PerlinNoise3::operator =(PerlinNoise3 const &copy);

1296 9 set_scale 0 4 1432 23 PerlinNoise3::set_scale 0 4 615 616 617 618 222
/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */

/**
 * Changes the scale (frequency) of the noise.
 */
244
inline void PerlinNoise3::set_scale(double scale);
inline void PerlinNoise3::set_scale(double sx, double sy, double sz);
inline void PerlinNoise3::set_scale(LVecBase3f const &scale);
inline void PerlinNoise3::set_scale(LVecBase3d const &scale);

1297 5 noise 0 4 1432 19 PerlinNoise3::noise 0 3 619 620 621 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
194
inline double PerlinNoise3::noise(double x, double y, double z) const;
inline float PerlinNoise3::noise(LVecBase3f const &value) const;
double PerlinNoise3::noise(LVecBase3d const &value) const;

1298 11 operator () 0 4 1432 25 PerlinNoise3::operator () 0 3 622 623 624 0
219
inline double PerlinNoise3::operator ()(double x, double y, double z) const;
inline float PerlinNoise3::operator ()(LVecBase3f const &value) const;
inline double PerlinNoise3::operator ()(LVecBase3d const &value) const;

1299 13 ~PerlinNoise3 0 4 1432 27 PerlinNoise3::~PerlinNoise3 0 0 0
34
PerlinNoise3::~PerlinNoise3(void);

1300 9 rotate_to 0 1 0 9 rotate_to 0 4 699 700 701 702 0
287
void rotate_to(LMatrix3f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix3d &mat, LVector3d const &a, LVector3d const &b);
void rotate_to(LMatrix4f &mat, LVector3f const &a, LVector3f const &b);
void rotate_to(LMatrix4d &mat, LVector3d const &a, LVector3d const &b);

1301 19 StackedPerlinNoise2 0 4 1489 40 StackedPerlinNoise2::StackedPerlinNoise2 0 3 625 626 627 555
/**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */
314
inline StackedPerlinNoise2::StackedPerlinNoise2(void);
StackedPerlinNoise2::StackedPerlinNoise2(double sx, double sy, int num_levels = 2, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise2::StackedPerlinNoise2(StackedPerlinNoise2 const &copy);

1302 10 operator = 0 4 1489 31 StackedPerlinNoise2::operator = 0 1 628 0
70
void StackedPerlinNoise2::operator =(StackedPerlinNoise2 const &copy);

1303 9 add_level 0 4 1489 30 StackedPerlinNoise2::add_level 0 1 629 95
/**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise2::add_level(PerlinNoise2 const &level, double amp = 1.0);

1304 5 clear 0 4 1489 26 StackedPerlinNoise2::clear 0 1 630 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise2::clear(void);

1305 5 noise 0 4 1489 26 StackedPerlinNoise2::noise 0 3 631 632 633 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
187
inline double StackedPerlinNoise2::noise(double x, double y);
inline float StackedPerlinNoise2::noise(LVecBase2f const &value);
double StackedPerlinNoise2::noise(LVecBase2d const &value);

1306 11 operator () 0 4 1489 32 StackedPerlinNoise2::operator () 0 3 634 635 636 0
212
inline double StackedPerlinNoise2::operator ()(double x, double y);
inline float StackedPerlinNoise2::operator ()(LVecBase2f const &value);
inline double StackedPerlinNoise2::operator ()(LVecBase2d const &value);

1307 20 ~StackedPerlinNoise2 0 4 1489 41 StackedPerlinNoise2::~StackedPerlinNoise2 0 0 0
48
StackedPerlinNoise2::~StackedPerlinNoise2(void);

1308 19 StackedPerlinNoise3 0 4 1490 40 StackedPerlinNoise3::StackedPerlinNoise3 0 3 637 638 639 555
/**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */

/**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */

/**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */
325
inline StackedPerlinNoise3::StackedPerlinNoise3(void);
StackedPerlinNoise3::StackedPerlinNoise3(double sx, double sy, double sz, int num_levels = 3, double scale_factor = 4.0, double amp_scale = 0.5, int table_size = 256, unsigned long int seed = 0);
StackedPerlinNoise3::StackedPerlinNoise3(StackedPerlinNoise3 const &copy);

1309 10 operator = 0 4 1490 31 StackedPerlinNoise3::operator = 0 1 640 0
70
void StackedPerlinNoise3::operator =(StackedPerlinNoise3 const &copy);

1310 9 add_level 0 4 1490 30 StackedPerlinNoise3::add_level 0 1 641 95
/**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */
81
void StackedPerlinNoise3::add_level(PerlinNoise3 const &level, double amp = 1.0);

1311 5 clear 0 4 1490 26 StackedPerlinNoise3::clear 0 1 642 98
/**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */
38
void StackedPerlinNoise3::clear(void);

1312 5 noise 0 4 1490 26 StackedPerlinNoise3::noise 0 3 643 644 645 178
/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */

/**
 * Returns the noise function of the three inputs.
 */
197
inline double StackedPerlinNoise3::noise(double x, double y, double z);
inline float StackedPerlinNoise3::noise(LVecBase3f const &value);
double StackedPerlinNoise3::noise(LVecBase3d const &value);

1313 11 operator () 0 4 1490 32 StackedPerlinNoise3::operator () 0 3 646 647 648 0
222
inline double StackedPerlinNoise3::operator ()(double x, double y, double z);
inline float StackedPerlinNoise3::operator ()(LVecBase3f const &value);
inline double StackedPerlinNoise3::operator ()(LVecBase3d const &value);

1314 20 ~StackedPerlinNoise3 0 4 1490 41 StackedPerlinNoise3::~StackedPerlinNoise3 0 0 0
48
StackedPerlinNoise3::~StackedPerlinNoise3(void);

1315 12 Triangulator 0 4 1491 26 Triangulator::Triangulator 0 2 649 650 10
/**
 *
 */
100
Triangulator::Triangulator(void);
inline Triangulator::Triangulator(Triangulator const &) = default;

1316 5 clear 0 4 1491 19 Triangulator::clear 0 1 651 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
31
void Triangulator::clear(void);

1317 10 add_vertex 0 4 1491 24 Triangulator::add_vertex 0 2 652 653 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
109
int Triangulator::add_vertex(LPoint2d const &point);
inline int Triangulator::add_vertex(double x, double y);

1318 16 get_num_vertices 0 4 1491 30 Triangulator::get_num_vertices 0 1 654 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
54
inline int Triangulator::get_num_vertices(void) const;

1319 10 get_vertex 0 4 1491 24 Triangulator::get_vertex 0 1 655 34
/**
 * Returns the nth vertex.
 */
61
inline LPoint2d const &Triangulator::get_vertex(int n) const;

1320 13 clear_polygon 0 4 1491 27 Triangulator::clear_polygon 0 1 656 112
/**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */
39
void Triangulator::clear_polygon(void);

1321 18 add_polygon_vertex 0 4 1491 32 Triangulator::add_polygon_vertex 0 1 657 334
/**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */
49
void Triangulator::add_polygon_vertex(int index);

1322 15 is_left_winding 0 4 1491 29 Triangulator::is_left_winding 0 1 658 145
/**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */
54
inline bool Triangulator::is_left_winding(void) const;

1323 10 begin_hole 0 4 1491 24 Triangulator::begin_hole 0 1 659 78
/**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */
36
void Triangulator::begin_hole(void);

1324 15 add_hole_vertex 0 4 1491 29 Triangulator::add_hole_vertex 0 1 660 277
/**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */
46
void Triangulator::add_hole_vertex(int index);

1325 11 triangulate 0 4 1491 25 Triangulator::triangulate 0 1 661 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
37
void Triangulator::triangulate(void);

1326 17 get_num_triangles 0 4 1491 31 Triangulator::get_num_triangles 0 1 662 94
/**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */
48
int Triangulator::get_num_triangles(void) const;

1327 15 get_triangle_v0 0 4 1491 29 Triangulator::get_triangle_v0 0 1 663 194
/**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v0(int n) const;

1328 15 get_triangle_v1 0 4 1491 29 Triangulator::get_triangle_v1 0 1 664 194
/**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v1(int n) const;

1329 15 get_triangle_v2 0 4 1491 29 Triangulator::get_triangle_v2 0 1 665 194
/**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */
47
int Triangulator::get_triangle_v2(int n) const;

1330 13 ~Triangulator 0 4 1491 27 Triangulator::~Triangulator 0 0 0
34
Triangulator::~Triangulator(void);

1331 13 Triangulator3 0 4 1494 28 Triangulator3::Triangulator3 0 2 666 667 10
/**
 *
 */
105
Triangulator3::Triangulator3(void);
inline Triangulator3::Triangulator3(Triangulator3 const &) = default;

1332 5 clear 0 4 1494 20 Triangulator3::clear 0 1 668 115
/**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */
32
void Triangulator3::clear(void);

1333 10 add_vertex 0 4 1494 25 Triangulator3::add_vertex 0 2 669 670 166
/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */

/**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */
121
int Triangulator3::add_vertex(LPoint3d const &point);
inline int Triangulator3::add_vertex(double x, double y, double z);

1334 16 get_num_vertices 0 4 1494 31 Triangulator3::get_num_vertices 0 1 671 267
/**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */
55
inline int Triangulator3::get_num_vertices(void) const;

1335 10 get_vertex 0 4 1494 25 Triangulator3::get_vertex 0 1 672 34
/**
 * Returns the nth vertex.
 */
62
inline LPoint3d const &Triangulator3::get_vertex(int n) const;

1336 11 triangulate 0 4 1494 26 Triangulator3::triangulate 0 1 673 181
/**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */
38
void Triangulator3::triangulate(void);

1337 9 get_plane 0 4 1494 24 Triangulator3::get_plane 0 1 674 100
/**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */
59
inline LPlaned const &Triangulator3::get_plane(void) const;

1338 14 ~Triangulator3 0 4 1494 29 Triangulator3::~Triangulator3 0 0 0
36
Triangulator3::~Triangulator3(void);

702
1 0 0 7 8 1500 716 0 0 1 4 copy 1 1498  
2 0 0 7 8 1500 716 0 0 1 4 copy 1 1501  
3 0 0 7 8 1500 716 0 0 1 6 source 1 1503  
4 0 0 6 9 1506 0 0 0 1 4 this 3 1498  
5 0 0 6 10 1507 0 0 0 2 4 this 3 1498  1 n 1 1506  
6 0 0 6 11 1507 0 0 0 2 4 this 3 1498  1 n 1 1506  
7 0 0 6 12 1510 0 0 0 1 4 this 3 1498  
8 0 0 6 13 1510 0 0 0 3 4 this 3 1498  1 n 1 1506  5 count 1 1506  
9 0 0 6 14 1511 0 0 0 1 4 this 3 1498  
10 0 0 6 15 1511 0 0 0 1 4 this 3 1498  
11 0 0 6 16 1511 0 0 0 3 4 this 3 1498  4 view 1 1512  5 flags 1 1511  
12 0 0 4 17 1515 0 0 0 2 4 this 3 1498  4 view 1 1512  
13 0 0 4 5 1515 0 0 0 1 4 this 3 1516  
14 0 0 4 6 1515 0 0 0 2 4 this 3 1517  3 out 1 1519  
15 0 0 7 25 1523 730 0 0 1 4 copy 1 1521  
16 0 0 7 25 1523 730 0 0 1 4 copy 1 1524  
17 0 0 7 25 1523 730 0 0 1 6 source 1 1503  
18 0 0 6 26 1506 0 0 0 1 4 this 3 1521  
19 0 0 6 27 1526 0 0 0 2 4 this 3 1521  1 n 1 1506  
20 0 0 6 28 1526 0 0 0 2 4 this 3 1521  1 n 1 1506  
21 0 0 6 29 1510 0 0 0 1 4 this 3 1521  
22 0 0 6 30 1510 0 0 0 3 4 this 3 1521  1 n 1 1506  5 count 1 1506  
23 0 0 6 31 1511 0 0 0 1 4 this 3 1521  
24 0 0 6 32 1511 0 0 0 1 4 this 3 1521  
25 0 0 6 33 1511 0 0 0 3 4 this 3 1521  4 view 1 1512  5 flags 1 1511  
26 0 0 4 34 1515 0 0 0 2 4 this 3 1521  4 view 1 1512  
27 0 0 4 22 1515 0 0 0 1 4 this 3 1529  
28 0 0 4 23 1515 0 0 0 2 4 this 3 1530  3 out 1 1519  
29 0 0 7 42 1534 744 0 0 1 4 copy 1 1532  
30 0 0 7 42 1534 744 0 0 1 4 copy 1 1535  
31 0 0 7 42 1534 744 0 0 1 6 source 1 1503  
32 0 0 6 43 1506 0 0 0 1 4 this 3 1532  
33 0 0 6 44 1537 0 0 0 2 4 this 3 1532  1 n 1 1506  
34 0 0 6 45 1537 0 0 0 2 4 this 3 1532  1 n 1 1506  
35 0 0 6 46 1510 0 0 0 1 4 this 3 1532  
36 0 0 6 47 1510 0 0 0 3 4 this 3 1532  1 n 1 1506  5 count 1 1506  
37 0 0 6 48 1511 0 0 0 1 4 this 3 1532  
38 0 0 6 49 1511 0 0 0 1 4 this 3 1532  
39 0 0 6 50 1511 0 0 0 3 4 this 3 1532  4 view 1 1512  5 flags 1 1511  
40 0 0 4 51 1515 0 0 0 2 4 this 3 1532  4 view 1 1512  
41 0 0 4 39 1515 0 0 0 1 4 this 3 1540  
42 0 0 4 40 1515 0 0 0 2 4 this 3 1541  3 out 1 1519  
43 0 0 7 59 1545 758 0 0 1 4 copy 1 1543  
44 0 0 7 59 1545 758 0 0 1 4 copy 1 1546  
45 0 0 7 59 1545 758 0 0 1 6 source 1 1503  
46 0 0 6 60 1506 0 0 0 1 4 this 3 1543  
47 0 0 6 61 1548 0 0 0 2 4 this 3 1543  1 n 1 1506  
48 0 0 6 62 1548 0 0 0 2 4 this 3 1543  1 n 1 1506  
49 0 0 6 63 1510 0 0 0 1 4 this 3 1543  
50 0 0 6 64 1510 0 0 0 3 4 this 3 1543  1 n 1 1506  5 count 1 1506  
51 0 0 6 65 1511 0 0 0 1 4 this 3 1543  
52 0 0 6 66 1511 0 0 0 1 4 this 3 1543  
53 0 0 6 67 1511 0 0 0 3 4 this 3 1543  4 view 1 1512  5 flags 1 1511  
54 0 0 4 68 1515 0 0 0 2 4 this 3 1543  4 view 1 1512  
55 0 0 4 56 1515 0 0 0 1 4 this 3 1551  
56 0 0 4 57 1515 0 0 0 2 4 this 3 1552  3 out 1 1519  
57 0 0 7 76 1556 772 0 0 1 4 copy 1 1554  
58 0 0 7 76 1556 772 0 0 1 4 copy 1 1557  
59 0 0 7 76 1556 772 0 0 1 6 source 1 1503  
60 0 0 6 77 1506 0 0 0 1 4 this 3 1554  
61 0 0 6 78 1559 0 0 0 2 4 this 3 1554  1 n 1 1506  
62 0 0 6 79 1559 0 0 0 2 4 this 3 1554  1 n 1 1506  
63 0 0 6 80 1510 0 0 0 1 4 this 3 1554  
64 0 0 6 81 1510 0 0 0 3 4 this 3 1554  1 n 1 1506  5 count 1 1506  
65 0 0 6 82 1511 0 0 0 1 4 this 3 1554  
66 0 0 6 83 1511 0 0 0 1 4 this 3 1554  
67 0 0 6 84 1511 0 0 0 3 4 this 3 1554  4 view 1 1512  5 flags 1 1511  
68 0 0 4 85 1515 0 0 0 2 4 this 3 1554  4 view 1 1512  
69 0 0 4 73 1515 0 0 0 1 4 this 3 1562  
70 0 0 4 74 1515 0 0 0 2 4 this 3 1563  3 out 1 1519  
71 0 0 7 93 1567 786 0 0 1 4 copy 1 1565  
72 0 0 7 93 1567 786 0 0 1 4 copy 1 1568  
73 0 0 7 93 1567 786 0 0 1 6 source 1 1503  
74 0 0 6 94 1506 0 0 0 1 4 this 3 1565  
75 0 0 6 95 1570 0 0 0 2 4 this 3 1565  1 n 1 1506  
76 0 0 6 96 1570 0 0 0 2 4 this 3 1565  1 n 1 1506  
77 0 0 6 97 1510 0 0 0 1 4 this 3 1565  
78 0 0 6 98 1510 0 0 0 3 4 this 3 1565  1 n 1 1506  5 count 1 1506  
79 0 0 6 99 1511 0 0 0 1 4 this 3 1565  
80 0 0 6 100 1511 0 0 0 1 4 this 3 1565  
81 0 0 6 101 1511 0 0 0 3 4 this 3 1565  4 view 1 1512  5 flags 1 1511  
82 0 0 4 102 1515 0 0 0 2 4 this 3 1565  4 view 1 1512  
83 0 0 4 90 1515 0 0 0 1 4 this 3 1573  
84 0 0 4 91 1515 0 0 0 2 4 this 3 1574  3 out 1 1519  
85 0 0 7 110 1578 800 0 0 1 4 copy 1 1576  
86 0 0 7 110 1578 800 0 0 1 4 copy 1 1579  
87 0 0 7 110 1578 800 0 0 1 6 source 1 1503  
88 0 0 6 111 1506 0 0 0 1 4 this 3 1576  
89 0 0 6 112 1581 0 0 0 2 4 this 3 1576  1 n 1 1506  
90 0 0 6 113 1581 0 0 0 2 4 this 3 1576  1 n 1 1506  
91 0 0 6 114 1510 0 0 0 1 4 this 3 1576  
92 0 0 6 115 1510 0 0 0 3 4 this 3 1576  1 n 1 1506  5 count 1 1506  
93 0 0 6 116 1511 0 0 0 1 4 this 3 1576  
94 0 0 6 117 1511 0 0 0 1 4 this 3 1576  
95 0 0 6 118 1511 0 0 0 3 4 this 3 1576  4 view 1 1512  5 flags 1 1511  
96 0 0 4 119 1515 0 0 0 2 4 this 3 1576  4 view 1 1512  
97 0 0 4 107 1515 0 0 0 1 4 this 3 1584  
98 0 0 4 108 1515 0 0 0 2 4 this 3 1585  3 out 1 1519  
99 0 0 7 127 1589 814 0 0 1 4 copy 1 1587  
100 0 0 7 127 1589 814 0 0 1 4 copy 1 1590  
101 0 0 7 127 1589 814 0 0 1 6 source 1 1503  
102 0 0 6 128 1506 0 0 0 1 4 this 3 1587  
103 0 0 6 129 1592 0 0 0 2 4 this 3 1587  1 n 1 1506  
104 0 0 6 130 1592 0 0 0 2 4 this 3 1587  1 n 1 1506  
105 0 0 6 131 1510 0 0 0 1 4 this 3 1587  
106 0 0 6 132 1510 0 0 0 3 4 this 3 1587  1 n 1 1506  5 count 1 1506  
107 0 0 6 133 1511 0 0 0 1 4 this 3 1587  
108 0 0 6 134 1511 0 0 0 1 4 this 3 1587  
109 0 0 6 135 1511 0 0 0 3 4 this 3 1587  4 view 1 1512  5 flags 1 1511  
110 0 0 4 136 1515 0 0 0 2 4 this 3 1587  4 view 1 1512  
111 0 0 4 124 1515 0 0 0 1 4 this 3 1595  
112 0 0 4 125 1515 0 0 0 2 4 this 3 1596  3 out 1 1519  
113 0 0 7 144 1600 828 0 0 1 4 copy 1 1598  
114 0 0 7 144 1600 828 0 0 1 4 copy 1 1601  
115 0 0 7 144 1600 828 0 0 1 6 source 1 1503  
116 0 0 6 145 1506 0 0 0 1 4 this 3 1598  
117 0 0 6 146 1603 0 0 0 2 4 this 3 1598  1 n 1 1506  
118 0 0 6 147 1603 0 0 0 2 4 this 3 1598  1 n 1 1506  
119 0 0 6 148 1510 0 0 0 1 4 this 3 1598  
120 0 0 6 149 1510 0 0 0 3 4 this 3 1598  1 n 1 1506  5 count 1 1506  
121 0 0 6 150 1511 0 0 0 1 4 this 3 1598  
122 0 0 6 151 1511 0 0 0 1 4 this 3 1598  
123 0 0 6 152 1511 0 0 0 3 4 this 3 1598  4 view 1 1512  5 flags 1 1511  
124 0 0 4 153 1515 0 0 0 2 4 this 3 1598  4 view 1 1512  
125 0 0 4 141 1515 0 0 0 1 4 this 3 1606  
126 0 0 4 142 1515 0 0 0 2 4 this 3 1607  3 out 1 1519  
127 0 0 7 161 1611 842 0 0 1 4 copy 1 1609  
128 0 0 7 161 1611 842 0 0 1 4 copy 1 1612  
129 0 0 7 161 1611 842 0 0 1 6 source 1 1503  
130 0 0 6 162 1506 0 0 0 1 4 this 3 1609  
131 0 0 6 163 1614 0 0 0 2 4 this 3 1609  1 n 1 1506  
132 0 0 6 164 1614 0 0 0 2 4 this 3 1609  1 n 1 1506  
133 0 0 6 165 1510 0 0 0 1 4 this 3 1609  
134 0 0 6 166 1510 0 0 0 3 4 this 3 1609  1 n 1 1506  5 count 1 1506  
135 0 0 6 167 1511 0 0 0 1 4 this 3 1609  
136 0 0 6 168 1511 0 0 0 1 4 this 3 1609  
137 0 0 6 169 1511 0 0 0 3 4 this 3 1609  4 view 1 1512  5 flags 1 1511  
138 0 0 4 170 1515 0 0 0 2 4 this 3 1609  4 view 1 1512  
139 0 0 4 158 1515 0 0 0 1 4 this 3 1617  
140 0 0 4 159 1515 0 0 0 2 4 this 3 1618  3 out 1 1519  
141 0 0 7 178 1622 856 0 0 1 4 copy 1 1620  
142 0 0 7 178 1622 856 0 0 1 4 copy 1 1623  
143 0 0 7 178 1622 856 0 0 1 6 source 1 1503  
144 0 0 6 179 1506 0 0 0 1 4 this 3 1620  
145 0 0 6 180 1625 0 0 0 2 4 this 3 1620  1 n 1 1506  
146 0 0 6 181 1625 0 0 0 2 4 this 3 1620  1 n 1 1506  
147 0 0 6 182 1510 0 0 0 1 4 this 3 1620  
148 0 0 6 183 1510 0 0 0 3 4 this 3 1620  1 n 1 1506  5 count 1 1506  
149 0 0 6 184 1511 0 0 0 1 4 this 3 1620  
150 0 0 6 185 1511 0 0 0 1 4 this 3 1620  
151 0 0 6 186 1511 0 0 0 3 4 this 3 1620  4 view 1 1512  5 flags 1 1511  
152 0 0 4 187 1515 0 0 0 2 4 this 3 1620  4 view 1 1512  
153 0 0 4 175 1515 0 0 0 1 4 this 3 1628  
154 0 0 4 176 1515 0 0 0 2 4 this 3 1629  3 out 1 1519  
155 0 0 7 195 1633 870 0 0 1 4 copy 1 1631  
156 0 0 7 195 1633 870 0 0 1 4 copy 1 1634  
157 0 0 7 195 1633 870 0 0 1 6 source 1 1503  
158 0 0 6 196 1506 0 0 0 1 4 this 3 1631  
159 0 0 6 197 1636 0 0 0 2 4 this 3 1631  1 n 1 1506  
160 0 0 6 198 1636 0 0 0 2 4 this 3 1631  1 n 1 1506  
161 0 0 6 199 1510 0 0 0 1 4 this 3 1631  
162 0 0 6 200 1510 0 0 0 3 4 this 3 1631  1 n 1 1506  5 count 1 1506  
163 0 0 6 201 1511 0 0 0 1 4 this 3 1631  
164 0 0 6 202 1511 0 0 0 1 4 this 3 1631  
165 0 0 6 203 1511 0 0 0 3 4 this 3 1631  4 view 1 1512  5 flags 1 1511  
166 0 0 4 204 1515 0 0 0 2 4 this 3 1631  4 view 1 1512  
167 0 0 4 192 1515 0 0 0 1 4 this 3 1639  
168 0 0 4 193 1515 0 0 0 2 4 this 3 1640  3 out 1 1519  
169 0 0 7 212 1644 884 0 0 1 4 copy 1 1642  
170 0 0 7 212 1644 884 0 0 1 4 copy 1 1645  
171 0 0 7 212 1644 884 0 0 1 6 source 1 1503  
172 0 0 6 213 1506 0 0 0 1 4 this 3 1642  
173 0 0 6 214 1647 0 0 0 2 4 this 3 1642  1 n 1 1506  
174 0 0 6 215 1647 0 0 0 2 4 this 3 1642  1 n 1 1506  
175 0 0 6 216 1510 0 0 0 1 4 this 3 1642  
176 0 0 6 217 1510 0 0 0 3 4 this 3 1642  1 n 1 1506  5 count 1 1506  
177 0 0 6 218 1511 0 0 0 1 4 this 3 1642  
178 0 0 6 219 1511 0 0 0 1 4 this 3 1642  
179 0 0 6 220 1511 0 0 0 3 4 this 3 1642  4 view 1 1512  5 flags 1 1511  
180 0 0 4 221 1515 0 0 0 2 4 this 3 1642  4 view 1 1512  
181 0 0 4 209 1515 0 0 0 1 4 this 3 1650  
182 0 0 4 210 1515 0 0 0 2 4 this 3 1651  3 out 1 1519  
183 0 0 7 224 1653 902 0 0 1 4 copy 1 1501  
184 0 0 7 224 1653 902 0 0 1 6 source 1 1503  
185 0 0 7 224 1653 902 0 0 1 11 type_handle 1 1654  
186 0 0 7 225 1653 902 0 0 2 1 n 1 1506  11 type_handle 1 1654  
187 0 0 6 226 1506 0 0 0 1 4 this 3 1501  
188 0 0 4 227 1515 0 0 0 2 4 this 3 1653  1 x 1 1507  
189 0 0 4 228 1515 0 0 0 1 4 this 3 1653  
190 0 0 6 229 1507 0 0 0 2 4 this 3 1501  1 n 1 1506  
191 0 0 4 230 1515 0 0 0 3 4 this 3 1653  1 n 1 1506  5 value 1 1507  
192 0 0 6 231 1507 0 0 0 2 4 this 3 1501  1 n 1 1506  
193 0 0 4 232 1515 0 0 0 3 4 this 3 1653  1 n 1 1506  5 value 1 1507  
194 0 0 6 233 1510 0 0 0 1 4 this 3 1501  
195 0 0 4 234 1515 0 0 0 2 4 this 3 1653  4 data 1 1510  
196 0 0 6 235 1510 0 0 0 3 4 this 3 1501  1 n 1 1506  5 count 1 1506  
197 0 0 4 236 1515 0 0 0 4 4 this 3 1653  1 n 1 1506  5 count 1 1506  4 data 1 1510  
198 0 0 6 237 1511 0 0 0 1 4 this 3 1501  
199 0 0 6 238 1511 0 0 0 1 4 this 3 1501  
200 0 0 6 239 1511 0 0 0 3 4 this 3 1653  4 view 1 1512  5 flags 1 1511  
201 0 0 4 240 1515 0 0 0 2 4 this 3 1501  4 view 1 1512  
202 0 0 7 243 1656 920 0 0 1 4 copy 1 1524  
203 0 0 7 243 1656 920 0 0 1 6 source 1 1503  
204 0 0 7 243 1656 920 0 0 1 11 type_handle 1 1654  
205 0 0 7 244 1656 920 0 0 2 1 n 1 1506  11 type_handle 1 1654  
206 0 0 6 245 1506 0 0 0 1 4 this 3 1524  
207 0 0 4 246 1515 0 0 0 2 4 this 3 1656  1 x 1 1526  
208 0 0 4 247 1515 0 0 0 1 4 this 3 1656  
209 0 0 6 248 1526 0 0 0 2 4 this 3 1524  1 n 1 1506  
210 0 0 4 249 1515 0 0 0 3 4 this 3 1656  1 n 1 1506  5 value 1 1526  
211 0 0 6 250 1526 0 0 0 2 4 this 3 1524  1 n 1 1506  
212 0 0 4 251 1515 0 0 0 3 4 this 3 1656  1 n 1 1506  5 value 1 1526  
213 0 0 6 252 1510 0 0 0 1 4 this 3 1524  
214 0 0 4 253 1515 0 0 0 2 4 this 3 1656  4 data 1 1510  
215 0 0 6 254 1510 0 0 0 3 4 this 3 1524  1 n 1 1506  5 count 1 1506  
216 0 0 4 255 1515 0 0 0 4 4 this 3 1656  1 n 1 1506  5 count 1 1506  4 data 1 1510  
217 0 0 6 256 1511 0 0 0 1 4 this 3 1524  
218 0 0 6 257 1511 0 0 0 1 4 this 3 1524  
219 0 0 6 258 1511 0 0 0 3 4 this 3 1656  4 view 1 1512  5 flags 1 1511  
220 0 0 4 259 1515 0 0 0 2 4 this 3 1524  4 view 1 1512  
221 0 0 7 262 1657 938 0 0 1 4 copy 1 1535  
222 0 0 7 262 1657 938 0 0 1 6 source 1 1503  
223 0 0 7 262 1657 938 0 0 1 11 type_handle 1 1654  
224 0 0 7 263 1657 938 0 0 2 1 n 1 1506  11 type_handle 1 1654  
225 0 0 6 264 1506 0 0 0 1 4 this 3 1535  
226 0 0 4 265 1515 0 0 0 2 4 this 3 1657  1 x 1 1537  
227 0 0 4 266 1515 0 0 0 1 4 this 3 1657  
228 0 0 6 267 1537 0 0 0 2 4 this 3 1535  1 n 1 1506  
229 0 0 4 268 1515 0 0 0 3 4 this 3 1657  1 n 1 1506  5 value 1 1537  
230 0 0 6 269 1537 0 0 0 2 4 this 3 1535  1 n 1 1506  
231 0 0 4 270 1515 0 0 0 3 4 this 3 1657  1 n 1 1506  5 value 1 1537  
232 0 0 6 271 1510 0 0 0 1 4 this 3 1535  
233 0 0 4 272 1515 0 0 0 2 4 this 3 1657  4 data 1 1510  
234 0 0 6 273 1510 0 0 0 3 4 this 3 1535  1 n 1 1506  5 count 1 1506  
235 0 0 4 274 1515 0 0 0 4 4 this 3 1657  1 n 1 1506  5 count 1 1506  4 data 1 1510  
236 0 0 6 275 1511 0 0 0 1 4 this 3 1535  
237 0 0 6 276 1511 0 0 0 1 4 this 3 1535  
238 0 0 6 277 1511 0 0 0 3 4 this 3 1657  4 view 1 1512  5 flags 1 1511  
239 0 0 4 278 1515 0 0 0 2 4 this 3 1535  4 view 1 1512  
240 0 0 7 281 1658 956 0 0 1 4 copy 1 1546  
241 0 0 7 281 1658 956 0 0 1 6 source 1 1503  
242 0 0 7 281 1658 956 0 0 1 11 type_handle 1 1654  
243 0 0 7 282 1658 956 0 0 2 1 n 1 1506  11 type_handle 1 1654  
244 0 0 6 283 1506 0 0 0 1 4 this 3 1546  
245 0 0 4 284 1515 0 0 0 2 4 this 3 1658  1 x 1 1548  
246 0 0 4 285 1515 0 0 0 1 4 this 3 1658  
247 0 0 6 286 1548 0 0 0 2 4 this 3 1546  1 n 1 1506  
248 0 0 4 287 1515 0 0 0 3 4 this 3 1658  1 n 1 1506  5 value 1 1548  
249 0 0 6 288 1548 0 0 0 2 4 this 3 1546  1 n 1 1506  
250 0 0 4 289 1515 0 0 0 3 4 this 3 1658  1 n 1 1506  5 value 1 1548  
251 0 0 6 290 1510 0 0 0 1 4 this 3 1546  
252 0 0 4 291 1515 0 0 0 2 4 this 3 1658  4 data 1 1510  
253 0 0 6 292 1510 0 0 0 3 4 this 3 1546  1 n 1 1506  5 count 1 1506  
254 0 0 4 293 1515 0 0 0 4 4 this 3 1658  1 n 1 1506  5 count 1 1506  4 data 1 1510  
255 0 0 6 294 1511 0 0 0 1 4 this 3 1546  
256 0 0 6 295 1511 0 0 0 1 4 this 3 1546  
257 0 0 6 296 1511 0 0 0 3 4 this 3 1658  4 view 1 1512  5 flags 1 1511  
258 0 0 4 297 1515 0 0 0 2 4 this 3 1546  4 view 1 1512  
259 0 0 7 300 1659 974 0 0 1 4 copy 1 1557  
260 0 0 7 300 1659 974 0 0 1 6 source 1 1503  
261 0 0 7 300 1659 974 0 0 1 11 type_handle 1 1654  
262 0 0 7 301 1659 974 0 0 2 1 n 1 1506  11 type_handle 1 1654  
263 0 0 6 302 1506 0 0 0 1 4 this 3 1557  
264 0 0 4 303 1515 0 0 0 2 4 this 3 1659  1 x 1 1559  
265 0 0 4 304 1515 0 0 0 1 4 this 3 1659  
266 0 0 6 305 1559 0 0 0 2 4 this 3 1557  1 n 1 1506  
267 0 0 4 306 1515 0 0 0 3 4 this 3 1659  1 n 1 1506  5 value 1 1559  
268 0 0 6 307 1559 0 0 0 2 4 this 3 1557  1 n 1 1506  
269 0 0 4 308 1515 0 0 0 3 4 this 3 1659  1 n 1 1506  5 value 1 1559  
270 0 0 6 309 1510 0 0 0 1 4 this 3 1557  
271 0 0 4 310 1515 0 0 0 2 4 this 3 1659  4 data 1 1510  
272 0 0 6 311 1510 0 0 0 3 4 this 3 1557  1 n 1 1506  5 count 1 1506  
273 0 0 4 312 1515 0 0 0 4 4 this 3 1659  1 n 1 1506  5 count 1 1506  4 data 1 1510  
274 0 0 6 313 1511 0 0 0 1 4 this 3 1557  
275 0 0 6 314 1511 0 0 0 1 4 this 3 1557  
276 0 0 6 315 1511 0 0 0 3 4 this 3 1659  4 view 1 1512  5 flags 1 1511  
277 0 0 4 316 1515 0 0 0 2 4 this 3 1557  4 view 1 1512  
278 0 0 7 319 1660 992 0 0 1 4 copy 1 1568  
279 0 0 7 319 1660 992 0 0 1 6 source 1 1503  
280 0 0 7 319 1660 992 0 0 1 11 type_handle 1 1654  
281 0 0 7 320 1660 992 0 0 2 1 n 1 1506  11 type_handle 1 1654  
282 0 0 6 321 1506 0 0 0 1 4 this 3 1568  
283 0 0 4 322 1515 0 0 0 2 4 this 3 1660  1 x 1 1570  
284 0 0 4 323 1515 0 0 0 1 4 this 3 1660  
285 0 0 6 324 1570 0 0 0 2 4 this 3 1568  1 n 1 1506  
286 0 0 4 325 1515 0 0 0 3 4 this 3 1660  1 n 1 1506  5 value 1 1570  
287 0 0 6 326 1570 0 0 0 2 4 this 3 1568  1 n 1 1506  
288 0 0 4 327 1515 0 0 0 3 4 this 3 1660  1 n 1 1506  5 value 1 1570  
289 0 0 6 328 1510 0 0 0 1 4 this 3 1568  
290 0 0 4 329 1515 0 0 0 2 4 this 3 1660  4 data 1 1510  
291 0 0 6 330 1510 0 0 0 3 4 this 3 1568  1 n 1 1506  5 count 1 1506  
292 0 0 4 331 1515 0 0 0 4 4 this 3 1660  1 n 1 1506  5 count 1 1506  4 data 1 1510  
293 0 0 6 332 1511 0 0 0 1 4 this 3 1568  
294 0 0 6 333 1511 0 0 0 1 4 this 3 1568  
295 0 0 6 334 1511 0 0 0 3 4 this 3 1660  4 view 1 1512  5 flags 1 1511  
296 0 0 4 335 1515 0 0 0 2 4 this 3 1568  4 view 1 1512  
297 0 0 7 338 1661 1010 0 0 1 4 copy 1 1579  
298 0 0 7 338 1661 1010 0 0 1 6 source 1 1503  
299 0 0 7 338 1661 1010 0 0 1 11 type_handle 1 1654  
300 0 0 7 339 1661 1010 0 0 2 1 n 1 1506  11 type_handle 1 1654  
301 0 0 6 340 1506 0 0 0 1 4 this 3 1579  
302 0 0 4 341 1515 0 0 0 2 4 this 3 1661  1 x 1 1581  
303 0 0 4 342 1515 0 0 0 1 4 this 3 1661  
304 0 0 6 343 1581 0 0 0 2 4 this 3 1579  1 n 1 1506  
305 0 0 4 344 1515 0 0 0 3 4 this 3 1661  1 n 1 1506  5 value 1 1581  
306 0 0 6 345 1581 0 0 0 2 4 this 3 1579  1 n 1 1506  
307 0 0 4 346 1515 0 0 0 3 4 this 3 1661  1 n 1 1506  5 value 1 1581  
308 0 0 6 347 1510 0 0 0 1 4 this 3 1579  
309 0 0 4 348 1515 0 0 0 2 4 this 3 1661  4 data 1 1510  
310 0 0 6 349 1510 0 0 0 3 4 this 3 1579  1 n 1 1506  5 count 1 1506  
311 0 0 4 350 1515 0 0 0 4 4 this 3 1661  1 n 1 1506  5 count 1 1506  4 data 1 1510  
312 0 0 6 351 1511 0 0 0 1 4 this 3 1579  
313 0 0 6 352 1511 0 0 0 1 4 this 3 1579  
314 0 0 6 353 1511 0 0 0 3 4 this 3 1661  4 view 1 1512  5 flags 1 1511  
315 0 0 4 354 1515 0 0 0 2 4 this 3 1579  4 view 1 1512  
316 0 0 7 357 1662 1028 0 0 1 4 copy 1 1590  
317 0 0 7 357 1662 1028 0 0 1 6 source 1 1503  
318 0 0 7 357 1662 1028 0 0 1 11 type_handle 1 1654  
319 0 0 7 358 1662 1028 0 0 2 1 n 1 1506  11 type_handle 1 1654  
320 0 0 6 359 1506 0 0 0 1 4 this 3 1590  
321 0 0 4 360 1515 0 0 0 2 4 this 3 1662  1 x 1 1592  
322 0 0 4 361 1515 0 0 0 1 4 this 3 1662  
323 0 0 6 362 1592 0 0 0 2 4 this 3 1590  1 n 1 1506  
324 0 0 4 363 1515 0 0 0 3 4 this 3 1662  1 n 1 1506  5 value 1 1592  
325 0 0 6 364 1592 0 0 0 2 4 this 3 1590  1 n 1 1506  
326 0 0 4 365 1515 0 0 0 3 4 this 3 1662  1 n 1 1506  5 value 1 1592  
327 0 0 6 366 1510 0 0 0 1 4 this 3 1590  
328 0 0 4 367 1515 0 0 0 2 4 this 3 1662  4 data 1 1510  
329 0 0 6 368 1510 0 0 0 3 4 this 3 1590  1 n 1 1506  5 count 1 1506  
330 0 0 4 369 1515 0 0 0 4 4 this 3 1662  1 n 1 1506  5 count 1 1506  4 data 1 1510  
331 0 0 6 370 1511 0 0 0 1 4 this 3 1590  
332 0 0 6 371 1511 0 0 0 1 4 this 3 1590  
333 0 0 6 372 1511 0 0 0 3 4 this 3 1662  4 view 1 1512  5 flags 1 1511  
334 0 0 4 373 1515 0 0 0 2 4 this 3 1590  4 view 1 1512  
335 0 0 7 376 1663 1046 0 0 1 4 copy 1 1601  
336 0 0 7 376 1663 1046 0 0 1 6 source 1 1503  
337 0 0 7 376 1663 1046 0 0 1 11 type_handle 1 1654  
338 0 0 7 377 1663 1046 0 0 2 1 n 1 1506  11 type_handle 1 1654  
339 0 0 6 378 1506 0 0 0 1 4 this 3 1601  
340 0 0 4 379 1515 0 0 0 2 4 this 3 1663  1 x 1 1603  
341 0 0 4 380 1515 0 0 0 1 4 this 3 1663  
342 0 0 6 381 1603 0 0 0 2 4 this 3 1601  1 n 1 1506  
343 0 0 4 382 1515 0 0 0 3 4 this 3 1663  1 n 1 1506  5 value 1 1603  
344 0 0 6 383 1603 0 0 0 2 4 this 3 1601  1 n 1 1506  
345 0 0 4 384 1515 0 0 0 3 4 this 3 1663  1 n 1 1506  5 value 1 1603  
346 0 0 6 385 1510 0 0 0 1 4 this 3 1601  
347 0 0 4 386 1515 0 0 0 2 4 this 3 1663  4 data 1 1510  
348 0 0 6 387 1510 0 0 0 3 4 this 3 1601  1 n 1 1506  5 count 1 1506  
349 0 0 4 388 1515 0 0 0 4 4 this 3 1663  1 n 1 1506  5 count 1 1506  4 data 1 1510  
350 0 0 6 389 1511 0 0 0 1 4 this 3 1601  
351 0 0 6 390 1511 0 0 0 1 4 this 3 1601  
352 0 0 6 391 1511 0 0 0 3 4 this 3 1663  4 view 1 1512  5 flags 1 1511  
353 0 0 4 392 1515 0 0 0 2 4 this 3 1601  4 view 1 1512  
354 0 0 7 395 1664 1064 0 0 1 4 copy 1 1612  
355 0 0 7 395 1664 1064 0 0 1 6 source 1 1503  
356 0 0 7 395 1664 1064 0 0 1 11 type_handle 1 1654  
357 0 0 7 396 1664 1064 0 0 2 1 n 1 1506  11 type_handle 1 1654  
358 0 0 6 397 1506 0 0 0 1 4 this 3 1612  
359 0 0 4 398 1515 0 0 0 2 4 this 3 1664  1 x 1 1614  
360 0 0 4 399 1515 0 0 0 1 4 this 3 1664  
361 0 0 6 400 1614 0 0 0 2 4 this 3 1612  1 n 1 1506  
362 0 0 4 401 1515 0 0 0 3 4 this 3 1664  1 n 1 1506  5 value 1 1614  
363 0 0 6 402 1614 0 0 0 2 4 this 3 1612  1 n 1 1506  
364 0 0 4 403 1515 0 0 0 3 4 this 3 1664  1 n 1 1506  5 value 1 1614  
365 0 0 6 404 1510 0 0 0 1 4 this 3 1612  
366 0 0 4 405 1515 0 0 0 2 4 this 3 1664  4 data 1 1510  
367 0 0 6 406 1510 0 0 0 3 4 this 3 1612  1 n 1 1506  5 count 1 1506  
368 0 0 4 407 1515 0 0 0 4 4 this 3 1664  1 n 1 1506  5 count 1 1506  4 data 1 1510  
369 0 0 6 408 1511 0 0 0 1 4 this 3 1612  
370 0 0 6 409 1511 0 0 0 1 4 this 3 1612  
371 0 0 6 410 1511 0 0 0 3 4 this 3 1664  4 view 1 1512  5 flags 1 1511  
372 0 0 4 411 1515 0 0 0 2 4 this 3 1612  4 view 1 1512  
373 0 0 7 414 1665 1082 0 0 1 4 copy 1 1623  
374 0 0 7 414 1665 1082 0 0 1 6 source 1 1503  
375 0 0 7 414 1665 1082 0 0 1 11 type_handle 1 1654  
376 0 0 7 415 1665 1082 0 0 2 1 n 1 1506  11 type_handle 1 1654  
377 0 0 6 416 1506 0 0 0 1 4 this 3 1623  
378 0 0 4 417 1515 0 0 0 2 4 this 3 1665  1 x 1 1625  
379 0 0 4 418 1515 0 0 0 1 4 this 3 1665  
380 0 0 6 419 1625 0 0 0 2 4 this 3 1623  1 n 1 1506  
381 0 0 4 420 1515 0 0 0 3 4 this 3 1665  1 n 1 1506  5 value 1 1625  
382 0 0 6 421 1625 0 0 0 2 4 this 3 1623  1 n 1 1506  
383 0 0 4 422 1515 0 0 0 3 4 this 3 1665  1 n 1 1506  5 value 1 1625  
384 0 0 6 423 1510 0 0 0 1 4 this 3 1623  
385 0 0 4 424 1515 0 0 0 2 4 this 3 1665  4 data 1 1510  
386 0 0 6 425 1510 0 0 0 3 4 this 3 1623  1 n 1 1506  5 count 1 1506  
387 0 0 4 426 1515 0 0 0 4 4 this 3 1665  1 n 1 1506  5 count 1 1506  4 data 1 1510  
388 0 0 6 427 1511 0 0 0 1 4 this 3 1623  
389 0 0 6 428 1511 0 0 0 1 4 this 3 1623  
390 0 0 6 429 1511 0 0 0 3 4 this 3 1665  4 view 1 1512  5 flags 1 1511  
391 0 0 4 430 1515 0 0 0 2 4 this 3 1623  4 view 1 1512  
392 0 0 7 433 1666 1100 0 0 1 4 copy 1 1634  
393 0 0 7 433 1666 1100 0 0 1 6 source 1 1503  
394 0 0 7 433 1666 1100 0 0 1 11 type_handle 1 1654  
395 0 0 7 434 1666 1100 0 0 2 1 n 1 1506  11 type_handle 1 1654  
396 0 0 6 435 1506 0 0 0 1 4 this 3 1634  
397 0 0 4 436 1515 0 0 0 2 4 this 3 1666  1 x 1 1636  
398 0 0 4 437 1515 0 0 0 1 4 this 3 1666  
399 0 0 6 438 1636 0 0 0 2 4 this 3 1634  1 n 1 1506  
400 0 0 4 439 1515 0 0 0 3 4 this 3 1666  1 n 1 1506  5 value 1 1636  
401 0 0 6 440 1636 0 0 0 2 4 this 3 1634  1 n 1 1506  
402 0 0 4 441 1515 0 0 0 3 4 this 3 1666  1 n 1 1506  5 value 1 1636  
403 0 0 6 442 1510 0 0 0 1 4 this 3 1634  
404 0 0 4 443 1515 0 0 0 2 4 this 3 1666  4 data 1 1510  
405 0 0 6 444 1510 0 0 0 3 4 this 3 1634  1 n 1 1506  5 count 1 1506  
406 0 0 4 445 1515 0 0 0 4 4 this 3 1666  1 n 1 1506  5 count 1 1506  4 data 1 1510  
407 0 0 6 446 1511 0 0 0 1 4 this 3 1634  
408 0 0 6 447 1511 0 0 0 1 4 this 3 1634  
409 0 0 6 448 1511 0 0 0 3 4 this 3 1666  4 view 1 1512  5 flags 1 1511  
410 0 0 4 449 1515 0 0 0 2 4 this 3 1634  4 view 1 1512  
411 0 0 7 452 1667 1118 0 0 1 4 copy 1 1645  
412 0 0 7 452 1667 1118 0 0 1 6 source 1 1503  
413 0 0 7 452 1667 1118 0 0 1 11 type_handle 1 1654  
414 0 0 7 453 1667 1118 0 0 2 1 n 1 1506  11 type_handle 1 1654  
415 0 0 6 454 1506 0 0 0 1 4 this 3 1645  
416 0 0 4 455 1515 0 0 0 2 4 this 3 1667  1 x 1 1647  
417 0 0 4 456 1515 0 0 0 1 4 this 3 1667  
418 0 0 6 457 1647 0 0 0 2 4 this 3 1645  1 n 1 1506  
419 0 0 4 458 1515 0 0 0 3 4 this 3 1667  1 n 1 1506  5 value 1 1647  
420 0 0 6 459 1647 0 0 0 2 4 this 3 1645  1 n 1 1506  
421 0 0 4 460 1515 0 0 0 3 4 this 3 1667  1 n 1 1506  5 value 1 1647  
422 0 0 6 461 1510 0 0 0 1 4 this 3 1645  
423 0 0 4 462 1515 0 0 0 2 4 this 3 1667  4 data 1 1510  
424 0 0 6 463 1510 0 0 0 3 4 this 3 1645  1 n 1 1506  5 count 1 1506  
425 0 0 4 464 1515 0 0 0 4 4 this 3 1667  1 n 1 1506  5 count 1 1506  4 data 1 1510  
426 0 0 6 465 1511 0 0 0 1 4 this 3 1645  
427 0 0 6 466 1511 0 0 0 1 4 this 3 1645  
428 0 0 6 467 1511 0 0 0 3 4 this 3 1667  4 view 1 1512  5 flags 1 1511  
429 0 0 4 468 1515 0 0 0 2 4 this 3 1645  4 view 1 1512  
430 0 0 7 472 1670 1128 0 0 1 4 this 3 1668  
431 0 0 6 473 1671 0 0 253 /**
 * Any kind of volume might be empty.  This is a degenerate volume that
 * contains no points; it's not the same as, for instance, a sphere with
 * radius zero, since that contains one point (the center).  It intersects
 * with no other volumes.
 */ 1 4 this 3 1668  
432 0 0 6 474 1671 0 0 536 /**
 * The other side of the empty coin is an infinite volume.  This is a
 * degenerate state of a normally finite volume that contains all points.
 * (Note that some kinds of infinite bounding volumes, like binary separating
 * planes, do not contain all points and thus correctly return is_infinite()
 * == false, even though they are technically infinite.  This is a special
 * case of the word 'infinite' meaning the volume covers all points in space.)
 *
 * It completely intersects with all other volumes except empty volumes.
 */ 1 4 this 3 1668  
433 0 0 4 475 1515 0 0 135 /**
 * Marks the volume as infinite, even if it is normally finite.  You can think
 * of this as an infinite extend_by() operation.
 */ 1 4 this 3 1670  
434 0 0 6 476 1671 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1670  3 vol 1 1668  
435 0 0 6 478 1511 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1668  3 vol 1 1668  
436 0 0 4 479 1515 0 0 0 2 4 this 3 1668  3 out 1 1519  
437 0 0 4 480 1515 0 0 10 /**
 *
 */ 3 4 this 3 1668  3 out 1 1519  12 indent_level 1 1511  
438 0 0 7 482 1654 0 0 0 0 
439 0 0 6 485 1671 0 0 72 /**
 * Increases the size of the volume to include the given volume.
 */ 2 4 this 3 1672  3 vol 1 1423  
440 0 0 6 485 1671 0 0 71 /**
 * Increases the size of the volume to include the given point.
 */ 2 4 this 3 1672  5 point 1 1673  
441 0 0 6 486 1511 0 0 128 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated volume.
 */ 2 4 this 3 1423  3 vol 1 1423  
442 0 0 6 486 1511 0 0 127 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated point.
 */ 2 4 this 3 1423  5 point 1 1673  
443 0 0 6 486 1511 0 0 134 /**
 * Returns the appropriate set of IntersectionFlags to indicate the amount of
 * intersection with the indicated line segment.
 */ 3 4 this 3 1423  1 a 1 1673  1 b 1 1673  
444 0 0 7 487 1675 0 0 0 1 4 this 3 1423  
445 0 0 4 488 1515 0 0 0 2 4 this 3 1672  3 mat 1 1676  
446 0 0 7 489 1654 0 0 0 0 
447 0 0 7 492 1675 0 0 0 1 4 this 3 1680  
448 0 0 7 493 1675 0 0 0 1 4 this 3 1680  
449 0 0 6 494 1682 0 0 10 /**
 *
 */ 1 4 this 3 1680  
450 0 0 7 495 1654 0 0 0 0 
451 0 0 7 498 1684 1142 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
452 0 0 7 498 1684 1142 0 10 /**
 *
 */ 1 4 copy 1 1685  
453 0 0 7 498 1684 1142 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1581  1 b 1 1581  1 c 1 1581  
454 0 0 6 499 1684 0 0 0 2 4 this 3 1684  4 copy 1 1685  
455 0 0 4 501 1515 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1684  3 mat 1 1687  
456 0 0 6 502 1581 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1685  
457 0 0 6 503 1581 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1685  
458 0 0 6 504 1581 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1685  
459 0 0 7 505 1689 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1685  1 t 1 1683  
460 0 0 4 506 1515 0 0 10 /**
 *
 */ 2 4 this 3 1685  3 out 1 1519  
461 0 0 4 507 1515 0 0 10 /**
 *
 */ 3 4 this 3 1685  3 out 1 1519  12 indent_level 1 1511  
462 0 0 4 508 1515 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1685  11 destination 1 1690  
463 0 0 4 509 1515 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1684  6 source 1 1692  
464 0 0 4 510 1515 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1685  11 destination 1 1690  
465 0 0 4 511 1515 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1684  6 source 1 1692  
466 0 0 7 513 1694 1156 0 56 /**
 * Constructs a meaningless degenerate parabola.
 */ 0 
467 0 0 7 513 1694 1156 0 10 /**
 *
 */ 1 4 copy 1 1695  
468 0 0 7 513 1694 1156 0 139 /**
 * Constructs a parabola given the three points of the parametric equation:
 * the acceleration, initial velocity, and start point.
 */ 3 1 a 1 1570  1 b 1 1570  1 c 1 1570  
469 0 0 6 514 1694 0 0 0 2 4 this 3 1694  4 copy 1 1695  
470 0 0 4 516 1515 0 0 59 /**
 * Transforms the parabola by the indicated matrix.
 */ 2 4 this 3 1694  3 mat 1 1697  
471 0 0 6 517 1570 0 0 94 /**
 * Returns the first point of the parabola's parametric equation: the
 * acceleration.
 */ 1 4 this 3 1695  
472 0 0 6 518 1570 0 0 99 /**
 * Returns the second point of the parabola's parametric equation: the initial
 * velocity.
 */ 1 4 this 3 1695  
473 0 0 6 519 1570 0 0 93 /**
 * Returns the third point of the parabola's parametric equation: the start
 * point.
 */ 1 4 this 3 1695  
474 0 0 7 520 1701 0 0 56 /**
 * Computes the point on the parabola at time t.
 */ 2 4 this 3 1695  1 t 1 1700  
475 0 0 4 521 1515 0 0 10 /**
 *
 */ 2 4 this 3 1695  3 out 1 1519  
476 0 0 4 522 1515 0 0 10 /**
 *
 */ 3 4 this 3 1695  3 out 1 1519  12 indent_level 1 1511  
477 0 0 4 523 1515 0 0 336 /**
 * Writes the parabola to the Datagram using add_float32() or add_float64(),
 * depending on the type of floats in the parabola, regardless of the setting
 * of Datagram::set_stdfloat_double().  This is appropriate when you want to
 * write a fixed-width value to the datagram, especially when you are not
 * writing a bam file.
 */ 2 4 this 3 1695  11 destination 1 1690  
478 0 0 4 524 1515 0 0 116 /**
 * Reads the parabola from the Datagram using get_float32() or get_float64().
 * See write_datagram_fixed().
 */ 2 4 this 3 1694  6 source 1 1692  
479 0 0 4 525 1515 0 0 207 /**
 * Writes the parabola to the Datagram using add_stdfloat().  This is
 * appropriate when you want to write the vector using the standard width
 * setting, especially when you are writing a bam file.
 */ 2 4 this 3 1695  11 destination 1 1690  
480 0 0 4 526 1515 0 0 69 /**
 * Reads the parabola from the Datagram using get_stdfloat().
 */ 2 4 this 3 1694  6 source 1 1692  
481 0 0 7 530 1702 1184 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
482 0 0 7 530 1702 1184 0 0 1 6 param0 0 1703  
483 0 0 7 530 1702 1184 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1705  1 b 1 1705  1 c 1 1705  
484 0 0 7 530 1702 1184 0 10 /**
 *
 */ 1 4 copy 1 1707  
485 0 0 7 530 1702 1184 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1709  5 point 1 1705  
486 0 0 7 530 1702 1184 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1683  1 b 1 1683  1 c 1 1683  1 d 1 1683  
487 0 0 7 531 1702 1184 0 0 2 4 this 3 1703  3 mat 1 1526  
488 0 0 7 531 1702 1184 0 0 2 4 this 3 1703  3 mat 1 1687  
489 0 0 6 532 1702 0 0 0 2 4 this 3 1702  3 mat 1 1687  
490 0 0 4 533 1515 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1702  3 mat 1 1687  
491 0 0 7 534 1702 1184 0 0 1 4 this 3 1703  
492 0 0 7 535 1712 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1703  
493 0 0 7 536 1713 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1703  
494 0 0 7 537 1689 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1703  
495 0 0 6 538 1683 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1703  5 point 1 1705  
496 0 0 7 539 1689 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1703  5 point 1 1705  
497 0 0 4 540 1515 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1702  
498 0 0 6 541 1671 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1703  18 intersection_point 1 1689  2 p1 1 1705  2 p2 1 1705  
499 0 0 6 542 1671 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1703  4 from 1 1689  5 delta 1 1713  5 other 1 1703  
500 0 0 4 544 1515 0 0 10 /**
 *
 */ 2 4 this 3 1703  3 out 1 1519  
501 0 0 4 545 1515 0 0 10 /**
 *
 */ 3 4 this 3 1703  3 out 1 1519  12 indent_level 1 1511  
502 0 0 7 549 1714 1201 0 159 /**
 * Creates a default plane.  This plane happens to intersect the origin,
 * perpendicular to the Z axis.  It's not clear how useful a default plane is.
 */ 0 
503 0 0 7 549 1714 1201 0 0 1 6 param0 0 1715  
504 0 0 7 549 1714 1201 0 176 /**
 * Constructs a plane given three counter-clockwise points, as seen from the
 * front of the plane (that is, viewed from the end of the normal vector,
 * looking down).
 */ 3 1 a 1 1716  1 b 1 1716  1 c 1 1716  
505 0 0 7 549 1714 1201 0 10 /**
 *
 */ 1 4 copy 1 1717  
506 0 0 7 549 1714 1201 0 92 /**
 * Constructs a plane given a surface normal vector and a point within the
 * plane.
 */ 2 6 normal 1 1719  5 point 1 1716  
507 0 0 7 549 1714 1201 0 73 /**
 * Constructs a plane given the four terms of the plane equation.
 */ 4 1 a 1 1700  1 b 1 1700  1 c 1 1700  1 d 1 1700  
508 0 0 7 550 1714 1201 0 0 2 4 this 3 1715  3 mat 1 1507  
509 0 0 7 550 1714 1201 0 0 2 4 this 3 1715  3 mat 1 1697  
510 0 0 6 551 1714 0 0 0 2 4 this 3 1714  3 mat 1 1697  
511 0 0 4 552 1515 0 0 56 /**
 * Transforms the plane by the indicated matrix.
 */ 2 4 this 3 1714  3 mat 1 1697  
512 0 0 7 553 1714 1201 0 0 1 4 this 3 1715  
513 0 0 7 554 1722 0 0 121 /**
 * This computes a transform matrix that reflects the universe to the other
 * side of the plane, as in a mirror.
 */ 1 4 this 3 1715  
514 0 0 7 555 1723 0 0 51 /**
 * Returns the surface normal of the plane.
 */ 1 4 this 3 1715  
515 0 0 7 556 1701 0 0 145 /**
 * Returns an arbitrary point in the plane.  This can be used along with the
 * normal returned by get_normal() to reconstruct the plane.
 */ 1 4 this 3 1715  
516 0 0 6 557 1700 0 0 328 /**
 * Returns the straight-line shortest distance from the point to the plane.
 * The returned value is positive if the point is in front of the plane (on
 * the side with the normal), or negative in the point is behind the plane (on
 * the opposite side from the normal). It's zero if the point is exactly in
 * the plane.
 */ 2 4 this 3 1715  5 point 1 1716  
517 0 0 7 558 1701 0 0 86 /**
 * Returns the point within the plane nearest to the indicated point in space.
 */ 2 4 this 3 1715  5 point 1 1716  
518 0 0 4 559 1515 0 0 115 /**
 * Convenience method that flips the plane in-place.  This is done by simply
 * flipping the normal vector.
 */ 1 4 this 3 1714  
519 0 0 6 560 1671 0 0 325 /**
 * Returns true if the plane intersects the infinite line passing through
 * points p1 and p2, false if the line is parallel.  The points p1 and p2 are
 * used only to define the Euclidean line; they have no other bearing on the
 * intersection test.  If true, sets intersection_point to the point of
 * intersection.
 */ 4 4 this 3 1715  18 intersection_point 1 1701  2 p1 1 1716  2 p2 1 1716  
520 0 0 6 561 1671 0 0 300 /**
 * Returns true if the two planes intersect, false if they do not.  If they do
 * intersect, then from and delta are filled in with the parametric
 * representation of the line of intersection: that is, from is a point on
 * that line, and delta is a vector showing the direction of the line.
 */ 4 4 this 3 1715  4 from 1 1701  5 delta 1 1723  5 other 1 1715  
521 0 0 4 563 1515 0 0 10 /**
 *
 */ 2 4 this 3 1715  3 out 1 1519  
522 0 0 4 564 1515 0 0 10 /**
 *
 */ 3 4 this 3 1715  3 out 1 1519  12 indent_level 1 1511  
523 0 0 7 571 1724 1210 0 42 /**
 * Constructs an empty box object.
 */ 0 
524 0 0 7 571 1724 1210 0 44 /**
 * Constructs a specific box object.
 */ 2 3 min 1 1673  3 max 1 1673  
525 0 0 6 573 1511 0 0 68 /**
 * Returns 8: the number of vertices of a rectangular solid.
 */ 1 4 this 3 1725  
526 0 0 7 574 1675 0 0 59 /**
 * Returns the nth vertex of the rectangular solid.
 */ 2 4 this 3 1725  1 n 1 1511  
527 0 0 6 576 1511 0 0 65 /**
 * Returns 6: the number of faces of a rectangular solid.
 */ 1 4 this 3 1725  
528 0 0 7 577 1727 0 0 57 /**
 * Returns the nth face of the rectangular solid.
 */ 2 4 this 3 1725  1 n 1 1511  
529 0 0 4 583 1515 0 0 63 /**
 * Sets the min and max point of the rectangular solid.
 */ 3 4 this 3 1724  3 min 1 1673  3 max 1 1673  
530 0 0 7 584 1654 0 0 0 0 
531 0 0 7 587 1728 1218 0 10 /**
 *
 */ 0 
532 0 0 7 587 1728 1218 0 0 1 6 param0 0 1729  
533 0 0 4 588 1515 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1728  
534 0 0 4 588 1515 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1728  1 l 1 1683  1 r 1 1683  1 t 1 1683  1 b 1 1683  
535 0 0 4 589 1515 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1728  5 fnear 1 1683  4 ffar 1 1683  
536 0 0 4 589 1515 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1728  5 fnear 1 1683  4 ffar 1 1683  1 l 1 1683  1 r 1 1683  1 t 1 1683  1 b 1 1683  
537 0 0 4 590 1515 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1728  4 xfov 1 1683  6 aspect 1 1683  5 fnear 1 1683  4 ffar 1 1683  
538 0 0 4 591 1515 0 0 0 5 4 this 3 1728  4 yfov 1 1683  6 aspect 1 1683  5 fnear 1 1683  4 ffar 1 1683  
539 0 0 4 592 1515 0 0 0 5 4 this 3 1728  4 xfov 1 1683  4 yfov 1 1683  5 fnear 1 1683  4 ffar 1 1683  
540 0 0 7 596 1731 1226 0 10 /**
 *
 */ 0 
541 0 0 7 596 1731 1226 0 0 1 6 param0 0 1732  
542 0 0 4 597 1515 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 1 4 this 3 1731  
543 0 0 4 597 1515 0 0 57 /**
 * Sets up a two-dimensional orthographic frustum
 */ 5 4 this 3 1731  1 l 1 1700  1 r 1 1700  1 t 1 1700  1 b 1 1700  
544 0 0 4 598 1515 0 0 32 /**
 * Behaves like gluOrtho
 */ 3 4 this 3 1731  5 fnear 1 1700  4 ffar 1 1700  
545 0 0 4 598 1515 0 0 32 /**
 * Behaves like gluOrtho
 */ 7 4 this 3 1731  5 fnear 1 1700  4 ffar 1 1700  1 l 1 1700  1 r 1 1700  1 t 1 1700  1 b 1 1700  
546 0 0 4 599 1515 0 0 238 /**
 * Behaves like gluPerspective (Aspect = width/height, Yfov in degrees) aspect
 * +------------+ |            | 1 |            | yfov |            |
 * +------------+
 *
 * -------+------ \     | \    | \   | \  | \ | \| W yfov
 *
 */ 5 4 this 3 1731  4 xfov 1 1700  6 aspect 1 1700  5 fnear 1 1700  4 ffar 1 1700  
547 0 0 4 600 1515 0 0 0 5 4 this 3 1731  4 yfov 1 1700  6 aspect 1 1700  5 fnear 1 1700  4 ffar 1 1700  
548 0 0 4 601 1515 0 0 0 5 4 this 3 1731  4 xfov 1 1700  4 yfov 1 1700  5 fnear 1 1700  4 ffar 1 1700  
549 0 0 7 609 1737 1233 0 10 /**
 *
 */ 3 7 frustum 1 1734  8 is_ortho 1 1671  2 cs 1 1736  
550 0 0 7 609 1737 1233 0 10 /**
 *
 */ 8 3 fll 1 1673  3 flr 1 1673  3 fur 1 1673  3 ful 1 1673  3 nll 1 1673  3 nlr 1 1673  3 nur 1 1673  3 nul 1 1673  
551 0 0 6 610 1511 0 0 61 /**
 * Returns 8: the number of vertices of a hexahedron.
 */ 1 4 this 3 1738  
552 0 0 7 611 1675 0 0 52 /**
 * Returns the nth vertex of the hexahedron.
 */ 2 4 this 3 1738  1 n 1 1511  
553 0 0 6 613 1511 0 0 58 /**
 * Returns 6: the number of faces of a hexahedron.
 */ 1 4 this 3 1738  
554 0 0 7 614 1727 0 0 50 /**
 * Returns the nth face of the hexahedron.
 */ 2 4 this 3 1738  1 n 1 1511  
555 0 0 7 618 1654 0 0 0 0 
556 0 0 7 621 1740 1239 0 10 /**
 *
 */ 2 1 a 1 1673  1 b 1 1673  
557 0 0 6 623 1673 0 0 57 /**
 * Returns the first point that defines the line.
 */ 1 4 this 3 1741  
558 0 0 7 624 1675 0 0 58 /**
 * Returns the second point that defines the line.
 */ 1 4 this 3 1741  
559 0 0 7 625 1654 0 0 0 0 
560 0 0 7 628 1743 1244 0 65 /**
 * Constructs an empty "plane" that has no intersections.
 */ 0 
561 0 0 7 628 1743 1244 0 10 /**
 *
 */ 1 5 plane 1 1744  
562 0 0 6 630 1744 0 0 10 /**
 *
 */ 1 4 this 3 1746  
563 0 0 7 631 1654 0 0 0 0 
564 0 0 7 634 1748 1252 0 38 /**
 * Constructs an empty sphere.
 */ 0 
565 0 0 7 634 1748 1252 0 40 /**
 * Constructs a specific sphere.
 */ 2 6 center 1 1673  6 radius 1 1682  
566 0 0 7 636 1675 0 0 10 /**
 *
 */ 1 4 this 3 1749  
567 0 0 6 637 1682 0 0 10 /**
 *
 */ 1 4 this 3 1749  
568 0 0 4 638 1515 0 0 47 /**
 * Sets the center point of the sphere.
 */ 2 4 this 3 1748  6 center 1 1673  
569 0 0 4 639 1515 0 0 41 /**
 * Sets the radius of the sphere.
 */ 2 4 this 3 1748  6 radius 1 1682  
570 0 0 7 640 1654 0 0 0 0 
571 0 0 7 643 1751 1260 0 44 /**
 * Constructs an empty intersection.
 */ 0 
572 0 0 6 645 1511 0 0 64 /**
 * Returns the number of components in the intersection.
 */ 1 4 this 3 1752  
573 0 0 7 646 1423 0 0 57 /**
 * Returns the nth component in the intersection.
 */ 2 4 this 3 1752  1 n 1 1511  
574 0 0 4 651 1515 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1751  
575 0 0 4 652 1515 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1751  9 component 1 1423  
576 0 0 7 653 1654 0 0 0 0 
577 0 0 7 658 1754 1265 0 35 /* initializes mt[N] with a seed */ 1 4 seed 1 1506  
578 0 0 6 659 1506 0 0 58 /* generates a random number on [0,0x7fffffff]-interval */ 1 4 this 3 1754  
579 0 0 7 663 1755 1268 0 10 /**
 *
 */ 0 
580 0 0 7 664 1654 0 0 0 0 
581 0 0 7 667 1756 1277 0 37 /**
 * Constructs an empty union.
 */ 0 
582 0 0 6 669 1511 0 0 57 /**
 * Returns the number of components in the union.
 */ 1 4 this 3 1757  
583 0 0 7 670 1423 0 0 50 /**
 * Returns the nth component in the union.
 */ 2 4 this 3 1757  1 n 1 1511  
584 0 0 4 673 1515 0 0 50 /**
 * Removes all components from the volume.
 */ 1 4 this 3 1756  
585 0 0 4 674 1515 0 0 373 /**
 * Adds a new component to the volume.  This does not necessarily increase the
 * total number of components by one, and you may or may not be able to find
 * this component in the volume by a subsequent call to get_component();
 * certain optimizations may prevent the component from being added, or have
 * other unexpected effects on the total set of components.
 */ 2 4 this 3 1756  9 component 1 1423  
586 0 0 4 675 1515 0 0 104 /**
 * Removes from the union any components that have no intersection with the
 * indicated volume.
 */ 2 4 this 3 1756  6 volume 1 1668  
587 0 0 7 676 1654 0 0 0 0 
588 0 0 7 679 1761 1285 0 10 /**
 *
 */ 1 4 copy 1 1759  
589 0 0 7 679 1761 1285 0 108 /**
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 1 4 seed 1 1506  
590 0 0 6 680 1761 0 0 0 2 4 this 3 1761  4 copy 1 1759  
591 0 0 6 681 1511 0 0 60 /**
 * Returns a random integer in the range [0, range).
 */ 2 4 this 3 1761  5 range 1 1511  
592 0 0 6 682 1700 0 0 59 /**
 * Returns a random double in the range [0, range).
 */ 2 4 this 3 1761  5 range 1 1700  
593 0 0 6 683 1700 0 0 60 /**
 * Returns a random double in the range [-0.5, 0.5).
 */ 1 4 this 3 1761  
594 0 0 6 684 1506 0 0 77 /**
 * Returns a random seed value for the next global Randomizer object.
 */ 0 
595 0 0 6 685 1506 0 0 126 /**
 * Returns a unique seed value based on the seed value passed to this
 * Randomizer object (and on its current state).
 */ 1 4 this 3 1761  
596 0 0 6 688 1506 0 0 127 /**
 * Returns a unique seed value based on the seed value passed to this
 * PerlinNoise object (and on its current state).
 */ 1 4 this 3 1762  
597 0 0 7 691 1763 1293 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
598 0 0 7 691 1763 1293 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1764  
599 0 0 7 691 1763 1293 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 4 2 sx 1 1700  2 sy 1 1700  10 table_size 1 1511  4 seed 1 1506  
600 0 0 6 692 1763 0 0 0 2 4 this 3 1763  4 copy 1 1764  
601 0 0 4 693 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1763  5 scale 1 1537  
602 0 0 4 693 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1763  5 scale 1 1548  
603 0 0 4 693 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1763  5 scale 1 1700  
604 0 0 4 693 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 3 4 this 3 1763  2 sx 1 1700  2 sy 1 1700  
605 0 0 6 694 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1764  5 value 1 1537  
606 0 0 6 694 1683 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1764  5 value 1 1548  
607 0 0 6 694 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1764  1 x 1 1700  1 y 1 1700  
608 0 0 6 695 1700 0 0 0 2 4 this 3 1764  5 value 1 1537  
609 0 0 6 695 1683 0 0 0 2 4 this 3 1764  5 value 1 1548  
610 0 0 6 695 1700 0 0 0 3 4 this 3 1764  1 x 1 1700  1 y 1 1700  
611 0 0 7 698 1766 1299 0 131 /**
 * Randomizes the tables to make a unique noise function.  Uses a default
 * scale (noise frequency), table size, and seed.
 */ 0 
612 0 0 7 698 1766 1299 0 96 /**
 * Makes an exact copy of the existing PerlinNoise object, including its
 * random seed.
 */ 1 4 copy 1 1767  
613 0 0 7 698 1766 1299 0 169 /**
 * Randomizes the tables to make a unique noise function.
 *
 * If seed is nonzero, it is used to define the tables; if it is zero a random
 * seed is generated.
 */ 5 2 sx 1 1700  2 sy 1 1700  2 sz 1 1700  10 table_size 1 1511  4 seed 1 1506  
614 0 0 6 699 1766 0 0 0 2 4 this 3 1766  4 copy 1 1767  
615 0 0 4 700 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1766  5 scale 1 1570  
616 0 0 4 700 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1766  5 scale 1 1581  
617 0 0 4 700 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 2 4 this 3 1766  5 scale 1 1700  
618 0 0 4 700 1515 0 0 54 /**
 * Changes the scale (frequency) of the noise.
 */ 4 4 this 3 1766  2 sx 1 1700  2 sy 1 1700  2 sz 1 1700  
619 0 0 6 701 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1767  5 value 1 1570  
620 0 0 6 701 1683 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1767  5 value 1 1581  
621 0 0 6 701 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1767  1 x 1 1700  1 y 1 1700  1 z 1 1700  
622 0 0 6 702 1700 0 0 0 2 4 this 3 1767  5 value 1 1570  
623 0 0 6 702 1683 0 0 0 2 4 this 3 1767  5 value 1 1581  
624 0 0 6 702 1700 0 0 0 4 4 this 3 1767  1 x 1 1700  1 y 1 1700  1 z 1 1700  
625 0 0 7 762 1769 1307 0 122 /**
 * Creates a StackedPerlinNoise2 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
626 0 0 7 762 1769 1307 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise2 object,
 * including the random seed.
 */ 1 4 copy 1 1770  
627 0 0 7 762 1769 1307 0 318 /**
 * Creates num_levels nested PerlinNoise2 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 7 2 sx 1 1700  2 sy 1 1700  10 num_levels 1 1511  12 scale_factor 1 1700  9 amp_scale 1 1700  10 table_size 1 1511  4 seed 1 1506  
628 0 0 6 763 1769 0 0 0 2 4 this 3 1769  4 copy 1 1770  
629 0 0 4 764 1515 0 0 95 /**
 * Adds an arbitrary PerlinNoise2 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1769  5 level 1 1764  3 amp 1 1700  
630 0 0 4 765 1515 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1769  
631 0 0 6 766 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1769  5 value 1 1537  
632 0 0 6 766 1683 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1769  5 value 1 1548  
633 0 0 6 766 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 3 4 this 3 1769  1 x 1 1700  1 y 1 1700  
634 0 0 6 767 1700 0 0 0 2 4 this 3 1769  5 value 1 1537  
635 0 0 6 767 1683 0 0 0 2 4 this 3 1769  5 value 1 1548  
636 0 0 6 767 1700 0 0 0 3 4 this 3 1769  1 x 1 1700  1 y 1 1700  
637 0 0 7 770 1772 1314 0 122 /**
 * Creates a StackedPerlinNoise3 object with no levels.  You should call
 * add_level() to add each level by hand.
 */ 0 
638 0 0 7 770 1772 1314 0 111 /**
 * Creates an exact duplicate of the existing StackedPerlinNoise3 object,
 * including the random seed.
 */ 1 4 copy 1 1773  
639 0 0 7 770 1772 1314 0 318 /**
 * Creates num_levels nested PerlinNoise3 objects.  Each stacked Perlin object
 * will have a scale of 1 scale_factor times the previous object (so that it
 * is higher-frequency, if scale_factor > 1), and an amplitude of amp_scale
 * times the previous object (so that it is less important, if amp_scale < 1).
 */ 8 2 sx 1 1700  2 sy 1 1700  2 sz 1 1700  10 num_levels 1 1511  12 scale_factor 1 1700  9 amp_scale 1 1700  10 table_size 1 1511  4 seed 1 1506  
640 0 0 6 771 1772 0 0 0 2 4 this 3 1772  4 copy 1 1773  
641 0 0 4 772 1515 0 0 95 /**
 * Adds an arbitrary PerlinNoise3 object, and an associated amplitude, to the
 * stack.
 */ 3 4 this 3 1772  5 level 1 1767  3 amp 1 1700  
642 0 0 4 773 1515 0 0 98 /**
 * Removes all levels from the stack.  You must call add_level() again to
 * restore them.
 */ 1 4 this 3 1772  
643 0 0 6 774 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1772  5 value 1 1570  
644 0 0 6 774 1683 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 2 4 this 3 1772  5 value 1 1581  
645 0 0 6 774 1700 0 0 58 /**
 * Returns the noise function of the three inputs.
 */ 4 4 this 3 1772  1 x 1 1700  1 y 1 1700  1 z 1 1700  
646 0 0 6 775 1700 0 0 0 2 4 this 3 1772  5 value 1 1570  
647 0 0 6 775 1683 0 0 0 2 4 this 3 1772  5 value 1 1581  
648 0 0 6 775 1700 0 0 0 4 4 this 3 1772  1 x 1 1700  1 y 1 1700  1 z 1 1700  
649 0 0 7 778 1775 1330 0 10 /**
 *
 */ 0 
650 0 0 7 778 1775 1330 0 0 1 6 param0 0 1776  
651 0 0 4 779 1515 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1775  
652 0 0 6 780 1511 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1775  5 point 1 1778  
653 0 0 6 780 1511 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 3 4 this 3 1775  1 x 1 1700  1 y 1 1700  
654 0 0 6 781 1511 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1776  
655 0 0 6 782 1778 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1776  1 n 1 1511  
656 0 0 4 787 1515 0 0 112 /**
 * Removes the current polygon definition (and its set of holes), but does not
 * clear the vertex pool.
 */ 1 4 this 3 1775  
657 0 0 4 788 1515 0 0 334 /**
 * Adds the next consecutive vertex of the polygon.  This vertex should index
 * into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.  In particular, do not repeat the first
 * vertex at the end.
 */ 2 4 this 3 1775  5 index 1 1511  
658 0 0 6 789 1671 0 0 145 /**
 * Returns true if the polygon vertices are listed in counterclockwise order,
 * or false if they appear to be listed in clockwise order.
 */ 1 4 this 3 1776  
659 0 0 4 790 1515 0 0 78 /**
 * Finishes the previous hole, if any, and prepares to add a new hole.
 */ 1 4 this 3 1775  
660 0 0 4 791 1515 0 0 277 /**
 * Adds the next consecutive vertex of the current hole.  This vertex should
 * index into the vertex pool established by repeated calls to add_vertex().
 *
 * The vertices may be listed in either clockwise or counterclockwise order.
 * Vertices should not be repeated.
 */ 2 4 this 3 1775  5 index 1 1511  
661 0 0 4 792 1515 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1775  
662 0 0 6 793 1511 0 0 94 /**
 * Returns the number of triangles generated by the previous call to
 * triangulate().
 */ 1 4 this 3 1776  
663 0 0 6 794 1511 0 0 194 /**
 * Returns vertex 0 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1776  1 n 1 1511  
664 0 0 6 795 1511 0 0 194 /**
 * Returns vertex 1 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1776  1 n 1 1511  
665 0 0 6 796 1511 0 0 194 /**
 * Returns vertex 2 of the nth triangle generated by the previous call to
 * triangulate().
 *
 * This is a zero-based index into the vertices added by repeated calls to
 * add_vertex().
 */ 2 4 this 3 1776  1 n 1 1511  
666 0 0 7 799 1779 1338 0 10 /**
 *
 */ 0 
667 0 0 7 799 1779 1338 0 0 1 6 param0 0 1780  
668 0 0 4 800 1515 0 0 115 /**
 * Removes all vertices and polygon specifications from the Triangulator, and
 * prepares it to start over.
 */ 1 4 this 3 1779  
669 0 0 6 801 1511 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 2 4 this 3 1779  5 point 1 1716  
670 0 0 6 801 1511 0 0 82 /**
 * Adds a new vertex to the vertex pool.  Returns the vertex index number.
 */ 4 4 this 3 1779  1 x 1 1700  1 y 1 1700  1 z 1 1700  
671 0 0 6 802 1511 0 0 267 /**
 * Returns the number of vertices in the pool.  Note that the Triangulator
 * might append new vertices, in addition to those added by the user, if any
 * of the polygon is self-intersecting, or if any of the holes intersect some
 * part of the polygon edges.
 */ 1 4 this 3 1780  
672 0 0 6 803 1716 0 0 34 /**
 * Returns the nth vertex.
 */ 2 4 this 3 1780  1 n 1 1511  
673 0 0 4 805 1515 0 0 181 /**
 * Does the work of triangulating the specified polygon.  After this call, you
 * may retrieve the new triangles one at a time by iterating through
 * get_triangle_v0/1/2().
 */ 1 4 this 3 1779  
674 0 0 6 806 1715 0 0 100 /**
 * Returns the plane of the polygon.  This is only available after calling
 * triangulate().
 */ 1 4 this 3 1780  
675 0 0 4 655 1515 0 0 0 3 3 mat 1 1782  3 fwd 1 1719  2 cs 1 1736  
676 0 0 4 655 1515 0 0 0 4 3 mat 1 1782  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
677 0 0 4 655 1515 0 0 0 3 3 mat 1 1783  3 fwd 1 1709  2 cs 1 1736  
678 0 0 4 655 1515 0 0 0 4 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
679 0 0 4 655 1515 0 0 0 3 3 mat 1 1722  3 fwd 1 1719  2 cs 1 1736  
680 0 0 4 655 1515 0 0 0 4 3 mat 1 1722  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
681 0 0 4 655 1515 0 0 0 3 3 mat 1 1712  3 fwd 1 1709  2 cs 1 1736  
682 0 0 4 655 1515 0 0 0 4 3 mat 1 1712  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
683 0 0 4 655 1515 0 0 0 3 4 quat 1 1784  3 fwd 1 1719  2 cs 1 1736  
684 0 0 4 655 1515 0 0 0 4 4 quat 1 1784  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
685 0 0 4 655 1515 0 0 0 3 4 quat 1 1786  3 fwd 1 1709  2 cs 1 1736  
686 0 0 4 655 1515 0 0 0 4 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
687 0 0 4 656 1515 0 0 0 3 3 mat 1 1782  3 fwd 1 1719  2 cs 1 1736  
688 0 0 4 656 1515 0 0 0 4 3 mat 1 1782  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
689 0 0 4 656 1515 0 0 0 3 3 mat 1 1783  3 fwd 1 1709  2 cs 1 1736  
690 0 0 4 656 1515 0 0 0 4 3 mat 1 1783  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
691 0 0 4 656 1515 0 0 0 3 3 mat 1 1722  3 fwd 1 1719  2 cs 1 1736  
692 0 0 4 656 1515 0 0 0 4 3 mat 1 1722  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
693 0 0 4 656 1515 0 0 0 3 3 mat 1 1712  3 fwd 1 1709  2 cs 1 1736  
694 0 0 4 656 1515 0 0 0 4 3 mat 1 1712  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
695 0 0 4 656 1515 0 0 0 3 4 quat 1 1784  3 fwd 1 1719  2 cs 1 1736  
696 0 0 4 656 1515 0 0 0 4 4 quat 1 1784  3 fwd 1 1719  2 up 1 1719  2 cs 1 1736  
697 0 0 4 656 1515 0 0 0 3 4 quat 1 1786  3 fwd 1 1709  2 cs 1 1736  
698 0 0 4 656 1515 0 0 0 4 4 quat 1 1786  3 fwd 1 1709  2 up 1 1709  2 cs 1 1736  
699 0 0 4 760 1515 0 0 0 3 3 mat 1 1782  1 a 1 1719  1 b 1 1719  
700 0 0 4 760 1515 0 0 0 3 3 mat 1 1783  1 a 1 1709  1 b 1 1709  
701 0 0 4 760 1515 0 0 0 3 3 mat 1 1722  1 a 1 1719  1 b 1 1719  
702 0 0 4 760 1515 0 0 0 3 3 mat 1 1712  1 a 1 1709  1 b 1 1709  
449
1339 32 ConstPointerToArray< LMatrix3d > 0 141313 32 ConstPointerToArray< LMatrix3d > 32 ConstPointerToArray< LMatrix3d > 0 0 0 1 706 716 0 9 707 708 709 710 711 712 713 714 715 0 0 1 0 1340 0 0 0 0 0

1340 31 PointerToArrayBase< LMatrix3d > 0 26625 31 PointerToArrayBase< LMatrix3d > 31 PointerToArrayBase< LMatrix3d > 0 0 0 0 705 0 0 0 0 1 0 1341 0 0 0 0 0

1341 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 52 PointerToBase< ReferenceCountedVector< LMatrix3d > > 0 0 0 0 0 0 2 703 704 0 0 1 0 1342 0 0 0 0 0

1342 13 PointerToVoid 0 2049 13 PointerToVoid 13 PointerToVoid 0 0 0 0 0 0 0 0 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1343 32 ConstPointerToArray< LMatrix3f > 0 141313 32 ConstPointerToArray< LMatrix3f > 32 ConstPointerToArray< LMatrix3f > 0 0 0 1 720 730 0 9 721 722 723 724 725 726 727 728 729 0 0 1 0 1344 0 0 0 0 0

1344 31 PointerToArrayBase< LMatrix3f > 0 26625 31 PointerToArrayBase< LMatrix3f > 31 PointerToArrayBase< LMatrix3f > 0 0 0 0 719 0 0 0 0 1 0 1345 0 0 0 0 0

1345 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 43009 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 52 PointerToBase< ReferenceCountedVector< LMatrix3f > > 0 0 0 0 0 0 2 717 718 0 0 1 0 1342 0 0 0 0 0

1346 33 ConstPointerToArray< LVecBase2d > 0 141313 33 ConstPointerToArray< LVecBase2d > 33 ConstPointerToArray< LVecBase2d > 0 0 0 1 734 744 0 9 735 736 737 738 739 740 741 742 743 0 0 1 0 1347 0 0 0 0 0

1347 32 PointerToArrayBase< LVecBase2d > 0 26625 32 PointerToArrayBase< LVecBase2d > 32 PointerToArrayBase< LVecBase2d > 0 0 0 0 733 0 0 0 0 1 0 1348 0 0 0 0 0

1348 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 53 PointerToBase< ReferenceCountedVector< LVecBase2d > > 0 0 0 0 0 0 2 731 732 0 0 1 0 1342 0 0 0 0 0

1349 33 ConstPointerToArray< LVecBase2f > 0 141313 33 ConstPointerToArray< LVecBase2f > 33 ConstPointerToArray< LVecBase2f > 0 0 0 1 748 758 0 9 749 750 751 752 753 754 755 756 757 0 0 1 0 1350 0 0 0 0 0

1350 32 PointerToArrayBase< LVecBase2f > 0 26625 32 PointerToArrayBase< LVecBase2f > 32 PointerToArrayBase< LVecBase2f > 0 0 0 0 747 0 0 0 0 1 0 1351 0 0 0 0 0

1351 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 53 PointerToBase< ReferenceCountedVector< LVecBase2f > > 0 0 0 0 0 0 2 745 746 0 0 1 0 1342 0 0 0 0 0

1352 33 ConstPointerToArray< LVecBase2i > 0 141313 33 ConstPointerToArray< LVecBase2i > 33 ConstPointerToArray< LVecBase2i > 0 0 0 1 762 772 0 9 763 764 765 766 767 768 769 770 771 0 0 1 0 1353 0 0 0 0 0

1353 32 PointerToArrayBase< LVecBase2i > 0 26625 32 PointerToArrayBase< LVecBase2i > 32 PointerToArrayBase< LVecBase2i > 0 0 0 0 761 0 0 0 0 1 0 1354 0 0 0 0 0

1354 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 53 PointerToBase< ReferenceCountedVector< LVecBase2i > > 0 0 0 0 0 0 2 759 760 0 0 1 0 1342 0 0 0 0 0

1355 33 ConstPointerToArray< LVecBase3d > 0 141313 33 ConstPointerToArray< LVecBase3d > 33 ConstPointerToArray< LVecBase3d > 0 0 0 1 776 786 0 9 777 778 779 780 781 782 783 784 785 0 0 1 0 1356 0 0 0 0 0

1356 32 PointerToArrayBase< LVecBase3d > 0 26625 32 PointerToArrayBase< LVecBase3d > 32 PointerToArrayBase< LVecBase3d > 0 0 0 0 775 0 0 0 0 1 0 1357 0 0 0 0 0

1357 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 53 PointerToBase< ReferenceCountedVector< LVecBase3d > > 0 0 0 0 0 0 2 773 774 0 0 1 0 1342 0 0 0 0 0

1358 33 ConstPointerToArray< LVecBase3f > 0 141313 33 ConstPointerToArray< LVecBase3f > 33 ConstPointerToArray< LVecBase3f > 0 0 0 1 790 800 0 9 791 792 793 794 795 796 797 798 799 0 0 1 0 1359 0 0 0 0 0

1359 32 PointerToArrayBase< LVecBase3f > 0 26625 32 PointerToArrayBase< LVecBase3f > 32 PointerToArrayBase< LVecBase3f > 0 0 0 0 789 0 0 0 0 1 0 1360 0 0 0 0 0

1360 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 53 PointerToBase< ReferenceCountedVector< LVecBase3f > > 0 0 0 0 0 0 2 787 788 0 0 1 0 1342 0 0 0 0 0

1361 33 ConstPointerToArray< LVecBase3i > 0 141313 33 ConstPointerToArray< LVecBase3i > 33 ConstPointerToArray< LVecBase3i > 0 0 0 1 804 814 0 9 805 806 807 808 809 810 811 812 813 0 0 1 0 1362 0 0 0 0 0

1362 32 PointerToArrayBase< LVecBase3i > 0 26625 32 PointerToArrayBase< LVecBase3i > 32 PointerToArrayBase< LVecBase3i > 0 0 0 0 803 0 0 0 0 1 0 1363 0 0 0 0 0

1363 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 43009 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 53 PointerToBase< ReferenceCountedVector< LVecBase3i > > 0 0 0 0 0 0 2 801 802 0 0 1 0 1342 0 0 0 0 0

1364 41 ConstPointerToArray< UnalignedLMatrix4d > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4d > 41 ConstPointerToArray< UnalignedLMatrix4d > 0 0 0 1 818 828 0 9 819 820 821 822 823 824 825 826 827 0 0 1 0 1365 0 0 0 0 0

1365 40 PointerToArrayBase< UnalignedLMatrix4d > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4d > 40 PointerToArrayBase< UnalignedLMatrix4d > 0 0 0 0 817 0 0 0 0 1 0 1366 0 0 0 0 0

1366 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > 0 0 0 0 0 0 2 815 816 0 0 1 0 1342 0 0 0 0 0

1367 41 ConstPointerToArray< UnalignedLMatrix4f > 0 141313 41 ConstPointerToArray< UnalignedLMatrix4f > 41 ConstPointerToArray< UnalignedLMatrix4f > 0 0 0 1 832 842 0 9 833 834 835 836 837 838 839 840 841 0 0 1 0 1368 0 0 0 0 0

1368 40 PointerToArrayBase< UnalignedLMatrix4f > 0 26625 40 PointerToArrayBase< UnalignedLMatrix4f > 40 PointerToArrayBase< UnalignedLMatrix4f > 0 0 0 0 831 0 0 0 0 1 0 1369 0 0 0 0 0

1369 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 43009 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 61 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > 0 0 0 0 0 0 2 829 830 0 0 1 0 1342 0 0 0 0 0

1370 42 ConstPointerToArray< UnalignedLVecBase4d > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4d > 42 ConstPointerToArray< UnalignedLVecBase4d > 0 0 0 1 846 856 0 9 847 848 849 850 851 852 853 854 855 0 0 1 0 1371 0 0 0 0 0

1371 41 PointerToArrayBase< UnalignedLVecBase4d > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4d > 41 PointerToArrayBase< UnalignedLVecBase4d > 0 0 0 0 845 0 0 0 0 1 0 1372 0 0 0 0 0

1372 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > 0 0 0 0 0 0 2 843 844 0 0 1 0 1342 0 0 0 0 0

1373 42 ConstPointerToArray< UnalignedLVecBase4f > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4f > 42 ConstPointerToArray< UnalignedLVecBase4f > 0 0 0 1 860 870 0 9 861 862 863 864 865 866 867 868 869 0 0 1 0 1374 0 0 0 0 0

1374 41 PointerToArrayBase< UnalignedLVecBase4f > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4f > 41 PointerToArrayBase< UnalignedLVecBase4f > 0 0 0 0 859 0 0 0 0 1 0 1375 0 0 0 0 0

1375 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > 0 0 0 0 0 0 2 857 858 0 0 1 0 1342 0 0 0 0 0

1376 42 ConstPointerToArray< UnalignedLVecBase4i > 0 141313 42 ConstPointerToArray< UnalignedLVecBase4i > 42 ConstPointerToArray< UnalignedLVecBase4i > 0 0 0 1 874 884 0 9 875 876 877 878 879 880 881 882 883 0 0 1 0 1377 0 0 0 0 0

1377 41 PointerToArrayBase< UnalignedLVecBase4i > 0 26625 41 PointerToArrayBase< UnalignedLVecBase4i > 41 PointerToArrayBase< UnalignedLVecBase4i > 0 0 0 0 873 0 0 0 0 1 0 1378 0 0 0 0 0

1378 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 43009 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 62 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > 0 0 0 0 0 0 2 871 872 0 0 1 0 1342 0 0 0 0 0

1379 27 PointerToArray< LMatrix3d > 0 141313 27 PointerToArray< LMatrix3d > 27 PointerToArray< LMatrix3d > 0 0 0 1 885 902 0 16 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 0 0 1 0 1340 0 0 0 0 0

1380 27 PointerToArray< LMatrix3f > 0 141313 27 PointerToArray< LMatrix3f > 27 PointerToArray< LMatrix3f > 0 0 0 1 903 920 0 16 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 0 0 1 0 1344 0 0 0 0 0

1381 28 PointerToArray< LVecBase2d > 0 141313 28 PointerToArray< LVecBase2d > 28 PointerToArray< LVecBase2d > 0 0 0 1 921 938 0 16 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 0 0 1 0 1347 0 0 0 0 0

1382 28 PointerToArray< LVecBase2f > 0 141313 28 PointerToArray< LVecBase2f > 28 PointerToArray< LVecBase2f > 0 0 0 1 939 956 0 16 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 0 0 1 0 1350 0 0 0 0 0

1383 28 PointerToArray< LVecBase2i > 0 141313 28 PointerToArray< LVecBase2i > 28 PointerToArray< LVecBase2i > 0 0 0 1 957 974 0 16 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 0 0 1 0 1353 0 0 0 0 0

1384 28 PointerToArray< LVecBase3d > 0 141313 28 PointerToArray< LVecBase3d > 28 PointerToArray< LVecBase3d > 0 0 0 1 975 992 0 16 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 0 0 1 0 1356 0 0 0 0 0

1385 28 PointerToArray< LVecBase3f > 0 141313 28 PointerToArray< LVecBase3f > 28 PointerToArray< LVecBase3f > 0 0 0 1 993 1010 0 16 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 0 0 1 0 1359 0 0 0 0 0

1386 28 PointerToArray< LVecBase3i > 0 141313 28 PointerToArray< LVecBase3i > 28 PointerToArray< LVecBase3i > 0 0 0 1 1011 1028 0 16 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 0 0 1 0 1362 0 0 0 0 0

1387 36 PointerToArray< UnalignedLMatrix4d > 0 141313 36 PointerToArray< UnalignedLMatrix4d > 36 PointerToArray< UnalignedLMatrix4d > 0 0 0 1 1029 1046 0 16 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 0 0 1 0 1365 0 0 0 0 0

1388 36 PointerToArray< UnalignedLMatrix4f > 0 141313 36 PointerToArray< UnalignedLMatrix4f > 36 PointerToArray< UnalignedLMatrix4f > 0 0 0 1 1047 1064 0 16 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 0 0 1 0 1368 0 0 0 0 0

1389 37 PointerToArray< UnalignedLVecBase4d > 0 141313 37 PointerToArray< UnalignedLVecBase4d > 37 PointerToArray< UnalignedLVecBase4d > 0 0 0 1 1065 1082 0 16 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 0 0 1 0 1371 0 0 0 0 0

1390 37 PointerToArray< UnalignedLVecBase4f > 0 141313 37 PointerToArray< UnalignedLVecBase4f > 37 PointerToArray< UnalignedLVecBase4f > 0 0 0 1 1083 1100 0 16 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 0 0 1 0 1374 0 0 0 0 0

1391 37 PointerToArray< UnalignedLVecBase4i > 0 141313 37 PointerToArray< UnalignedLVecBase4i > 37 PointerToArray< UnalignedLVecBase4i > 0 0 0 1 1101 1118 0 16 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 0 0 1 0 1377 0 0 0 0 0

1392 14 BoundingVolume 0 141313 14 BoundingVolume 14 BoundingVolume 0 0 0 0 1128 0 9 1119 1120 1121 1122 1123 1124 1125 1126 1127 0 0 1 0 1393 0 0 0 2 1394 1395 330
/**
 * This is an abstract class for any volume in any sense which can be said to
 * define the locality of reference of a node in a graph, along with all of
 * its descendants.  It is not necessarily a geometric volume (although see
 * GeometricBoundingVolume); this is simply an abstract interface for bounds
 * of any sort.
 */

1393 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1394 17 IntersectionFlags 0 794624 33 BoundingVolume::IntersectionFlags 33 BoundingVolume::IntersectionFlags 1392 0 0 0 0 0 0 0 0 0 5 18 IF_no_intersection 34 BoundingVolume::IF_no_intersection 65
// If no bits are set, it is known that there is no intersection.
0 11 IF_possible 27 BoundingVolume::IF_possible 56
// IF_possible is set if there might be an intersection.
1 7 IF_some 23 BoundingVolume::IF_some 105
// IF_some is set if there is definitely an intersection.  In this case,
// IF_possible will also be set.
2 6 IF_all 22 BoundingVolume::IF_all 69
// When IF_all is set, both IF_possible and IF_some will also be set.
4 18 IF_dont_understand 34 BoundingVolume::IF_dont_understand 106
// IF_dont_understand is set if the particular volumevolume intersection
// test has not been implemented.
8 0 74
// The contains() functions return the union of one or more of these bits.

1395 10 BoundsType 0 794624 26 BoundingVolume::BoundsType 26 BoundingVolume::BoundsType 1392 0 0 0 0 0 0 0 0 0 5 10 BT_default 26 BoundingVolume::BT_default 0
0 7 BT_best 23 BoundingVolume::BT_best 0
1 9 BT_sphere 25 BoundingVolume::BT_sphere 0
2 6 BT_box 22 BoundingVolume::BT_box 0
3 10 BT_fastest 26 BoundingVolume::BT_fastest 0
4 0 80
// This enum is used to control the automatic generation of bounding
// volumes.

1396 23 GeometricBoundingVolume 0 141313 23 GeometricBoundingVolume 23 GeometricBoundingVolume 0 0 0 0 1134 0 5 1129 1130 1131 1132 1133 0 0 1 0 1392 0 0 0 0 167
/**
 * This is another abstract class, for a general class of bounding volumes
 * that actually enclose points in 3-d space, such as BSP's and bounding
 * spheres.
 */

1397 20 FiniteBoundingVolume 0 141313 20 FiniteBoundingVolume 20 FiniteBoundingVolume 0 0 0 0 1139 0 4 1135 1136 1137 1138 0 0 1 0 1396 0 0 0 0 168
/**
 * A special kind of GeometricBoundingVolume that is known to be finite.  It
 * is possible to query this kind of volume for its minimum and maximum
 * extents.
 */

1398 10 LParabolaf 0 26625 10 LParabolaf 10 LParabolaf 0 0 0 1 1140 1142 0 12 1141 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1399 10 LParabolad 0 26625 10 LParabolad 10 LParabolad 0 0 0 1 1154 1156 0 12 1155 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 0 0 0 0 0 200
/**
 * An abstract mathematical description of a parabola, particularly useful for
 * describing arcs of projectiles.
 *
 * The parabolic equation, given parametrically here, is P = At^2 + Bt + C.
 */

1400 9 LParabola 0 2105345 9 LParabola 9 LParabola 0 0 1398 0 0 0 0 0 0 0 0 0 0

1401 7 LPlanef 0 141313 7 LPlanef 7 LPlanef 0 0 0 1 1168 1184 0 15 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 0 0 1 0 1402 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1402 10 LVecBase4f 0 2049 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1403 7 LPlaned 0 141313 7 LPlaned 7 LPlaned 0 0 0 1 1185 1201 0 15 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 0 0 1 0 1404 0 0 0 0 120
/**
 * An abstract mathematical description of a plane.  A plane is defined by the
 * equation Ax + By + Cz + D = 0.
 */

1404 10 LVecBase4d 0 2049 10 LVecBase4d 10 LVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1405 6 LPlane 0 2105345 6 LPlane 6 LPlane 0 0 1401 0 0 0 0 0 0 0 0 0 0

1406 6 PlaneF 0 2105345 6 PlaneF 6 PlaneF 0 0 1401 0 0 0 0 0 0 0 0 0 0

1407 6 PlaneD 0 2105345 6 PlaneD 6 PlaneD 0 0 1403 0 0 0 0 0 0 0 0 0 0

1408 5 Plane 0 2105345 5 Plane 5 Plane 0 0 1401 0 0 0 0 0 0 0 0 0 0

1409 11 BoundingBox 0 141313 11 BoundingBox 11 BoundingBox 0 0 0 1 1202 1210 2 1788 1789 7 1203 1204 1205 1206 1207 1208 1209 2 1797 1798 0 1 0 1397 0 0 0 0 201
/**
 * An axis-aligned bounding box; that is, a minimum and maximum coordinate
 * triple.
 *
 * This box is always axis-aligned.  If you need a more general bounding box,
 * try BoundingHexahedron.
 */

1410 7 LPoint3 0 2105344 7 LPoint3 7 LPoint3 0 0 1411 0 0 0 0 0 0 0 0 0 0

1411 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1412 9 LFrustumf 0 141313 9 LFrustumf 9 LFrustumf 0 0 0 1 1211 1218 0 6 1212 1213 1214 1215 1216 1217 0 0 0 0 0 10
/**
 *
 */

1413 9 LFrustumd 0 141313 9 LFrustumd 9 LFrustumd 0 0 0 1 1219 1226 0 6 1220 1221 1222 1223 1224 1225 0 0 0 0 0 10
/**
 *
 */

1414 8 LFrustum 0 2105345 8 LFrustum 8 LFrustum 0 0 1412 0 0 0 0 0 0 0 0 0 0

1415 8 FrustumF 0 2105345 8 FrustumF 8 FrustumF 0 0 1412 0 0 0 0 0 0 0 0 0 0

1416 8 FrustumD 0 2105345 8 FrustumD 8 FrustumD 0 0 1413 0 0 0 0 0 0 0 0 0 0

1417 7 Frustum 0 2105345 7 Frustum 7 Frustum 0 0 1412 0 0 0 0 0 0 0 0 0 0

1418 18 BoundingHexahedron 0 141313 18 BoundingHexahedron 18 BoundingHexahedron 0 0 0 1 1227 1233 2 1790 1791 5 1228 1229 1230 1231 1232 2 1799 1800 0 1 0 1397 0 0 0 0 300
/**
 * This defines a bounding convex hexahedron.  It is typically used to
 * represent a frustum, but may represent any enclosing convex hexahedron,
 * including simple boxes.  However, if all you want is an axis-aligned
 * bounding box, you may be better off with the simpler BoundingBox class.
 */

1419 12 BoundingLine 0 141313 12 BoundingLine 12 BoundingLine 0 0 0 1 1234 1239 0 4 1235 1236 1237 1238 0 0 1 0 1396 0 0 0 0 320
/**
 * This funny bounding volume is an infinite line with no thickness and
 * extending to infinity in both directions.
 *
 * Note that it *always* extends in both directions, despite the fact that you
 * specify two points to the constructor.  These are not endpoints, they are
 * two arbitrary points on the line.
 */

1420 13 BoundingPlane 0 141313 13 BoundingPlane 13 BoundingPlane 0 0 0 1 1240 1244 0 3 1241 1242 1243 0 0 1 0 1396 0 0 0 0 248
/**
 * This funny bounding volume is an infinite plane that divides space into two
 * regions: the part behind the normal, which is "inside" the bounding volume,
 * and the part in front of the normal, which is "outside" the bounding
 * volume.
 */

1421 14 BoundingSphere 0 141313 14 BoundingSphere 14 BoundingSphere 0 0 0 1 1245 1252 0 6 1246 1247 1248 1249 1250 1251 0 0 1 0 1397 0 0 0 0 147
/**
 * This defines a bounding sphere, consisting of a center and a radius.  It is
 * always a sphere, and never an ellipsoid or other quadric.
 */

1422 26 IntersectionBoundingVolume 0 141313 26 IntersectionBoundingVolume 26 IntersectionBoundingVolume 0 0 0 1 1253 1260 1 1792 6 1254 1255 1256 1257 1258 1259 1 1801 0 1 0 1396 0 0 0 0 232
/**
 * This special bounding volume is the intersection of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within an IntersectionBoundingVolume if it is
 * within all of its component bounding volumes.
 */

1423 31 GeometricBoundingVolume const * 0 8576 31 GeometricBoundingVolume const * 31 GeometricBoundingVolume const * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 29 GeometricBoundingVolume const 0 8832 29 GeometricBoundingVolume const 29 GeometricBoundingVolume const 0 0 1396 0 0 0 0 0 0 0 0 0 0

1425 8 Mersenne 0 141313 8 Mersenne 8 Mersenne 0 0 0 1 1263 1265 0 1 1264 0 0 0 0 1 1426 0

1426 0 0 794624 10 Mersenne:: 0 1425 0 0 0 0 0 0 0 0 0 1 9 max_value 19 Mersenne::max_value 0
2147483647 0 0

1427 18 OmniBoundingVolume 0 141313 18 OmniBoundingVolume 18 OmniBoundingVolume 0 0 0 1 1266 1268 0 1 1267 0 0 1 0 1396 0 0 0 0 85
/**
 * This is a special kind of GeometricBoundingVolume that fills all of space.
 */

1428 19 UnionBoundingVolume 0 141313 19 UnionBoundingVolume 19 UnionBoundingVolume 0 0 0 1 1269 1277 1 1793 7 1270 1271 1272 1273 1274 1275 1276 1 1802 0 1 0 1396 0 0 0 0 229
/**
 * This special bounding volume is the union of all of its constituent
 * bounding volumes.
 *
 * A point is defined to be within a UnionBoundingVolume if it is within any
 * one or more of its component bounding volumes.
 */

1429 10 Randomizer 0 141313 10 Randomizer 10 Randomizer 0 0 0 1 1278 1285 0 6 1279 1280 1281 1282 1283 1284 0 0 0 0 0 50
/**
 * A handy class to return random numbers.
 */

1430 11 PerlinNoise 0 141313 11 PerlinNoise 11 PerlinNoise 0 0 0 0 1287 0 1 1286 0 0 0 0 0 183
/**
 * This is the base class for PerlinNoise2 and PerlinNoise3, different
 * dimensions of Perlin noise implementation.  The base class just collects
 * the common functionality.
 */

1431 12 PerlinNoise2 0 141313 12 PerlinNoise2 12 PerlinNoise2 0 0 0 1 1288 1293 0 4 1289 1290 1291 1292 0 0 1 0 1430 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 2 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1432 12 PerlinNoise3 0 141313 12 PerlinNoise3 12 PerlinNoise3 0 0 0 1 1294 1299 0 4 1295 1296 1297 1298 0 0 1 0 1430 0 0 0 0 185
/**
 * This class provides an implementation of Perlin noise for 3 variables.
 * This code is loosely based on the reference implementation at
 * http://mrl.nyu.edu/~perlin/noise/ .
 */

1433 13 PTA_LMatrix4f 0 2105345 13 PTA_LMatrix4f 13 PTA_LMatrix4f 0 0 1388 0 0 0 0 0 0 0 0 0 0

1434 14 CPTA_LMatrix4f 0 2105345 14 CPTA_LMatrix4f 14 CPTA_LMatrix4f 0 0 1367 0 0 0 0 0 0 0 0 0 0

1435 13 PTA_LMatrix4d 0 2105345 13 PTA_LMatrix4d 13 PTA_LMatrix4d 0 0 1387 0 0 0 0 0 0 0 0 0 0

1436 14 CPTA_LMatrix4d 0 2105345 14 CPTA_LMatrix4d 14 CPTA_LMatrix4d 0 0 1364 0 0 0 0 0 0 0 0 0 0

1437 12 PTA_LMatrix4 0 2105345 12 PTA_LMatrix4 12 PTA_LMatrix4 0 0 1433 0 0 0 0 0 0 0 0 0 0

1438 13 CPTA_LMatrix4 0 2105345 13 CPTA_LMatrix4 13 CPTA_LMatrix4 0 0 1434 0 0 0 0 0 0 0 0 0 0

1439 7 PTAMat4 0 2105345 7 PTAMat4 7 PTAMat4 0 0 1437 0 0 0 0 0 0 0 0 0 0

1440 8 CPTAMat4 0 2105345 8 CPTAMat4 8 CPTAMat4 0 0 1438 0 0 0 0 0 0 0 0 0 0

1441 8 PTAMat4d 0 2105345 8 PTAMat4d 8 PTAMat4d 0 0 1435 0 0 0 0 0 0 0 0 0 0

1442 9 CPTAMat4d 0 2105345 9 CPTAMat4d 9 CPTAMat4d 0 0 1436 0 0 0 0 0 0 0 0 0 0

1443 13 PTA_LMatrix3f 0 2105345 13 PTA_LMatrix3f 13 PTA_LMatrix3f 0 0 1380 0 0 0 0 0 0 0 0 0 0

1444 14 CPTA_LMatrix3f 0 2105345 14 CPTA_LMatrix3f 14 CPTA_LMatrix3f 0 0 1343 0 0 0 0 0 0 0 0 0 0

1445 13 PTA_LMatrix3d 0 2105345 13 PTA_LMatrix3d 13 PTA_LMatrix3d 0 0 1379 0 0 0 0 0 0 0 0 0 0

1446 14 CPTA_LMatrix3d 0 2105345 14 CPTA_LMatrix3d 14 CPTA_LMatrix3d 0 0 1339 0 0 0 0 0 0 0 0 0 0

1447 12 PTA_LMatrix3 0 2105345 12 PTA_LMatrix3 12 PTA_LMatrix3 0 0 1443 0 0 0 0 0 0 0 0 0 0

1448 13 CPTA_LMatrix3 0 2105345 13 CPTA_LMatrix3 13 CPTA_LMatrix3 0 0 1444 0 0 0 0 0 0 0 0 0 0

1449 7 PTAMat3 0 2105345 7 PTAMat3 7 PTAMat3 0 0 1447 0 0 0 0 0 0 0 0 0 0

1450 8 CPTAMat3 0 2105345 8 CPTAMat3 8 CPTAMat3 0 0 1448 0 0 0 0 0 0 0 0 0 0

1451 8 PTAMat3d 0 2105345 8 PTAMat3d 8 PTAMat3d 0 0 1445 0 0 0 0 0 0 0 0 0 0

1452 9 CPTAMat3d 0 2105345 9 CPTAMat3d 9 CPTAMat3d 0 0 1446 0 0 0 0 0 0 0 0 0 0

1453 14 PTA_LVecBase4f 0 2105345 14 PTA_LVecBase4f 14 PTA_LVecBase4f 0 0 1390 0 0 0 0 0 0 0 0 0 0

1454 15 CPTA_LVecBase4f 0 2105345 15 CPTA_LVecBase4f 15 CPTA_LVecBase4f 0 0 1373 0 0 0 0 0 0 0 0 0 0

1455 14 PTA_LVecBase4d 0 2105345 14 PTA_LVecBase4d 14 PTA_LVecBase4d 0 0 1389 0 0 0 0 0 0 0 0 0 0

1456 15 CPTA_LVecBase4d 0 2105345 15 CPTA_LVecBase4d 15 CPTA_LVecBase4d 0 0 1370 0 0 0 0 0 0 0 0 0 0

1457 14 PTA_LVecBase4i 0 2105345 14 PTA_LVecBase4i 14 PTA_LVecBase4i 0 0 1391 0 0 0 0 0 0 0 0 0 0

1458 15 CPTA_LVecBase4i 0 2105345 15 CPTA_LVecBase4i 15 CPTA_LVecBase4i 0 0 1376 0 0 0 0 0 0 0 0 0 0

1459 13 PTA_LVecBase4 0 2105345 13 PTA_LVecBase4 13 PTA_LVecBase4 0 0 1453 0 0 0 0 0 0 0 0 0 0

1460 14 CPTA_LVecBase4 0 2105345 14 CPTA_LVecBase4 14 CPTA_LVecBase4 0 0 1454 0 0 0 0 0 0 0 0 0 0

1461 12 PTAVecBase4f 0 2105345 12 PTAVecBase4f 12 PTAVecBase4f 0 0 1453 0 0 0 0 0 0 0 0 0 0

1462 13 CPTAVecBase4f 0 2105345 13 CPTAVecBase4f 13 CPTAVecBase4f 0 0 1454 0 0 0 0 0 0 0 0 0 0

1463 12 PTAVecBase4d 0 2105345 12 PTAVecBase4d 12 PTAVecBase4d 0 0 1455 0 0 0 0 0 0 0 0 0 0

1464 13 CPTAVecBase4d 0 2105345 13 CPTAVecBase4d 13 CPTAVecBase4d 0 0 1456 0 0 0 0 0 0 0 0 0 0

1465 14 PTA_LVecBase3f 0 2105345 14 PTA_LVecBase3f 14 PTA_LVecBase3f 0 0 1385 0 0 0 0 0 0 0 0 0 0

1466 15 CPTA_LVecBase3f 0 2105345 15 CPTA_LVecBase3f 15 CPTA_LVecBase3f 0 0 1358 0 0 0 0 0 0 0 0 0 0

1467 14 PTA_LVecBase3d 0 2105345 14 PTA_LVecBase3d 14 PTA_LVecBase3d 0 0 1384 0 0 0 0 0 0 0 0 0 0

1468 15 CPTA_LVecBase3d 0 2105345 15 CPTA_LVecBase3d 15 CPTA_LVecBase3d 0 0 1355 0 0 0 0 0 0 0 0 0 0

1469 14 PTA_LVecBase3i 0 2105345 14 PTA_LVecBase3i 14 PTA_LVecBase3i 0 0 1386 0 0 0 0 0 0 0 0 0 0

1470 15 CPTA_LVecBase3i 0 2105345 15 CPTA_LVecBase3i 15 CPTA_LVecBase3i 0 0 1361 0 0 0 0 0 0 0 0 0 0

1471 13 PTA_LVecBase3 0 2105345 13 PTA_LVecBase3 13 PTA_LVecBase3 0 0 1465 0 0 0 0 0 0 0 0 0 0

1472 14 CPTA_LVecBase3 0 2105345 14 CPTA_LVecBase3 14 CPTA_LVecBase3 0 0 1466 0 0 0 0 0 0 0 0 0 0

1473 12 PTAVecBase3f 0 2105345 12 PTAVecBase3f 12 PTAVecBase3f 0 0 1465 0 0 0 0 0 0 0 0 0 0

1474 13 CPTAVecBase3f 0 2105345 13 CPTAVecBase3f 13 CPTAVecBase3f 0 0 1466 0 0 0 0 0 0 0 0 0 0

1475 12 PTAVecBase3d 0 2105345 12 PTAVecBase3d 12 PTAVecBase3d 0 0 1467 0 0 0 0 0 0 0 0 0 0

1476 13 CPTAVecBase3d 0 2105345 13 CPTAVecBase3d 13 CPTAVecBase3d 0 0 1468 0 0 0 0 0 0 0 0 0 0

1477 14 PTA_LVecBase2f 0 2105345 14 PTA_LVecBase2f 14 PTA_LVecBase2f 0 0 1382 0 0 0 0 0 0 0 0 0 0

1478 15 CPTA_LVecBase2f 0 2105345 15 CPTA_LVecBase2f 15 CPTA_LVecBase2f 0 0 1349 0 0 0 0 0 0 0 0 0 0

1479 14 PTA_LVecBase2d 0 2105345 14 PTA_LVecBase2d 14 PTA_LVecBase2d 0 0 1381 0 0 0 0 0 0 0 0 0 0

1480 15 CPTA_LVecBase2d 0 2105345 15 CPTA_LVecBase2d 15 CPTA_LVecBase2d 0 0 1346 0 0 0 0 0 0 0 0 0 0

1481 14 PTA_LVecBase2i 0 2105345 14 PTA_LVecBase2i 14 PTA_LVecBase2i 0 0 1383 0 0 0 0 0 0 0 0 0 0

1482 15 CPTA_LVecBase2i 0 2105345 15 CPTA_LVecBase2i 15 CPTA_LVecBase2i 0 0 1352 0 0 0 0 0 0 0 0 0 0

1483 13 PTA_LVecBase2 0 2105345 13 PTA_LVecBase2 13 PTA_LVecBase2 0 0 1477 0 0 0 0 0 0 0 0 0 0

1484 14 CPTA_LVecBase2 0 2105345 14 CPTA_LVecBase2 14 CPTA_LVecBase2 0 0 1478 0 0 0 0 0 0 0 0 0 0

1485 12 PTAVecBase2f 0 2105345 12 PTAVecBase2f 12 PTAVecBase2f 0 0 1477 0 0 0 0 0 0 0 0 0 0

1486 13 CPTAVecBase2f 0 2105345 13 CPTAVecBase2f 13 CPTAVecBase2f 0 0 1478 0 0 0 0 0 0 0 0 0 0

1487 12 PTAVecBase2d 0 2105345 12 PTAVecBase2d 12 PTAVecBase2d 0 0 1479 0 0 0 0 0 0 0 0 0 0

1488 13 CPTAVecBase2d 0 2105345 13 CPTAVecBase2d 13 CPTAVecBase2d 0 0 1480 0 0 0 0 0 0 0 0 0 0

1489 19 StackedPerlinNoise2 0 141313 19 StackedPerlinNoise2 19 StackedPerlinNoise2 0 0 0 1 1301 1307 0 5 1302 1303 1304 1305 1306 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1490 19 StackedPerlinNoise3 0 141313 19 StackedPerlinNoise3 19 StackedPerlinNoise3 0 0 0 1 1308 1314 0 5 1309 1310 1311 1312 1313 0 0 0 0 0 147
/**
 * Implements a multi-layer PerlinNoise, with one or more high-frequency noise
 * functions added to a lower-frequency base noise function.
 */

1491 12 Triangulator 0 141313 12 Triangulator 12 Triangulator 0 0 0 1 1315 1330 1 1794 14 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1 1803 0 0 0 0 382
/**
 * This class can triangulate a convex or concave polygon, even one with
 * holes.  It is adapted from an algorithm published as:
 *
 * Narkhede A. and Manocha D., Fast polygon triangulation algorithm based on
 * Seidel's Algorithm, UNC-CH, 1994.
 *
 * http://www.cs.unc.edu/~dm/CODE/GEM/chapter.html
 *
 * It works strictly on 2-d points.  See Triangulator3 for 3-d points.
 */

1492 14 LPoint2d const 0 8832 14 LPoint2d const 14 LPoint2d const 0 0 1493 0 0 0 0 0 0 0 0 0 0

1493 8 LPoint2d 0 2048 8 LPoint2d 8 LPoint2d 0 0 0 0 0 0 0 0 0 0 0 0 50
/**
 * This is a two-component point in space.
 */

1494 13 Triangulator3 0 141313 13 Triangulator3 13 Triangulator3 0 0 0 1 1331 1338 2 1795 1796 6 1332 1333 1334 1335 1336 1337 1 1804 0 1 0 1491 0 0 0 0 264
/**
 * This is an extension of Triangulator to handle polygons with three-
 * dimensional points.  It assumes all of the points lie in a single plane,
 * and internally projects the supplied points into 2-D for passing to the
 * underlying Triangulator object.
 */

1495 14 LPoint3d const 0 8832 14 LPoint3d const 14 LPoint3d const 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 8 LPoint3d 0 2048 8 LPoint3d 8 LPoint3d 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1497 13 LPlaned const 0 8832 13 LPlaned const 13 LPlaned const 0 0 1403 0 0 0 0 0 0 0 0 0 0

1498 40 ConstPointerToArray< LMatrix3d > const * 0 8576 40 ConstPointerToArray< LMatrix3d > const * 40 ConstPointerToArray< LMatrix3d > const * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1499 38 ConstPointerToArray< LMatrix3d > const 0 8832 38 ConstPointerToArray< LMatrix3d > const 38 ConstPointerToArray< LMatrix3d > const 0 0 1339 0 0 0 0 0 0 0 0 0 0

1500 34 ConstPointerToArray< LMatrix3d > * 0 8576 34 ConstPointerToArray< LMatrix3d > * 34 ConstPointerToArray< LMatrix3d > * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1501 35 PointerToArray< LMatrix3d > const * 0 8576 35 PointerToArray< LMatrix3d > const * 35 PointerToArray< LMatrix3d > const * 0 0 1502 0 0 0 0 0 0 0 0 0 0

1502 33 PointerToArray< LMatrix3d > const 0 8832 33 PointerToArray< LMatrix3d > const 33 PointerToArray< LMatrix3d > const 0 0 1379 0 0 0 0 0 0 0 0 0 0

1503 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1504 0 0 0 0 0 0 0 0 0 0

1504 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1505 0 0 0 0 0 0 0 0 0 0

1505 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1506 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1507 17 LMatrix3d const * 0 8576 17 LMatrix3d const * 17 LMatrix3d const * 0 0 1508 0 0 0 0 0 0 0 0 0 0

1508 15 LMatrix3d const 0 8832 15 LMatrix3d const 15 LMatrix3d const 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 9 LMatrix3d 0 2048 9 LMatrix3d 9 LMatrix3d 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1510 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1511 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1512 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1513 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1514 0 0 0 0 0 0 0 0 0 0

1514 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1515 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1516 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3d > > * 0 0 1341 0 0 0 0 0 0 0 0 0 0

1517 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3d > > const * 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3d > > const 0 0 1341 0 0 0 0 0 0 0 0 0 0

1519 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1521 40 ConstPointerToArray< LMatrix3f > const * 0 8576 40 ConstPointerToArray< LMatrix3f > const * 40 ConstPointerToArray< LMatrix3f > const * 0 0 1522 0 0 0 0 0 0 0 0 0 0

1522 38 ConstPointerToArray< LMatrix3f > const 0 8832 38 ConstPointerToArray< LMatrix3f > const 38 ConstPointerToArray< LMatrix3f > const 0 0 1343 0 0 0 0 0 0 0 0 0 0

1523 34 ConstPointerToArray< LMatrix3f > * 0 8576 34 ConstPointerToArray< LMatrix3f > * 34 ConstPointerToArray< LMatrix3f > * 0 0 1343 0 0 0 0 0 0 0 0 0 0

1524 35 PointerToArray< LMatrix3f > const * 0 8576 35 PointerToArray< LMatrix3f > const * 35 PointerToArray< LMatrix3f > const * 0 0 1525 0 0 0 0 0 0 0 0 0 0

1525 33 PointerToArray< LMatrix3f > const 0 8832 33 PointerToArray< LMatrix3f > const 33 PointerToArray< LMatrix3f > const 0 0 1380 0 0 0 0 0 0 0 0 0 0

1526 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1528 0 0 0 0 0 0 0 0 0 0

1528 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1529 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 8576 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 54 PointerToBase< ReferenceCountedVector< LMatrix3f > > * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1530 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 8576 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 60 PointerToBase< ReferenceCountedVector< LMatrix3f > > const * 0 0 1531 0 0 0 0 0 0 0 0 0 0

1531 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 8832 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 58 PointerToBase< ReferenceCountedVector< LMatrix3f > > const 0 0 1345 0 0 0 0 0 0 0 0 0 0

1532 41 ConstPointerToArray< LVecBase2d > const * 0 8576 41 ConstPointerToArray< LVecBase2d > const * 41 ConstPointerToArray< LVecBase2d > const * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 39 ConstPointerToArray< LVecBase2d > const 0 8832 39 ConstPointerToArray< LVecBase2d > const 39 ConstPointerToArray< LVecBase2d > const 0 0 1346 0 0 0 0 0 0 0 0 0 0

1534 35 ConstPointerToArray< LVecBase2d > * 0 8576 35 ConstPointerToArray< LVecBase2d > * 35 ConstPointerToArray< LVecBase2d > * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1535 36 PointerToArray< LVecBase2d > const * 0 8576 36 PointerToArray< LVecBase2d > const * 36 PointerToArray< LVecBase2d > const * 0 0 1536 0 0 0 0 0 0 0 0 0 0

1536 34 PointerToArray< LVecBase2d > const 0 8832 34 PointerToArray< LVecBase2d > const 34 PointerToArray< LVecBase2d > const 0 0 1381 0 0 0 0 0 0 0 0 0 0

1537 18 LVecBase2d const * 0 8576 18 LVecBase2d const * 18 LVecBase2d const * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 16 LVecBase2d const 0 8832 16 LVecBase2d const 16 LVecBase2d const 0 0 1539 0 0 0 0 0 0 0 0 0 0

1539 10 LVecBase2d 0 2048 10 LVecBase2d 10 LVecBase2d 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1540 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2d > > * 0 0 1348 0 0 0 0 0 0 0 0 0 0

1541 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2d > > const * 0 0 1542 0 0 0 0 0 0 0 0 0 0

1542 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2d > > const 0 0 1348 0 0 0 0 0 0 0 0 0 0

1543 41 ConstPointerToArray< LVecBase2f > const * 0 8576 41 ConstPointerToArray< LVecBase2f > const * 41 ConstPointerToArray< LVecBase2f > const * 0 0 1544 0 0 0 0 0 0 0 0 0 0

1544 39 ConstPointerToArray< LVecBase2f > const 0 8832 39 ConstPointerToArray< LVecBase2f > const 39 ConstPointerToArray< LVecBase2f > const 0 0 1349 0 0 0 0 0 0 0 0 0 0

1545 35 ConstPointerToArray< LVecBase2f > * 0 8576 35 ConstPointerToArray< LVecBase2f > * 35 ConstPointerToArray< LVecBase2f > * 0 0 1349 0 0 0 0 0 0 0 0 0 0

1546 36 PointerToArray< LVecBase2f > const * 0 8576 36 PointerToArray< LVecBase2f > const * 36 PointerToArray< LVecBase2f > const * 0 0 1547 0 0 0 0 0 0 0 0 0 0

1547 34 PointerToArray< LVecBase2f > const 0 8832 34 PointerToArray< LVecBase2f > const 34 PointerToArray< LVecBase2f > const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1548 18 LVecBase2f const * 0 8576 18 LVecBase2f const * 18 LVecBase2f const * 0 0 1549 0 0 0 0 0 0 0 0 0 0

1549 16 LVecBase2f const 0 8832 16 LVecBase2f const 16 LVecBase2f const 0 0 1550 0 0 0 0 0 0 0 0 0 0

1550 10 LVecBase2f 0 2048 10 LVecBase2f 10 LVecBase2f 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1551 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2f > > * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1552 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2f > > const * 0 0 1553 0 0 0 0 0 0 0 0 0 0

1553 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2f > > const 0 0 1351 0 0 0 0 0 0 0 0 0 0

1554 41 ConstPointerToArray< LVecBase2i > const * 0 8576 41 ConstPointerToArray< LVecBase2i > const * 41 ConstPointerToArray< LVecBase2i > const * 0 0 1555 0 0 0 0 0 0 0 0 0 0

1555 39 ConstPointerToArray< LVecBase2i > const 0 8832 39 ConstPointerToArray< LVecBase2i > const 39 ConstPointerToArray< LVecBase2i > const 0 0 1352 0 0 0 0 0 0 0 0 0 0

1556 35 ConstPointerToArray< LVecBase2i > * 0 8576 35 ConstPointerToArray< LVecBase2i > * 35 ConstPointerToArray< LVecBase2i > * 0 0 1352 0 0 0 0 0 0 0 0 0 0

1557 36 PointerToArray< LVecBase2i > const * 0 8576 36 PointerToArray< LVecBase2i > const * 36 PointerToArray< LVecBase2i > const * 0 0 1558 0 0 0 0 0 0 0 0 0 0

1558 34 PointerToArray< LVecBase2i > const 0 8832 34 PointerToArray< LVecBase2i > const 34 PointerToArray< LVecBase2i > const 0 0 1383 0 0 0 0 0 0 0 0 0 0

1559 18 LVecBase2i const * 0 8576 18 LVecBase2i const * 18 LVecBase2i const * 0 0 1560 0 0 0 0 0 0 0 0 0 0

1560 16 LVecBase2i const 0 8832 16 LVecBase2i const 16 LVecBase2i const 0 0 1561 0 0 0 0 0 0 0 0 0 0

1561 10 LVecBase2i 0 2048 10 LVecBase2i 10 LVecBase2i 0 0 0 0 0 0 0 0 0 0 0 0 75
/**
 * This is the base class for all two-component vectors and points.
 */

1562 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase2i > > * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1563 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase2i > > const * 0 0 1564 0 0 0 0 0 0 0 0 0 0

1564 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase2i > > const 0 0 1354 0 0 0 0 0 0 0 0 0 0

1565 41 ConstPointerToArray< LVecBase3d > const * 0 8576 41 ConstPointerToArray< LVecBase3d > const * 41 ConstPointerToArray< LVecBase3d > const * 0 0 1566 0 0 0 0 0 0 0 0 0 0

1566 39 ConstPointerToArray< LVecBase3d > const 0 8832 39 ConstPointerToArray< LVecBase3d > const 39 ConstPointerToArray< LVecBase3d > const 0 0 1355 0 0 0 0 0 0 0 0 0 0

1567 35 ConstPointerToArray< LVecBase3d > * 0 8576 35 ConstPointerToArray< LVecBase3d > * 35 ConstPointerToArray< LVecBase3d > * 0 0 1355 0 0 0 0 0 0 0 0 0 0

1568 36 PointerToArray< LVecBase3d > const * 0 8576 36 PointerToArray< LVecBase3d > const * 36 PointerToArray< LVecBase3d > const * 0 0 1569 0 0 0 0 0 0 0 0 0 0

1569 34 PointerToArray< LVecBase3d > const 0 8832 34 PointerToArray< LVecBase3d > const 34 PointerToArray< LVecBase3d > const 0 0 1384 0 0 0 0 0 0 0 0 0 0

1570 18 LVecBase3d const * 0 8576 18 LVecBase3d const * 18 LVecBase3d const * 0 0 1571 0 0 0 0 0 0 0 0 0 0

1571 16 LVecBase3d const 0 8832 16 LVecBase3d const 16 LVecBase3d const 0 0 1572 0 0 0 0 0 0 0 0 0 0

1572 10 LVecBase3d 0 2048 10 LVecBase3d 10 LVecBase3d 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1573 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3d > > * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1574 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3d > > const * 0 0 1575 0 0 0 0 0 0 0 0 0 0

1575 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3d > > const 0 0 1357 0 0 0 0 0 0 0 0 0 0

1576 41 ConstPointerToArray< LVecBase3f > const * 0 8576 41 ConstPointerToArray< LVecBase3f > const * 41 ConstPointerToArray< LVecBase3f > const * 0 0 1577 0 0 0 0 0 0 0 0 0 0

1577 39 ConstPointerToArray< LVecBase3f > const 0 8832 39 ConstPointerToArray< LVecBase3f > const 39 ConstPointerToArray< LVecBase3f > const 0 0 1358 0 0 0 0 0 0 0 0 0 0

1578 35 ConstPointerToArray< LVecBase3f > * 0 8576 35 ConstPointerToArray< LVecBase3f > * 35 ConstPointerToArray< LVecBase3f > * 0 0 1358 0 0 0 0 0 0 0 0 0 0

1579 36 PointerToArray< LVecBase3f > const * 0 8576 36 PointerToArray< LVecBase3f > const * 36 PointerToArray< LVecBase3f > const * 0 0 1580 0 0 0 0 0 0 0 0 0 0

1580 34 PointerToArray< LVecBase3f > const 0 8832 34 PointerToArray< LVecBase3f > const 34 PointerToArray< LVecBase3f > const 0 0 1385 0 0 0 0 0 0 0 0 0 0

1581 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1582 0 0 0 0 0 0 0 0 0 0

1582 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1583 0 0 0 0 0 0 0 0 0 0

1583 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1584 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3f > > * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1585 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3f > > const * 0 0 1586 0 0 0 0 0 0 0 0 0 0

1586 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3f > > const 0 0 1360 0 0 0 0 0 0 0 0 0 0

1587 41 ConstPointerToArray< LVecBase3i > const * 0 8576 41 ConstPointerToArray< LVecBase3i > const * 41 ConstPointerToArray< LVecBase3i > const * 0 0 1588 0 0 0 0 0 0 0 0 0 0

1588 39 ConstPointerToArray< LVecBase3i > const 0 8832 39 ConstPointerToArray< LVecBase3i > const 39 ConstPointerToArray< LVecBase3i > const 0 0 1361 0 0 0 0 0 0 0 0 0 0

1589 35 ConstPointerToArray< LVecBase3i > * 0 8576 35 ConstPointerToArray< LVecBase3i > * 35 ConstPointerToArray< LVecBase3i > * 0 0 1361 0 0 0 0 0 0 0 0 0 0

1590 36 PointerToArray< LVecBase3i > const * 0 8576 36 PointerToArray< LVecBase3i > const * 36 PointerToArray< LVecBase3i > const * 0 0 1591 0 0 0 0 0 0 0 0 0 0

1591 34 PointerToArray< LVecBase3i > const 0 8832 34 PointerToArray< LVecBase3i > const 34 PointerToArray< LVecBase3i > const 0 0 1386 0 0 0 0 0 0 0 0 0 0

1592 18 LVecBase3i const * 0 8576 18 LVecBase3i const * 18 LVecBase3i const * 0 0 1593 0 0 0 0 0 0 0 0 0 0

1593 16 LVecBase3i const 0 8832 16 LVecBase3i const 16 LVecBase3i const 0 0 1594 0 0 0 0 0 0 0 0 0 0

1594 10 LVecBase3i 0 2048 10 LVecBase3i 10 LVecBase3i 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1595 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 8576 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 55 PointerToBase< ReferenceCountedVector< LVecBase3i > > * 0 0 1363 0 0 0 0 0 0 0 0 0 0

1596 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 8576 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 61 PointerToBase< ReferenceCountedVector< LVecBase3i > > const * 0 0 1597 0 0 0 0 0 0 0 0 0 0

1597 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 8832 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 59 PointerToBase< ReferenceCountedVector< LVecBase3i > > const 0 0 1363 0 0 0 0 0 0 0 0 0 0

1598 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4d > const * 49 ConstPointerToArray< UnalignedLMatrix4d > const * 0 0 1599 0 0 0 0 0 0 0 0 0 0

1599 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4d > const 47 ConstPointerToArray< UnalignedLMatrix4d > const 0 0 1364 0 0 0 0 0 0 0 0 0 0

1600 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4d > * 43 ConstPointerToArray< UnalignedLMatrix4d > * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1601 44 PointerToArray< UnalignedLMatrix4d > const * 0 8576 44 PointerToArray< UnalignedLMatrix4d > const * 44 PointerToArray< UnalignedLMatrix4d > const * 0 0 1602 0 0 0 0 0 0 0 0 0 0

1602 42 PointerToArray< UnalignedLMatrix4d > const 0 8832 42 PointerToArray< UnalignedLMatrix4d > const 42 PointerToArray< UnalignedLMatrix4d > const 0 0 1387 0 0 0 0 0 0 0 0 0 0

1603 26 UnalignedLMatrix4d const * 0 8576 26 UnalignedLMatrix4d const * 26 UnalignedLMatrix4d const * 0 0 1604 0 0 0 0 0 0 0 0 0 0

1604 24 UnalignedLMatrix4d const 0 8832 24 UnalignedLMatrix4d const 24 UnalignedLMatrix4d const 0 0 1605 0 0 0 0 0 0 0 0 0 0

1605 18 UnalignedLMatrix4d 0 2048 18 UnalignedLMatrix4d 18 UnalignedLMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1606 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > * 0 0 1366 0 0 0 0 0 0 0 0 0 0

1607 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const * 0 0 1608 0 0 0 0 0 0 0 0 0 0

1608 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4d > > const 0 0 1366 0 0 0 0 0 0 0 0 0 0

1609 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 8576 49 ConstPointerToArray< UnalignedLMatrix4f > const * 49 ConstPointerToArray< UnalignedLMatrix4f > const * 0 0 1610 0 0 0 0 0 0 0 0 0 0

1610 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 8832 47 ConstPointerToArray< UnalignedLMatrix4f > const 47 ConstPointerToArray< UnalignedLMatrix4f > const 0 0 1367 0 0 0 0 0 0 0 0 0 0

1611 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 8576 43 ConstPointerToArray< UnalignedLMatrix4f > * 43 ConstPointerToArray< UnalignedLMatrix4f > * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1612 44 PointerToArray< UnalignedLMatrix4f > const * 0 8576 44 PointerToArray< UnalignedLMatrix4f > const * 44 PointerToArray< UnalignedLMatrix4f > const * 0 0 1613 0 0 0 0 0 0 0 0 0 0

1613 42 PointerToArray< UnalignedLMatrix4f > const 0 8832 42 PointerToArray< UnalignedLMatrix4f > const 42 PointerToArray< UnalignedLMatrix4f > const 0 0 1388 0 0 0 0 0 0 0 0 0 0

1614 26 UnalignedLMatrix4f const * 0 8576 26 UnalignedLMatrix4f const * 26 UnalignedLMatrix4f const * 0 0 1615 0 0 0 0 0 0 0 0 0 0

1615 24 UnalignedLMatrix4f const 0 8832 24 UnalignedLMatrix4f const 24 UnalignedLMatrix4f const 0 0 1616 0 0 0 0 0 0 0 0 0 0

1616 18 UnalignedLMatrix4f 0 2048 18 UnalignedLMatrix4f 18 UnalignedLMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 385
/**
 * This is an "unaligned" LMatrix4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LMatrix4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LMatrix4 to get actual use from it.
 */

1617 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 8576 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 63 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1618 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 8576 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 69 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const * 0 0 1619 0 0 0 0 0 0 0 0 0 0

1619 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 8832 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 67 PointerToBase< ReferenceCountedVector< UnalignedLMatrix4f > > const 0 0 1369 0 0 0 0 0 0 0 0 0 0

1620 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4d > const * 50 ConstPointerToArray< UnalignedLVecBase4d > const * 0 0 1621 0 0 0 0 0 0 0 0 0 0

1621 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4d > const 48 ConstPointerToArray< UnalignedLVecBase4d > const 0 0 1370 0 0 0 0 0 0 0 0 0 0

1622 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4d > * 44 ConstPointerToArray< UnalignedLVecBase4d > * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1623 45 PointerToArray< UnalignedLVecBase4d > const * 0 8576 45 PointerToArray< UnalignedLVecBase4d > const * 45 PointerToArray< UnalignedLVecBase4d > const * 0 0 1624 0 0 0 0 0 0 0 0 0 0

1624 43 PointerToArray< UnalignedLVecBase4d > const 0 8832 43 PointerToArray< UnalignedLVecBase4d > const 43 PointerToArray< UnalignedLVecBase4d > const 0 0 1389 0 0 0 0 0 0 0 0 0 0

1625 27 UnalignedLVecBase4d const * 0 8576 27 UnalignedLVecBase4d const * 27 UnalignedLVecBase4d const * 0 0 1626 0 0 0 0 0 0 0 0 0 0

1626 25 UnalignedLVecBase4d const 0 8832 25 UnalignedLVecBase4d const 25 UnalignedLVecBase4d const 0 0 1627 0 0 0 0 0 0 0 0 0 0

1627 19 UnalignedLVecBase4d 0 2048 19 UnalignedLVecBase4d 19 UnalignedLVecBase4d 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1628 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1629 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const * 0 0 1630 0 0 0 0 0 0 0 0 0 0

1630 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4d > > const 0 0 1372 0 0 0 0 0 0 0 0 0 0

1631 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4f > const * 50 ConstPointerToArray< UnalignedLVecBase4f > const * 0 0 1632 0 0 0 0 0 0 0 0 0 0

1632 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4f > const 48 ConstPointerToArray< UnalignedLVecBase4f > const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1633 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4f > * 44 ConstPointerToArray< UnalignedLVecBase4f > * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1634 45 PointerToArray< UnalignedLVecBase4f > const * 0 8576 45 PointerToArray< UnalignedLVecBase4f > const * 45 PointerToArray< UnalignedLVecBase4f > const * 0 0 1635 0 0 0 0 0 0 0 0 0 0

1635 43 PointerToArray< UnalignedLVecBase4f > const 0 8832 43 PointerToArray< UnalignedLVecBase4f > const 43 PointerToArray< UnalignedLVecBase4f > const 0 0 1390 0 0 0 0 0 0 0 0 0 0

1636 27 UnalignedLVecBase4f const * 0 8576 27 UnalignedLVecBase4f const * 27 UnalignedLVecBase4f const * 0 0 1637 0 0 0 0 0 0 0 0 0 0

1637 25 UnalignedLVecBase4f const 0 8832 25 UnalignedLVecBase4f const 25 UnalignedLVecBase4f const 0 0 1638 0 0 0 0 0 0 0 0 0 0

1638 19 UnalignedLVecBase4f 0 2048 19 UnalignedLVecBase4f 19 UnalignedLVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1639 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1640 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const * 0 0 1641 0 0 0 0 0 0 0 0 0 0

1641 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4f > > const 0 0 1375 0 0 0 0 0 0 0 0 0 0

1642 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 8576 50 ConstPointerToArray< UnalignedLVecBase4i > const * 50 ConstPointerToArray< UnalignedLVecBase4i > const * 0 0 1643 0 0 0 0 0 0 0 0 0 0

1643 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 8832 48 ConstPointerToArray< UnalignedLVecBase4i > const 48 ConstPointerToArray< UnalignedLVecBase4i > const 0 0 1376 0 0 0 0 0 0 0 0 0 0

1644 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 8576 44 ConstPointerToArray< UnalignedLVecBase4i > * 44 ConstPointerToArray< UnalignedLVecBase4i > * 0 0 1376 0 0 0 0 0 0 0 0 0 0

1645 45 PointerToArray< UnalignedLVecBase4i > const * 0 8576 45 PointerToArray< UnalignedLVecBase4i > const * 45 PointerToArray< UnalignedLVecBase4i > const * 0 0 1646 0 0 0 0 0 0 0 0 0 0

1646 43 PointerToArray< UnalignedLVecBase4i > const 0 8832 43 PointerToArray< UnalignedLVecBase4i > const 43 PointerToArray< UnalignedLVecBase4i > const 0 0 1391 0 0 0 0 0 0 0 0 0 0

1647 27 UnalignedLVecBase4i const * 0 8576 27 UnalignedLVecBase4i const * 27 UnalignedLVecBase4i const * 0 0 1648 0 0 0 0 0 0 0 0 0 0

1648 25 UnalignedLVecBase4i const 0 8832 25 UnalignedLVecBase4i const 25 UnalignedLVecBase4i const 0 0 1649 0 0 0 0 0 0 0 0 0 0

1649 19 UnalignedLVecBase4i 0 2048 19 UnalignedLVecBase4i 19 UnalignedLVecBase4i 0 0 0 0 0 0 0 0 0 0 0 0 391
/**
 * This is an "unaligned" LVecBase4.  It has no functionality other than to
 * store numbers, and it will pack them in as tightly as possible, avoiding
 * any SSE2 alignment requirements shared by the primary LVecBase4 class.
 *
 * Use it only when you need to pack numbers tightly without respect to
 * alignment, and then copy it to a proper LVecBase4 to get actual use from
 * it.
 */

1650 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 8576 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 64 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > * 0 0 1378 0 0 0 0 0 0 0 0 0 0

1651 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 8576 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 70 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const * 0 0 1652 0 0 0 0 0 0 0 0 0 0

1652 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 8832 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 68 PointerToBase< ReferenceCountedVector< UnalignedLVecBase4i > > const 0 0 1378 0 0 0 0 0 0 0 0 0 0

1653 29 PointerToArray< LMatrix3d > * 0 8576 29 PointerToArray< LMatrix3d > * 29 PointerToArray< LMatrix3d > * 0 0 1379 0 0 0 0 0 0 0 0 0 0

1654 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1655 0 0 0 0 0 0 0 0 0 0

1655 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1656 29 PointerToArray< LMatrix3f > * 0 8576 29 PointerToArray< LMatrix3f > * 29 PointerToArray< LMatrix3f > * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1657 30 PointerToArray< LVecBase2d > * 0 8576 30 PointerToArray< LVecBase2d > * 30 PointerToArray< LVecBase2d > * 0 0 1381 0 0 0 0 0 0 0 0 0 0

1658 30 PointerToArray< LVecBase2f > * 0 8576 30 PointerToArray< LVecBase2f > * 30 PointerToArray< LVecBase2f > * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1659 30 PointerToArray< LVecBase2i > * 0 8576 30 PointerToArray< LVecBase2i > * 30 PointerToArray< LVecBase2i > * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1660 30 PointerToArray< LVecBase3d > * 0 8576 30 PointerToArray< LVecBase3d > * 30 PointerToArray< LVecBase3d > * 0 0 1384 0 0 0 0 0 0 0 0 0 0

1661 30 PointerToArray< LVecBase3f > * 0 8576 30 PointerToArray< LVecBase3f > * 30 PointerToArray< LVecBase3f > * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1662 30 PointerToArray< LVecBase3i > * 0 8576 30 PointerToArray< LVecBase3i > * 30 PointerToArray< LVecBase3i > * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1663 38 PointerToArray< UnalignedLMatrix4d > * 0 8576 38 PointerToArray< UnalignedLMatrix4d > * 38 PointerToArray< UnalignedLMatrix4d > * 0 0 1387 0 0 0 0 0 0 0 0 0 0

1664 38 PointerToArray< UnalignedLMatrix4f > * 0 8576 38 PointerToArray< UnalignedLMatrix4f > * 38 PointerToArray< UnalignedLMatrix4f > * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1665 39 PointerToArray< UnalignedLVecBase4d > * 0 8576 39 PointerToArray< UnalignedLVecBase4d > * 39 PointerToArray< UnalignedLVecBase4d > * 0 0 1389 0 0 0 0 0 0 0 0 0 0

1666 39 PointerToArray< UnalignedLVecBase4f > * 0 8576 39 PointerToArray< UnalignedLVecBase4f > * 39 PointerToArray< UnalignedLVecBase4f > * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1667 39 PointerToArray< UnalignedLVecBase4i > * 0 8576 39 PointerToArray< UnalignedLVecBase4i > * 39 PointerToArray< UnalignedLVecBase4i > * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1668 22 BoundingVolume const * 0 8576 22 BoundingVolume const * 22 BoundingVolume const * 0 0 1669 0 0 0 0 0 0 0 0 0 0

1669 20 BoundingVolume const 0 8832 20 BoundingVolume const 20 BoundingVolume const 0 0 1392 0 0 0 0 0 0 0 0 0 0

1670 16 BoundingVolume * 0 8576 16 BoundingVolume * 16 BoundingVolume * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1671 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1672 25 GeometricBoundingVolume * 0 8576 25 GeometricBoundingVolume * 25 GeometricBoundingVolume * 0 0 1396 0 0 0 0 0 0 0 0 0 0

1673 15 LPoint3 const * 0 8576 15 LPoint3 const * 15 LPoint3 const * 0 0 1674 0 0 0 0 0 0 0 0 0 0

1674 13 LPoint3 const 0 8832 13 LPoint3 const 13 LPoint3 const 0 0 1410 0 0 0 0 0 0 0 0 0 0

1675 9 LPoint3 * 0 8576 9 LPoint3 * 9 LPoint3 * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1676 16 LMatrix4 const * 0 8576 16 LMatrix4 const * 16 LMatrix4 const * 0 0 1677 0 0 0 0 0 0 0 0 0 0

1677 14 LMatrix4 const 0 8832 14 LMatrix4 const 14 LMatrix4 const 0 0 1678 0 0 0 0 0 0 0 0 0 0

1678 8 LMatrix4 0 2105344 8 LMatrix4 8 LMatrix4 0 0 1679 0 0 0 0 0 0 0 0 0 0

1679 9 LMatrix4f 0 2048 9 LMatrix4f 9 LMatrix4f 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1680 28 FiniteBoundingVolume const * 0 8576 28 FiniteBoundingVolume const * 28 FiniteBoundingVolume const * 0 0 1681 0 0 0 0 0 0 0 0 0 0

1681 26 FiniteBoundingVolume const 0 8832 26 FiniteBoundingVolume const 26 FiniteBoundingVolume const 0 0 1397 0 0 0 0 0 0 0 0 0 0

1682 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1683 0 0 0 0 0 0 0 0 0 0

1683 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1684 12 LParabolaf * 0 8576 12 LParabolaf * 12 LParabolaf * 0 0 1398 0 0 0 0 0 0 0 0 0 0

1685 18 LParabolaf const * 0 8576 18 LParabolaf const * 18 LParabolaf const * 0 0 1686 0 0 0 0 0 0 0 0 0 0

1686 16 LParabolaf const 0 8832 16 LParabolaf const 16 LParabolaf const 0 0 1398 0 0 0 0 0 0 0 0 0 0

1687 17 LMatrix4f const * 0 8576 17 LMatrix4f const * 17 LMatrix4f const * 0 0 1688 0 0 0 0 0 0 0 0 0 0

1688 15 LMatrix4f const 0 8832 15 LMatrix4f const 15 LMatrix4f const 0 0 1679 0 0 0 0 0 0 0 0 0 0

1689 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1411 0 0 0 0 0 0 0 0 0 0

1690 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1691 0 0 0 0 0 0 0 0 0 0

1691 8 Datagram 0 2048 8 Datagram 8 Datagram 0 0 0 0 0 0 0 0 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1692 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1693 0 0 0 0 0 0 0 0 0 0

1693 16 DatagramIterator 0 2048 16 DatagramIterator 16 DatagramIterator 0 0 0 0 0 0 0 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1694 12 LParabolad * 0 8576 12 LParabolad * 12 LParabolad * 0 0 1399 0 0 0 0 0 0 0 0 0 0

1695 18 LParabolad const * 0 8576 18 LParabolad const * 18 LParabolad const * 0 0 1696 0 0 0 0 0 0 0 0 0 0

1696 16 LParabolad const 0 8832 16 LParabolad const 16 LParabolad const 0 0 1399 0 0 0 0 0 0 0 0 0 0

1697 17 LMatrix4d const * 0 8576 17 LMatrix4d const * 17 LMatrix4d const * 0 0 1698 0 0 0 0 0 0 0 0 0 0

1698 15 LMatrix4d const 0 8832 15 LMatrix4d const 15 LMatrix4d const 0 0 1699 0 0 0 0 0 0 0 0 0 0

1699 9 LMatrix4d 0 2048 9 LMatrix4d 9 LMatrix4d 0 0 0 0 0 0 0 0 0 0 0 0 45
/**
 * This is a 4-by-4 transform matrix.
 */

1700 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1701 10 LPoint3d * 0 8576 10 LPoint3d * 10 LPoint3d * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1702 9 LPlanef * 0 8576 9 LPlanef * 9 LPlanef * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1703 15 LPlanef const * 0 8576 15 LPlanef const * 15 LPlanef const * 0 0 1704 0 0 0 0 0 0 0 0 0 0

1704 13 LPlanef const 0 8832 13 LPlanef const 13 LPlanef const 0 0 1401 0 0 0 0 0 0 0 0 0 0

1705 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1706 0 0 0 0 0 0 0 0 0 0

1706 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1411 0 0 0 0 0 0 0 0 0 0

1707 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1708 0 0 0 0 0 0 0 0 0 0

1708 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1402 0 0 0 0 0 0 0 0 0 0

1709 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1710 0 0 0 0 0 0 0 0 0 0

1710 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1711 0 0 0 0 0 0 0 0 0 0

1711 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1712 11 LMatrix4f * 0 8576 11 LMatrix4f * 11 LMatrix4f * 0 0 1679 0 0 0 0 0 0 0 0 0 0

1713 11 LVector3f * 0 8576 11 LVector3f * 11 LVector3f * 0 0 1711 0 0 0 0 0 0 0 0 0 0

1714 9 LPlaned * 0 8576 9 LPlaned * 9 LPlaned * 0 0 1403 0 0 0 0 0 0 0 0 0 0

1715 15 LPlaned const * 0 8576 15 LPlaned const * 15 LPlaned const * 0 0 1497 0 0 0 0 0 0 0 0 0 0

1716 16 LPoint3d const * 0 8576 16 LPoint3d const * 16 LPoint3d const * 0 0 1495 0 0 0 0 0 0 0 0 0 0

1717 18 LVecBase4d const * 0 8576 18 LVecBase4d const * 18 LVecBase4d const * 0 0 1718 0 0 0 0 0 0 0 0 0 0

1718 16 LVecBase4d const 0 8832 16 LVecBase4d const 16 LVecBase4d const 0 0 1404 0 0 0 0 0 0 0 0 0 0

1719 17 LVector3d const * 0 8576 17 LVector3d const * 17 LVector3d const * 0 0 1720 0 0 0 0 0 0 0 0 0 0

1720 15 LVector3d const 0 8832 15 LVector3d const 15 LVector3d const 0 0 1721 0 0 0 0 0 0 0 0 0 0

1721 9 LVector3d 0 2048 9 LVector3d 9 LVector3d 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1722 11 LMatrix4d * 0 8576 11 LMatrix4d * 11 LMatrix4d * 0 0 1699 0 0 0 0 0 0 0 0 0 0

1723 11 LVector3d * 0 8576 11 LVector3d * 11 LVector3d * 0 0 1721 0 0 0 0 0 0 0 0 0 0

1724 13 BoundingBox * 0 8576 13 BoundingBox * 13 BoundingBox * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1725 19 BoundingBox const * 0 8576 19 BoundingBox const * 19 BoundingBox const * 0 0 1726 0 0 0 0 0 0 0 0 0 0

1726 17 BoundingBox const 0 8832 17 BoundingBox const 17 BoundingBox const 0 0 1409 0 0 0 0 0 0 0 0 0 0

1727 8 LPlane * 0 8576 8 LPlane * 8 LPlane * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1728 11 LFrustumf * 0 8576 11 LFrustumf * 11 LFrustumf * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1729 17 LFrustumf const * 0 8576 17 LFrustumf const * 17 LFrustumf const * 0 0 1730 0 0 0 0 0 0 0 0 0 0

1730 15 LFrustumf const 0 8832 15 LFrustumf const 15 LFrustumf const 0 0 1412 0 0 0 0 0 0 0 0 0 0

1731 11 LFrustumd * 0 8576 11 LFrustumd * 11 LFrustumd * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1732 17 LFrustumd const * 0 8576 17 LFrustumd const * 17 LFrustumd const * 0 0 1733 0 0 0 0 0 0 0 0 0 0

1733 15 LFrustumd const 0 8832 15 LFrustumd const 15 LFrustumd const 0 0 1413 0 0 0 0 0 0 0 0 0 0

1734 16 LFrustum const * 0 8576 16 LFrustum const * 16 LFrustum const * 0 0 1735 0 0 0 0 0 0 0 0 0 0

1735 14 LFrustum const 0 8832 14 LFrustum const 14 LFrustum const 0 0 1414 0 0 0 0 0 0 0 0 0 0

1736 16 CoordinateSystem 0 532480 16 CoordinateSystem 16 CoordinateSystem 0 0 0 0 0 0 0 0 0 0 6 10 CS_default 10 CS_default 210
// The CS_default entry does not refer to a particular coordinate system,
// but rather to the value stored in default_coordinate_system, which in
// turn is loaded from the config variable "coordinate-system".
0 12 CS_zup_right 12 CS_zup_right 0
1 12 CS_yup_right 12 CS_yup_right 0
2 11 CS_zup_left 11 CS_zup_left 0
3 11 CS_yup_left 11 CS_yup_left 0
4 10 CS_invalid 10 CS_invalid 156
// CS_invalid is not a coordinate system at all.  It can be used in user-
// input processing code to indicate a contradictory coordinate system
// request.
5 0 0

1737 20 BoundingHexahedron * 0 8576 20 BoundingHexahedron * 20 BoundingHexahedron * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1738 26 BoundingHexahedron const * 0 8576 26 BoundingHexahedron const * 26 BoundingHexahedron const * 0 0 1739 0 0 0 0 0 0 0 0 0 0

1739 24 BoundingHexahedron const 0 8832 24 BoundingHexahedron const 24 BoundingHexahedron const 0 0 1418 0 0 0 0 0 0 0 0 0 0

1740 14 BoundingLine * 0 8576 14 BoundingLine * 14 BoundingLine * 0 0 1419 0 0 0 0 0 0 0 0 0 0

1741 20 BoundingLine const * 0 8576 20 BoundingLine const * 20 BoundingLine const * 0 0 1742 0 0 0 0 0 0 0 0 0 0

1742 18 BoundingLine const 0 8832 18 BoundingLine const 18 BoundingLine const 0 0 1419 0 0 0 0 0 0 0 0 0 0

1743 15 BoundingPlane * 0 8576 15 BoundingPlane * 15 BoundingPlane * 0 0 1420 0 0 0 0 0 0 0 0 0 0

1744 14 LPlane const * 0 8576 14 LPlane const * 14 LPlane const * 0 0 1745 0 0 0 0 0 0 0 0 0 0

1745 12 LPlane const 0 8832 12 LPlane const 12 LPlane const 0 0 1405 0 0 0 0 0 0 0 0 0 0

1746 21 BoundingPlane const * 0 8576 21 BoundingPlane const * 21 BoundingPlane const * 0 0 1747 0 0 0 0 0 0 0 0 0 0

1747 19 BoundingPlane const 0 8832 19 BoundingPlane const 19 BoundingPlane const 0 0 1420 0 0 0 0 0 0 0 0 0 0

1748 16 BoundingSphere * 0 8576 16 BoundingSphere * 16 BoundingSphere * 0 0 1421 0 0 0 0 0 0 0 0 0 0

1749 22 BoundingSphere const * 0 8576 22 BoundingSphere const * 22 BoundingSphere const * 0 0 1750 0 0 0 0 0 0 0 0 0 0

1750 20 BoundingSphere const 0 8832 20 BoundingSphere const 20 BoundingSphere const 0 0 1421 0 0 0 0 0 0 0 0 0 0

1751 28 IntersectionBoundingVolume * 0 8576 28 IntersectionBoundingVolume * 28 IntersectionBoundingVolume * 0 0 1422 0 0 0 0 0 0 0 0 0 0

1752 34 IntersectionBoundingVolume const * 0 8576 34 IntersectionBoundingVolume const * 34 IntersectionBoundingVolume const * 0 0 1753 0 0 0 0 0 0 0 0 0 0

1753 32 IntersectionBoundingVolume const 0 8832 32 IntersectionBoundingVolume const 32 IntersectionBoundingVolume const 0 0 1422 0 0 0 0 0 0 0 0 0 0

1754 10 Mersenne * 0 8576 10 Mersenne * 10 Mersenne * 0 0 1425 0 0 0 0 0 0 0 0 0 0

1755 20 OmniBoundingVolume * 0 8576 20 OmniBoundingVolume * 20 OmniBoundingVolume * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1756 21 UnionBoundingVolume * 0 8576 21 UnionBoundingVolume * 21 UnionBoundingVolume * 0 0 1428 0 0 0 0 0 0 0 0 0 0

1757 27 UnionBoundingVolume const * 0 8576 27 UnionBoundingVolume const * 27 UnionBoundingVolume const * 0 0 1758 0 0 0 0 0 0 0 0 0 0

1758 25 UnionBoundingVolume const 0 8832 25 UnionBoundingVolume const 25 UnionBoundingVolume const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1759 18 Randomizer const * 0 8576 18 Randomizer const * 18 Randomizer const * 0 0 1760 0 0 0 0 0 0 0 0 0 0

1760 16 Randomizer const 0 8832 16 Randomizer const 16 Randomizer const 0 0 1429 0 0 0 0 0 0 0 0 0 0

1761 12 Randomizer * 0 8576 12 Randomizer * 12 Randomizer * 0 0 1429 0 0 0 0 0 0 0 0 0 0

1762 13 PerlinNoise * 0 8576 13 PerlinNoise * 13 PerlinNoise * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1763 14 PerlinNoise2 * 0 8576 14 PerlinNoise2 * 14 PerlinNoise2 * 0 0 1431 0 0 0 0 0 0 0 0 0 0

1764 20 PerlinNoise2 const * 0 8576 20 PerlinNoise2 const * 20 PerlinNoise2 const * 0 0 1765 0 0 0 0 0 0 0 0 0 0

1765 18 PerlinNoise2 const 0 8832 18 PerlinNoise2 const 18 PerlinNoise2 const 0 0 1431 0 0 0 0 0 0 0 0 0 0

1766 14 PerlinNoise3 * 0 8576 14 PerlinNoise3 * 14 PerlinNoise3 * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1767 20 PerlinNoise3 const * 0 8576 20 PerlinNoise3 const * 20 PerlinNoise3 const * 0 0 1768 0 0 0 0 0 0 0 0 0 0

1768 18 PerlinNoise3 const 0 8832 18 PerlinNoise3 const 18 PerlinNoise3 const 0 0 1432 0 0 0 0 0 0 0 0 0 0

1769 21 StackedPerlinNoise2 * 0 8576 21 StackedPerlinNoise2 * 21 StackedPerlinNoise2 * 0 0 1489 0 0 0 0 0 0 0 0 0 0

1770 27 StackedPerlinNoise2 const * 0 8576 27 StackedPerlinNoise2 const * 27 StackedPerlinNoise2 const * 0 0 1771 0 0 0 0 0 0 0 0 0 0

1771 25 StackedPerlinNoise2 const 0 8832 25 StackedPerlinNoise2 const 25 StackedPerlinNoise2 const 0 0 1489 0 0 0 0 0 0 0 0 0 0

1772 21 StackedPerlinNoise3 * 0 8576 21 StackedPerlinNoise3 * 21 StackedPerlinNoise3 * 0 0 1490 0 0 0 0 0 0 0 0 0 0

1773 27 StackedPerlinNoise3 const * 0 8576 27 StackedPerlinNoise3 const * 27 StackedPerlinNoise3 const * 0 0 1774 0 0 0 0 0 0 0 0 0 0

1774 25 StackedPerlinNoise3 const 0 8832 25 StackedPerlinNoise3 const 25 StackedPerlinNoise3 const 0 0 1490 0 0 0 0 0 0 0 0 0 0

1775 14 Triangulator * 0 8576 14 Triangulator * 14 Triangulator * 0 0 1491 0 0 0 0 0 0 0 0 0 0

1776 20 Triangulator const * 0 8576 20 Triangulator const * 20 Triangulator const * 0 0 1777 0 0 0 0 0 0 0 0 0 0

1777 18 Triangulator const 0 8832 18 Triangulator const 18 Triangulator const 0 0 1491 0 0 0 0 0 0 0 0 0 0

1778 16 LPoint2d const * 0 8576 16 LPoint2d const * 16 LPoint2d const * 0 0 1492 0 0 0 0 0 0 0 0 0 0

1779 15 Triangulator3 * 0 8576 15 Triangulator3 * 15 Triangulator3 * 0 0 1494 0 0 0 0 0 0 0 0 0 0

1780 21 Triangulator3 const * 0 8576 21 Triangulator3 const * 21 Triangulator3 const * 0 0 1781 0 0 0 0 0 0 0 0 0 0

1781 19 Triangulator3 const 0 8832 19 Triangulator3 const 19 Triangulator3 const 0 0 1494 0 0 0 0 0 0 0 0 0 0

1782 11 LMatrix3d * 0 8576 11 LMatrix3d * 11 LMatrix3d * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1783 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1528 0 0 0 0 0 0 0 0 0 0

1784 14 LQuaterniond * 0 8576 14 LQuaterniond * 14 LQuaterniond * 0 0 1785 0 0 0 0 0 0 0 0 0 0

1785 12 LQuaterniond 0 2048 12 LQuaterniond 12 LQuaterniond 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1786 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1787 0 0 0 0 0 0 0 0 0 0

1787 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

0
9
1788 6 points 0 66 1410 1205 0 0 0 0 1204 19 BoundingBox::points 0

1789 6 planes 0 66 1405 1207 0 0 0 0 1206 19 BoundingBox::planes 0

1790 6 points 0 66 1410 1229 0 0 0 0 1228 26 BoundingHexahedron::points 0

1791 6 planes 0 66 1405 1231 0 0 0 0 1230 26 BoundingHexahedron::planes 0

1792 10 components 0 66 1423 1256 0 0 0 0 1255 38 IntersectionBoundingVolume::components 0

1793 10 components 0 66 1423 1272 0 0 0 0 1271 31 UnionBoundingVolume::components 0

1794 8 vertices 0 66 1492 1319 0 0 0 0 1318 22 Triangulator::vertices 0

1795 8 vertices 0 66 1495 1335 0 0 0 0 1334 23 Triangulator3::vertices 0

1796 5 plane 0 2 1497 1337 0 0 0 0 0 20 Triangulator3::plane 0

8
1797 10 get_points 0 1204 1205 23 BoundingBox::get_points 0

1798 10 get_planes 0 1206 1207 23 BoundingBox::get_planes 0

1799 10 get_points 0 1228 1229 30 BoundingHexahedron::get_points 0

1800 10 get_planes 0 1230 1231 30 BoundingHexahedron::get_planes 0

1801 14 get_components 0 1255 1256 42 IntersectionBoundingVolume::get_components 0

1802 14 get_components 0 1271 1272 35 UnionBoundingVolume::get_components 0

1803 12 get_vertices 0 1318 1319 26 Triangulator::get_vertices 0

1804 12 get_vertices 0 1334 1335 27 Triangulator3::get_vertices 0

