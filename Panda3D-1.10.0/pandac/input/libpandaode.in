1481295918
3 2
11 libpandaode 4 sTqO 11 panda3d.ode 
587
673 8 OdeWorld 0 4 1267 18 OdeWorld::OdeWorld 0 2 1 2 0
67
OdeWorld::OdeWorld(void);
OdeWorld::OdeWorld(OdeWorld const &copy);

674 7 destroy 0 4 1267 17 OdeWorld::destroy 0 1 3 0
29
void OdeWorld::destroy(void);

675 8 is_empty 0 4 1267 18 OdeWorld::is_empty 0 1 4 205
/**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */
43
inline bool OdeWorld::is_empty(void) const;

676 6 get_id 0 4 1267 16 OdeWorld::get_id 0 1 5 43
/**
 * Returns the underlying dWorldID.
 */
45
inline dWorldID OdeWorld::get_id(void) const;

677 11 set_gravity 0 4 1267 21 OdeWorld::set_gravity 0 2 6 7 0
119
inline void OdeWorld::set_gravity(dReal x, dReal y, dReal z);
inline void OdeWorld::set_gravity(LVecBase3f const &vec);

678 7 set_erp 0 4 1267 17 OdeWorld::set_erp 0 1 8 0
41
inline void OdeWorld::set_erp(dReal erp);

679 7 set_cfm 0 4 1267 17 OdeWorld::set_cfm 0 1 9 0
41
inline void OdeWorld::set_cfm(dReal cfm);

680 29 set_quick_step_num_iterations 0 4 1267 39 OdeWorld::set_quick_step_num_iterations 0 1 10 0
61
inline void OdeWorld::set_quick_step_num_iterations(int num);

681 16 set_quick_step_w 0 4 1267 26 OdeWorld::set_quick_step_w 0 1 11 0
62
inline void OdeWorld::set_quick_step_w(dReal over_relaxation);

682 30 set_contact_max_correcting_vel 0 4 1267 40 OdeWorld::set_contact_max_correcting_vel 0 1 12 0
64
inline void OdeWorld::set_contact_max_correcting_vel(dReal vel);

683 25 set_contact_surface_layer 0 4 1267 35 OdeWorld::set_contact_surface_layer 0 1 13 0
61
inline void OdeWorld::set_contact_surface_layer(dReal depth);

684 33 set_auto_disable_linear_threshold 0 4 1267 43 OdeWorld::set_auto_disable_linear_threshold 0 1 14 0
80
inline void OdeWorld::set_auto_disable_linear_threshold(dReal linear_threshold);

685 34 set_auto_disable_angular_threshold 0 4 1267 44 OdeWorld::set_auto_disable_angular_threshold 0 1 15 0
82
inline void OdeWorld::set_auto_disable_angular_threshold(dReal angular_threshold);

686 22 set_auto_disable_steps 0 4 1267 32 OdeWorld::set_auto_disable_steps 0 1 16 0
56
inline void OdeWorld::set_auto_disable_steps(int steps);

687 21 set_auto_disable_time 0 4 1267 31 OdeWorld::set_auto_disable_time 0 1 17 0
56
inline void OdeWorld::set_auto_disable_time(dReal time);

688 21 set_auto_disable_flag 0 4 1267 31 OdeWorld::set_auto_disable_flag 0 1 18 0
65
inline void OdeWorld::set_auto_disable_flag(int do_auto_disable);

689 11 get_gravity 0 4 1267 21 OdeWorld::get_gravity 0 1 19 0
52
inline LVecBase3f OdeWorld::get_gravity(void) const;

690 7 get_erp 0 4 1267 17 OdeWorld::get_erp 0 1 20 0
43
inline dReal OdeWorld::get_erp(void) const;

691 7 get_cfm 0 4 1267 17 OdeWorld::get_cfm 0 1 21 0
43
inline dReal OdeWorld::get_cfm(void) const;

692 29 get_quick_step_num_iterations 0 4 1267 39 OdeWorld::get_quick_step_num_iterations 0 1 22 0
63
inline int OdeWorld::get_quick_step_num_iterations(void) const;

693 16 get_quick_step_w 0 4 1267 26 OdeWorld::get_quick_step_w 0 1 23 0
52
inline dReal OdeWorld::get_quick_step_w(void) const;

694 30 get_contact_max_correcting_vel 0 4 1267 40 OdeWorld::get_contact_max_correcting_vel 0 1 24 0
66
inline dReal OdeWorld::get_contact_max_correcting_vel(void) const;

695 25 get_contact_surface_layer 0 4 1267 35 OdeWorld::get_contact_surface_layer 0 1 25 0
61
inline dReal OdeWorld::get_contact_surface_layer(void) const;

696 33 get_auto_disable_linear_threshold 0 4 1267 43 OdeWorld::get_auto_disable_linear_threshold 0 1 26 0
69
inline dReal OdeWorld::get_auto_disable_linear_threshold(void) const;

697 34 get_auto_disable_angular_threshold 0 4 1267 44 OdeWorld::get_auto_disable_angular_threshold 0 1 27 0
70
inline dReal OdeWorld::get_auto_disable_angular_threshold(void) const;

698 22 get_auto_disable_steps 0 4 1267 32 OdeWorld::get_auto_disable_steps 0 1 28 0
56
inline int OdeWorld::get_auto_disable_steps(void) const;

699 21 get_auto_disable_time 0 4 1267 31 OdeWorld::get_auto_disable_time 0 1 29 0
57
inline dReal OdeWorld::get_auto_disable_time(void) const;

700 21 get_auto_disable_flag 0 4 1267 31 OdeWorld::get_auto_disable_flag 0 1 30 0
55
inline int OdeWorld::get_auto_disable_flag(void) const;

701 16 impulse_to_force 0 4 1267 26 OdeWorld::impulse_to_force 0 2 31 32 0
180
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, dReal ix, dReal iy, dReal iz);
inline LVecBase3f OdeWorld::impulse_to_force(dReal stepsize, LVecBase3f const &impulse);

702 4 step 0 4 1267 14 OdeWorld::step 0 1 33 0
43
inline void OdeWorld::step(dReal stepsize);

703 10 quick_step 0 4 1267 20 OdeWorld::quick_step 0 1 34 0
49
inline void OdeWorld::quick_step(dReal stepsize);

704 10 compare_to 0 4 1267 20 OdeWorld::compare_to 0 1 35 0
61
inline int OdeWorld::compare_to(OdeWorld const &other) const;

705 18 init_surface_table 0 4 1267 28 OdeWorld::init_surface_table 0 1 36 0
56
void OdeWorld::init_surface_table(uint8_t num_surfaces);

706 18 add_body_dampening 0 4 1267 28 OdeWorld::add_body_dampening 0 1 37 56
// void assign_surface_body(OdeBody& body, int surface);
62
void OdeWorld::add_body_dampening(OdeBody &body, int surface);

707 17 set_surface_entry 0 4 1267 27 OdeWorld::set_surface_entry 0 1 38 0
161
void OdeWorld::set_surface_entry(uint8_t pos1, uint8_t pos2, dReal mu, dReal bounce, dReal bounce_vel, dReal soft_erp, dReal soft_cfm, dReal slip, dReal dampen);

708 15 apply_dampening 0 4 1267 25 OdeWorld::apply_dampening 0 1 39 0
57
float OdeWorld::apply_dampening(float dt, OdeBody &body);

709 22 operator typecast bool 0 132 1267 32 OdeWorld::operator typecast bool 0 1 41 0
50
bool OdeWorld::operator typecast bool(void) const;

710 14 get_class_type 0 4 1267 24 OdeWorld::get_class_type 0 1 40 0
49
static TypeHandle OdeWorld::get_class_type(void);

711 13 OdeJointGroup 0 4 1269 28 OdeJointGroup::OdeJointGroup 0 1 42 0
35
OdeJointGroup::OdeJointGroup(void);

712 7 destroy 0 4 1269 22 OdeJointGroup::destroy 0 1 43 0
34
void OdeJointGroup::destroy(void);

713 6 get_id 0 4 1269 21 OdeJointGroup::get_id 0 1 44 0
55
inline dJointGroupID OdeJointGroup::get_id(void) const;

714 5 empty 0 4 1269 20 OdeJointGroup::empty 0 1 45 0
45
inline void OdeJointGroup::empty(void) const;

715 10 compare_to 0 4 1269 25 OdeJointGroup::compare_to 0 1 46 0
71
inline int OdeJointGroup::compare_to(OdeJointGroup const &other) const;

716 14 get_class_type 0 4 1269 29 OdeJointGroup::get_class_type 0 1 47 0
54
static TypeHandle OdeJointGroup::get_class_type(void);

717 10 get_force1 0 4 1270 28 OdeJointFeedback::get_force1 0 1 49 0
64
inline LVector3f const OdeJointFeedback::get_force1(void) const;

718 10 get_force2 0 4 1270 28 OdeJointFeedback::get_force2 0 1 50 0
64
inline LVector3f const OdeJointFeedback::get_force2(void) const;

719 11 get_torque1 0 4 1270 29 OdeJointFeedback::get_torque1 0 1 51 0
65
inline LVector3f const OdeJointFeedback::get_torque1(void) const;

720 11 get_torque2 0 4 1270 29 OdeJointFeedback::get_torque2 0 1 52 0
65
inline LVector3f const OdeJointFeedback::get_torque2(void) const;

721 16 OdeJointFeedback 0 4 1270 34 OdeJointFeedback::OdeJointFeedback 0 1 48 0
58
inline OdeJointFeedback::OdeJointFeedback(void) = default;

722 17 ~OdeJointFeedback 0 4 1270 35 OdeJointFeedback::~OdeJointFeedback 0 0 0
42
OdeJointFeedback::~OdeJointFeedback(void);

723 7 destroy 0 4 1272 17 OdeJoint::destroy 0 1 53 0
29
void OdeJoint::destroy(void);

724 8 is_empty 0 4 1272 18 OdeJoint::is_empty 0 1 54 205
/**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */
43
inline bool OdeJoint::is_empty(void) const;

725 6 get_id 0 4 1272 16 OdeJoint::get_id 0 1 55 43
/**
 * Returns the underlying dJointID.
 */
45
inline dJointID OdeJoint::get_id(void) const;

726 14 get_joint_type 0 4 1272 24 OdeJoint::get_joint_type 0 1 56 30
/* INLINE void *get_data(); */
48
inline int OdeJoint::get_joint_type(void) const;

727 8 get_body 0 4 1272 18 OdeJoint::get_body 0 1 57 0
44
OdeBody OdeJoint::get_body(int index) const;

728 12 set_feedback 0 4 1272 22 OdeJoint::set_feedback 0 2 58 59 0
109
inline void OdeJoint::set_feedback(OdeJointFeedback *);
inline void OdeJoint::set_feedback(bool flag = true);

729 12 get_feedback 0 4 1272 22 OdeJoint::get_feedback 0 1 60 0
54
inline OdeJointFeedback *OdeJoint::get_feedback(void);

730 6 attach 0 4 1272 16 OdeJoint::attach 0 1 61 0
66
void OdeJoint::attach(OdeBody const *body1, OdeBody const *body2);

731 13 attach_bodies 0 4 1272 23 OdeJoint::attach_bodies 0 1 62 175
/**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */
73
void OdeJoint::attach_bodies(OdeBody const &body1, OdeBody const &body2);

732 11 attach_body 0 4 1272 21 OdeJoint::attach_body 0 1 63 237
/**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */
59
void OdeJoint::attach_body(OdeBody const &body, int index);

733 6 detach 0 4 1272 16 OdeJoint::detach 0 1 64 0
28
void OdeJoint::detach(void);

734 5 write 0 6 1272 15 OdeJoint::write 0 1 65 0
83
virtual void OdeJoint::write(ostream &out = ::cout, unsigned int indent = 0) const;

735 10 compare_to 0 4 1272 20 OdeJoint::compare_to 0 1 66 0
61
inline int OdeJoint::compare_to(OdeJoint const &other) const;

736 11 operator == 0 4 1272 21 OdeJoint::operator == 0 1 67 0
63
inline bool OdeJoint::operator ==(OdeJoint const &other) const;

737 22 operator typecast bool 0 132 1272 32 OdeJoint::operator typecast bool 0 1 81 0
50
bool OdeJoint::operator typecast bool(void) const;

738 7 convert 0 4 1272 17 OdeJoint::convert 0 1 68 0
40
PyObject *OdeJoint::convert(void) const;

739 15 convert_to_ball 0 4 1272 25 OdeJoint::convert_to_ball 0 1 69 0
51
OdeBallJoint OdeJoint::convert_to_ball(void) const;

740 16 convert_to_hinge 0 4 1272 26 OdeJoint::convert_to_hinge 0 1 70 0
53
OdeHingeJoint OdeJoint::convert_to_hinge(void) const;

741 17 convert_to_slider 0 4 1272 27 OdeJoint::convert_to_slider 0 1 71 0
55
OdeSliderJoint OdeJoint::convert_to_slider(void) const;

742 18 convert_to_contact 0 4 1272 28 OdeJoint::convert_to_contact 0 1 72 0
57
OdeContactJoint OdeJoint::convert_to_contact(void) const;

743 20 convert_to_universal 0 4 1272 30 OdeJoint::convert_to_universal 0 1 73 0
61
OdeUniversalJoint OdeJoint::convert_to_universal(void) const;

744 17 convert_to_hinge2 0 4 1272 27 OdeJoint::convert_to_hinge2 0 1 74 0
55
OdeHinge2Joint OdeJoint::convert_to_hinge2(void) const;

745 16 convert_to_fixed 0 4 1272 26 OdeJoint::convert_to_fixed 0 1 75 0
53
OdeFixedJoint OdeJoint::convert_to_fixed(void) const;

746 15 convert_to_null 0 4 1272 25 OdeJoint::convert_to_null 0 1 76 0
51
OdeNullJoint OdeJoint::convert_to_null(void) const;

747 18 convert_to_a_motor 0 4 1272 28 OdeJoint::convert_to_a_motor 0 1 77 0
56
OdeAMotorJoint OdeJoint::convert_to_a_motor(void) const;

748 18 convert_to_l_motor 0 4 1272 28 OdeJoint::convert_to_l_motor 0 1 78 0
56
OdeLMotorJoint OdeJoint::convert_to_l_motor(void) const;

749 18 convert_to_plane2d 0 4 1272 28 OdeJoint::convert_to_plane2d 0 1 79 0
57
OdePlane2dJoint OdeJoint::convert_to_plane2d(void) const;

750 14 get_class_type 0 4 1272 24 OdeJoint::get_class_type 0 1 80 0
49
static TypeHandle OdeJoint::get_class_type(void);

751 14 OdeAMotorJoint 0 4 1274 30 OdeAMotorJoint::OdeAMotorJoint 0 2 82 83 0
125
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world);
OdeAMotorJoint::OdeAMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

752 12 set_num_axes 0 4 1274 28 OdeAMotorJoint::set_num_axes 0 1 84 0
50
inline void OdeAMotorJoint::set_num_axes(int num);

753 8 set_axis 0 4 1274 24 OdeAMotorJoint::set_axis 0 2 85 86 0
164
inline void OdeAMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeAMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

754 9 set_angle 0 4 1274 25 OdeAMotorJoint::set_angle 0 1 87 0
61
inline void OdeAMotorJoint::set_angle(int anum, dReal angle);

755 8 set_mode 0 4 1274 24 OdeAMotorJoint::set_mode 0 1 88 0
47
inline void OdeAMotorJoint::set_mode(int mode);

756 11 add_torques 0 4 1274 27 OdeAMotorJoint::add_torques 0 1 89 0
85
inline void OdeAMotorJoint::add_torques(dReal torque1, dReal torque2, dReal torque3);

757 12 get_num_axes 0 4 1274 28 OdeAMotorJoint::get_num_axes 0 1 90 0
52
inline int OdeAMotorJoint::get_num_axes(void) const;

758 8 get_axis 0 4 1274 24 OdeAMotorJoint::get_axis 0 1 91 0
59
inline LVecBase3f OdeAMotorJoint::get_axis(int anum) const;

759 12 get_axis_rel 0 4 1274 28 OdeAMotorJoint::get_axis_rel 0 1 92 0
56
inline int OdeAMotorJoint::get_axis_rel(int anum) const;

760 9 get_angle 0 4 1274 25 OdeAMotorJoint::get_angle 0 1 93 0
55
inline dReal OdeAMotorJoint::get_angle(int anum) const;

761 14 get_angle_rate 0 4 1274 30 OdeAMotorJoint::get_angle_rate 0 1 94 0
60
inline dReal OdeAMotorJoint::get_angle_rate(int anum) const;

762 8 get_mode 0 4 1274 24 OdeAMotorJoint::get_mode 0 1 95 0
48
inline int OdeAMotorJoint::get_mode(void) const;

763 17 set_param_lo_stop 0 4 1274 33 OdeAMotorJoint::set_param_lo_stop 0 1 96 0
67
inline void OdeAMotorJoint::set_param_lo_stop(int axis, dReal val);

764 17 set_param_hi_stop 0 4 1274 33 OdeAMotorJoint::set_param_hi_stop 0 1 97 0
67
inline void OdeAMotorJoint::set_param_hi_stop(int axis, dReal val);

765 13 set_param_vel 0 4 1274 29 OdeAMotorJoint::set_param_vel 0 1 98 0
63
inline void OdeAMotorJoint::set_param_vel(int axis, dReal val);

766 15 set_param_f_max 0 4 1274 31 OdeAMotorJoint::set_param_f_max 0 1 99 0
65
inline void OdeAMotorJoint::set_param_f_max(int axis, dReal val);

767 22 set_param_fudge_factor 0 4 1274 38 OdeAMotorJoint::set_param_fudge_factor 0 1 100 0
72
inline void OdeAMotorJoint::set_param_fudge_factor(int axis, dReal val);

768 16 set_param_bounce 0 4 1274 32 OdeAMotorJoint::set_param_bounce 0 1 101 0
66
inline void OdeAMotorJoint::set_param_bounce(int axis, dReal val);

769 13 set_param_CFM 0 4 1274 29 OdeAMotorJoint::set_param_CFM 0 1 102 0
63
inline void OdeAMotorJoint::set_param_CFM(int axis, dReal val);

770 18 set_param_stop_ERP 0 4 1274 34 OdeAMotorJoint::set_param_stop_ERP 0 1 103 0
68
inline void OdeAMotorJoint::set_param_stop_ERP(int axis, dReal val);

771 18 set_param_stop_CFM 0 4 1274 34 OdeAMotorJoint::set_param_stop_CFM 0 1 104 0
68
inline void OdeAMotorJoint::set_param_stop_CFM(int axis, dReal val);

772 17 get_param_lo_stop 0 4 1274 33 OdeAMotorJoint::get_param_lo_stop 0 1 105 0
63
inline dReal OdeAMotorJoint::get_param_lo_stop(int axis) const;

773 17 get_param_hi_stop 0 4 1274 33 OdeAMotorJoint::get_param_hi_stop 0 1 106 0
63
inline dReal OdeAMotorJoint::get_param_hi_stop(int axis) const;

774 13 get_param_vel 0 4 1274 29 OdeAMotorJoint::get_param_vel 0 1 107 0
59
inline dReal OdeAMotorJoint::get_param_vel(int axis) const;

775 15 get_param_f_max 0 4 1274 31 OdeAMotorJoint::get_param_f_max 0 1 108 0
61
inline dReal OdeAMotorJoint::get_param_f_max(int axis) const;

776 22 get_param_fudge_factor 0 4 1274 38 OdeAMotorJoint::get_param_fudge_factor 0 1 109 0
68
inline dReal OdeAMotorJoint::get_param_fudge_factor(int axis) const;

777 16 get_param_bounce 0 4 1274 32 OdeAMotorJoint::get_param_bounce 0 1 110 0
62
inline dReal OdeAMotorJoint::get_param_bounce(int axis) const;

778 13 get_param_CFM 0 4 1274 29 OdeAMotorJoint::get_param_CFM 0 1 111 0
59
inline dReal OdeAMotorJoint::get_param_CFM(int axis) const;

779 18 get_param_stop_ERP 0 4 1274 34 OdeAMotorJoint::get_param_stop_ERP 0 1 112 0
64
inline dReal OdeAMotorJoint::get_param_stop_ERP(int axis) const;

780 18 get_param_stop_CFM 0 4 1274 34 OdeAMotorJoint::get_param_stop_CFM 0 1 113 0
64
inline dReal OdeAMotorJoint::get_param_stop_CFM(int axis) const;

781 14 get_class_type 0 4 1274 30 OdeAMotorJoint::get_class_type 0 1 114 0
55
static TypeHandle OdeAMotorJoint::get_class_type(void);

782 12 OdeBallJoint 0 4 1275 26 OdeBallJoint::OdeBallJoint 0 2 115 116 0
117
OdeBallJoint::OdeBallJoint(OdeWorld &world);
OdeBallJoint::OdeBallJoint(OdeWorld &world, OdeJointGroup &joint_group);

783 10 set_anchor 0 4 1275 24 OdeBallJoint::set_anchor 0 2 117 118 0
128
inline void OdeBallJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor(LVecBase3f const &anchor);

784 11 set_anchor2 0 4 1275 25 OdeBallJoint::set_anchor2 0 2 119 120 0
130
inline void OdeBallJoint::set_anchor2(dReal x, dReal y, dReal z);
inline void OdeBallJoint::set_anchor2(LVecBase3f const &anchor);

785 10 get_anchor 0 4 1275 24 OdeBallJoint::get_anchor 0 1 121 0
55
inline LVecBase3f OdeBallJoint::get_anchor(void) const;

786 11 get_anchor2 0 4 1275 25 OdeBallJoint::get_anchor2 0 1 122 0
56
inline LVecBase3f OdeBallJoint::get_anchor2(void) const;

787 14 get_class_type 0 4 1275 28 OdeBallJoint::get_class_type 0 1 123 0
53
static TypeHandle OdeBallJoint::get_class_type(void);

788 7 OdeMass 0 4 1276 16 OdeMass::OdeMass 0 2 124 125 0
62
OdeMass::OdeMass(void);
OdeMass::OdeMass(OdeMass const &copy);

789 5 check 0 4 1276 14 OdeMass::check 0 1 126 0
32
inline int OdeMass::check(void);

790 8 set_zero 0 4 1276 17 OdeMass::set_zero 0 1 127 0
36
inline void OdeMass::set_zero(void);

791 14 set_parameters 0 4 1276 23 OdeMass::set_parameters 0 2 128 129 0
248
inline void OdeMass::set_parameters(dReal themass, dReal cgx, dReal cgy, dReal cgz, dReal I11, dReal I22, dReal I33, dReal I12, dReal I13, dReal I23);
inline void OdeMass::set_parameters(dReal themass, LVecBase3f const &center, LMatrix3f const &r);

792 10 set_sphere 0 4 1276 19 OdeMass::set_sphere 0 1 130 0
61
inline void OdeMass::set_sphere(dReal density, dReal radius);

793 16 set_sphere_total 0 4 1276 25 OdeMass::set_sphere_total 0 1 131 0
70
inline void OdeMass::set_sphere_total(dReal total_mass, dReal radius);

794 11 set_capsule 0 4 1276 20 OdeMass::set_capsule 0 1 132 0
91
inline void OdeMass::set_capsule(dReal density, int direction, dReal radius, dReal length);

795 17 set_capsule_total 0 4 1276 26 OdeMass::set_capsule_total 0 1 133 0
100
inline void OdeMass::set_capsule_total(dReal total_mass, int direction, dReal radius, dReal length);

796 12 set_cylinder 0 4 1276 21 OdeMass::set_cylinder 0 1 134 0
92
inline void OdeMass::set_cylinder(dReal density, int direction, dReal radius, dReal length);

797 18 set_cylinder_total 0 4 1276 27 OdeMass::set_cylinder_total 0 1 135 0
101
inline void OdeMass::set_cylinder_total(dReal total_mass, int direction, dReal radius, dReal length);

798 7 set_box 0 4 1276 16 OdeMass::set_box 0 2 136 137 0
143
inline void OdeMass::set_box(dReal density, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box(dReal density, LVecBase3f const &size);

799 13 set_box_total 0 4 1276 22 OdeMass::set_box_total 0 2 138 139 0
161
inline void OdeMass::set_box_total(dReal total_mass, dReal lx, dReal ly, dReal lz);
inline void OdeMass::set_box_total(dReal total_mass, LVecBase3f const &size);

800 6 adjust 0 4 1276 15 OdeMass::adjust 0 1 140 0
43
inline void OdeMass::adjust(dReal newmass);

801 9 translate 0 4 1276 18 OdeMass::translate 0 2 141 142 0
113
inline void OdeMass::translate(dReal x, dReal y, dReal z);
inline void OdeMass::translate(LVecBase3f const &pos);

802 6 rotate 0 4 1276 15 OdeMass::rotate 0 1 143 0
48
inline void OdeMass::rotate(LMatrix3f const &r);

803 3 add 0 4 1276 12 OdeMass::add 0 1 144 0
41
inline void OdeMass::add(OdeMass &other);

804 13 get_magnitude 0 4 1276 22 OdeMass::get_magnitude 0 1 145 0
48
inline dReal OdeMass::get_magnitude(void) const;

805 10 get_center 0 4 1276 19 OdeMass::get_center 0 1 146 0
48
inline LPoint3f OdeMass::get_center(void) const;

806 19 get_inertial_tensor 0 4 1276 28 OdeMass::get_inertial_tensor 0 1 147 0
58
inline LMatrix3f OdeMass::get_inertial_tensor(void) const;

807 5 write 0 6 1276 14 OdeMass::write 0 1 148 0
82
virtual void OdeMass::write(ostream &out = ::cout, unsigned int indent = 0) const;

808 14 get_class_type 0 4 1276 23 OdeMass::get_class_type 0 1 149 0
48
static TypeHandle OdeMass::get_class_type(void);

809 7 OdeBody 0 4 1278 16 OdeBody::OdeBody 0 1 150 0
34
OdeBody::OdeBody(OdeWorld &world);

810 7 destroy 0 4 1278 16 OdeBody::destroy 0 1 151 0
28
void OdeBody::destroy(void);

811 8 is_empty 0 4 1278 17 OdeBody::is_empty 0 1 152 201
/**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */
42
inline bool OdeBody::is_empty(void) const;

812 6 get_id 0 4 1278 15 OdeBody::get_id 0 1 153 42
/**
 * Returns the underlying dBodyID.
 */
43
inline dBodyID OdeBody::get_id(void) const;

813 33 set_auto_disable_linear_threshold 0 4 1278 42 OdeBody::set_auto_disable_linear_threshold 0 1 154 0
79
inline void OdeBody::set_auto_disable_linear_threshold(dReal linear_threshold);

814 34 set_auto_disable_angular_threshold 0 4 1278 43 OdeBody::set_auto_disable_angular_threshold 0 1 155 0
81
inline void OdeBody::set_auto_disable_angular_threshold(dReal angular_threshold);

815 22 set_auto_disable_steps 0 4 1278 31 OdeBody::set_auto_disable_steps 0 1 156 0
55
inline void OdeBody::set_auto_disable_steps(int steps);

816 21 set_auto_disable_time 0 4 1278 30 OdeBody::set_auto_disable_time 0 1 157 0
55
inline void OdeBody::set_auto_disable_time(dReal time);

817 21 set_auto_disable_flag 0 4 1278 30 OdeBody::set_auto_disable_flag 0 1 158 0
64
inline void OdeBody::set_auto_disable_flag(int do_auto_disable);

818 25 set_auto_disable_defaults 0 4 1278 34 OdeBody::set_auto_disable_defaults 0 1 159 0
53
inline void OdeBody::set_auto_disable_defaults(void);

819 8 set_data 0 4 1278 17 OdeBody::set_data 0 1 160 0
82
inline void OdeBody::set_data(void *data);
void OdeBody::set_data(PyObject *data);

820 12 set_position 0 4 1278 21 OdeBody::set_position 0 2 161 162 0
119
inline void OdeBody::set_position(dReal x, dReal y, dReal z);
inline void OdeBody::set_position(LVecBase3f const &pos);

821 12 set_rotation 0 4 1278 21 OdeBody::set_rotation 0 1 163 0
54
inline void OdeBody::set_rotation(LMatrix3f const &r);

822 14 set_quaternion 0 4 1278 23 OdeBody::set_quaternion 0 1 164 0
59
inline void OdeBody::set_quaternion(LQuaternionf const &q);

823 14 set_linear_vel 0 4 1278 23 OdeBody::set_linear_vel 0 2 165 166 0
123
inline void OdeBody::set_linear_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_linear_vel(LVecBase3f const &vel);

824 15 set_angular_vel 0 4 1278 24 OdeBody::set_angular_vel 0 2 167 168 0
125
inline void OdeBody::set_angular_vel(dReal x, dReal y, dReal z);
inline void OdeBody::set_angular_vel(LVecBase3f const &vel);

825 8 set_mass 0 4 1278 17 OdeBody::set_mass 0 1 169 0
45
inline void OdeBody::set_mass(OdeMass &mass);

826 33 get_auto_disable_linear_threshold 0 4 1278 42 OdeBody::get_auto_disable_linear_threshold 0 1 170 0
68
inline dReal OdeBody::get_auto_disable_linear_threshold(void) const;

827 34 get_auto_disable_angular_threshold 0 4 1278 43 OdeBody::get_auto_disable_angular_threshold 0 1 171 0
69
inline dReal OdeBody::get_auto_disable_angular_threshold(void) const;

828 22 get_auto_disable_steps 0 4 1278 31 OdeBody::get_auto_disable_steps 0 1 172 0
55
inline int OdeBody::get_auto_disable_steps(void) const;

829 21 get_auto_disable_time 0 4 1278 30 OdeBody::get_auto_disable_time 0 1 173 0
56
inline dReal OdeBody::get_auto_disable_time(void) const;

830 21 get_auto_disable_flag 0 4 1278 30 OdeBody::get_auto_disable_flag 0 1 174 0
54
inline int OdeBody::get_auto_disable_flag(void) const;

831 8 get_data 0 4 1278 17 OdeBody::get_data 0 1 175 0
40
PyObject *OdeBody::get_data(void) const;

832 12 get_position 0 4 1278 21 OdeBody::get_position 0 1 176 0
52
inline LVecBase3f OdeBody::get_position(void) const;

833 12 get_rotation 0 4 1278 21 OdeBody::get_rotation 0 1 177 0
51
inline LMatrix3f OdeBody::get_rotation(void) const;

834 14 get_quaternion 0 4 1278 23 OdeBody::get_quaternion 0 1 178 0
54
inline LVecBase4f OdeBody::get_quaternion(void) const;

835 14 get_linear_vel 0 4 1278 23 OdeBody::get_linear_vel 0 1 179 0
54
inline LVecBase3f OdeBody::get_linear_vel(void) const;

836 15 get_angular_vel 0 4 1278 24 OdeBody::get_angular_vel 0 1 180 0
55
inline LVecBase3f OdeBody::get_angular_vel(void) const;

837 8 get_mass 0 4 1278 17 OdeBody::get_mass 0 1 181 0
45
inline OdeMass OdeBody::get_mass(void) const;

838 9 add_force 0 4 1278 18 OdeBody::add_force 0 2 182 183 0
114
inline void OdeBody::add_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_force(LVecBase3f const &f);

839 10 add_torque 0 4 1278 19 OdeBody::add_torque 0 2 184 185 0
116
inline void OdeBody::add_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_torque(LVecBase3f const &f);

840 13 add_rel_force 0 4 1278 22 OdeBody::add_rel_force 0 2 186 187 0
122
inline void OdeBody::add_rel_force(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_force(LVecBase3f const &f);

841 14 add_rel_torque 0 4 1278 23 OdeBody::add_rel_torque 0 2 188 189 0
124
inline void OdeBody::add_rel_torque(dReal fx, dReal fy, dReal fz);
inline void OdeBody::add_rel_torque(LVecBase3f const &f);

842 16 add_force_at_pos 0 4 1278 25 OdeBody::add_force_at_pos 0 2 190 191 0
181
inline void OdeBody::add_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

843 20 add_force_at_rel_pos 0 4 1278 29 OdeBody::add_force_at_rel_pos 0 2 192 193 0
189
inline void OdeBody::add_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

844 20 add_rel_force_at_pos 0 4 1278 29 OdeBody::add_rel_force_at_pos 0 2 194 195 0
189
inline void OdeBody::add_rel_force_at_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_pos(LVecBase3f const &f, LVecBase3f const &pos);

845 24 add_rel_force_at_rel_pos 0 4 1278 33 OdeBody::add_rel_force_at_rel_pos 0 2 196 197 0
197
inline void OdeBody::add_rel_force_at_rel_pos(dReal fx, dReal fy, dReal fz, dReal px, dReal py, dReal pz);
inline void OdeBody::add_rel_force_at_rel_pos(LVecBase3f const &f, LVecBase3f const &pos);

846 9 set_force 0 4 1278 18 OdeBody::set_force 0 2 198 199 0
111
inline void OdeBody::set_force(dReal x, dReal y, dReal z);
inline void OdeBody::set_force(LVecBase3f const &f);

847 10 set_torque 0 4 1278 19 OdeBody::set_torque 0 2 200 201 0
113
inline void OdeBody::set_torque(dReal x, dReal y, dReal z);
inline void OdeBody::set_torque(LVecBase3f const &f);

848 17 get_rel_point_pos 0 4 1278 26 OdeBody::get_rel_point_pos 0 2 202 203 0
152
inline LPoint3f OdeBody::get_rel_point_pos(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_pos(LVecBase3f const &pos) const;

849 17 get_rel_point_vel 0 4 1278 26 OdeBody::get_rel_point_vel 0 2 204 205 0
152
inline LPoint3f OdeBody::get_rel_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_rel_point_vel(LVecBase3f const &pos) const;

850 13 get_point_vel 0 4 1278 22 OdeBody::get_point_vel 0 2 206 207 0
144
inline LPoint3f OdeBody::get_point_vel(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_point_vel(LVecBase3f const &pos) const;

851 17 get_pos_rel_point 0 4 1278 26 OdeBody::get_pos_rel_point 0 2 208 209 0
152
inline LPoint3f OdeBody::get_pos_rel_point(dReal px, dReal py, dReal pz) const;
inline LPoint3f OdeBody::get_pos_rel_point(LVecBase3f const &pos) const;

852 15 vector_to_world 0 4 1278 24 OdeBody::vector_to_world 0 2 210 211 0
152
inline LVecBase3f OdeBody::vector_to_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_to_world(LVecBase3f const &pos) const;

853 17 vector_from_world 0 4 1278 26 OdeBody::vector_from_world 0 2 212 213 0
156
inline LVecBase3f OdeBody::vector_from_world(dReal px, dReal py, dReal pz) const;
inline LVecBase3f OdeBody::vector_from_world(LVecBase3f const &pos) const;

854 24 set_finite_rotation_mode 0 4 1278 33 OdeBody::set_finite_rotation_mode 0 1 214 0
56
inline void OdeBody::set_finite_rotation_mode(int mode);

855 24 set_finite_rotation_axis 0 4 1278 33 OdeBody::set_finite_rotation_axis 0 2 215 216 0
144
inline void OdeBody::set_finite_rotation_axis(dReal x, dReal y, dReal z);
inline void OdeBody::set_finite_rotation_axis(LVecBase3f const &axis);

856 24 get_finite_rotation_mode 0 4 1278 33 OdeBody::get_finite_rotation_mode 0 1 217 0
57
inline int OdeBody::get_finite_rotation_mode(void) const;

857 24 get_finite_rotation_axis 0 4 1278 33 OdeBody::get_finite_rotation_axis 0 1 218 0
64
inline LVecBase3f OdeBody::get_finite_rotation_axis(void) const;

858 14 get_num_joints 0 4 1278 23 OdeBody::get_num_joints 0 1 219 0
47
inline int OdeBody::get_num_joints(void) const;

859 9 get_joint 0 4 1278 18 OdeBody::get_joint 0 1 220 0
45
OdeJoint OdeBody::get_joint(int index) const;

860 19 get_converted_joint 0 4 1278 28 OdeBody::get_converted_joint 0 1 221 0
59
inline PyObject *OdeBody::get_converted_joint(int i) const;

861 6 enable 0 4 1278 15 OdeBody::enable 0 1 222 0
34
inline void OdeBody::enable(void);

862 7 disable 0 4 1278 16 OdeBody::disable 0 1 223 0
35
inline void OdeBody::disable(void);

863 10 is_enabled 0 4 1278 19 OdeBody::is_enabled 0 1 224 0
43
inline int OdeBody::is_enabled(void) const;

864 16 set_gravity_mode 0 4 1278 25 OdeBody::set_gravity_mode 0 1 225 0
48
inline void OdeBody::set_gravity_mode(int mode);

865 16 get_gravity_mode 0 4 1278 25 OdeBody::get_gravity_mode 0 1 226 0
49
inline int OdeBody::get_gravity_mode(void) const;

866 5 write 0 6 1278 14 OdeBody::write 0 1 227 0
82
virtual void OdeBody::write(ostream &out = ::cout, unsigned int indent = 0) const;

867 22 operator typecast bool 0 132 1278 31 OdeBody::operator typecast bool 0 1 230 0
49
bool OdeBody::operator typecast bool(void) const;

868 10 compare_to 0 4 1278 19 OdeBody::compare_to 0 1 228 0
59
inline int OdeBody::compare_to(OdeBody const &other) const;

869 14 get_class_type 0 4 1278 23 OdeBody::get_class_type 0 1 229 0
48
static TypeHandle OdeBody::get_class_type(void);

870 7 destroy 0 4 1279 17 OdeSpace::destroy 0 1 231 0
29
void OdeSpace::destroy(void);

871 8 is_empty 0 4 1279 18 OdeSpace::is_empty 0 1 232 205
/**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */
43
inline bool OdeSpace::is_empty(void) const;

872 11 set_cleanup 0 4 1279 21 OdeSpace::set_cleanup 0 1 233 0
44
inline void OdeSpace::set_cleanup(int mode);

873 11 get_cleanup 0 4 1279 21 OdeSpace::get_cleanup 0 1 234 0
45
inline int OdeSpace::get_cleanup(void) const;

874 5 query 0 4 1279 15 OdeSpace::query 0 2 235 236 0
97
int OdeSpace::query(OdeGeom const &geom) const;
int OdeSpace::query(OdeSpace const &space) const;

875 13 get_num_geoms 0 4 1279 23 OdeSpace::get_num_geoms 0 1 237 0
47
inline int OdeSpace::get_num_geoms(void) const;

876 8 get_AABB 0 4 1279 18 OdeSpace::get_AABB 0 1 238 0
71
inline void OdeSpace::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

877 13 get_AA_bounds 0 4 1279 23 OdeSpace::get_AA_bounds 0 1 239 0
53
inline PyObject *OdeSpace::get_AA_bounds(void) const;

878 8 is_space 0 4 1279 18 OdeSpace::is_space 0 1 240 0
36
inline int OdeSpace::is_space(void);

879 9 get_class 0 4 1279 19 OdeSpace::get_class 0 1 241 0
43
inline int OdeSpace::get_class(void) const;

880 17 set_category_bits 0 4 1279 27 OdeSpace::set_category_bits 0 1 242 0
63
inline void OdeSpace::set_category_bits(BitMask32 const &bits);

881 16 set_collide_bits 0 4 1279 26 OdeSpace::set_collide_bits 0 1 243 0
62
inline void OdeSpace::set_collide_bits(BitMask32 const &bits);

882 17 get_category_bits 0 4 1279 27 OdeSpace::get_category_bits 0 1 244 0
51
inline BitMask32 OdeSpace::get_category_bits(void);

883 16 get_collide_bits 0 4 1279 26 OdeSpace::get_collide_bits 0 1 245 0
50
inline BitMask32 OdeSpace::get_collide_bits(void);

884 6 enable 0 4 1279 16 OdeSpace::enable 0 1 246 0
35
inline void OdeSpace::enable(void);

885 7 disable 0 4 1279 17 OdeSpace::disable 0 1 247 0
36
inline void OdeSpace::disable(void);

886 10 is_enabled 0 4 1279 20 OdeSpace::is_enabled 0 1 248 0
38
inline int OdeSpace::is_enabled(void);

887 22 set_auto_collide_world 0 4 1279 32 OdeSpace::set_auto_collide_world 0 1 249 0
50
void OdeSpace::set_auto_collide_world(OdeWorld &);

888 28 set_auto_collide_joint_group 0 4 1279 38 OdeSpace::set_auto_collide_joint_group 0 1 250 0
61
void OdeSpace::set_auto_collide_joint_group(OdeJointGroup &);

889 3 add 0 4 1279 13 OdeSpace::add 0 2 251 252 0
71
void OdeSpace::add(OdeGeom &geom);
void OdeSpace::add(OdeSpace &space);

890 6 remove 0 4 1279 16 OdeSpace::remove 0 2 253 254 0
77
void OdeSpace::remove(OdeGeom &geom);
void OdeSpace::remove(OdeSpace &space);

891 5 clean 0 4 1279 15 OdeSpace::clean 0 1 255 0
27
void OdeSpace::clean(void);

892 8 get_geom 0 4 1279 18 OdeSpace::get_geom 0 1 256 0
34
OdeGeom OdeSpace::get_geom(int i);

893 9 get_space 0 4 1279 19 OdeSpace::get_space 0 1 257 0
48
inline OdeSpace OdeSpace::get_space(void) const;

894 5 write 0 6 1279 15 OdeSpace::write 0 1 258 0
83
virtual void OdeSpace::write(ostream &out = ::cout, unsigned int indent = 0) const;

895 22 operator typecast bool 0 132 1279 32 OdeSpace::operator typecast bool 0 1 278 0
50
bool OdeSpace::operator typecast bool(void) const;

896 23 convert_to_simple_space 0 4 1279 33 OdeSpace::convert_to_simple_space 0 1 259 0
61
OdeSimpleSpace OdeSpace::convert_to_simple_space(void) const;

897 21 convert_to_hash_space 0 4 1279 31 OdeSpace::convert_to_hash_space 0 1 260 0
57
OdeHashSpace OdeSpace::convert_to_hash_space(void) const;

898 26 convert_to_quad_tree_space 0 4 1279 36 OdeSpace::convert_to_quad_tree_space 0 1 261 0
66
OdeQuadTreeSpace OdeSpace::convert_to_quad_tree_space(void) const;

899 7 convert 0 4 1279 17 OdeSpace::convert 0 1 262 0
40
PyObject *OdeSpace::convert(void) const;

900 18 get_converted_geom 0 4 1279 28 OdeSpace::get_converted_geom 0 1 263 0
59
inline PyObject *OdeSpace::get_converted_geom(int i) const;

901 19 get_converted_space 0 4 1279 29 OdeSpace::get_converted_space 0 1 264 0
59
inline PyObject *OdeSpace::get_converted_space(void) const;

902 12 auto_collide 0 4 1279 22 OdeSpace::auto_collide 0 1 265 0
34
void OdeSpace::auto_collide(void);

903 7 collide 0 4 1279 17 OdeSpace::collide 0 1 266 0
62
int OdeSpace::collide(PyObject *arg, PyObject *near_callback);

904 14 set_collide_id 0 4 1279 24 OdeSpace::set_collide_id 0 2 267 268 0
118
int OdeSpace::set_collide_id(int collide_id, dGeomID id);
int OdeSpace::set_collide_id(OdeGeom &geom, int collide_id);

905 16 set_surface_type 0 4 1279 26 OdeSpace::set_surface_type 0 2 269 270 0
128
void OdeSpace::set_surface_type(int surface_type, dGeomID id);
void OdeSpace::set_surface_type(OdeGeom &geom, int surface_type);

906 16 get_surface_type 0 4 1279 26 OdeSpace::get_surface_type 0 2 271 272 0
90
int OdeSpace::get_surface_type(dGeomID o1);
int OdeSpace::get_surface_type(OdeGeom &geom);

907 14 get_collide_id 0 4 1279 24 OdeSpace::get_collide_id 0 2 273 274 0
86
int OdeSpace::get_collide_id(dGeomID o1);
int OdeSpace::get_collide_id(OdeGeom &geom);

908 19 set_collision_event 0 4 1279 29 OdeSpace::set_collision_event 0 1 275 0
73
inline void OdeSpace::set_collision_event(std::string const &event_name);

909 19 get_collision_event 0 4 1279 29 OdeSpace::get_collision_event 0 1 276 0
55
inline std::string OdeSpace::get_collision_event(void);

910 14 get_class_type 0 4 1279 24 OdeSpace::get_class_type 0 1 277 0
49
static TypeHandle OdeSpace::get_class_type(void);

911 7 destroy 0 4 1280 16 OdeGeom::destroy 0 1 279 0
28
void OdeGeom::destroy(void);

912 8 is_empty 0 4 1280 17 OdeGeom::is_empty 0 1 280 201
/**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */
42
inline bool OdeGeom::is_empty(void) const;

913 6 get_id 0 4 1280 15 OdeGeom::get_id 0 1 281 42
/**
 * Returns the underlying dGeomID.
 */
43
inline dGeomID OdeGeom::get_id(void) const;

914 8 set_body 0 4 1280 17 OdeGeom::set_body 0 1 282 36
// INLINE void set_data(void* data);
45
inline void OdeGeom::set_body(OdeBody &body);

915 8 has_body 0 4 1280 17 OdeGeom::has_body 0 1 283 0
42
inline bool OdeGeom::has_body(void) const;

916 8 get_body 0 4 1280 17 OdeGeom::get_body 0 1 284 0
45
inline OdeBody OdeGeom::get_body(void) const;

917 12 set_position 0 4 1280 21 OdeGeom::set_position 0 2 285 286 0
119
inline void OdeGeom::set_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_position(LVecBase3f const &pos);

918 12 set_rotation 0 4 1280 21 OdeGeom::set_rotation 0 1 287 0
54
inline void OdeGeom::set_rotation(LMatrix3f const &r);

919 14 set_quaternion 0 4 1280 23 OdeGeom::set_quaternion 0 1 288 0
59
inline void OdeGeom::set_quaternion(LQuaternionf const &q);

920 12 get_position 0 4 1280 21 OdeGeom::get_position 0 1 289 0
50
inline LPoint3f OdeGeom::get_position(void) const;

921 12 get_rotation 0 4 1280 21 OdeGeom::get_rotation 0 1 290 0
51
inline LMatrix3f OdeGeom::get_rotation(void) const;

922 14 get_quaternion 0 4 1280 23 OdeGeom::get_quaternion 0 1 291 0
56
inline LQuaternionf OdeGeom::get_quaternion(void) const;

923 8 get_AABB 0 4 1280 17 OdeGeom::get_AABB 0 1 292 0
70
inline void OdeGeom::get_AABB(LVecBase3f &min, LVecBase3f &max) const;

924 13 get_AA_bounds 0 4 1280 22 OdeGeom::get_AA_bounds 0 1 293 0
52
inline PyObject *OdeGeom::get_AA_bounds(void) const;

925 8 is_space 0 4 1280 17 OdeGeom::is_space 0 1 294 0
35
inline int OdeGeom::is_space(void);

926 9 get_class 0 4 1280 18 OdeGeom::get_class 0 1 295 0
42
inline int OdeGeom::get_class(void) const;

927 17 set_category_bits 0 4 1280 26 OdeGeom::set_category_bits 0 1 296 0
62
inline void OdeGeom::set_category_bits(BitMask32 const &bits);

928 16 set_collide_bits 0 4 1280 25 OdeGeom::set_collide_bits 0 1 297 0
61
inline void OdeGeom::set_collide_bits(BitMask32 const &bits);

929 17 get_category_bits 0 4 1280 26 OdeGeom::get_category_bits 0 1 298 0
50
inline BitMask32 OdeGeom::get_category_bits(void);

930 16 get_collide_bits 0 4 1280 25 OdeGeom::get_collide_bits 0 1 299 0
49
inline BitMask32 OdeGeom::get_collide_bits(void);

931 6 enable 0 4 1280 15 OdeGeom::enable 0 1 300 0
34
inline void OdeGeom::enable(void);

932 7 disable 0 4 1280 16 OdeGeom::disable 0 1 301 0
35
inline void OdeGeom::disable(void);

933 10 is_enabled 0 4 1280 19 OdeGeom::is_enabled 0 1 302 0
37
inline int OdeGeom::is_enabled(void);

934 19 set_offset_position 0 4 1280 28 OdeGeom::set_offset_position 0 2 303 304 0
133
inline void OdeGeom::set_offset_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_position(LVecBase3f const &pos);

935 19 set_offset_rotation 0 4 1280 28 OdeGeom::set_offset_rotation 0 1 305 0
61
inline void OdeGeom::set_offset_rotation(LMatrix3f const &r);

936 21 set_offset_quaternion 0 4 1280 30 OdeGeom::set_offset_quaternion 0 1 306 0
66
inline void OdeGeom::set_offset_quaternion(LQuaternionf const &q);

937 25 set_offset_world_position 0 4 1280 34 OdeGeom::set_offset_world_position 0 2 307 308 0
145
inline void OdeGeom::set_offset_world_position(dReal x, dReal y, dReal z);
inline void OdeGeom::set_offset_world_position(LVecBase3f const &pos);

938 25 set_offset_world_rotation 0 4 1280 34 OdeGeom::set_offset_world_rotation 0 1 309 0
67
inline void OdeGeom::set_offset_world_rotation(LMatrix3f const &r);

939 27 set_offset_world_quaternion 0 4 1280 36 OdeGeom::set_offset_world_quaternion 0 1 310 0
72
inline void OdeGeom::set_offset_world_quaternion(LQuaternionf const &q);

940 12 clear_offset 0 4 1280 21 OdeGeom::clear_offset 0 1 311 0
40
inline void OdeGeom::clear_offset(void);

941 9 is_offset 0 4 1280 18 OdeGeom::is_offset 0 1 312 0
36
inline int OdeGeom::is_offset(void);

942 19 get_offset_position 0 4 1280 28 OdeGeom::get_offset_position 0 1 313 0
57
inline LPoint3f OdeGeom::get_offset_position(void) const;

943 19 get_offset_rotation 0 4 1280 28 OdeGeom::get_offset_rotation 0 1 314 0
58
inline LMatrix3f OdeGeom::get_offset_rotation(void) const;

944 21 get_offset_quaternion 0 4 1280 30 OdeGeom::get_offset_quaternion 0 1 315 0
63
inline LQuaternionf OdeGeom::get_offset_quaternion(void) const;

945 9 get_space 0 4 1280 18 OdeGeom::get_space 0 1 316 0
40
OdeSpace OdeGeom::get_space(void) const;

946 19 get_converted_space 0 4 1280 28 OdeGeom::get_converted_space 0 1 317 0
58
inline PyObject *OdeGeom::get_converted_space(void) const;

947 5 write 0 6 1280 14 OdeGeom::write 0 1 318 0
82
virtual void OdeGeom::write(ostream &out = ::cout, unsigned int indent = 0) const;

948 22 operator typecast bool 0 132 1280 31 OdeGeom::operator typecast bool 0 1 332 0
49
bool OdeGeom::operator typecast bool(void) const;

949 10 compare_to 0 4 1280 19 OdeGeom::compare_to 0 1 319 0
59
inline int OdeGeom::compare_to(OdeGeom const &other) const;

950 7 convert 0 4 1280 16 OdeGeom::convert 0 1 320 0
39
PyObject *OdeGeom::convert(void) const;

951 14 convert_to_box 0 4 1280 23 OdeGeom::convert_to_box 0 1 321 0
47
OdeBoxGeom OdeGeom::convert_to_box(void) const;

952 26 convert_to_capped_cylinder 0 4 1280 35 OdeGeom::convert_to_capped_cylinder 0 1 322 0
70
OdeCappedCylinderGeom OdeGeom::convert_to_capped_cylinder(void) const;

953 19 convert_to_cylinder 0 4 1280 28 OdeGeom::convert_to_cylinder 0 1 323 43
// OdeConvexGeom convert_to_convex() const;
57
OdeCylinderGeom OdeGeom::convert_to_cylinder(void) const;

954 16 convert_to_plane 0 4 1280 25 OdeGeom::convert_to_plane 0 1 324 53
// OdeHeightfieldGeom convert_to_heightfield() const;
51
OdePlaneGeom OdeGeom::convert_to_plane(void) const;

955 14 convert_to_ray 0 4 1280 23 OdeGeom::convert_to_ray 0 1 325 0
47
OdeRayGeom OdeGeom::convert_to_ray(void) const;

956 17 convert_to_sphere 0 4 1280 26 OdeGeom::convert_to_sphere 0 1 326 0
53
OdeSphereGeom OdeGeom::convert_to_sphere(void) const;

957 19 convert_to_tri_mesh 0 4 1280 28 OdeGeom::convert_to_tri_mesh 0 1 327 0
56
OdeTriMeshGeom OdeGeom::convert_to_tri_mesh(void) const;

958 23 convert_to_simple_space 0 4 1280 32 OdeGeom::convert_to_simple_space 0 1 328 0
60
OdeSimpleSpace OdeGeom::convert_to_simple_space(void) const;

959 21 convert_to_hash_space 0 4 1280 30 OdeGeom::convert_to_hash_space 0 1 329 0
56
OdeHashSpace OdeGeom::convert_to_hash_space(void) const;

960 26 convert_to_quad_tree_space 0 4 1280 35 OdeGeom::convert_to_quad_tree_space 0 1 330 0
65
OdeQuadTreeSpace OdeGeom::convert_to_quad_tree_space(void) const;

961 14 get_class_type 0 4 1280 23 OdeGeom::get_class_type 0 1 331 0
48
static TypeHandle OdeGeom::get_class_type(void);

962 10 OdeBoxGeom 0 4 1282 22 OdeBoxGeom::OdeBoxGeom 0 3 333 334 335 0
189
OdeBoxGeom::OdeBoxGeom(dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, dReal lx, dReal ly, dReal lz);
OdeBoxGeom::OdeBoxGeom(OdeSpace &space, LVecBase3f const &size);

963 11 set_lengths 0 4 1282 23 OdeBoxGeom::set_lengths 0 2 336 337 0
127
inline void OdeBoxGeom::set_lengths(dReal lx, dReal ly, dReal lz);
inline void OdeBoxGeom::set_lengths(LVecBase3f const &size);

964 11 get_lengths 0 4 1282 23 OdeBoxGeom::get_lengths 0 1 338 0
48
inline LVecBase3f OdeBoxGeom::get_lengths(void);

965 15 get_point_depth 0 4 1282 27 OdeBoxGeom::get_point_depth 0 2 339 340 0
129
inline dReal OdeBoxGeom::get_point_depth(dReal x, dReal y, dReal z);
inline dReal OdeBoxGeom::get_point_depth(LPoint3f const &p);

966 14 get_class_type 0 4 1282 26 OdeBoxGeom::get_class_type 0 1 341 0
51
static TypeHandle OdeBoxGeom::get_class_type(void);

967 21 OdeCappedCylinderGeom 0 4 1283 44 OdeCappedCylinderGeom::OdeCappedCylinderGeom 0 2 342 343 0
164
OdeCappedCylinderGeom::OdeCappedCylinderGeom(dReal radius, dReal length);
OdeCappedCylinderGeom::OdeCappedCylinderGeom(OdeSpace &space, dReal radius, dReal length);

968 10 set_params 0 4 1283 33 OdeCappedCylinderGeom::set_params 0 1 344 0
74
inline void OdeCappedCylinderGeom::set_params(dReal radius, dReal length);

969 10 get_params 0 4 1283 33 OdeCappedCylinderGeom::get_params 0 0 0
82
inline void OdeCappedCylinderGeom::get_params(dReal *radius, dReal *length) const;

970 10 get_radius 0 4 1283 33 OdeCappedCylinderGeom::get_radius 0 1 345 0
59
inline dReal OdeCappedCylinderGeom::get_radius(void) const;

971 10 get_length 0 4 1283 33 OdeCappedCylinderGeom::get_length 0 1 346 0
59
inline dReal OdeCappedCylinderGeom::get_length(void) const;

972 15 get_point_depth 0 4 1283 38 OdeCappedCylinderGeom::get_point_depth 0 2 347 348 0
163
inline dReal OdeCappedCylinderGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeCappedCylinderGeom::get_point_depth(LPoint3f const &p) const;

973 14 get_class_type 0 4 1283 37 OdeCappedCylinderGeom::get_class_type 0 1 349 0
62
static TypeHandle OdeCappedCylinderGeom::get_class_type(void);

974 14 OdeContactGeom 0 4 1284 30 OdeContactGeom::OdeContactGeom 0 2 350 351 0
97
OdeContactGeom::OdeContactGeom(void);
OdeContactGeom::OdeContactGeom(OdeContactGeom const &copy);

975 7 get_pos 0 4 1284 23 OdeContactGeom::get_pos 0 1 352 0
54
inline LVecBase3f OdeContactGeom::get_pos(void) const;

976 10 get_normal 0 4 1284 26 OdeContactGeom::get_normal 0 1 353 0
57
inline LVecBase3f OdeContactGeom::get_normal(void) const;

977 9 get_depth 0 4 1284 25 OdeContactGeom::get_depth 0 1 354 0
51
inline dReal OdeContactGeom::get_depth(void) const;

978 6 get_g1 0 4 1284 22 OdeContactGeom::get_g1 0 1 355 0
50
inline OdeGeom OdeContactGeom::get_g1(void) const;

979 6 get_g2 0 4 1284 22 OdeContactGeom::get_g2 0 1 356 0
50
inline OdeGeom OdeContactGeom::get_g2(void) const;

980 9 get_side1 0 4 1284 25 OdeContactGeom::get_side1 0 1 357 0
49
inline int OdeContactGeom::get_side1(void) const;

981 9 get_side2 0 4 1284 25 OdeContactGeom::get_side2 0 1 358 0
49
inline int OdeContactGeom::get_side2(void) const;

982 7 set_pos 0 4 1284 23 OdeContactGeom::set_pos 0 1 359 0
59
inline void OdeContactGeom::set_pos(LVecBase3f const &pos);

983 10 set_normal 0 4 1284 26 OdeContactGeom::set_normal 0 1 360 0
65
inline void OdeContactGeom::set_normal(LVecBase3f const &normal);

984 9 set_depth 0 4 1284 25 OdeContactGeom::set_depth 0 1 361 0
57
inline void OdeContactGeom::set_depth(dReal const depth);

985 6 set_g1 0 4 1284 22 OdeContactGeom::set_g1 0 1 362 0
56
inline void OdeContactGeom::set_g1(OdeGeom const &geom);

986 6 set_g2 0 4 1284 22 OdeContactGeom::set_g2 0 1 363 0
56
inline void OdeContactGeom::set_g2(OdeGeom const &geom);

987 14 get_class_type 0 4 1284 30 OdeContactGeom::get_class_type 0 1 364 0
55
static TypeHandle OdeContactGeom::get_class_type(void);

988 9 get_geom1 0 4 1285 28 OdeCollisionEntry::get_geom1 0 1 366 51
/**
 * Returns the first geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom1(void) const;

989 9 get_geom2 0 4 1285 28 OdeCollisionEntry::get_geom2 0 1 367 52
/**
 * Returns the second geom in the collision.
 */
56
inline OdeGeom OdeCollisionEntry::get_geom2(void) const;

990 9 get_body1 0 4 1285 28 OdeCollisionEntry::get_body1 0 1 368 51
/**
 * Returns the first body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body1(void) const;

991 9 get_body2 0 4 1285 28 OdeCollisionEntry::get_body2 0 1 369 52
/**
 * Returns the second body in the collision.
 */
56
inline OdeBody OdeCollisionEntry::get_body2(void) const;

992 16 get_num_contacts 0 4 1285 35 OdeCollisionEntry::get_num_contacts 0 1 370 59
/**
 * Returns the number of contacts in the collision.
 */
67
inline std::size_t OdeCollisionEntry::get_num_contacts(void) const;

993 17 get_contact_point 0 4 1285 36 OdeCollisionEntry::get_contact_point 0 1 371 123
/**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */
74
inline LPoint3f OdeCollisionEntry::get_contact_point(std::size_t n) const;

994 16 get_contact_geom 0 4 1285 35 OdeCollisionEntry::get_contact_geom 0 1 372 57
/**
 * Returns the nth contact geom in the collision.
 */
79
inline OdeContactGeom OdeCollisionEntry::get_contact_geom(std::size_t n) const;

995 11 operator [] 0 4 1285 30 OdeCollisionEntry::operator [] 0 1 373 0
74
inline OdeContactGeom OdeCollisionEntry::operator [](std::size_t n) const;

996 22 operator typecast bool 0 132 1285 41 OdeCollisionEntry::operator typecast bool 0 1 376 0
66
inline bool OdeCollisionEntry::operator typecast bool(void) const;

997 8 is_empty 0 4 1285 27 OdeCollisionEntry::is_empty 0 1 374 55
/**
 * Returns true if the entry holds no contacts.
 */
52
inline bool OdeCollisionEntry::is_empty(void) const;

998 14 get_class_type 0 4 1285 33 OdeCollisionEntry::get_class_type 0 1 375 0
58
static TypeHandle OdeCollisionEntry::get_class_type(void);

999 17 OdeCollisionEntry 0 4 1285 36 OdeCollisionEntry::OdeCollisionEntry 0 1 365 10
/**
 *
 */
81
inline OdeCollisionEntry::OdeCollisionEntry(OdeCollisionEntry const &) = default;

1000 20 OdeSurfaceParameters 0 4 1286 42 OdeSurfaceParameters::OdeSurfaceParameters 0 1 377 0
71
OdeSurfaceParameters::OdeSurfaceParameters(int mode = 0, dReal mu = 0);

1001 8 set_mode 0 4 1286 30 OdeSurfaceParameters::set_mode 0 1 378 0
53
inline void OdeSurfaceParameters::set_mode(int mode);

1002 6 set_mu 0 4 1286 28 OdeSurfaceParameters::set_mu 0 1 379 0
51
inline void OdeSurfaceParameters::set_mu(dReal mu);

1003 7 set_mu2 0 4 1286 29 OdeSurfaceParameters::set_mu2 0 1 380 0
53
inline void OdeSurfaceParameters::set_mu2(dReal mu2);

1004 10 set_bounce 0 4 1286 32 OdeSurfaceParameters::set_bounce 0 1 381 0
59
inline void OdeSurfaceParameters::set_bounce(dReal bounce);

1005 14 set_bounce_vel 0 4 1286 36 OdeSurfaceParameters::set_bounce_vel 0 1 382 0
67
inline void OdeSurfaceParameters::set_bounce_vel(dReal bounce_vel);

1006 12 set_soft_erp 0 4 1286 34 OdeSurfaceParameters::set_soft_erp 0 1 383 0
63
inline void OdeSurfaceParameters::set_soft_erp(dReal soft_erp);

1007 12 set_soft_cfm 0 4 1286 34 OdeSurfaceParameters::set_soft_cfm 0 1 384 0
63
inline void OdeSurfaceParameters::set_soft_cfm(dReal soft_cfm);

1008 11 set_motion1 0 4 1286 33 OdeSurfaceParameters::set_motion1 0 1 385 0
60
inline void OdeSurfaceParameters::set_motion1(dReal motion);

1009 11 set_motion2 0 4 1286 33 OdeSurfaceParameters::set_motion2 0 1 386 0
60
inline void OdeSurfaceParameters::set_motion2(dReal motion);

1010 9 set_slip1 0 4 1286 31 OdeSurfaceParameters::set_slip1 0 1 387 0
56
inline void OdeSurfaceParameters::set_slip1(dReal slip);

1011 9 set_slip2 0 4 1286 31 OdeSurfaceParameters::set_slip2 0 1 388 0
56
inline void OdeSurfaceParameters::set_slip2(dReal slip);

1012 8 get_mode 0 4 1286 30 OdeSurfaceParameters::get_mode 0 1 389 0
54
inline int OdeSurfaceParameters::get_mode(void) const;

1013 6 get_mu 0 4 1286 28 OdeSurfaceParameters::get_mu 0 1 390 0
54
inline dReal OdeSurfaceParameters::get_mu(void) const;

1014 7 get_mu2 0 4 1286 29 OdeSurfaceParameters::get_mu2 0 1 391 0
55
inline dReal OdeSurfaceParameters::get_mu2(void) const;

1015 10 get_bounce 0 4 1286 32 OdeSurfaceParameters::get_bounce 0 1 392 0
58
inline dReal OdeSurfaceParameters::get_bounce(void) const;

1016 14 get_bounce_vel 0 4 1286 36 OdeSurfaceParameters::get_bounce_vel 0 1 393 0
62
inline dReal OdeSurfaceParameters::get_bounce_vel(void) const;

1017 12 get_soft_erp 0 4 1286 34 OdeSurfaceParameters::get_soft_erp 0 1 394 0
60
inline dReal OdeSurfaceParameters::get_soft_erp(void) const;

1018 12 get_soft_cfm 0 4 1286 34 OdeSurfaceParameters::get_soft_cfm 0 1 395 0
60
inline dReal OdeSurfaceParameters::get_soft_cfm(void) const;

1019 11 get_motion1 0 4 1286 33 OdeSurfaceParameters::get_motion1 0 1 396 0
59
inline dReal OdeSurfaceParameters::get_motion1(void) const;

1020 11 get_motion2 0 4 1286 33 OdeSurfaceParameters::get_motion2 0 1 397 0
59
inline dReal OdeSurfaceParameters::get_motion2(void) const;

1021 9 get_slip1 0 4 1286 31 OdeSurfaceParameters::get_slip1 0 1 398 0
57
inline dReal OdeSurfaceParameters::get_slip1(void) const;

1022 9 get_slip2 0 4 1286 31 OdeSurfaceParameters::get_slip2 0 1 399 0
57
inline dReal OdeSurfaceParameters::get_slip2(void) const;

1023 14 get_class_type 0 4 1286 36 OdeSurfaceParameters::get_class_type 0 1 400 0
61
static TypeHandle OdeSurfaceParameters::get_class_type(void);

1024 10 OdeContact 0 4 1288 22 OdeContact::OdeContact 0 2 401 402 38
// OdeContact(const OdeContact &copy);
78
OdeContact::OdeContact(void);
OdeContact::OdeContact(dContact const &contact);

1025 11 get_surface 0 4 1288 23 OdeContact::get_surface 0 1 403 0
64
inline OdeSurfaceParameters OdeContact::get_surface(void) const;

1026 8 get_geom 0 4 1288 20 OdeContact::get_geom 0 1 404 0
49
inline OdeContactGeom OdeContact::get_geom(void);

1027 9 get_fdir1 0 4 1288 21 OdeContact::get_fdir1 0 1 405 0
52
inline LVecBase3f OdeContact::get_fdir1(void) const;

1028 11 set_surface 0 4 1288 23 OdeContact::set_surface 0 1 406 0
84
inline void OdeContact::set_surface(OdeSurfaceParameters const &surface_parameters);

1029 8 set_geom 0 4 1288 20 OdeContact::set_geom 0 1 407 0
69
inline void OdeContact::set_geom(OdeContactGeom const &contact_geom);

1030 9 set_fdir1 0 4 1288 21 OdeContact::set_fdir1 0 1 408 0
59
inline void OdeContact::set_fdir1(LVecBase3f const &fdir1);

1031 14 get_class_type 0 4 1288 26 OdeContact::get_class_type 0 1 409 0
51
static TypeHandle OdeContact::get_class_type(void);

1032 15 OdeContactJoint 0 4 1289 32 OdeContactJoint::OdeContactJoint 0 2 410 411 0
183
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeContact const &contact);
OdeContactJoint::OdeContactJoint(OdeWorld &world, OdeJointGroup &joint_group, OdeContact const &contact);

1033 14 get_class_type 0 4 1289 31 OdeContactJoint::get_class_type 0 1 412 0
56
static TypeHandle OdeContactJoint::get_class_type(void);

1034 15 OdeCylinderGeom 0 4 1290 32 OdeCylinderGeom::OdeCylinderGeom 0 2 413 414 0
140
OdeCylinderGeom::OdeCylinderGeom(dReal radius, dReal length);
OdeCylinderGeom::OdeCylinderGeom(OdeSpace &space, dReal radius, dReal length);

1035 10 set_params 0 4 1290 27 OdeCylinderGeom::set_params 0 1 415 0
68
inline void OdeCylinderGeom::set_params(dReal radius, dReal length);

1036 10 get_params 0 4 1290 27 OdeCylinderGeom::get_params 0 0 0
76
inline void OdeCylinderGeom::get_params(dReal *radius, dReal *length) const;

1037 10 get_radius 0 4 1290 27 OdeCylinderGeom::get_radius 0 1 416 0
53
inline dReal OdeCylinderGeom::get_radius(void) const;

1038 10 get_length 0 4 1290 27 OdeCylinderGeom::get_length 0 1 417 0
53
inline dReal OdeCylinderGeom::get_length(void) const;

1039 14 get_class_type 0 4 1290 31 OdeCylinderGeom::get_class_type 0 1 418 0
56
static TypeHandle OdeCylinderGeom::get_class_type(void);

1040 13 OdeFixedJoint 0 4 1291 28 OdeFixedJoint::OdeFixedJoint 0 2 419 420 0
121
OdeFixedJoint::OdeFixedJoint(OdeWorld &world);
OdeFixedJoint::OdeFixedJoint(OdeWorld &world, OdeJointGroup &joint_group);

1041 3 set 0 4 1291 18 OdeFixedJoint::set 0 1 421 0
37
inline void OdeFixedJoint::set(void);

1042 14 get_class_type 0 4 1291 29 OdeFixedJoint::get_class_type 0 1 422 0
54
static TypeHandle OdeFixedJoint::get_class_type(void);

1043 12 OdeHashSpace 0 4 1292 26 OdeHashSpace::OdeHashSpace 0 2 423 424 0
78
OdeHashSpace::OdeHashSpace(void);
OdeHashSpace::OdeHashSpace(OdeSpace &space);

1044 10 set_levels 0 4 1292 24 OdeHashSpace::set_levels 0 1 425 0
65
inline void OdeHashSpace::set_levels(int minlevel, int maxlevel);

1045 13 get_min_level 0 4 1292 27 OdeHashSpace::get_min_level 0 1 426 0
51
inline int OdeHashSpace::get_min_level(void) const;

1046 13 get_max_level 0 4 1292 27 OdeHashSpace::get_max_level 0 1 427 0
51
inline int OdeHashSpace::get_max_level(void) const;

1047 14 get_class_type 0 4 1292 28 OdeHashSpace::get_class_type 0 1 428 0
53
static TypeHandle OdeHashSpace::get_class_type(void);

1048 14 OdeHinge2Joint 0 4 1293 30 OdeHinge2Joint::OdeHinge2Joint 0 2 429 430 0
125
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world, OdeJointGroup &joint_group);
OdeHinge2Joint::OdeHinge2Joint(OdeWorld &world);

1049 10 set_anchor 0 4 1293 26 OdeHinge2Joint::set_anchor 0 2 431 432 0
132
inline void OdeHinge2Joint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_anchor(LVecBase3f const &anchor);

1050 9 set_axis1 0 4 1293 25 OdeHinge2Joint::set_axis1 0 2 433 434 0
128
inline void OdeHinge2Joint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis1(LVecBase3f const &axis);

1051 9 set_axis2 0 4 1293 25 OdeHinge2Joint::set_axis2 0 2 435 436 0
128
inline void OdeHinge2Joint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeHinge2Joint::set_axis2(LVecBase3f const &axis);

1052 11 add_torques 0 4 1293 27 OdeHinge2Joint::add_torques 0 1 437 0
70
inline void OdeHinge2Joint::add_torques(dReal torque1, dReal torque2);

1053 10 get_anchor 0 4 1293 26 OdeHinge2Joint::get_anchor 0 1 438 0
57
inline LVecBase3f OdeHinge2Joint::get_anchor(void) const;

1054 11 get_anchor2 0 4 1293 27 OdeHinge2Joint::get_anchor2 0 1 439 0
58
inline LVecBase3f OdeHinge2Joint::get_anchor2(void) const;

1055 9 get_axis1 0 4 1293 25 OdeHinge2Joint::get_axis1 0 1 440 0
56
inline LVecBase3f OdeHinge2Joint::get_axis1(void) const;

1056 9 get_axis2 0 4 1293 25 OdeHinge2Joint::get_axis2 0 1 441 0
56
inline LVecBase3f OdeHinge2Joint::get_axis2(void) const;

1057 10 get_angle1 0 4 1293 26 OdeHinge2Joint::get_angle1 0 1 442 0
52
inline dReal OdeHinge2Joint::get_angle1(void) const;

1058 15 get_angle1_rate 0 4 1293 31 OdeHinge2Joint::get_angle1_rate 0 1 443 0
57
inline dReal OdeHinge2Joint::get_angle1_rate(void) const;

1059 15 get_angle2_rate 0 4 1293 31 OdeHinge2Joint::get_angle2_rate 0 1 444 0
57
inline dReal OdeHinge2Joint::get_angle2_rate(void) const;

1060 17 set_param_lo_stop 0 4 1293 33 OdeHinge2Joint::set_param_lo_stop 0 1 445 0
67
inline void OdeHinge2Joint::set_param_lo_stop(int axis, dReal val);

1061 17 set_param_hi_stop 0 4 1293 33 OdeHinge2Joint::set_param_hi_stop 0 1 446 0
67
inline void OdeHinge2Joint::set_param_hi_stop(int axis, dReal val);

1062 13 set_param_vel 0 4 1293 29 OdeHinge2Joint::set_param_vel 0 1 447 0
63
inline void OdeHinge2Joint::set_param_vel(int axis, dReal val);

1063 15 set_param_f_max 0 4 1293 31 OdeHinge2Joint::set_param_f_max 0 1 448 0
65
inline void OdeHinge2Joint::set_param_f_max(int axis, dReal val);

1064 22 set_param_fudge_factor 0 4 1293 38 OdeHinge2Joint::set_param_fudge_factor 0 1 449 0
72
inline void OdeHinge2Joint::set_param_fudge_factor(int axis, dReal val);

1065 16 set_param_bounce 0 4 1293 32 OdeHinge2Joint::set_param_bounce 0 1 450 0
66
inline void OdeHinge2Joint::set_param_bounce(int axis, dReal val);

1066 13 set_param_CFM 0 4 1293 29 OdeHinge2Joint::set_param_CFM 0 1 451 0
63
inline void OdeHinge2Joint::set_param_CFM(int axis, dReal val);

1067 18 set_param_stop_ERP 0 4 1293 34 OdeHinge2Joint::set_param_stop_ERP 0 1 452 0
68
inline void OdeHinge2Joint::set_param_stop_ERP(int axis, dReal val);

1068 18 set_param_stop_CFM 0 4 1293 34 OdeHinge2Joint::set_param_stop_CFM 0 1 453 0
68
inline void OdeHinge2Joint::set_param_stop_CFM(int axis, dReal val);

1069 24 set_param_suspension_ERP 0 4 1293 40 OdeHinge2Joint::set_param_suspension_ERP 0 1 454 0
74
inline void OdeHinge2Joint::set_param_suspension_ERP(int axis, dReal val);

1070 24 set_param_suspension_CFM 0 4 1293 40 OdeHinge2Joint::set_param_suspension_CFM 0 1 455 0
74
inline void OdeHinge2Joint::set_param_suspension_CFM(int axis, dReal val);

1071 17 get_param_lo_stop 0 4 1293 33 OdeHinge2Joint::get_param_lo_stop 0 1 456 0
63
inline dReal OdeHinge2Joint::get_param_lo_stop(int axis) const;

1072 17 get_param_hi_stop 0 4 1293 33 OdeHinge2Joint::get_param_hi_stop 0 1 457 0
63
inline dReal OdeHinge2Joint::get_param_hi_stop(int axis) const;

1073 13 get_param_vel 0 4 1293 29 OdeHinge2Joint::get_param_vel 0 1 458 0
59
inline dReal OdeHinge2Joint::get_param_vel(int axis) const;

1074 15 get_param_f_max 0 4 1293 31 OdeHinge2Joint::get_param_f_max 0 1 459 0
61
inline dReal OdeHinge2Joint::get_param_f_max(int axis) const;

1075 22 get_param_fudge_factor 0 4 1293 38 OdeHinge2Joint::get_param_fudge_factor 0 1 460 0
68
inline dReal OdeHinge2Joint::get_param_fudge_factor(int axis) const;

1076 16 get_param_bounce 0 4 1293 32 OdeHinge2Joint::get_param_bounce 0 1 461 0
62
inline dReal OdeHinge2Joint::get_param_bounce(int axis) const;

1077 13 get_param_CFM 0 4 1293 29 OdeHinge2Joint::get_param_CFM 0 1 462 0
59
inline dReal OdeHinge2Joint::get_param_CFM(int axis) const;

1078 18 get_param_stop_ERP 0 4 1293 34 OdeHinge2Joint::get_param_stop_ERP 0 1 463 0
64
inline dReal OdeHinge2Joint::get_param_stop_ERP(int axis) const;

1079 18 get_param_stop_CFM 0 4 1293 34 OdeHinge2Joint::get_param_stop_CFM 0 1 464 0
64
inline dReal OdeHinge2Joint::get_param_stop_CFM(int axis) const;

1080 24 get_param_suspension_ERP 0 4 1293 40 OdeHinge2Joint::get_param_suspension_ERP 0 1 465 0
70
inline dReal OdeHinge2Joint::get_param_suspension_ERP(int axis) const;

1081 24 get_param_suspension_CFM 0 4 1293 40 OdeHinge2Joint::get_param_suspension_CFM 0 1 466 0
70
inline dReal OdeHinge2Joint::get_param_suspension_CFM(int axis) const;

1082 14 get_class_type 0 4 1293 30 OdeHinge2Joint::get_class_type 0 1 467 0
55
static TypeHandle OdeHinge2Joint::get_class_type(void);

1083 13 OdeHingeJoint 0 4 1294 28 OdeHingeJoint::OdeHingeJoint 0 2 468 469 0
121
OdeHingeJoint::OdeHingeJoint(OdeWorld &world);
OdeHingeJoint::OdeHingeJoint(OdeWorld &world, OdeJointGroup &joint_group);

1084 10 set_anchor 0 4 1294 25 OdeHingeJoint::set_anchor 0 2 470 471 0
130
inline void OdeHingeJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_anchor(LVecBase3f const &anchor);

1085 16 set_anchor_delta 0 4 1294 31 OdeHingeJoint::set_anchor_delta 0 2 472 473 0
195
inline void OdeHingeJoint::set_anchor_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeHingeJoint::set_anchor_delta(LVecBase3f const &anchor, LVecBase3f const &vec);

1086 8 set_axis 0 4 1294 23 OdeHingeJoint::set_axis 0 2 474 475 0
124
inline void OdeHingeJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeHingeJoint::set_axis(LVecBase3f const &axis);

1087 10 add_torque 0 4 1294 25 OdeHingeJoint::add_torque 0 1 476 0
52
inline void OdeHingeJoint::add_torque(dReal torque);

1088 10 get_anchor 0 4 1294 25 OdeHingeJoint::get_anchor 0 1 477 0
56
inline LVecBase3f OdeHingeJoint::get_anchor(void) const;

1089 11 get_anchor2 0 4 1294 26 OdeHingeJoint::get_anchor2 0 1 478 0
57
inline LVecBase3f OdeHingeJoint::get_anchor2(void) const;

1090 8 get_axis 0 4 1294 23 OdeHingeJoint::get_axis 0 1 479 0
54
inline LVecBase3f OdeHingeJoint::get_axis(void) const;

1091 9 get_angle 0 4 1294 24 OdeHingeJoint::get_angle 0 1 480 0
50
inline dReal OdeHingeJoint::get_angle(void) const;

1092 14 get_angle_rate 0 4 1294 29 OdeHingeJoint::get_angle_rate 0 1 481 0
55
inline dReal OdeHingeJoint::get_angle_rate(void) const;

1093 17 set_param_lo_stop 0 4 1294 32 OdeHingeJoint::set_param_lo_stop 0 1 482 0
56
inline void OdeHingeJoint::set_param_lo_stop(dReal val);

1094 17 set_param_hi_stop 0 4 1294 32 OdeHingeJoint::set_param_hi_stop 0 1 483 0
56
inline void OdeHingeJoint::set_param_hi_stop(dReal val);

1095 13 set_param_vel 0 4 1294 28 OdeHingeJoint::set_param_vel 0 1 484 0
52
inline void OdeHingeJoint::set_param_vel(dReal val);

1096 15 set_param_f_max 0 4 1294 30 OdeHingeJoint::set_param_f_max 0 1 485 0
54
inline void OdeHingeJoint::set_param_f_max(dReal val);

1097 22 set_param_fudge_factor 0 4 1294 37 OdeHingeJoint::set_param_fudge_factor 0 1 486 0
61
inline void OdeHingeJoint::set_param_fudge_factor(dReal val);

1098 16 set_param_bounce 0 4 1294 31 OdeHingeJoint::set_param_bounce 0 1 487 0
55
inline void OdeHingeJoint::set_param_bounce(dReal val);

1099 13 set_param_CFM 0 4 1294 28 OdeHingeJoint::set_param_CFM 0 1 488 0
52
inline void OdeHingeJoint::set_param_CFM(dReal val);

1100 18 set_param_stop_ERP 0 4 1294 33 OdeHingeJoint::set_param_stop_ERP 0 1 489 0
57
inline void OdeHingeJoint::set_param_stop_ERP(dReal val);

1101 18 set_param_stop_CFM 0 4 1294 33 OdeHingeJoint::set_param_stop_CFM 0 1 490 0
57
inline void OdeHingeJoint::set_param_stop_CFM(dReal val);

1102 17 get_param_lo_stop 0 4 1294 32 OdeHingeJoint::get_param_lo_stop 0 1 491 0
58
inline dReal OdeHingeJoint::get_param_lo_stop(void) const;

1103 17 get_param_hi_stop 0 4 1294 32 OdeHingeJoint::get_param_hi_stop 0 1 492 0
58
inline dReal OdeHingeJoint::get_param_hi_stop(void) const;

1104 13 get_param_vel 0 4 1294 28 OdeHingeJoint::get_param_vel 0 1 493 0
54
inline dReal OdeHingeJoint::get_param_vel(void) const;

1105 15 get_param_f_max 0 4 1294 30 OdeHingeJoint::get_param_f_max 0 1 494 0
56
inline dReal OdeHingeJoint::get_param_f_max(void) const;

1106 22 get_param_fudge_factor 0 4 1294 37 OdeHingeJoint::get_param_fudge_factor 0 1 495 0
63
inline dReal OdeHingeJoint::get_param_fudge_factor(void) const;

1107 16 get_param_bounce 0 4 1294 31 OdeHingeJoint::get_param_bounce 0 1 496 0
57
inline dReal OdeHingeJoint::get_param_bounce(void) const;

1108 13 get_param_CFM 0 4 1294 28 OdeHingeJoint::get_param_CFM 0 1 497 0
54
inline dReal OdeHingeJoint::get_param_CFM(void) const;

1109 18 get_param_stop_ERP 0 4 1294 33 OdeHingeJoint::get_param_stop_ERP 0 1 498 0
59
inline dReal OdeHingeJoint::get_param_stop_ERP(void) const;

1110 18 get_param_stop_CFM 0 4 1294 33 OdeHingeJoint::get_param_stop_CFM 0 1 499 0
59
inline dReal OdeHingeJoint::get_param_stop_CFM(void) const;

1111 14 get_class_type 0 4 1294 29 OdeHingeJoint::get_class_type 0 1 500 0
54
static TypeHandle OdeHingeJoint::get_class_type(void);

1112 18 OdeJointCollection 0 4 1295 38 OdeJointCollection::OdeJointCollection 0 2 501 502 0
117
OdeJointCollection::OdeJointCollection(void);
OdeJointCollection::OdeJointCollection(OdeJointCollection const &copy);

1113 10 operator = 0 4 1295 30 OdeJointCollection::operator = 0 1 503 0
68
void OdeJointCollection::operator =(OdeJointCollection const &copy);

1114 19 ~OdeJointCollection 0 4 1295 39 OdeJointCollection::~OdeJointCollection 0 0 10
/**
 *
 */
53
inline OdeJointCollection::~OdeJointCollection(void);

1115 9 add_joint 0 4 1295 29 OdeJointCollection::add_joint 0 1 504 0
58
void OdeJointCollection::add_joint(OdeJoint const &joint);

1116 12 remove_joint 0 4 1295 32 OdeJointCollection::remove_joint 0 1 505 0
61
bool OdeJointCollection::remove_joint(OdeJoint const &joint);

1117 15 add_joints_from 0 4 1295 35 OdeJointCollection::add_joints_from 0 1 506 0
74
void OdeJointCollection::add_joints_from(OdeJointCollection const &other);

1118 18 remove_joints_from 0 4 1295 38 OdeJointCollection::remove_joints_from 0 1 507 0
77
void OdeJointCollection::remove_joints_from(OdeJointCollection const &other);

1119 23 remove_duplicate_joints 0 4 1295 43 OdeJointCollection::remove_duplicate_joints 0 1 508 0
55
void OdeJointCollection::remove_duplicate_joints(void);

1120 9 has_joint 0 4 1295 29 OdeJointCollection::has_joint 0 1 509 0
64
bool OdeJointCollection::has_joint(OdeJoint const &joint) const;

1121 5 clear 0 4 1295 25 OdeJointCollection::clear 0 1 510 0
37
void OdeJointCollection::clear(void);

1122 8 is_empty 0 4 1295 28 OdeJointCollection::is_empty 0 1 511 0
46
bool OdeJointCollection::is_empty(void) const;

1123 14 get_num_joints 0 4 1295 34 OdeJointCollection::get_num_joints 0 1 512 0
51
int OdeJointCollection::get_num_joints(void) const;

1124 9 get_joint 0 4 1295 29 OdeJointCollection::get_joint 0 1 513 0
56
OdeJoint OdeJointCollection::get_joint(int index) const;

1125 11 operator [] 0 4 1295 31 OdeJointCollection::operator [] 0 1 514 0
58
OdeJoint OdeJointCollection::operator [](int index) const;

1126 4 size 0 4 1295 24 OdeJointCollection::size 0 1 515 106
/**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */
41
int OdeJointCollection::size(void) const;

1127 11 operator += 0 4 1295 31 OdeJointCollection::operator += 0 1 516 0
77
inline void OdeJointCollection::operator +=(OdeJointCollection const &other);

1128 10 operator + 0 4 1295 30 OdeJointCollection::operator + 0 1 517 0
96
inline OdeJointCollection OdeJointCollection::operator +(OdeJointCollection const &other) const;

1129 14 OdeLMotorJoint 0 4 1296 30 OdeLMotorJoint::OdeLMotorJoint 0 2 518 519 0
125
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world);
OdeLMotorJoint::OdeLMotorJoint(OdeWorld &world, OdeJointGroup &joint_group);

1130 12 set_num_axes 0 4 1296 28 OdeLMotorJoint::set_num_axes 0 1 520 0
50
inline void OdeLMotorJoint::set_num_axes(int num);

1131 8 set_axis 0 4 1296 24 OdeLMotorJoint::set_axis 0 2 521 522 0
164
inline void OdeLMotorJoint::set_axis(int anum, int rel, dReal x, dReal y, dReal z);
inline void OdeLMotorJoint::set_axis(int anum, int rel, LVecBase3f const &axis);

1132 9 set_param 0 4 1296 25 OdeLMotorJoint::set_param 0 1 523 0
66
inline void OdeLMotorJoint::set_param(int parameter, dReal value);

1133 12 get_num_axes 0 4 1296 28 OdeLMotorJoint::get_num_axes 0 1 524 0
52
inline int OdeLMotorJoint::get_num_axes(void) const;

1134 8 get_axis 0 4 1296 24 OdeLMotorJoint::get_axis 0 1 525 0
59
inline LVecBase3f OdeLMotorJoint::get_axis(int anum) const;

1135 9 get_param 0 4 1296 25 OdeLMotorJoint::get_param 0 1 526 0
60
inline dReal OdeLMotorJoint::get_param(int parameter) const;

1136 14 get_class_type 0 4 1296 30 OdeLMotorJoint::get_class_type 0 1 527 0
55
static TypeHandle OdeLMotorJoint::get_class_type(void);

1137 12 OdeNullJoint 0 4 1297 26 OdeNullJoint::OdeNullJoint 0 2 528 529 0
117
OdeNullJoint::OdeNullJoint(OdeWorld &world);
OdeNullJoint::OdeNullJoint(OdeWorld &world, OdeJointGroup &joint_group);

1138 14 get_class_type 0 4 1297 28 OdeNullJoint::get_class_type 0 1 530 0
53
static TypeHandle OdeNullJoint::get_class_type(void);

1139 15 OdePlane2dJoint 0 4 1298 32 OdePlane2dJoint::OdePlane2dJoint 0 2 531 532 0
129
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world);
OdePlane2dJoint::OdePlane2dJoint(OdeWorld &world, OdeJointGroup &joint_group);

1140 11 set_x_param 0 4 1298 28 OdePlane2dJoint::set_x_param 0 1 533 0
69
inline void OdePlane2dJoint::set_x_param(int parameter, dReal value);

1141 11 set_y_param 0 4 1298 28 OdePlane2dJoint::set_y_param 0 1 534 0
69
inline void OdePlane2dJoint::set_y_param(int parameter, dReal value);

1142 15 set_angle_param 0 4 1298 32 OdePlane2dJoint::set_angle_param 0 1 535 0
73
inline void OdePlane2dJoint::set_angle_param(int parameter, dReal value);

1143 14 get_class_type 0 4 1298 31 OdePlane2dJoint::get_class_type 0 1 536 0
56
static TypeHandle OdePlane2dJoint::get_class_type(void);

1144 12 OdePlaneGeom 0 4 1299 26 OdePlaneGeom::OdePlaneGeom 0 4 537 538 539 540 0
269
OdePlaneGeom::OdePlaneGeom(dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(LVecBase4f const &params);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, dReal a, dReal b, dReal c, dReal d);
OdePlaneGeom::OdePlaneGeom(OdeSpace &space, LVecBase4f const &params);

1145 10 set_params 0 4 1299 24 OdePlaneGeom::set_params 0 2 541 542 0
137
inline void OdePlaneGeom::set_params(dReal a, dReal b, dReal c, dReal d);
inline void OdePlaneGeom::set_params(LVecBase4f const &params);

1146 10 get_params 0 4 1299 24 OdePlaneGeom::get_params 0 1 543 0
55
inline LVecBase4f OdePlaneGeom::get_params(void) const;

1147 15 get_point_depth 0 4 1299 29 OdePlaneGeom::get_point_depth 0 2 544 545 0
145
inline dReal OdePlaneGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdePlaneGeom::get_point_depth(LPoint3f const &p) const;

1148 14 get_class_type 0 4 1299 28 OdePlaneGeom::get_class_type 0 1 546 0
53
static TypeHandle OdePlaneGeom::get_class_type(void);

1149 16 OdeQuadTreeSpace 0 4 1300 34 OdeQuadTreeSpace::OdeQuadTreeSpace 0 2 547 548 0
224
OdeQuadTreeSpace::OdeQuadTreeSpace(LPoint3f const &center, LVecBase3f const &extents, int const depth);
OdeQuadTreeSpace::OdeQuadTreeSpace(OdeSpace &space, LPoint3f const &center, LVecBase3f const &extents, int const depth);

1150 14 get_class_type 0 4 1300 32 OdeQuadTreeSpace::get_class_type 0 1 549 0
57
static TypeHandle OdeQuadTreeSpace::get_class_type(void);

1151 10 OdeRayGeom 0 4 1301 22 OdeRayGeom::OdeRayGeom 0 2 550 551 0
92
OdeRayGeom::OdeRayGeom(dReal length);
OdeRayGeom::OdeRayGeom(OdeSpace &space, dReal length);

1152 10 set_length 0 4 1301 22 OdeRayGeom::set_length 0 1 552 0
49
inline void OdeRayGeom::set_length(dReal length);

1153 10 get_length 0 4 1301 22 OdeRayGeom::get_length 0 1 553 0
42
inline dReal OdeRayGeom::get_length(void);

1154 3 set 0 4 1301 15 OdeRayGeom::set 0 2 554 555 0
165
inline void OdeRayGeom::set(dReal px, dReal py, dReal pz, dReal dx, dReal dy, dReal dz);
inline void OdeRayGeom::set(LVecBase3f const &start, LVecBase3f const &dir);

1155 3 get 0 4 1301 15 OdeRayGeom::get 0 1 556 0
70
inline void OdeRayGeom::get(LVecBase3f &start, LVecBase3f &dir) const;

1156 9 get_start 0 4 1301 21 OdeRayGeom::get_start 0 1 557 0
52
inline LVecBase3f OdeRayGeom::get_start(void) const;

1157 13 get_direction 0 4 1301 25 OdeRayGeom::get_direction 0 1 558 0
56
inline LVecBase3f OdeRayGeom::get_direction(void) const;

1158 10 set_params 0 4 1301 22 OdeRayGeom::set_params 0 1 559 0
73
inline void OdeRayGeom::set_params(int first_contact, int backface_cull);

1159 10 get_params 0 4 1301 22 OdeRayGeom::get_params 0 0 0
81
inline void OdeRayGeom::get_params(int &first_contact, int &backface_cull) const;

1160 17 get_first_contact 0 4 1301 29 OdeRayGeom::get_first_contact 0 1 560 0
53
inline int OdeRayGeom::get_first_contact(void) const;

1161 17 get_backface_cull 0 4 1301 29 OdeRayGeom::get_backface_cull 0 1 561 0
53
inline int OdeRayGeom::get_backface_cull(void) const;

1162 15 set_closest_hit 0 4 1301 27 OdeRayGeom::set_closest_hit 0 1 562 0
57
inline void OdeRayGeom::set_closest_hit(int closest_hit);

1163 15 get_closest_hit 0 4 1301 27 OdeRayGeom::get_closest_hit 0 1 563 0
45
inline int OdeRayGeom::get_closest_hit(void);

1164 14 get_class_type 0 4 1301 26 OdeRayGeom::get_class_type 0 1 564 0
51
static TypeHandle OdeRayGeom::get_class_type(void);

1165 14 OdeSimpleSpace 0 4 1302 30 OdeSimpleSpace::OdeSimpleSpace 0 2 565 566 0
86
OdeSimpleSpace::OdeSimpleSpace(void);
OdeSimpleSpace::OdeSimpleSpace(OdeSpace &space);

1166 14 get_class_type 0 4 1302 30 OdeSimpleSpace::get_class_type 0 1 567 0
55
static TypeHandle OdeSimpleSpace::get_class_type(void);

1167 14 OdeSliderJoint 0 4 1303 30 OdeSliderJoint::OdeSliderJoint 0 2 568 569 0
125
OdeSliderJoint::OdeSliderJoint(OdeWorld &world);
OdeSliderJoint::OdeSliderJoint(OdeWorld &world, OdeJointGroup &joint_group);

1168 8 set_axis 0 4 1303 24 OdeSliderJoint::set_axis 0 2 570 571 0
126
inline void OdeSliderJoint::set_axis(dReal x, dReal y, dReal z);
inline void OdeSliderJoint::set_axis(LVecBase3f const &axis);

1169 14 set_axis_delta 0 4 1303 30 OdeSliderJoint::set_axis_delta 0 2 572 573 0
191
inline void OdeSliderJoint::set_axis_delta(dReal x, dReal y, dReal z, dReal ax, dReal ay, dReal az);
inline void OdeSliderJoint::set_axis_delta(LVecBase3f const &axis, LVecBase3f const &vec);

1170 9 add_force 0 4 1303 25 OdeSliderJoint::add_force 0 1 574 0
51
inline void OdeSliderJoint::add_force(dReal force);

1171 12 get_position 0 4 1303 28 OdeSliderJoint::get_position 0 1 575 0
54
inline dReal OdeSliderJoint::get_position(void) const;

1172 17 get_position_rate 0 4 1303 33 OdeSliderJoint::get_position_rate 0 1 576 0
59
inline dReal OdeSliderJoint::get_position_rate(void) const;

1173 8 get_axis 0 4 1303 24 OdeSliderJoint::get_axis 0 1 577 0
55
inline LVecBase3f OdeSliderJoint::get_axis(void) const;

1174 17 set_param_lo_stop 0 4 1303 33 OdeSliderJoint::set_param_lo_stop 0 1 578 0
57
inline void OdeSliderJoint::set_param_lo_stop(dReal val);

1175 17 set_param_hi_stop 0 4 1303 33 OdeSliderJoint::set_param_hi_stop 0 1 579 0
57
inline void OdeSliderJoint::set_param_hi_stop(dReal val);

1176 13 set_param_vel 0 4 1303 29 OdeSliderJoint::set_param_vel 0 1 580 0
53
inline void OdeSliderJoint::set_param_vel(dReal val);

1177 15 set_param_f_max 0 4 1303 31 OdeSliderJoint::set_param_f_max 0 1 581 0
55
inline void OdeSliderJoint::set_param_f_max(dReal val);

1178 22 set_param_fudge_factor 0 4 1303 38 OdeSliderJoint::set_param_fudge_factor 0 1 582 0
62
inline void OdeSliderJoint::set_param_fudge_factor(dReal val);

1179 16 set_param_bounce 0 4 1303 32 OdeSliderJoint::set_param_bounce 0 1 583 0
56
inline void OdeSliderJoint::set_param_bounce(dReal val);

1180 13 set_param_CFM 0 4 1303 29 OdeSliderJoint::set_param_CFM 0 1 584 0
53
inline void OdeSliderJoint::set_param_CFM(dReal val);

1181 18 set_param_stop_ERP 0 4 1303 34 OdeSliderJoint::set_param_stop_ERP 0 1 585 0
58
inline void OdeSliderJoint::set_param_stop_ERP(dReal val);

1182 18 set_param_stop_CFM 0 4 1303 34 OdeSliderJoint::set_param_stop_CFM 0 1 586 0
58
inline void OdeSliderJoint::set_param_stop_CFM(dReal val);

1183 17 get_param_lo_stop 0 4 1303 33 OdeSliderJoint::get_param_lo_stop 0 1 587 0
59
inline dReal OdeSliderJoint::get_param_lo_stop(void) const;

1184 17 get_param_hi_stop 0 4 1303 33 OdeSliderJoint::get_param_hi_stop 0 1 588 0
59
inline dReal OdeSliderJoint::get_param_hi_stop(void) const;

1185 13 get_param_vel 0 4 1303 29 OdeSliderJoint::get_param_vel 0 1 589 0
55
inline dReal OdeSliderJoint::get_param_vel(void) const;

1186 15 get_param_f_max 0 4 1303 31 OdeSliderJoint::get_param_f_max 0 1 590 0
57
inline dReal OdeSliderJoint::get_param_f_max(void) const;

1187 22 get_param_fudge_factor 0 4 1303 38 OdeSliderJoint::get_param_fudge_factor 0 1 591 0
64
inline dReal OdeSliderJoint::get_param_fudge_factor(void) const;

1188 16 get_param_bounce 0 4 1303 32 OdeSliderJoint::get_param_bounce 0 1 592 0
58
inline dReal OdeSliderJoint::get_param_bounce(void) const;

1189 13 get_param_CFM 0 4 1303 29 OdeSliderJoint::get_param_CFM 0 1 593 0
55
inline dReal OdeSliderJoint::get_param_CFM(void) const;

1190 18 get_param_stop_ERP 0 4 1303 34 OdeSliderJoint::get_param_stop_ERP 0 1 594 0
60
inline dReal OdeSliderJoint::get_param_stop_ERP(void) const;

1191 18 get_param_stop_CFM 0 4 1303 34 OdeSliderJoint::get_param_stop_CFM 0 1 595 0
60
inline dReal OdeSliderJoint::get_param_stop_CFM(void) const;

1192 14 get_class_type 0 4 1303 30 OdeSliderJoint::get_class_type 0 1 596 0
55
static TypeHandle OdeSliderJoint::get_class_type(void);

1193 13 OdeSphereGeom 0 4 1304 28 OdeSphereGeom::OdeSphereGeom 0 3 597 598 599 0
149
OdeSphereGeom::OdeSphereGeom(dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeSpace &space, dReal radius);
OdeSphereGeom::OdeSphereGeom(OdeGeom &geom);

1194 10 set_radius 0 4 1304 25 OdeSphereGeom::set_radius 0 1 600 0
52
inline void OdeSphereGeom::set_radius(dReal radius);

1195 10 get_radius 0 4 1304 25 OdeSphereGeom::get_radius 0 1 601 0
51
inline dReal OdeSphereGeom::get_radius(void) const;

1196 15 get_point_depth 0 4 1304 30 OdeSphereGeom::get_point_depth 0 2 602 603 0
147
inline dReal OdeSphereGeom::get_point_depth(dReal x, dReal y, dReal z) const;
inline dReal OdeSphereGeom::get_point_depth(LPoint3f const &p) const;

1197 14 get_class_type 0 4 1304 29 OdeSphereGeom::get_class_type 0 1 604 0
54
static TypeHandle OdeSphereGeom::get_class_type(void);

1198 14 OdeTriMeshData 0 4 1305 30 OdeTriMeshData::OdeTriMeshData 0 1 605 63
// Private copy constructor, shouldn't be copying these objects
80
OdeTriMeshData::OdeTriMeshData(NodePath const &model, bool use_normals = false);

1199 7 destroy 0 4 1305 23 OdeTriMeshData::destroy 0 1 606 0
35
void OdeTriMeshData::destroy(void);

1200 5 write 0 6 1305 21 OdeTriMeshData::write 0 1 607 0
89
virtual void OdeTriMeshData::write(ostream &out = ::cout, unsigned int indent = 0) const;

1201 11 write_faces 0 4 1305 27 OdeTriMeshData::write_faces 0 1 608 0
53
void OdeTriMeshData::write_faces(ostream &out) const;

1202 14 get_class_type 0 4 1305 30 OdeTriMeshData::get_class_type 0 1 609 0
55
static TypeHandle OdeTriMeshData::get_class_type(void);

1203 14 OdeTriMeshGeom 0 4 1307 30 OdeTriMeshGeom::OdeTriMeshGeom 0 3 610 611 612 162
/* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */
184
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeSpace &space, OdeTriMeshData &data);
OdeTriMeshGeom::OdeTriMeshGeom(OdeTriMeshGeom const &copy);

1204 7 destroy 0 4 1307 23 OdeTriMeshGeom::destroy 0 1 613 0
35
void OdeTriMeshGeom::destroy(void);

1205 17 set_tri_mesh_data 0 4 1307 33 OdeTriMeshGeom::set_tri_mesh_data 0 1 614 0
68
inline void OdeTriMeshGeom::set_tri_mesh_data(OdeTriMeshData &data);

1206 17 get_tri_mesh_data 0 4 1307 33 OdeTriMeshGeom::get_tri_mesh_data 0 1 615 0
81
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_tri_mesh_data(void) const;

1207 8 set_data 0 4 1307 24 OdeTriMeshGeom::set_data 0 1 616 0
59
inline void OdeTriMeshGeom::set_data(OdeTriMeshData &data);

1208 8 get_data 0 4 1307 24 OdeTriMeshGeom::get_data 0 1 617 0
72
inline PointerTo< OdeTriMeshData > OdeTriMeshGeom::get_data(void) const;

1209 9 enable_TC 0 4 1307 25 OdeTriMeshGeom::enable_TC 0 1 618 0
66
inline void OdeTriMeshGeom::enable_TC(int geom_class, int enable);

1210 13 is_TC_enabled 0 4 1307 29 OdeTriMeshGeom::is_TC_enabled 0 1 619 0
63
inline int OdeTriMeshGeom::is_TC_enabled(int geom_class) const;

1211 14 clear_TC_cache 0 4 1307 30 OdeTriMeshGeom::clear_TC_cache 0 1 620 0
64
inline void OdeTriMeshGeom::clear_TC_cache(OdeGeom const &geom);

1212 12 get_triangle 0 4 1307 28 OdeTriMeshGeom::get_triangle 0 1 621 0
105
inline void OdeTriMeshGeom::get_triangle(int face_index, LPoint3f &v0, LPoint3f &v1, LPoint3f &v2) const;

1213 9 get_point 0 4 1307 25 OdeTriMeshGeom::get_point 0 1 622 0
82
inline LPoint3f OdeTriMeshGeom::get_point(int face_index, dReal u, dReal v) const;

1214 17 get_num_triangles 0 4 1307 33 OdeTriMeshGeom::get_num_triangles 0 1 623 0
57
inline int OdeTriMeshGeom::get_num_triangles(void) const;

1215 14 get_class_type 0 4 1307 30 OdeTriMeshGeom::get_class_type 0 1 624 0
55
static TypeHandle OdeTriMeshGeom::get_class_type(void);

1216 17 OdeUniversalJoint 0 4 1308 36 OdeUniversalJoint::OdeUniversalJoint 0 2 625 626 0
137
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world);
OdeUniversalJoint::OdeUniversalJoint(OdeWorld &world, OdeJointGroup &joint_group);

1217 10 set_anchor 0 4 1308 29 OdeUniversalJoint::set_anchor 0 2 627 628 0
138
inline void OdeUniversalJoint::set_anchor(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_anchor(LVecBase3f const &anchor);

1218 9 set_axis1 0 4 1308 28 OdeUniversalJoint::set_axis1 0 2 629 630 0
134
inline void OdeUniversalJoint::set_axis1(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis1(LVecBase3f const &axis);

1219 9 set_axis2 0 4 1308 28 OdeUniversalJoint::set_axis2 0 2 631 632 0
134
inline void OdeUniversalJoint::set_axis2(dReal x, dReal y, dReal z);
inline void OdeUniversalJoint::set_axis2(LVecBase3f const &axis);

1220 11 add_torques 0 4 1308 30 OdeUniversalJoint::add_torques 0 1 633 0
73
inline void OdeUniversalJoint::add_torques(dReal torque1, dReal torque2);

1221 10 get_anchor 0 4 1308 29 OdeUniversalJoint::get_anchor 0 1 634 0
60
inline LVecBase3f OdeUniversalJoint::get_anchor(void) const;

1222 11 get_anchor2 0 4 1308 30 OdeUniversalJoint::get_anchor2 0 1 635 0
61
inline LVecBase3f OdeUniversalJoint::get_anchor2(void) const;

1223 9 get_axis1 0 4 1308 28 OdeUniversalJoint::get_axis1 0 1 636 0
59
inline LVecBase3f OdeUniversalJoint::get_axis1(void) const;

1224 9 get_axis2 0 4 1308 28 OdeUniversalJoint::get_axis2 0 1 637 0
59
inline LVecBase3f OdeUniversalJoint::get_axis2(void) const;

1225 10 get_angle1 0 4 1308 29 OdeUniversalJoint::get_angle1 0 1 638 0
55
inline dReal OdeUniversalJoint::get_angle1(void) const;

1226 10 get_angle2 0 4 1308 29 OdeUniversalJoint::get_angle2 0 1 639 0
55
inline dReal OdeUniversalJoint::get_angle2(void) const;

1227 15 get_angle1_rate 0 4 1308 34 OdeUniversalJoint::get_angle1_rate 0 1 640 0
60
inline dReal OdeUniversalJoint::get_angle1_rate(void) const;

1228 15 get_angle2_rate 0 4 1308 34 OdeUniversalJoint::get_angle2_rate 0 1 641 0
60
inline dReal OdeUniversalJoint::get_angle2_rate(void) const;

1229 17 set_param_lo_stop 0 4 1308 36 OdeUniversalJoint::set_param_lo_stop 0 1 642 0
70
inline void OdeUniversalJoint::set_param_lo_stop(int axis, dReal val);

1230 17 set_param_hi_stop 0 4 1308 36 OdeUniversalJoint::set_param_hi_stop 0 1 643 0
70
inline void OdeUniversalJoint::set_param_hi_stop(int axis, dReal val);

1231 13 set_param_vel 0 4 1308 32 OdeUniversalJoint::set_param_vel 0 1 644 0
66
inline void OdeUniversalJoint::set_param_vel(int axis, dReal val);

1232 15 set_param_f_max 0 4 1308 34 OdeUniversalJoint::set_param_f_max 0 1 645 0
68
inline void OdeUniversalJoint::set_param_f_max(int axis, dReal val);

1233 22 set_param_fudge_factor 0 4 1308 41 OdeUniversalJoint::set_param_fudge_factor 0 1 646 0
75
inline void OdeUniversalJoint::set_param_fudge_factor(int axis, dReal val);

1234 16 set_param_bounce 0 4 1308 35 OdeUniversalJoint::set_param_bounce 0 1 647 0
69
inline void OdeUniversalJoint::set_param_bounce(int axis, dReal val);

1235 13 set_param_CFM 0 4 1308 32 OdeUniversalJoint::set_param_CFM 0 1 648 0
66
inline void OdeUniversalJoint::set_param_CFM(int axis, dReal val);

1236 18 set_param_stop_ERP 0 4 1308 37 OdeUniversalJoint::set_param_stop_ERP 0 1 649 0
71
inline void OdeUniversalJoint::set_param_stop_ERP(int axis, dReal val);

1237 18 set_param_stop_CFM 0 4 1308 37 OdeUniversalJoint::set_param_stop_CFM 0 1 650 0
71
inline void OdeUniversalJoint::set_param_stop_CFM(int axis, dReal val);

1238 17 get_param_lo_stop 0 4 1308 36 OdeUniversalJoint::get_param_lo_stop 0 1 651 0
66
inline dReal OdeUniversalJoint::get_param_lo_stop(int axis) const;

1239 17 get_param_hi_stop 0 4 1308 36 OdeUniversalJoint::get_param_hi_stop 0 1 652 0
66
inline dReal OdeUniversalJoint::get_param_hi_stop(int axis) const;

1240 13 get_param_vel 0 4 1308 32 OdeUniversalJoint::get_param_vel 0 1 653 0
62
inline dReal OdeUniversalJoint::get_param_vel(int axis) const;

1241 15 get_param_f_max 0 4 1308 34 OdeUniversalJoint::get_param_f_max 0 1 654 0
64
inline dReal OdeUniversalJoint::get_param_f_max(int axis) const;

1242 22 get_param_fudge_factor 0 4 1308 41 OdeUniversalJoint::get_param_fudge_factor 0 1 655 0
71
inline dReal OdeUniversalJoint::get_param_fudge_factor(int axis) const;

1243 16 get_param_bounce 0 4 1308 35 OdeUniversalJoint::get_param_bounce 0 1 656 0
65
inline dReal OdeUniversalJoint::get_param_bounce(int axis) const;

1244 13 get_param_CFM 0 4 1308 32 OdeUniversalJoint::get_param_CFM 0 1 657 0
62
inline dReal OdeUniversalJoint::get_param_CFM(int axis) const;

1245 18 get_param_stop_ERP 0 4 1308 37 OdeUniversalJoint::get_param_stop_ERP 0 1 658 0
67
inline dReal OdeUniversalJoint::get_param_stop_ERP(int axis) const;

1246 18 get_param_stop_CFM 0 4 1308 37 OdeUniversalJoint::get_param_stop_CFM 0 1 659 0
67
inline dReal OdeUniversalJoint::get_param_stop_CFM(int axis) const;

1247 14 get_class_type 0 4 1308 33 OdeUniversalJoint::get_class_type 0 1 660 0
58
static TypeHandle OdeUniversalJoint::get_class_type(void);

1248 20 get_connecting_joint 0 4 1309 29 OdeUtil::get_connecting_joint 0 1 663 60
/**
 * Returns the joint that connects the given bodies.
 */
90
static OdeJoint OdeUtil::get_connecting_joint(OdeBody const &body1, OdeBody const &body2);

1249 25 get_connecting_joint_list 0 4 1309 34 OdeUtil::get_connecting_joint_list 0 1 664 74
/**
 * Returns a collection of joints connecting the specified bodies.
 */
105
static OdeJointCollection OdeUtil::get_connecting_joint_list(OdeBody const &body1, OdeBody const &body2);

1250 13 are_connected 0 4 1309 22 OdeUtil::are_connected 0 1 665 90
/**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */
78
static int OdeUtil::are_connected(OdeBody const &body1, OdeBody const &body2);

1251 23 are_connected_excluding 0 4 1309 32 OdeUtil::are_connected_excluding 0 1 666 404
/**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */
110
static int OdeUtil::are_connected_excluding(OdeBody const &body1, OdeBody const &body2, int const joint_type);

1252 7 collide 0 4 1309 16 OdeUtil::collide 0 1 667 152
/**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */
135
static PointerTo< OdeCollisionEntry > OdeUtil::collide(OdeGeom const &geom1, OdeGeom const &geom2, short int const max_contacts = 150);

1253 8 collide2 0 4 1309 17 OdeUtil::collide2 0 1 668 0
108
static int OdeUtil::collide2(OdeGeom const &geom1, OdeGeom const &geom2, PyObject *arg, PyObject *callback);

1254 13 space_to_geom 0 4 1309 22 OdeUtil::space_to_geom 0 1 669 0
61
static OdeGeom OdeUtil::space_to_geom(OdeSpace const &space);

1255 12 get_infinity 0 4 1309 21 OdeUtil::get_infinity 0 1 670 73
// RAU we can't access OC_infinity as constants are not exposed in python
41
static dReal OdeUtil::get_infinity(void);

1256 13 rand_get_seed 0 4 1309 22 OdeUtil::rand_get_seed 0 1 671 0
40
static int OdeUtil::rand_get_seed(void);

1257 13 rand_set_seed 0 4 1309 22 OdeUtil::rand_set_seed 0 1 672 0
42
static void OdeUtil::rand_set_seed(int s);

1258 7 OdeUtil 0 4 1309 16 OdeUtil::OdeUtil 0 2 661 662 0
92
inline OdeUtil::OdeUtil(void) = default;
inline OdeUtil::OdeUtil(OdeUtil const &) = default;

1259 8 ~OdeUtil 0 4 1309 17 OdeUtil::~OdeUtil 0 0 0
24
OdeUtil::~OdeUtil(void);

672
1 0 0 7 10 1310 0 0 0 0 
2 0 0 7 10 1310 0 0 0 1 4 copy 1 1311  
3 0 0 4 11 1313 0 0 0 1 4 this 3 1310  
4 0 0 6 12 1314 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeWorld does not point to a valid
 * world.  It is an error to call a method on an empty world.  Note that an
 * empty OdeWorld also evaluates to False.
 */ 1 4 this 3 1311  
5 0 0 6 13 1315 0 0 43 /**
 * Returns the underlying dWorldID.
 */ 1 4 this 3 1311  
6 0 0 4 14 1313 0 0 0 2 4 this 3 1310  3 vec 1 1317  
7 0 0 4 14 1313 0 0 0 4 4 this 3 1310  1 x 1 1320  1 y 1 1320  1 z 1 1320  
8 0 0 4 15 1313 0 0 0 2 4 this 3 1310  3 erp 1 1320  
9 0 0 4 16 1313 0 0 0 2 4 this 3 1310  3 cfm 1 1320  
10 0 0 4 17 1313 0 0 0 2 4 this 3 1310  3 num 1 1322  
11 0 0 4 18 1313 0 0 0 2 4 this 3 1310  15 over_relaxation 1 1320  
12 0 0 4 19 1313 0 0 0 2 4 this 3 1310  3 vel 1 1320  
13 0 0 4 20 1313 0 0 0 2 4 this 3 1310  5 depth 1 1320  
14 0 0 4 21 1313 0 0 0 2 4 this 3 1310  16 linear_threshold 1 1320  
15 0 0 4 22 1313 0 0 0 2 4 this 3 1310  17 angular_threshold 1 1320  
16 0 0 4 23 1313 0 0 0 2 4 this 3 1310  5 steps 1 1322  
17 0 0 4 24 1313 0 0 0 2 4 this 3 1310  4 time 1 1320  
18 0 0 4 25 1313 0 0 0 2 4 this 3 1310  15 do_auto_disable 1 1322  
19 0 0 7 26 1323 0 0 0 1 4 this 3 1311  
20 0 0 6 27 1320 0 0 0 1 4 this 3 1311  
21 0 0 6 28 1320 0 0 0 1 4 this 3 1311  
22 0 0 6 29 1322 0 0 0 1 4 this 3 1311  
23 0 0 6 30 1320 0 0 0 1 4 this 3 1311  
24 0 0 6 31 1320 0 0 0 1 4 this 3 1311  
25 0 0 6 32 1320 0 0 0 1 4 this 3 1311  
26 0 0 6 33 1320 0 0 0 1 4 this 3 1311  
27 0 0 6 34 1320 0 0 0 1 4 this 3 1311  
28 0 0 6 35 1322 0 0 0 1 4 this 3 1311  
29 0 0 6 36 1320 0 0 0 1 4 this 3 1311  
30 0 0 6 37 1322 0 0 0 1 4 this 3 1311  
31 0 0 7 38 1323 0 0 0 3 4 this 3 1310  8 stepsize 1 1320  7 impulse 1 1317  
32 0 0 7 38 1323 0 0 0 5 4 this 3 1310  8 stepsize 1 1320  2 ix 1 1320  2 iy 1 1320  2 iz 1 1320  
33 0 0 4 39 1313 0 0 0 2 4 this 3 1310  8 stepsize 1 1320  
34 0 0 4 40 1313 0 0 0 2 4 this 3 1310  8 stepsize 1 1320  
35 0 0 6 41 1322 0 0 0 2 4 this 3 1311  5 other 1 1311  
36 0 0 4 42 1313 0 0 0 2 4 this 3 1310  12 num_surfaces 1 1324  
37 0 0 4 43 1313 0 0 56 // void assign_surface_body(OdeBody& body, int surface); 3 4 this 3 1310  4 body 1 1326  7 surface 1 1322  
38 0 0 4 44 1313 0 0 0 10 4 this 3 1310  4 pos1 1 1324  4 pos2 1 1324  2 mu 1 1320  6 bounce 1 1320  10 bounce_vel 1 1320  8 soft_erp 1 1320  8 soft_cfm 1 1320  4 slip 1 1320  6 dampen 1 1320  
39 0 0 6 45 1321 0 0 0 3 4 this 3 1310  2 dt 1 1321  4 body 1 1326  
40 0 0 7 47 1328 0 0 0 0 
41 0 0 6 46 1314 0 0 0 1 4 this 3 1311  
42 0 0 7 49 1329 0 0 0 0 
43 0 0 4 50 1313 0 0 0 1 4 this 3 1329  
44 0 0 6 51 1332 0 0 0 1 4 this 3 1330  
45 0 0 4 52 1313 0 0 0 1 4 this 3 1330  
46 0 0 6 53 1322 0 0 0 2 4 this 3 1330  5 other 1 1330  
47 0 0 7 54 1328 0 0 0 0 
48 0 0 7 61 1334 722 0 0 0 
49 0 0 7 57 1339 0 0 0 1 4 this 3 1337  
50 0 0 7 58 1339 0 0 0 1 4 this 3 1337  
51 0 0 7 59 1339 0 0 0 1 4 this 3 1337  
52 0 0 7 60 1339 0 0 0 1 4 this 3 1337  
53 0 0 4 65 1313 0 0 0 1 4 this 3 1340  
54 0 0 6 66 1314 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeJoint does not point to a valid
 * joint.  It is an error to call a method on an empty joint.  Note that an
 * empty OdeJoint also evaluates to False.
 */ 1 4 this 3 1341  
55 0 0 6 67 1343 0 0 43 /**
 * Returns the underlying dJointID.
 */ 1 4 this 3 1341  
56 0 0 6 68 1322 0 0 30 /* INLINE void *get_data(); */ 1 4 this 3 1341  
57 0 0 7 69 1326 0 0 0 2 4 this 3 1341  5 index 1 1322  
58 0 0 4 70 1313 0 0 0 2 4 this 3 1340  6 param0 0 1334  
59 0 0 4 70 1313 0 0 0 2 4 this 3 1340  4 flag 1 1314  
60 0 0 6 71 1334 0 0 0 1 4 this 3 1340  
61 0 0 4 72 1313 0 0 0 3 4 this 3 1340  5 body1 1 1345  5 body2 1 1345  
62 0 0 4 73 1313 0 0 175 /**
 * Attaches two OdeBody objects to this joint.  Order is important.  Consider
 * using the OdeJoint::attach extension function if you're using the Python
 * interface.
 */ 3 4 this 3 1340  5 body1 1 1345  5 body2 1 1345  
63 0 0 4 74 1313 0 0 237 /**
 * Attaches a single OdeBody to this joint at the specified index (0 or 1).
 * The other index will be set to the environment (null). Consider using the
 * OdeJoint::attach extension function if you're using the Python interface.
 */ 3 4 this 3 1340  4 body 1 1345  5 index 1 1322  
64 0 0 4 75 1313 0 0 0 1 4 this 3 1340  
65 0 0 4 76 1313 0 0 0 3 4 this 3 1341  3 out 1 1347  6 indent 1 1349  
66 0 0 6 77 1322 0 0 0 2 4 this 3 1341  5 other 1 1341  
67 0 0 6 78 1314 0 0 0 2 4 this 3 1341  5 other 1 1341  
68 0 0 6 80 1350 0 0 0 1 4 this 3 1341  
69 0 0 7 81 1353 0 0 0 1 4 this 3 1341  
70 0 0 7 82 1354 0 0 0 1 4 this 3 1341  
71 0 0 7 83 1355 0 0 0 1 4 this 3 1341  
72 0 0 7 84 1356 0 0 0 1 4 this 3 1341  
73 0 0 7 85 1357 0 0 0 1 4 this 3 1341  
74 0 0 7 86 1358 0 0 0 1 4 this 3 1341  
75 0 0 7 87 1359 0 0 0 1 4 this 3 1341  
76 0 0 7 88 1360 0 0 0 1 4 this 3 1341  
77 0 0 7 89 1361 0 0 0 1 4 this 3 1341  
78 0 0 7 90 1362 0 0 0 1 4 this 3 1341  
79 0 0 7 91 1363 0 0 0 1 4 this 3 1341  
80 0 0 7 92 1328 0 0 0 0 
81 0 0 6 79 1314 0 0 0 1 4 this 3 1341  
82 0 0 7 94 1361 0 0 0 1 5 world 1 1310  
83 0 0 7 94 1361 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
84 0 0 4 95 1313 0 0 0 2 4 this 3 1361  3 num 1 1322  
85 0 0 4 96 1313 0 0 0 4 4 this 3 1361  4 anum 1 1322  3 rel 1 1322  4 axis 1 1317  
86 0 0 4 96 1313 0 0 0 6 4 this 3 1361  4 anum 1 1322  3 rel 1 1322  1 x 1 1320  1 y 1 1320  1 z 1 1320  
87 0 0 4 97 1313 0 0 0 3 4 this 3 1361  4 anum 1 1322  5 angle 1 1320  
88 0 0 4 98 1313 0 0 0 2 4 this 3 1361  4 mode 1 1322  
89 0 0 4 99 1313 0 0 0 4 4 this 3 1361  7 torque1 1 1320  7 torque2 1 1320  7 torque3 1 1320  
90 0 0 6 100 1322 0 0 0 1 4 this 3 1364  
91 0 0 7 101 1323 0 0 0 2 4 this 3 1364  4 anum 1 1322  
92 0 0 6 103 1322 0 0 0 2 4 this 3 1364  4 anum 1 1322  
93 0 0 6 104 1320 0 0 0 2 4 this 3 1364  4 anum 1 1322  
94 0 0 6 105 1320 0 0 0 2 4 this 3 1364  4 anum 1 1322  
95 0 0 6 106 1322 0 0 0 1 4 this 3 1364  
96 0 0 4 107 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
97 0 0 4 108 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
98 0 0 4 109 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
99 0 0 4 110 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
100 0 0 4 111 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
101 0 0 4 112 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
102 0 0 4 113 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
103 0 0 4 114 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
104 0 0 4 115 1313 0 0 0 3 4 this 3 1361  4 axis 1 1322  3 val 1 1320  
105 0 0 6 116 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
106 0 0 6 117 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
107 0 0 6 118 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
108 0 0 6 119 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
109 0 0 6 120 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
110 0 0 6 121 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
111 0 0 6 122 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
112 0 0 6 123 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
113 0 0 6 124 1320 0 0 0 2 4 this 3 1364  4 axis 1 1322  
114 0 0 7 125 1328 0 0 0 0 
115 0 0 7 127 1353 0 0 0 1 5 world 1 1310  
116 0 0 7 127 1353 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
117 0 0 4 128 1313 0 0 0 2 4 this 3 1353  6 anchor 1 1317  
118 0 0 4 128 1313 0 0 0 4 4 this 3 1353  1 x 1 1320  1 y 1 1320  1 z 1 1320  
119 0 0 4 129 1313 0 0 0 2 4 this 3 1353  6 anchor 1 1317  
120 0 0 4 129 1313 0 0 0 4 4 this 3 1353  1 x 1 1320  1 y 1 1320  1 z 1 1320  
121 0 0 7 130 1323 0 0 0 1 4 this 3 1366  
122 0 0 7 131 1323 0 0 0 1 4 this 3 1366  
123 0 0 7 132 1328 0 0 0 0 
124 0 0 7 135 1368 0 0 0 0 
125 0 0 7 135 1368 0 0 0 1 4 copy 1 1369  
126 0 0 6 136 1322 0 0 0 1 4 this 3 1368  
127 0 0 4 137 1313 0 0 0 1 4 this 3 1368  
128 0 0 4 138 1313 0 0 0 4 4 this 3 1368  7 themass 1 1320  6 center 1 1317  1 r 1 1371  
129 0 0 4 138 1313 0 0 0 11 4 this 3 1368  7 themass 1 1320  3 cgx 1 1320  3 cgy 1 1320  3 cgz 1 1320  3 I11 1 1320  3 I22 1 1320  3 I33 1 1320  3 I12 1 1320  3 I13 1 1320  3 I23 1 1320  
130 0 0 4 139 1313 0 0 0 3 4 this 3 1368  7 density 1 1320  6 radius 1 1320  
131 0 0 4 140 1313 0 0 0 3 4 this 3 1368  10 total_mass 1 1320  6 radius 1 1320  
132 0 0 4 141 1313 0 0 0 5 4 this 3 1368  7 density 1 1320  9 direction 1 1322  6 radius 1 1320  6 length 1 1320  
133 0 0 4 142 1313 0 0 0 5 4 this 3 1368  10 total_mass 1 1320  9 direction 1 1322  6 radius 1 1320  6 length 1 1320  
134 0 0 4 143 1313 0 0 0 5 4 this 3 1368  7 density 1 1320  9 direction 1 1322  6 radius 1 1320  6 length 1 1320  
135 0 0 4 144 1313 0 0 0 5 4 this 3 1368  10 total_mass 1 1320  9 direction 1 1322  6 radius 1 1320  6 length 1 1320  
136 0 0 4 145 1313 0 0 0 3 4 this 3 1368  7 density 1 1320  4 size 1 1317  
137 0 0 4 145 1313 0 0 0 5 4 this 3 1368  7 density 1 1320  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
138 0 0 4 146 1313 0 0 0 3 4 this 3 1368  10 total_mass 1 1320  4 size 1 1317  
139 0 0 4 146 1313 0 0 0 5 4 this 3 1368  10 total_mass 1 1320  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
140 0 0 4 147 1313 0 0 0 2 4 this 3 1368  7 newmass 1 1320  
141 0 0 4 148 1313 0 0 0 2 4 this 3 1368  3 pos 1 1317  
142 0 0 4 148 1313 0 0 0 4 4 this 3 1368  1 x 1 1320  1 y 1 1320  1 z 1 1320  
143 0 0 4 149 1313 0 0 0 2 4 this 3 1368  1 r 1 1371  
144 0 0 4 150 1313 0 0 0 2 4 this 3 1368  5 other 1 1368  
145 0 0 6 151 1320 0 0 0 1 4 this 3 1369  
146 0 0 7 152 1375 0 0 0 1 4 this 3 1369  
147 0 0 7 153 1376 0 0 0 1 4 this 3 1369  
148 0 0 4 154 1313 0 0 0 3 4 this 3 1369  3 out 1 1347  6 indent 1 1349  
149 0 0 7 155 1328 0 0 0 0 
150 0 0 7 157 1326 0 0 0 1 5 world 1 1310  
151 0 0 4 158 1313 0 0 0 1 4 this 3 1326  
152 0 0 6 159 1314 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeBody does not point to a valid
 * body.  It is an error to call a method on an empty body.  Note that an
 * empty OdeBody also evaluates to False.
 */ 1 4 this 3 1345  
153 0 0 6 160 1377 0 0 42 /**
 * Returns the underlying dBodyID.
 */ 1 4 this 3 1345  
154 0 0 4 161 1313 0 0 0 2 4 this 3 1326  16 linear_threshold 1 1320  
155 0 0 4 162 1313 0 0 0 2 4 this 3 1326  17 angular_threshold 1 1320  
156 0 0 4 163 1313 0 0 0 2 4 this 3 1326  5 steps 1 1322  
157 0 0 4 164 1313 0 0 0 2 4 this 3 1326  4 time 1 1320  
158 0 0 4 165 1313 0 0 0 2 4 this 3 1326  15 do_auto_disable 1 1322  
159 0 0 4 166 1313 0 0 0 1 4 this 3 1326  
160 0 0 4 167 1313 0 0 0 2 4 this 3 1326  4 data 1 1350  
161 0 0 4 168 1313 0 0 0 2 4 this 3 1326  3 pos 1 1317  
162 0 0 4 168 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
163 0 0 4 169 1313 0 0 0 2 4 this 3 1326  1 r 1 1371  
164 0 0 4 170 1313 0 0 0 2 4 this 3 1326  1 q 1 1379  
165 0 0 4 171 1313 0 0 0 2 4 this 3 1326  3 vel 1 1317  
166 0 0 4 171 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
167 0 0 4 172 1313 0 0 0 2 4 this 3 1326  3 vel 1 1317  
168 0 0 4 172 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
169 0 0 4 173 1313 0 0 0 2 4 this 3 1326  4 mass 1 1368  
170 0 0 6 174 1320 0 0 0 1 4 this 3 1345  
171 0 0 6 175 1320 0 0 0 1 4 this 3 1345  
172 0 0 6 176 1322 0 0 0 1 4 this 3 1345  
173 0 0 6 177 1320 0 0 0 1 4 this 3 1345  
174 0 0 6 178 1322 0 0 0 1 4 this 3 1345  
175 0 0 6 179 1350 0 0 0 1 4 this 3 1345  
176 0 0 7 180 1323 0 0 0 1 4 this 3 1345  
177 0 0 7 181 1376 0 0 0 1 4 this 3 1345  
178 0 0 7 182 1383 0 0 0 1 4 this 3 1345  
179 0 0 7 183 1323 0 0 0 1 4 this 3 1345  
180 0 0 7 184 1323 0 0 0 1 4 this 3 1345  
181 0 0 7 185 1368 0 0 0 1 4 this 3 1345  
182 0 0 4 186 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
183 0 0 4 186 1313 0 0 0 4 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
184 0 0 4 187 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
185 0 0 4 187 1313 0 0 0 4 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
186 0 0 4 188 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
187 0 0 4 188 1313 0 0 0 4 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
188 0 0 4 189 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
189 0 0 4 189 1313 0 0 0 4 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  
190 0 0 4 190 1313 0 0 0 3 4 this 3 1326  1 f 1 1317  3 pos 1 1317  
191 0 0 4 190 1313 0 0 0 7 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
192 0 0 4 191 1313 0 0 0 3 4 this 3 1326  1 f 1 1317  3 pos 1 1317  
193 0 0 4 191 1313 0 0 0 7 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
194 0 0 4 192 1313 0 0 0 3 4 this 3 1326  1 f 1 1317  3 pos 1 1317  
195 0 0 4 192 1313 0 0 0 7 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
196 0 0 4 193 1313 0 0 0 3 4 this 3 1326  1 f 1 1317  3 pos 1 1317  
197 0 0 4 193 1313 0 0 0 7 4 this 3 1326  2 fx 1 1320  2 fy 1 1320  2 fz 1 1320  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
198 0 0 4 194 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
199 0 0 4 194 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
200 0 0 4 195 1313 0 0 0 2 4 this 3 1326  1 f 1 1317  
201 0 0 4 195 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
202 0 0 7 196 1375 0 0 0 2 4 this 3 1345  3 pos 1 1317  
203 0 0 7 196 1375 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
204 0 0 7 197 1375 0 0 0 2 4 this 3 1345  3 pos 1 1317  
205 0 0 7 197 1375 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
206 0 0 7 198 1375 0 0 0 2 4 this 3 1345  3 pos 1 1317  
207 0 0 7 198 1375 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
208 0 0 7 199 1375 0 0 0 2 4 this 3 1345  3 pos 1 1317  
209 0 0 7 199 1375 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
210 0 0 7 200 1323 0 0 0 2 4 this 3 1345  3 pos 1 1317  
211 0 0 7 200 1323 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
212 0 0 7 201 1323 0 0 0 2 4 this 3 1345  3 pos 1 1317  
213 0 0 7 201 1323 0 0 0 4 4 this 3 1345  2 px 1 1320  2 py 1 1320  2 pz 1 1320  
214 0 0 4 202 1313 0 0 0 2 4 this 3 1326  4 mode 1 1322  
215 0 0 4 203 1313 0 0 0 2 4 this 3 1326  4 axis 1 1317  
216 0 0 4 203 1313 0 0 0 4 4 this 3 1326  1 x 1 1320  1 y 1 1320  1 z 1 1320  
217 0 0 6 204 1322 0 0 0 1 4 this 3 1345  
218 0 0 7 205 1323 0 0 0 1 4 this 3 1345  
219 0 0 6 206 1322 0 0 0 1 4 this 3 1345  
220 0 0 7 207 1340 0 0 0 2 4 this 3 1345  5 index 1 1322  
221 0 0 6 209 1350 0 0 0 2 4 this 3 1345  1 i 1 1322  
222 0 0 4 210 1313 0 0 0 1 4 this 3 1326  
223 0 0 4 211 1313 0 0 0 1 4 this 3 1326  
224 0 0 6 212 1322 0 0 0 1 4 this 3 1345  
225 0 0 4 213 1313 0 0 0 2 4 this 3 1326  4 mode 1 1322  
226 0 0 6 214 1322 0 0 0 1 4 this 3 1345  
227 0 0 4 215 1313 0 0 0 3 4 this 3 1345  3 out 1 1347  6 indent 1 1349  
228 0 0 6 217 1322 0 0 0 2 4 this 3 1345  5 other 1 1345  
229 0 0 7 218 1328 0 0 0 0 
230 0 0 6 216 1314 0 0 0 1 4 this 3 1345  
231 0 0 4 220 1313 0 0 0 1 4 this 3 1384  
232 0 0 6 221 1314 0 0 205 /**
 * Returns true if the ID is 0, meaning the OdeSpace does not point to a valid
 * space.  It is an error to call a method on an empty space.  Note that an
 * empty OdeSpace also evaluates to False.
 */ 1 4 this 3 1385  
233 0 0 4 222 1313 0 0 0 2 4 this 3 1384  4 mode 1 1322  
234 0 0 6 223 1322 0 0 0 1 4 this 3 1385  
235 0 0 6 224 1322 0 0 0 2 4 this 3 1385  4 geom 1 1387  
236 0 0 6 224 1322 0 0 0 2 4 this 3 1385  5 space 1 1385  
237 0 0 6 225 1322 0 0 0 1 4 this 3 1385  
238 0 0 4 226 1313 0 0 0 3 4 this 3 1385  3 min 1 1323  3 max 1 1323  
239 0 0 6 227 1350 0 0 0 1 4 this 3 1385  
240 0 0 6 228 1322 0 0 0 1 4 this 3 1384  
241 0 0 6 229 1322 0 0 0 1 4 this 3 1385  
242 0 0 4 230 1313 0 0 0 2 4 this 3 1384  4 bits 1 1389  
243 0 0 4 231 1313 0 0 0 2 4 this 3 1384  4 bits 1 1389  
244 0 0 7 232 1393 0 0 0 1 4 this 3 1384  
245 0 0 7 233 1393 0 0 0 1 4 this 3 1384  
246 0 0 4 234 1313 0 0 0 1 4 this 3 1384  
247 0 0 4 235 1313 0 0 0 1 4 this 3 1384  
248 0 0 6 236 1322 0 0 0 1 4 this 3 1384  
249 0 0 4 237 1313 0 0 0 2 4 this 3 1384  6 param0 0 1310  
250 0 0 4 238 1313 0 0 0 2 4 this 3 1384  6 param0 0 1329  
251 0 0 4 239 1313 0 0 0 2 4 this 3 1384  4 geom 1 1394  
252 0 0 4 239 1313 0 0 0 2 4 this 3 1384  5 space 1 1384  
253 0 0 4 240 1313 0 0 0 2 4 this 3 1384  4 geom 1 1394  
254 0 0 4 240 1313 0 0 0 2 4 this 3 1384  5 space 1 1384  
255 0 0 4 241 1313 0 0 0 1 4 this 3 1384  
256 0 0 7 242 1394 0 0 0 2 4 this 3 1384  1 i 1 1322  
257 0 0 7 243 1384 0 0 0 1 4 this 3 1385  
258 0 0 4 244 1313 0 0 0 3 4 this 3 1385  3 out 1 1347  6 indent 1 1349  
259 0 0 7 246 1395 0 0 0 1 4 this 3 1385  
260 0 0 7 247 1396 0 0 0 1 4 this 3 1385  
261 0 0 7 248 1397 0 0 0 1 4 this 3 1385  
262 0 0 6 249 1350 0 0 0 1 4 this 3 1385  
263 0 0 6 250 1350 0 0 0 2 4 this 3 1385  1 i 1 1322  
264 0 0 6 251 1350 0 0 0 1 4 this 3 1385  
265 0 0 4 252 1313 0 0 0 1 4 this 3 1384  
266 0 0 6 253 1322 0 0 0 3 4 this 3 1384  3 arg 1 1350  13 near_callback 1 1350  
267 0 0 6 254 1322 0 0 0 3 4 this 3 1384  4 geom 1 1394  10 collide_id 1 1322  
268 0 0 6 254 1322 0 0 0 3 4 this 3 1384  10 collide_id 1 1322  2 id 1 1398  
269 0 0 4 255 1313 0 0 0 3 4 this 3 1384  4 geom 1 1394  12 surface_type 1 1322  
270 0 0 4 255 1313 0 0 0 3 4 this 3 1384  12 surface_type 1 1322  2 id 1 1398  
271 0 0 6 256 1322 0 0 0 2 4 this 3 1384  4 geom 1 1394  
272 0 0 6 256 1322 0 0 0 2 4 this 3 1384  2 o1 1 1398  
273 0 0 6 257 1322 0 0 0 2 4 this 3 1384  4 geom 1 1394  
274 0 0 6 257 1322 0 0 0 2 4 this 3 1384  2 o1 1 1398  
275 0 0 4 258 1313 0 0 0 2 4 this 3 1384  10 event_name 1 1400  
276 0 0 6 259 1400 0 0 0 1 4 this 3 1384  
277 0 0 7 260 1328 0 0 0 0 
278 0 0 6 245 1314 0 0 0 1 4 this 3 1385  
279 0 0 4 263 1313 0 0 0 1 4 this 3 1394  
280 0 0 6 264 1314 0 0 201 /**
 * Returns true if the ID is 0, meaning the OdeGeom does not point to a valid
 * geom.  It is an error to call a method on an empty geom.  Note that an
 * empty OdeGeom also evaluates to False.
 */ 1 4 this 3 1387  
281 0 0 6 265 1398 0 0 42 /**
 * Returns the underlying dGeomID.
 */ 1 4 this 3 1387  
282 0 0 4 266 1313 0 0 36 // INLINE void set_data(void* data); 2 4 this 3 1394  4 body 1 1326  
283 0 0 6 267 1314 0 0 0 1 4 this 3 1387  
284 0 0 7 268 1326 0 0 0 1 4 this 3 1387  
285 0 0 4 269 1313 0 0 0 2 4 this 3 1394  3 pos 1 1317  
286 0 0 4 269 1313 0 0 0 4 4 this 3 1394  1 x 1 1320  1 y 1 1320  1 z 1 1320  
287 0 0 4 270 1313 0 0 0 2 4 this 3 1394  1 r 1 1371  
288 0 0 4 271 1313 0 0 0 2 4 this 3 1394  1 q 1 1379  
289 0 0 7 272 1375 0 0 0 1 4 this 3 1387  
290 0 0 7 273 1376 0 0 0 1 4 this 3 1387  
291 0 0 7 274 1401 0 0 0 1 4 this 3 1387  
292 0 0 4 275 1313 0 0 0 3 4 this 3 1387  3 min 1 1323  3 max 1 1323  
293 0 0 6 276 1350 0 0 0 1 4 this 3 1387  
294 0 0 6 277 1322 0 0 0 1 4 this 3 1394  
295 0 0 6 278 1322 0 0 0 1 4 this 3 1387  
296 0 0 4 279 1313 0 0 0 2 4 this 3 1394  4 bits 1 1389  
297 0 0 4 280 1313 0 0 0 2 4 this 3 1394  4 bits 1 1389  
298 0 0 7 281 1393 0 0 0 1 4 this 3 1394  
299 0 0 7 282 1393 0 0 0 1 4 this 3 1394  
300 0 0 4 283 1313 0 0 0 1 4 this 3 1394  
301 0 0 4 284 1313 0 0 0 1 4 this 3 1394  
302 0 0 6 285 1322 0 0 0 1 4 this 3 1394  
303 0 0 4 286 1313 0 0 0 2 4 this 3 1394  3 pos 1 1317  
304 0 0 4 286 1313 0 0 0 4 4 this 3 1394  1 x 1 1320  1 y 1 1320  1 z 1 1320  
305 0 0 4 287 1313 0 0 0 2 4 this 3 1394  1 r 1 1371  
306 0 0 4 288 1313 0 0 0 2 4 this 3 1394  1 q 1 1379  
307 0 0 4 289 1313 0 0 0 2 4 this 3 1394  3 pos 1 1317  
308 0 0 4 289 1313 0 0 0 4 4 this 3 1394  1 x 1 1320  1 y 1 1320  1 z 1 1320  
309 0 0 4 290 1313 0 0 0 2 4 this 3 1394  1 r 1 1371  
310 0 0 4 291 1313 0 0 0 2 4 this 3 1394  1 q 1 1379  
311 0 0 4 292 1313 0 0 0 1 4 this 3 1394  
312 0 0 6 293 1322 0 0 0 1 4 this 3 1394  
313 0 0 7 294 1375 0 0 0 1 4 this 3 1387  
314 0 0 7 295 1376 0 0 0 1 4 this 3 1387  
315 0 0 7 296 1401 0 0 0 1 4 this 3 1387  
316 0 0 7 297 1384 0 0 0 1 4 this 3 1387  
317 0 0 6 298 1350 0 0 0 1 4 this 3 1387  
318 0 0 4 299 1313 0 0 0 3 4 this 3 1387  3 out 1 1347  6 indent 1 1349  
319 0 0 6 301 1322 0 0 0 2 4 this 3 1387  5 other 1 1387  
320 0 0 6 302 1350 0 0 0 1 4 this 3 1387  
321 0 0 7 303 1402 0 0 0 1 4 this 3 1387  
322 0 0 7 304 1403 0 0 0 1 4 this 3 1387  
323 0 0 7 305 1404 0 0 43 // OdeConvexGeom convert_to_convex() const; 1 4 this 3 1387  
324 0 0 7 306 1405 0 0 53 // OdeHeightfieldGeom convert_to_heightfield() const; 1 4 this 3 1387  
325 0 0 7 307 1406 0 0 0 1 4 this 3 1387  
326 0 0 7 308 1407 0 0 0 1 4 this 3 1387  
327 0 0 7 309 1408 0 0 0 1 4 this 3 1387  
328 0 0 7 310 1395 0 0 0 1 4 this 3 1387  
329 0 0 7 311 1396 0 0 0 1 4 this 3 1387  
330 0 0 7 312 1397 0 0 0 1 4 this 3 1387  
331 0 0 7 313 1328 0 0 0 0 
332 0 0 6 300 1314 0 0 0 1 4 this 3 1387  
333 0 0 7 315 1402 0 0 0 2 5 space 1 1384  4 size 1 1317  
334 0 0 7 315 1402 0 0 0 4 5 space 1 1384  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
335 0 0 7 315 1402 0 0 0 3 2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
336 0 0 4 316 1313 0 0 0 2 4 this 3 1402  4 size 1 1317  
337 0 0 4 316 1313 0 0 0 4 4 this 3 1402  2 lx 1 1320  2 ly 1 1320  2 lz 1 1320  
338 0 0 7 317 1323 0 0 0 1 4 this 3 1402  
339 0 0 6 318 1320 0 0 0 2 4 this 3 1402  1 p 1 1409  
340 0 0 6 318 1320 0 0 0 4 4 this 3 1402  1 x 1 1320  1 y 1 1320  1 z 1 1320  
341 0 0 7 319 1328 0 0 0 0 
342 0 0 7 321 1403 0 0 0 3 5 space 1 1384  6 radius 1 1320  6 length 1 1320  
343 0 0 7 321 1403 0 0 0 2 6 radius 1 1320  6 length 1 1320  
344 0 0 4 322 1313 0 0 0 3 4 this 3 1403  6 radius 1 1320  6 length 1 1320  
345 0 0 6 324 1320 0 0 0 1 4 this 3 1411  
346 0 0 6 325 1320 0 0 0 1 4 this 3 1411  
347 0 0 6 326 1320 0 0 0 2 4 this 3 1411  1 p 1 1409  
348 0 0 6 326 1320 0 0 0 4 4 this 3 1411  1 x 1 1320  1 y 1 1320  1 z 1 1320  
349 0 0 7 327 1328 0 0 0 0 
350 0 0 7 329 1413 0 0 0 0 
351 0 0 7 329 1413 0 0 0 1 4 copy 1 1414  
352 0 0 7 330 1323 0 0 0 1 4 this 3 1414  
353 0 0 7 331 1323 0 0 0 1 4 this 3 1414  
354 0 0 6 332 1320 0 0 0 1 4 this 3 1414  
355 0 0 7 333 1394 0 0 0 1 4 this 3 1414  
356 0 0 7 334 1394 0 0 0 1 4 this 3 1414  
357 0 0 6 335 1322 0 0 0 1 4 this 3 1414  
358 0 0 6 336 1322 0 0 0 1 4 this 3 1414  
359 0 0 4 337 1313 0 0 0 2 4 this 3 1413  3 pos 1 1317  
360 0 0 4 338 1313 0 0 0 2 4 this 3 1413  6 normal 1 1317  
361 0 0 4 339 1313 0 0 0 2 4 this 3 1413  5 depth 1 1416  
362 0 0 4 340 1313 0 0 0 2 4 this 3 1413  4 geom 1 1387  
363 0 0 4 341 1313 0 0 0 2 4 this 3 1413  4 geom 1 1387  
364 0 0 7 342 1328 0 0 0 0 
365 0 0 7 357 1419 0 0 0 1 6 param0 0 1417  
366 0 0 7 344 1394 0 0 51 /**
 * Returns the first geom in the collision.
 */ 1 4 this 3 1417  
367 0 0 7 345 1394 0 0 52 /**
 * Returns the second geom in the collision.
 */ 1 4 this 3 1417  
368 0 0 7 346 1326 0 0 51 /**
 * Returns the first body in the collision.
 */ 1 4 this 3 1417  
369 0 0 7 347 1326 0 0 52 /**
 * Returns the second body in the collision.
 */ 1 4 this 3 1417  
370 0 0 6 348 1420 0 0 59 /**
 * Returns the number of contacts in the collision.
 */ 1 4 this 3 1417  
371 0 0 7 349 1375 0 0 123 /**
 * Returns the nth contact point in the collision.  This does exactly the same
 * as get_contact_geom(n).get_pos().
 */ 2 4 this 3 1417  1 n 1 1420  
372 0 0 7 350 1413 0 0 57 /**
 * Returns the nth contact geom in the collision.
 */ 2 4 this 3 1417  1 n 1 1420  
373 0 0 7 351 1413 0 0 0 2 4 this 3 1417  1 n 1 1420  
374 0 0 6 355 1314 0 0 55 /**
 * Returns true if the entry holds no contacts.
 */ 1 4 this 3 1417  
375 0 0 7 356 1328 0 0 0 0 
376 0 0 6 354 1314 0 0 0 1 4 this 3 1417  
377 0 0 7 360 1422 0 0 0 2 4 mode 1 1322  2 mu 1 1320  
378 0 0 4 361 1313 0 0 0 2 4 this 3 1422  4 mode 1 1322  
379 0 0 4 362 1313 0 0 0 2 4 this 3 1422  2 mu 1 1320  
380 0 0 4 363 1313 0 0 0 2 4 this 3 1422  3 mu2 1 1320  
381 0 0 4 364 1313 0 0 0 2 4 this 3 1422  6 bounce 1 1320  
382 0 0 4 365 1313 0 0 0 2 4 this 3 1422  10 bounce_vel 1 1320  
383 0 0 4 366 1313 0 0 0 2 4 this 3 1422  8 soft_erp 1 1320  
384 0 0 4 367 1313 0 0 0 2 4 this 3 1422  8 soft_cfm 1 1320  
385 0 0 4 368 1313 0 0 0 2 4 this 3 1422  6 motion 1 1320  
386 0 0 4 369 1313 0 0 0 2 4 this 3 1422  6 motion 1 1320  
387 0 0 4 370 1313 0 0 0 2 4 this 3 1422  4 slip 1 1320  
388 0 0 4 371 1313 0 0 0 2 4 this 3 1422  4 slip 1 1320  
389 0 0 6 372 1322 0 0 0 1 4 this 3 1423  
390 0 0 6 373 1320 0 0 0 1 4 this 3 1423  
391 0 0 6 374 1320 0 0 0 1 4 this 3 1423  
392 0 0 6 375 1320 0 0 0 1 4 this 3 1423  
393 0 0 6 376 1320 0 0 0 1 4 this 3 1423  
394 0 0 6 377 1320 0 0 0 1 4 this 3 1423  
395 0 0 6 378 1320 0 0 0 1 4 this 3 1423  
396 0 0 6 379 1320 0 0 0 1 4 this 3 1423  
397 0 0 6 380 1320 0 0 0 1 4 this 3 1423  
398 0 0 6 381 1320 0 0 0 1 4 this 3 1423  
399 0 0 6 382 1320 0 0 0 1 4 this 3 1423  
400 0 0 7 383 1328 0 0 0 0 
401 0 0 7 385 1425 0 0 0 0 
402 0 0 7 385 1425 0 0 38 // OdeContact(const OdeContact &copy); 1 7 contact 1 1426  
403 0 0 7 386 1422 0 0 0 1 4 this 3 1429  
404 0 0 7 387 1413 0 0 0 1 4 this 3 1425  
405 0 0 7 388 1323 0 0 0 1 4 this 3 1429  
406 0 0 4 389 1313 0 0 0 2 4 this 3 1425  18 surface_parameters 1 1423  
407 0 0 4 390 1313 0 0 0 2 4 this 3 1425  12 contact_geom 1 1414  
408 0 0 4 391 1313 0 0 0 2 4 this 3 1425  5 fdir1 1 1317  
409 0 0 7 392 1328 0 0 0 0 
410 0 0 7 394 1356 0 0 0 2 5 world 1 1310  7 contact 1 1429  
411 0 0 7 394 1356 0 0 0 3 5 world 1 1310  11 joint_group 1 1329  7 contact 1 1429  
412 0 0 7 395 1328 0 0 0 0 
413 0 0 7 397 1404 0 0 0 3 5 space 1 1384  6 radius 1 1320  6 length 1 1320  
414 0 0 7 397 1404 0 0 0 2 6 radius 1 1320  6 length 1 1320  
415 0 0 4 398 1313 0 0 0 3 4 this 3 1404  6 radius 1 1320  6 length 1 1320  
416 0 0 6 400 1320 0 0 0 1 4 this 3 1431  
417 0 0 6 401 1320 0 0 0 1 4 this 3 1431  
418 0 0 7 402 1328 0 0 0 0 
419 0 0 7 404 1359 0 0 0 1 5 world 1 1310  
420 0 0 7 404 1359 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
421 0 0 4 405 1313 0 0 0 1 4 this 3 1359  
422 0 0 7 406 1328 0 0 0 0 
423 0 0 7 408 1396 0 0 0 0 
424 0 0 7 408 1396 0 0 0 1 5 space 1 1384  
425 0 0 4 409 1313 0 0 0 3 4 this 3 1396  8 minlevel 1 1322  8 maxlevel 1 1322  
426 0 0 6 410 1322 0 0 0 1 4 this 3 1433  
427 0 0 6 411 1322 0 0 0 1 4 this 3 1433  
428 0 0 7 412 1328 0 0 0 0 
429 0 0 7 414 1358 0 0 0 1 5 world 1 1310  
430 0 0 7 414 1358 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
431 0 0 4 415 1313 0 0 0 2 4 this 3 1358  6 anchor 1 1317  
432 0 0 4 415 1313 0 0 0 4 4 this 3 1358  1 x 1 1320  1 y 1 1320  1 z 1 1320  
433 0 0 4 416 1313 0 0 0 2 4 this 3 1358  4 axis 1 1317  
434 0 0 4 416 1313 0 0 0 4 4 this 3 1358  1 x 1 1320  1 y 1 1320  1 z 1 1320  
435 0 0 4 417 1313 0 0 0 2 4 this 3 1358  4 axis 1 1317  
436 0 0 4 417 1313 0 0 0 4 4 this 3 1358  1 x 1 1320  1 y 1 1320  1 z 1 1320  
437 0 0 4 418 1313 0 0 0 3 4 this 3 1358  7 torque1 1 1320  7 torque2 1 1320  
438 0 0 7 419 1323 0 0 0 1 4 this 3 1435  
439 0 0 7 420 1323 0 0 0 1 4 this 3 1435  
440 0 0 7 421 1323 0 0 0 1 4 this 3 1435  
441 0 0 7 422 1323 0 0 0 1 4 this 3 1435  
442 0 0 6 423 1320 0 0 0 1 4 this 3 1435  
443 0 0 6 424 1320 0 0 0 1 4 this 3 1435  
444 0 0 6 425 1320 0 0 0 1 4 this 3 1435  
445 0 0 4 426 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
446 0 0 4 427 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
447 0 0 4 428 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
448 0 0 4 429 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
449 0 0 4 430 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
450 0 0 4 431 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
451 0 0 4 432 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
452 0 0 4 433 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
453 0 0 4 434 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
454 0 0 4 435 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
455 0 0 4 436 1313 0 0 0 3 4 this 3 1358  4 axis 1 1322  3 val 1 1320  
456 0 0 6 437 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
457 0 0 6 438 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
458 0 0 6 439 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
459 0 0 6 440 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
460 0 0 6 441 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
461 0 0 6 442 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
462 0 0 6 443 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
463 0 0 6 444 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
464 0 0 6 445 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
465 0 0 6 446 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
466 0 0 6 447 1320 0 0 0 2 4 this 3 1435  4 axis 1 1322  
467 0 0 7 448 1328 0 0 0 0 
468 0 0 7 450 1354 0 0 0 1 5 world 1 1310  
469 0 0 7 450 1354 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
470 0 0 4 451 1313 0 0 0 2 4 this 3 1354  6 anchor 1 1317  
471 0 0 4 451 1313 0 0 0 4 4 this 3 1354  1 x 1 1320  1 y 1 1320  1 z 1 1320  
472 0 0 4 452 1313 0 0 0 3 4 this 3 1354  6 anchor 1 1317  3 vec 1 1317  
473 0 0 4 452 1313 0 0 0 7 4 this 3 1354  1 x 1 1320  1 y 1 1320  1 z 1 1320  2 ax 1 1320  2 ay 1 1320  2 az 1 1320  
474 0 0 4 453 1313 0 0 0 2 4 this 3 1354  4 axis 1 1317  
475 0 0 4 453 1313 0 0 0 4 4 this 3 1354  1 x 1 1320  1 y 1 1320  1 z 1 1320  
476 0 0 4 454 1313 0 0 0 2 4 this 3 1354  6 torque 1 1320  
477 0 0 7 455 1323 0 0 0 1 4 this 3 1437  
478 0 0 7 456 1323 0 0 0 1 4 this 3 1437  
479 0 0 7 457 1323 0 0 0 1 4 this 3 1437  
480 0 0 6 458 1320 0 0 0 1 4 this 3 1437  
481 0 0 6 459 1320 0 0 0 1 4 this 3 1437  
482 0 0 4 460 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
483 0 0 4 461 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
484 0 0 4 462 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
485 0 0 4 463 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
486 0 0 4 464 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
487 0 0 4 465 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
488 0 0 4 466 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
489 0 0 4 467 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
490 0 0 4 468 1313 0 0 0 2 4 this 3 1354  3 val 1 1320  
491 0 0 6 469 1320 0 0 0 1 4 this 3 1437  
492 0 0 6 470 1320 0 0 0 1 4 this 3 1437  
493 0 0 6 471 1320 0 0 0 1 4 this 3 1437  
494 0 0 6 472 1320 0 0 0 1 4 this 3 1437  
495 0 0 6 473 1320 0 0 0 1 4 this 3 1437  
496 0 0 6 474 1320 0 0 0 1 4 this 3 1437  
497 0 0 6 475 1320 0 0 0 1 4 this 3 1437  
498 0 0 6 476 1320 0 0 0 1 4 this 3 1437  
499 0 0 6 477 1320 0 0 0 1 4 this 3 1437  
500 0 0 7 478 1328 0 0 0 0 
501 0 0 7 480 1439 1114 0 0 0 
502 0 0 7 480 1439 1114 0 0 1 4 copy 1 1440  
503 0 0 6 481 1439 0 0 0 2 4 this 3 1439  4 copy 1 1440  
504 0 0 4 483 1313 0 0 0 2 4 this 3 1439  5 joint 1 1341  
505 0 0 6 484 1314 0 0 0 2 4 this 3 1439  5 joint 1 1341  
506 0 0 4 485 1313 0 0 0 2 4 this 3 1439  5 other 1 1440  
507 0 0 4 486 1313 0 0 0 2 4 this 3 1439  5 other 1 1440  
508 0 0 4 487 1313 0 0 0 1 4 this 3 1439  
509 0 0 6 488 1314 0 0 0 2 4 this 3 1440  5 joint 1 1341  
510 0 0 4 489 1313 0 0 0 1 4 this 3 1439  
511 0 0 6 490 1314 0 0 0 1 4 this 3 1440  
512 0 0 6 491 1322 0 0 0 1 4 this 3 1440  
513 0 0 7 492 1340 0 0 0 2 4 this 3 1440  5 index 1 1322  
514 0 0 7 494 1340 0 0 0 2 4 this 3 1440  5 index 1 1322  
515 0 0 6 495 1322 0 0 106 /**
 * Returns the number of joints in the collection.  This is the same thing as
 * get_num_joints().
 */ 1 4 this 3 1440  
516 0 0 6 496 1439 0 0 0 2 4 this 3 1439  5 other 1 1440  
517 0 0 7 497 1439 1114 0 0 2 4 this 3 1440  5 other 1 1440  
518 0 0 7 499 1362 0 0 0 1 5 world 1 1310  
519 0 0 7 499 1362 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
520 0 0 4 500 1313 0 0 0 2 4 this 3 1362  3 num 1 1322  
521 0 0 4 501 1313 0 0 0 4 4 this 3 1362  4 anum 1 1322  3 rel 1 1322  4 axis 1 1317  
522 0 0 4 501 1313 0 0 0 6 4 this 3 1362  4 anum 1 1322  3 rel 1 1322  1 x 1 1320  1 y 1 1320  1 z 1 1320  
523 0 0 4 502 1313 0 0 0 3 4 this 3 1362  9 parameter 1 1322  5 value 1 1320  
524 0 0 6 503 1322 0 0 0 1 4 this 3 1442  
525 0 0 7 504 1323 0 0 0 2 4 this 3 1442  4 anum 1 1322  
526 0 0 6 506 1320 0 0 0 2 4 this 3 1442  9 parameter 1 1322  
527 0 0 7 507 1328 0 0 0 0 
528 0 0 7 509 1360 0 0 0 1 5 world 1 1310  
529 0 0 7 509 1360 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
530 0 0 7 510 1328 0 0 0 0 
531 0 0 7 512 1363 0 0 0 1 5 world 1 1310  
532 0 0 7 512 1363 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
533 0 0 4 513 1313 0 0 0 3 4 this 3 1363  9 parameter 1 1322  5 value 1 1320  
534 0 0 4 514 1313 0 0 0 3 4 this 3 1363  9 parameter 1 1322  5 value 1 1320  
535 0 0 4 515 1313 0 0 0 3 4 this 3 1363  9 parameter 1 1322  5 value 1 1320  
536 0 0 7 516 1328 0 0 0 0 
537 0 0 7 518 1405 0 0 0 1 6 params 1 1444  
538 0 0 7 518 1405 0 0 0 2 5 space 1 1384  6 params 1 1444  
539 0 0 7 518 1405 0 0 0 5 5 space 1 1384  1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
540 0 0 7 518 1405 0 0 0 4 1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
541 0 0 4 519 1313 0 0 0 2 4 this 3 1405  6 params 1 1444  
542 0 0 4 519 1313 0 0 0 5 4 this 3 1405  1 a 1 1320  1 b 1 1320  1 c 1 1320  1 d 1 1320  
543 0 0 7 520 1383 0 0 0 1 4 this 3 1446  
544 0 0 6 521 1320 0 0 0 2 4 this 3 1446  1 p 1 1409  
545 0 0 6 521 1320 0 0 0 4 4 this 3 1446  1 x 1 1320  1 y 1 1320  1 z 1 1320  
546 0 0 7 522 1328 0 0 0 0 
547 0 0 7 524 1397 0 0 0 3 6 center 1 1409  7 extents 1 1317  5 depth 1 1448  
548 0 0 7 524 1397 0 0 0 4 5 space 1 1384  6 center 1 1409  7 extents 1 1317  5 depth 1 1448  
549 0 0 7 525 1328 0 0 0 0 
550 0 0 7 527 1406 0 0 0 2 5 space 1 1384  6 length 1 1320  
551 0 0 7 527 1406 0 0 0 1 6 length 1 1320  
552 0 0 4 528 1313 0 0 0 2 4 this 3 1406  6 length 1 1320  
553 0 0 6 529 1320 0 0 0 1 4 this 3 1406  
554 0 0 4 530 1313 0 0 0 3 4 this 3 1406  5 start 1 1317  3 dir 1 1317  
555 0 0 4 530 1313 0 0 0 7 4 this 3 1406  2 px 1 1320  2 py 1 1320  2 pz 1 1320  2 dx 1 1320  2 dy 1 1320  2 dz 1 1320  
556 0 0 4 531 1313 0 0 0 3 4 this 3 1449  5 start 1 1323  3 dir 1 1323  
557 0 0 7 532 1323 0 0 0 1 4 this 3 1449  
558 0 0 7 533 1323 0 0 0 1 4 this 3 1449  
559 0 0 4 534 1313 0 0 0 3 4 this 3 1406  13 first_contact 1 1322  13 backface_cull 1 1322  
560 0 0 6 536 1322 0 0 0 1 4 this 3 1449  
561 0 0 6 537 1322 0 0 0 1 4 this 3 1449  
562 0 0 4 538 1313 0 0 0 2 4 this 3 1406  11 closest_hit 1 1322  
563 0 0 6 539 1322 0 0 0 1 4 this 3 1406  
564 0 0 7 540 1328 0 0 0 0 
565 0 0 7 542 1395 0 0 0 0 
566 0 0 7 542 1395 0 0 0 1 5 space 1 1384  
567 0 0 7 543 1328 0 0 0 0 
568 0 0 7 545 1355 0 0 0 1 5 world 1 1310  
569 0 0 7 545 1355 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
570 0 0 4 546 1313 0 0 0 2 4 this 3 1355  4 axis 1 1317  
571 0 0 4 546 1313 0 0 0 4 4 this 3 1355  1 x 1 1320  1 y 1 1320  1 z 1 1320  
572 0 0 4 547 1313 0 0 0 3 4 this 3 1355  4 axis 1 1317  3 vec 1 1317  
573 0 0 4 547 1313 0 0 0 7 4 this 3 1355  1 x 1 1320  1 y 1 1320  1 z 1 1320  2 ax 1 1320  2 ay 1 1320  2 az 1 1320  
574 0 0 4 548 1313 0 0 0 2 4 this 3 1355  5 force 1 1320  
575 0 0 6 549 1320 0 0 0 1 4 this 3 1451  
576 0 0 6 550 1320 0 0 0 1 4 this 3 1451  
577 0 0 7 551 1323 0 0 0 1 4 this 3 1451  
578 0 0 4 552 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
579 0 0 4 553 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
580 0 0 4 554 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
581 0 0 4 555 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
582 0 0 4 556 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
583 0 0 4 557 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
584 0 0 4 558 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
585 0 0 4 559 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
586 0 0 4 560 1313 0 0 0 2 4 this 3 1355  3 val 1 1320  
587 0 0 6 561 1320 0 0 0 1 4 this 3 1451  
588 0 0 6 562 1320 0 0 0 1 4 this 3 1451  
589 0 0 6 563 1320 0 0 0 1 4 this 3 1451  
590 0 0 6 564 1320 0 0 0 1 4 this 3 1451  
591 0 0 6 565 1320 0 0 0 1 4 this 3 1451  
592 0 0 6 566 1320 0 0 0 1 4 this 3 1451  
593 0 0 6 567 1320 0 0 0 1 4 this 3 1451  
594 0 0 6 568 1320 0 0 0 1 4 this 3 1451  
595 0 0 6 569 1320 0 0 0 1 4 this 3 1451  
596 0 0 7 570 1328 0 0 0 0 
597 0 0 7 572 1407 0 0 0 1 4 geom 1 1394  
598 0 0 7 572 1407 0 0 0 2 5 space 1 1384  6 radius 1 1320  
599 0 0 7 572 1407 0 0 0 1 6 radius 1 1320  
600 0 0 4 573 1313 0 0 0 2 4 this 3 1407  6 radius 1 1320  
601 0 0 6 574 1320 0 0 0 1 4 this 3 1453  
602 0 0 6 575 1320 0 0 0 2 4 this 3 1453  1 p 1 1409  
603 0 0 6 575 1320 0 0 0 4 4 this 3 1453  1 x 1 1320  1 y 1 1320  1 z 1 1320  
604 0 0 7 576 1328 0 0 0 0 
605 0 0 7 579 1458 0 0 0 2 5 model 1 1455  11 use_normals 1 1314  
606 0 0 4 580 1313 0 0 0 1 4 this 3 1458  
607 0 0 4 581 1313 0 0 0 3 4 this 3 1459  3 out 1 1347  6 indent 1 1349  
608 0 0 4 582 1313 0 0 0 2 4 this 3 1459  3 out 1 1347  
609 0 0 7 583 1328 0 0 0 0 
610 0 0 7 585 1408 0 0 0 2 5 space 1 1384  4 data 1 1458  
611 0 0 7 585 1408 0 0 162 /* ODE_API dGeomID dCreateTriMesh(dSpaceID space, dTriMeshDataID Data, dTriCallback* Callback, dTriArrayCallback* ArrayCallback, dTriRayCallback* RayCallback); */ 1 4 data 1 1458  
612 0 0 7 585 1408 0 0 0 1 4 copy 1 1461  
613 0 0 4 586 1313 0 0 0 1 4 this 3 1408  
614 0 0 4 587 1313 0 0 0 2 4 this 3 1408  4 data 1 1458  
615 0 0 7 588 1458 0 0 0 1 4 this 3 1461  
616 0 0 4 589 1313 0 0 0 2 4 this 3 1408  4 data 1 1458  
617 0 0 7 590 1458 0 0 0 1 4 this 3 1461  
618 0 0 4 591 1313 0 0 0 3 4 this 3 1408  10 geom_class 1 1322  6 enable 1 1322  
619 0 0 6 592 1322 0 0 0 2 4 this 3 1461  10 geom_class 1 1322  
620 0 0 4 593 1313 0 0 0 2 4 this 3 1408  4 geom 1 1387  
621 0 0 4 594 1313 0 0 0 5 4 this 3 1461  10 face_index 1 1322  2 v0 1 1375  2 v1 1 1375  2 v2 1 1375  
622 0 0 7 595 1375 0 0 0 4 4 this 3 1461  10 face_index 1 1322  1 u 1 1320  1 v 1 1320  
623 0 0 6 596 1322 0 0 0 1 4 this 3 1461  
624 0 0 7 597 1328 0 0 0 0 
625 0 0 7 599 1357 0 0 0 1 5 world 1 1310  
626 0 0 7 599 1357 0 0 0 2 5 world 1 1310  11 joint_group 1 1329  
627 0 0 4 600 1313 0 0 0 2 4 this 3 1357  6 anchor 1 1317  
628 0 0 4 600 1313 0 0 0 4 4 this 3 1357  1 x 1 1320  1 y 1 1320  1 z 1 1320  
629 0 0 4 601 1313 0 0 0 2 4 this 3 1357  4 axis 1 1317  
630 0 0 4 601 1313 0 0 0 4 4 this 3 1357  1 x 1 1320  1 y 1 1320  1 z 1 1320  
631 0 0 4 602 1313 0 0 0 2 4 this 3 1357  4 axis 1 1317  
632 0 0 4 602 1313 0 0 0 4 4 this 3 1357  1 x 1 1320  1 y 1 1320  1 z 1 1320  
633 0 0 4 603 1313 0 0 0 3 4 this 3 1357  7 torque1 1 1320  7 torque2 1 1320  
634 0 0 7 604 1323 0 0 0 1 4 this 3 1463  
635 0 0 7 605 1323 0 0 0 1 4 this 3 1463  
636 0 0 7 606 1323 0 0 0 1 4 this 3 1463  
637 0 0 7 607 1323 0 0 0 1 4 this 3 1463  
638 0 0 6 608 1320 0 0 0 1 4 this 3 1463  
639 0 0 6 609 1320 0 0 0 1 4 this 3 1463  
640 0 0 6 610 1320 0 0 0 1 4 this 3 1463  
641 0 0 6 611 1320 0 0 0 1 4 this 3 1463  
642 0 0 4 612 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
643 0 0 4 613 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
644 0 0 4 614 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
645 0 0 4 615 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
646 0 0 4 616 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
647 0 0 4 617 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
648 0 0 4 618 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
649 0 0 4 619 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
650 0 0 4 620 1313 0 0 0 3 4 this 3 1357  4 axis 1 1322  3 val 1 1320  
651 0 0 6 621 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
652 0 0 6 622 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
653 0 0 6 623 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
654 0 0 6 624 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
655 0 0 6 625 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
656 0 0 6 626 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
657 0 0 6 627 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
658 0 0 6 628 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
659 0 0 6 629 1320 0 0 0 2 4 this 3 1463  4 axis 1 1322  
660 0 0 7 630 1328 0 0 0 0 
661 0 0 7 642 1465 1259 0 0 0 
662 0 0 7 642 1465 1259 0 0 1 6 param0 0 1466  
663 0 0 7 632 1340 0 0 60 /**
 * Returns the joint that connects the given bodies.
 */ 2 5 body1 1 1345  5 body2 1 1345  
664 0 0 7 633 1439 1114 0 74 /**
 * Returns a collection of joints connecting the specified bodies.
 */ 2 5 body1 1 1345  5 body2 1 1345  
665 0 0 6 634 1322 0 0 90 /**
 * Returns 1 if the given bodies are connected by a joint, returns 0
 * otherwise.
 */ 2 5 body1 1 1345  5 body2 1 1345  
666 0 0 6 635 1322 0 0 404 /**
 * Returns 1 if the given bodies are connected by a joint that does not match
 * the given joint_type, returns 0 otherwise.  This is useful for deciding
 * whether to add contact joints between two bodies: if they are already
 * connected by non-contact joints then it may not be appropriate to add
 * contacts, however it is okay to add more contact between bodies that
 * already have contacts.
 */ 3 5 body1 1 1345  5 body2 1 1345  10 joint_type 1 1448  
667 0 0 7 636 1419 0 0 152 /**
 * Given two geometry objects that potentially touch (geom1 and geom2),
 * generate contact information for them.  Returns an OdeCollisionEntry.
 */ 3 5 geom1 1 1387  5 geom2 1 1387  12 max_contacts 1 1468  
668 0 0 6 637 1322 0 0 0 4 5 geom1 1 1387  5 geom2 1 1387  3 arg 1 1350  8 callback 1 1350  
669 0 0 7 638 1394 0 0 0 1 5 space 1 1385  
670 0 0 6 639 1320 0 0 73 // RAU we can't access OC_infinity as constants are not exposed in python 0 
671 0 0 6 640 1322 0 0 0 0 
672 0 0 4 641 1313 0 0 0 1 1 s 1 1322  
210
1260 6 dxBody 0 1025 6 dxBody 6 dxBody 0 0 0 0 0 0 0 0 0 0 0 0 0

1261 6 dxGeom 0 1025 6 dxGeom 6 dxGeom 0 0 0 0 0 0 0 0 0 0 0 0 0

1262 7 dxJoint 0 1025 7 dxJoint 7 dxJoint 0 0 0 0 0 0 0 0 0 0 0 0 0

1263 12 dxJointGroup 0 1025 12 dxJointGroup 12 dxJointGroup 0 0 0 0 0 0 0 0 0 0 0 0 0

1264 7 dxSpace 0 1025 7 dxSpace 7 dxSpace 0 0 0 0 0 0 0 0 0 0 0 0 0

1265 13 dxTriMeshData 0 1025 13 dxTriMeshData 13 dxTriMeshData 0 0 0 0 0 0 0 0 0 0 0 0 0

1266 7 dxWorld 0 1025 7 dxWorld 7 dxWorld 0 0 0 0 0 0 0 0 0 0 0 0 0

1267 8 OdeWorld 0 75777 8 OdeWorld 8 OdeWorld 0 0 0 1 673 0 0 36 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 710 0 1 709 1 0 1268 0 0 0 0 10
/**
 *
 */

1268 11 TypedObject 0 2049 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2348
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file): @code public: static TypeHandle
 * get_class_type() { return _type_handle; } static void init_type() {
 * <<<BaseClassOne>>>::init_type(); <<<BaseClassTwo>>>::init_type();
 * <<<BaseClassN>>>::init_type(); register_type(_type_handle,
 * "<<<ThisClassStringName>>>", <<<BaseClassOne>>>::get_class_type(),
 * <<<BaseClassTwo>>>::get_class_type(), <<<BaseClassN>>>::get_class_type());
 * } virtual TypeHandle get_type() const { return get_class_type(); } virtual
 * TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private: static TypeHandle _type_handle; @endcode
 *
 * @par In the class .cxx file: @code TypeHandle
 * <<<ThisClassStringName>>>::_type_handle; @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file: @code
 * ConfigureFn(config_<<<PackageName>>>) { <<<ClassOne>>>::init_type();
 * <<<ClassTwo>>>::init_type(); <<<ClassN>>>::init_type(); } @endcode
 */

1269 13 OdeJointGroup 0 75777 13 OdeJointGroup 13 OdeJointGroup 0 0 0 1 711 0 0 5 712 713 714 715 716 0 0 1 0 1268 0 0 0 0 10
/**
 *
 */

1270 16 OdeJointFeedback 0 141313 16 OdeJointFeedback 16 OdeJointFeedback 0 0 0 1 721 722 0 4 717 718 719 720 0 0 1 0 1271 0 0 0 0 0

1271 14 dJointFeedback 0 1025 14 dJointFeedback 14 dJointFeedback 0 0 0 0 0 0 0 0 0 0 0 0 0

1272 8 OdeJoint 0 75777 8 OdeJoint 8 OdeJoint 0 0 0 0 0 0 27 723 724 725 726 727 728 729 730 731 732 733 734 735 736 738 739 740 741 742 743 744 745 746 747 748 749 750 0 1 737 1 0 1268 0 0 0 1 1273 10
/**
 *
 */

1273 9 JointType 0 794624 19 OdeJoint::JointType 19 OdeJoint::JointType 1272 0 0 0 0 0 0 0 0 0 12 7 JT_none 17 OdeJoint::JT_none 18
/* or "unknown" */
0 7 JT_ball 17 OdeJoint::JT_ball 0
1 8 JT_hinge 18 OdeJoint::JT_hinge 0
2 9 JT_slider 19 OdeJoint::JT_slider 0
3 10 JT_contact 20 OdeJoint::JT_contact 0
4 12 JT_universal 22 OdeJoint::JT_universal 0
5 9 JT_hinge2 19 OdeJoint::JT_hinge2 0
6 8 JT_fixed 18 OdeJoint::JT_fixed 0
7 7 JT_null 17 OdeJoint::JT_null 0
8 10 JT_a_motor 20 OdeJoint::JT_a_motor 0
9 10 JT_l_motor 20 OdeJoint::JT_l_motor 0
10 10 JT_plane2d 20 OdeJoint::JT_plane2d 0
11 0 18
/* or "unknown" */

1274 14 OdeAMotorJoint 0 75777 14 OdeAMotorJoint 14 OdeAMotorJoint 0 0 0 1 751 0 0 30 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 1 1470 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1275 12 OdeBallJoint 0 75777 12 OdeBallJoint 12 OdeBallJoint 0 0 0 1 782 0 0 5 783 784 785 786 787 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1276 7 OdeMass 0 75777 7 OdeMass 7 OdeMass 0 0 0 1 788 0 0 20 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 0 0 1 0 1277 0 0 0 0 10
/**
 *
 */

1277 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1278 7 OdeBody 0 75777 7 OdeBody 7 OdeBody 0 0 0 1 809 0 0 59 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 868 869 1 1471 1 867 1 0 1268 0 0 0 0 10
/**
 *
 */

1279 8 OdeSpace 0 75777 8 OdeSpace 8 OdeSpace 0 0 0 0 0 0 40 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 0 1 895 1 0 1268 0 0 0 0 10
/**
 *
 */

1280 7 OdeGeom 0 75777 7 OdeGeom 7 OdeGeom 0 0 0 0 0 0 50 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 949 950 951 952 953 954 955 956 957 958 959 960 961 0 1 948 1 0 1268 0 0 0 1 1281 10
/**
 *
 */

1281 9 GeomClass 0 794624 18 OdeGeom::GeomClass 18 OdeGeom::GeomClass 1280 0 0 0 0 0 0 0 0 0 10 9 GC_sphere 18 OdeGeom::GC_sphere 0
0 6 GC_box 15 OdeGeom::GC_box 0
1 18 GC_capped_cylinder 27 OdeGeom::GC_capped_cylinder 0
2 11 GC_cylinder 20 OdeGeom::GC_cylinder 0
3 8 GC_plane 17 OdeGeom::GC_plane 0
4 6 GC_ray 15 OdeGeom::GC_ray 0
5 11 GC_tri_mesh 20 OdeGeom::GC_tri_mesh 32
// GC_convex, GC_geom_transform,
8 15 GC_simple_space 24 OdeGeom::GC_simple_space 0
10 13 GC_hash_space 22 OdeGeom::GC_hash_space 0
11 18 GC_quad_tree_space 27 OdeGeom::GC_quad_tree_space 0
12 0 0

1282 10 OdeBoxGeom 0 75777 10 OdeBoxGeom 10 OdeBoxGeom 0 0 0 1 962 0 0 4 963 964 965 966 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1283 21 OdeCappedCylinderGeom 0 75777 21 OdeCappedCylinderGeom 21 OdeCappedCylinderGeom 0 0 0 1 967 0 0 6 968 969 970 971 972 973 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1284 14 OdeContactGeom 0 75777 14 OdeContactGeom 14 OdeContactGeom 0 0 0 1 974 0 0 13 975 976 977 978 979 980 981 982 983 984 985 986 987 0 0 1 0 1277 0 0 0 0 10
/**
 *
 */

1285 17 OdeCollisionEntry 0 75777 17 OdeCollisionEntry 17 OdeCollisionEntry 0 0 0 1 999 0 0 10 988 989 990 991 992 993 994 995 997 998 2 1472 1473 1 996 1 0 1277 0 0 0 0 80
/**
 * A class used to hold information about a collision that has occurred.
 */

1286 20 OdeSurfaceParameters 0 75777 20 OdeSurfaceParameters 20 OdeSurfaceParameters 0 0 0 1 1000 0 0 23 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 0 0 1 0 1268 0 0 0 1 1287 10
/**
 *
 */

1287 9 ModeFlags 0 794624 31 OdeSurfaceParameters::ModeFlags 31 OdeSurfaceParameters::ModeFlags 1286 0 0 0 0 0 0 0 0 0 13 14 MF_contact_mu2 36 OdeSurfaceParameters::MF_contact_mu2 0
1 15 MF_contactFDir1 37 OdeSurfaceParameters::MF_contactFDir1 0
2 16 MF_contactBounce 38 OdeSurfaceParameters::MF_contactBounce 0
4 17 MF_contactSoftERP 39 OdeSurfaceParameters::MF_contactSoftERP 0
8 17 MF_contactSoftCFM 39 OdeSurfaceParameters::MF_contactSoftCFM 0
16 17 MF_contactMotion1 39 OdeSurfaceParameters::MF_contactMotion1 0
32 17 MF_contactMotion2 39 OdeSurfaceParameters::MF_contactMotion2 0
64 15 MF_contactSlip1 37 OdeSurfaceParameters::MF_contactSlip1 0
128 15 MF_contactSlip2 37 OdeSurfaceParameters::MF_contactSlip2 0
256 17 MF_contactApprox0 39 OdeSurfaceParameters::MF_contactApprox0 0
0 19 MF_contactApprox1_1 41 OdeSurfaceParameters::MF_contactApprox1_1 0
4096 19 MF_contactApprox1_2 41 OdeSurfaceParameters::MF_contactApprox1_2 0
8192 17 MF_contactApprox1 39 OdeSurfaceParameters::MF_contactApprox1 0
12288 0 0

1288 10 OdeContact 0 75777 10 OdeContact 10 OdeContact 0 0 0 1 1024 0 0 7 1025 1026 1027 1028 1029 1030 1031 0 0 1 0 1277 0 0 0 0 10
/**
 *
 */

1289 15 OdeContactJoint 0 75777 15 OdeContactJoint 15 OdeContactJoint 0 0 0 1 1032 0 0 1 1033 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1290 15 OdeCylinderGeom 0 75777 15 OdeCylinderGeom 15 OdeCylinderGeom 0 0 0 1 1034 0 0 5 1035 1036 1037 1038 1039 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1291 13 OdeFixedJoint 0 75777 13 OdeFixedJoint 13 OdeFixedJoint 0 0 0 1 1040 0 0 2 1041 1042 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1292 12 OdeHashSpace 0 75777 12 OdeHashSpace 12 OdeHashSpace 0 0 0 1 1043 0 0 4 1044 1045 1046 1047 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1293 14 OdeHinge2Joint 0 75777 14 OdeHinge2Joint 14 OdeHinge2Joint 0 0 0 1 1048 0 0 34 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1294 13 OdeHingeJoint 0 75777 13 OdeHingeJoint 13 OdeHingeJoint 0 0 0 1 1083 0 0 28 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1295 18 OdeJointCollection 0 26625 18 OdeJointCollection 18 OdeJointCollection 0 0 0 1 1112 1114 0 15 1113 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1 1474 0 0 0 0 10
/**
 *
 */

1296 14 OdeLMotorJoint 0 75777 14 OdeLMotorJoint 14 OdeLMotorJoint 0 0 0 1 1129 0 0 7 1130 1131 1132 1133 1134 1135 1136 1 1475 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1297 12 OdeNullJoint 0 75777 12 OdeNullJoint 12 OdeNullJoint 0 0 0 1 1137 0 0 1 1138 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1298 15 OdePlane2dJoint 0 75777 15 OdePlane2dJoint 15 OdePlane2dJoint 0 0 0 1 1139 0 0 4 1140 1141 1142 1143 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1299 12 OdePlaneGeom 0 75777 12 OdePlaneGeom 12 OdePlaneGeom 0 0 0 1 1144 0 0 4 1145 1146 1147 1148 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1300 16 OdeQuadTreeSpace 0 75777 16 OdeQuadTreeSpace 16 OdeQuadTreeSpace 0 0 0 1 1149 0 0 1 1150 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1301 10 OdeRayGeom 0 75777 10 OdeRayGeom 10 OdeRayGeom 0 0 0 1 1151 0 0 13 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1302 14 OdeSimpleSpace 0 75777 14 OdeSimpleSpace 14 OdeSimpleSpace 0 0 0 1 1165 0 0 1 1166 0 0 1 0 1279 0 0 0 0 10
/**
 *
 */

1303 14 OdeSliderJoint 0 75777 14 OdeSliderJoint 14 OdeSliderJoint 0 0 0 1 1167 0 0 25 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1304 13 OdeSphereGeom 0 75777 13 OdeSphereGeom 13 OdeSphereGeom 0 0 0 1 1193 0 0 4 1194 1195 1196 1197 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1305 14 OdeTriMeshData 0 75777 14 OdeTriMeshData 14 OdeTriMeshData 0 0 0 1 1198 0 0 4 1199 1200 1201 1202 0 0 1 0 1277 0 0 0 1 1306 10
/**
 *
 */

1306 8 DataType 0 794624 24 OdeTriMeshData::DataType 24 OdeTriMeshData::DataType 1305 0 0 0 0 0 0 0 0 0 2 15 DT_face_normals 31 OdeTriMeshData::DT_face_normals 0
0 22 DT_last_transformation 38 OdeTriMeshData::DT_last_transformation 0
1 0 0

1307 14 OdeTriMeshGeom 0 75777 14 OdeTriMeshGeom 14 OdeTriMeshGeom 0 0 0 1 1203 0 0 12 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 0 0 1 0 1280 0 0 0 0 10
/**
 *
 */

1308 17 OdeUniversalJoint 0 75777 17 OdeUniversalJoint 17 OdeUniversalJoint 0 0 0 1 1216 0 0 31 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 0 0 1 0 1272 0 0 0 0 10
/**
 *
 */

1309 7 OdeUtil 0 141313 7 OdeUtil 7 OdeUtil 0 0 0 1 1258 1259 0 10 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 0 0 0 0 0 10
/**
 *
 */

1310 10 OdeWorld * 0 8576 10 OdeWorld * 10 OdeWorld * 0 0 1267 0 0 0 0 0 0 0 0 0 0

1311 16 OdeWorld const * 0 8576 16 OdeWorld const * 16 OdeWorld const * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1312 14 OdeWorld const 0 8832 14 OdeWorld const 14 OdeWorld const 0 0 1267 0 0 0 0 0 0 0 0 0 0

1313 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1314 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1315 8 dWorldID 0 2105344 8 dWorldID 8 dWorldID 0 0 1316 0 0 0 0 0 0 0 0 0 0

1316 9 dxWorld * 0 8576 9 dxWorld * 9 dxWorld * 0 0 1266 0 0 0 0 0 0 0 0 0 0

1317 18 LVecBase3f const * 0 8576 18 LVecBase3f const * 18 LVecBase3f const * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1318 16 LVecBase3f const 0 8832 16 LVecBase3f const 16 LVecBase3f const 0 0 1319 0 0 0 0 0 0 0 0 0 0

1319 10 LVecBase3f 0 2048 10 LVecBase3f 10 LVecBase3f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1320 5 dReal 0 2105344 5 dReal 5 dReal 0 0 1321 0 0 0 0 0 0 0 0 0 0

1321 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1322 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1323 12 LVecBase3f * 0 8576 12 LVecBase3f * 12 LVecBase3f * 0 0 1319 0 0 0 0 0 0 0 0 0 0

1324 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1325 0 0 0 0 0 0 0 0 0 0

1325 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1326 9 OdeBody * 0 8576 9 OdeBody * 9 OdeBody * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1327 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1328 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1329 15 OdeJointGroup * 0 8576 15 OdeJointGroup * 15 OdeJointGroup * 0 0 1269 0 0 0 0 0 0 0 0 0 0

1330 21 OdeJointGroup const * 0 8576 21 OdeJointGroup const * 21 OdeJointGroup const * 0 0 1331 0 0 0 0 0 0 0 0 0 0

1331 19 OdeJointGroup const 0 8832 19 OdeJointGroup const 19 OdeJointGroup const 0 0 1269 0 0 0 0 0 0 0 0 0 0

1332 13 dJointGroupID 0 2105344 13 dJointGroupID 13 dJointGroupID 0 0 1333 0 0 0 0 0 0 0 0 0 0

1333 14 dxJointGroup * 0 8576 14 dxJointGroup * 14 dxJointGroup * 0 0 1263 0 0 0 0 0 0 0 0 0 0

1334 18 OdeJointFeedback * 0 8576 18 OdeJointFeedback * 18 OdeJointFeedback * 0 0 1270 0 0 0 0 0 0 0 0 0 0

1335 15 LVector3f const 0 8832 15 LVector3f const 15 LVector3f const 0 0 1336 0 0 0 0 0 0 0 0 0 0

1336 9 LVector3f 0 2048 9 LVector3f 9 LVector3f 0 0 0 0 0 0 0 0 0 0 0 0 338
/**
 * This is a three-component vector distance (as opposed to a three-component
 * point, which represents a particular point in space).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1337 24 OdeJointFeedback const * 0 8576 24 OdeJointFeedback const * 24 OdeJointFeedback const * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1338 22 OdeJointFeedback const 0 8832 22 OdeJointFeedback const 22 OdeJointFeedback const 0 0 1270 0 0 0 0 0 0 0 0 0 0

1339 17 LVector3f const * 0 8576 17 LVector3f const * 17 LVector3f const * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1340 10 OdeJoint * 0 8576 10 OdeJoint * 10 OdeJoint * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1341 16 OdeJoint const * 0 8576 16 OdeJoint const * 16 OdeJoint const * 0 0 1342 0 0 0 0 0 0 0 0 0 0

1342 14 OdeJoint const 0 8832 14 OdeJoint const 14 OdeJoint const 0 0 1272 0 0 0 0 0 0 0 0 0 0

1343 8 dJointID 0 2105344 8 dJointID 8 dJointID 0 0 1344 0 0 0 0 0 0 0 0 0 0

1344 9 dxJoint * 0 8576 9 dxJoint * 9 dxJoint * 0 0 1262 0 0 0 0 0 0 0 0 0 0

1345 15 OdeBody const * 0 8576 15 OdeBody const * 15 OdeBody const * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1346 13 OdeBody const 0 8832 13 OdeBody const 13 OdeBody const 0 0 1278 0 0 0 0 0 0 0 0 0 0

1347 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 1348 0 0 0 0 0 0 0 0 0 0

1348 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1349 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1350 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1352 0 0 0 0 0 0 0 0 0 0

1352 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1353 14 OdeBallJoint * 0 8576 14 OdeBallJoint * 14 OdeBallJoint * 0 0 1275 0 0 0 0 0 0 0 0 0 0

1354 15 OdeHingeJoint * 0 8576 15 OdeHingeJoint * 15 OdeHingeJoint * 0 0 1294 0 0 0 0 0 0 0 0 0 0

1355 16 OdeSliderJoint * 0 8576 16 OdeSliderJoint * 16 OdeSliderJoint * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1356 17 OdeContactJoint * 0 8576 17 OdeContactJoint * 17 OdeContactJoint * 0 0 1289 0 0 0 0 0 0 0 0 0 0

1357 19 OdeUniversalJoint * 0 8576 19 OdeUniversalJoint * 19 OdeUniversalJoint * 0 0 1308 0 0 0 0 0 0 0 0 0 0

1358 16 OdeHinge2Joint * 0 8576 16 OdeHinge2Joint * 16 OdeHinge2Joint * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1359 15 OdeFixedJoint * 0 8576 15 OdeFixedJoint * 15 OdeFixedJoint * 0 0 1291 0 0 0 0 0 0 0 0 0 0

1360 14 OdeNullJoint * 0 8576 14 OdeNullJoint * 14 OdeNullJoint * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1361 16 OdeAMotorJoint * 0 8576 16 OdeAMotorJoint * 16 OdeAMotorJoint * 0 0 1274 0 0 0 0 0 0 0 0 0 0

1362 16 OdeLMotorJoint * 0 8576 16 OdeLMotorJoint * 16 OdeLMotorJoint * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1363 17 OdePlane2dJoint * 0 8576 17 OdePlane2dJoint * 17 OdePlane2dJoint * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1364 22 OdeAMotorJoint const * 0 8576 22 OdeAMotorJoint const * 22 OdeAMotorJoint const * 0 0 1365 0 0 0 0 0 0 0 0 0 0

1365 20 OdeAMotorJoint const 0 8832 20 OdeAMotorJoint const 20 OdeAMotorJoint const 0 0 1274 0 0 0 0 0 0 0 0 0 0

1366 20 OdeBallJoint const * 0 8576 20 OdeBallJoint const * 20 OdeBallJoint const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 18 OdeBallJoint const 0 8832 18 OdeBallJoint const 18 OdeBallJoint const 0 0 1275 0 0 0 0 0 0 0 0 0 0

1368 9 OdeMass * 0 8576 9 OdeMass * 9 OdeMass * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1369 15 OdeMass const * 0 8576 15 OdeMass const * 15 OdeMass const * 0 0 1370 0 0 0 0 0 0 0 0 0 0

1370 13 OdeMass const 0 8832 13 OdeMass const 13 OdeMass const 0 0 1276 0 0 0 0 0 0 0 0 0 0

1371 17 LMatrix3f const * 0 8576 17 LMatrix3f const * 17 LMatrix3f const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 15 LMatrix3f const 0 8832 15 LMatrix3f const 15 LMatrix3f const 0 0 1373 0 0 0 0 0 0 0 0 0 0

1373 9 LMatrix3f 0 2048 9 LMatrix3f 9 LMatrix3f 0 0 0 0 0 0 0 0 0 0 0 0 231
/**
 * This is a 3-by-3 transform matrix.  It typically will represent either a
 * rotation-and-scale (no translation) matrix in 3-d, or a full affine matrix
 * (rotation, scale, translation) in 2-d, e.g.  for a texture matrix.
 */

1374 8 LPoint3f 0 2048 8 LPoint3f 8 LPoint3f 0 0 0 0 0 0 0 0 0 0 0 0 337
/**
 * This is a three-component point in space (as opposed to a three-component
 * vector, which represents a direction and a distance).  Some of the methods
 * are slightly different between LPoint3 and LVector3; in particular,
 * subtraction of two points yields a vector, while addition of a vector and a
 * point yields a point.
 */

1375 10 LPoint3f * 0 8576 10 LPoint3f * 10 LPoint3f * 0 0 1374 0 0 0 0 0 0 0 0 0 0

1376 11 LMatrix3f * 0 8576 11 LMatrix3f * 11 LMatrix3f * 0 0 1373 0 0 0 0 0 0 0 0 0 0

1377 7 dBodyID 0 2105344 7 dBodyID 7 dBodyID 0 0 1378 0 0 0 0 0 0 0 0 0 0

1378 8 dxBody * 0 8576 8 dxBody * 8 dxBody * 0 0 1260 0 0 0 0 0 0 0 0 0 0

1379 20 LQuaternionf const * 0 8576 20 LQuaternionf const * 20 LQuaternionf const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 18 LQuaternionf const 0 8832 18 LQuaternionf const 18 LQuaternionf const 0 0 1381 0 0 0 0 0 0 0 0 0 0

1381 12 LQuaternionf 0 2048 12 LQuaternionf 12 LQuaternionf 0 0 0 0 0 0 0 0 0 0 0 0 44
/**
 * This is the base quaternion class
 */

1382 10 LVecBase4f 0 2048 10 LVecBase4f 10 LVecBase4f 0 0 0 0 0 0 0 0 0 0 0 0 77
/**
 * This is the base class for all three-component vectors and points.
 */

1383 12 LVecBase4f * 0 8576 12 LVecBase4f * 12 LVecBase4f * 0 0 1382 0 0 0 0 0 0 0 0 0 0

1384 10 OdeSpace * 0 8576 10 OdeSpace * 10 OdeSpace * 0 0 1279 0 0 0 0 0 0 0 0 0 0

1385 16 OdeSpace const * 0 8576 16 OdeSpace const * 16 OdeSpace const * 0 0 1386 0 0 0 0 0 0 0 0 0 0

1386 14 OdeSpace const 0 8832 14 OdeSpace const 14 OdeSpace const 0 0 1279 0 0 0 0 0 0 0 0 0 0

1387 15 OdeGeom const * 0 8576 15 OdeGeom const * 15 OdeGeom const * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1388 13 OdeGeom const 0 8832 13 OdeGeom const 13 OdeGeom const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1389 17 BitMask32 const * 0 8576 17 BitMask32 const * 17 BitMask32 const * 0 0 1390 0 0 0 0 0 0 0 0 0 0

1390 15 BitMask32 const 0 8832 15 BitMask32 const 15 BitMask32 const 0 0 1391 0 0 0 0 0 0 0 0 0 0

1391 9 BitMask32 0 2105344 9 BitMask32 9 BitMask32 0 0 1392 0 0 0 0 0 0 0 0 0 0

1392 23 BitMask< uint32_t, 32 > 0 2048 23 BitMask< uint32_t, 32 > 23 BitMask< uint32_t, 32 > 0 0 0 0 0 0 0 0 0 0 0 0 0

1393 11 BitMask32 * 0 8576 11 BitMask32 * 11 BitMask32 * 0 0 1391 0 0 0 0 0 0 0 0 0 0

1394 9 OdeGeom * 0 8576 9 OdeGeom * 9 OdeGeom * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1395 16 OdeSimpleSpace * 0 8576 16 OdeSimpleSpace * 16 OdeSimpleSpace * 0 0 1302 0 0 0 0 0 0 0 0 0 0

1396 14 OdeHashSpace * 0 8576 14 OdeHashSpace * 14 OdeHashSpace * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1397 18 OdeQuadTreeSpace * 0 8576 18 OdeQuadTreeSpace * 18 OdeQuadTreeSpace * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1398 7 dGeomID 0 2105344 7 dGeomID 7 dGeomID 0 0 1399 0 0 0 0 0 0 0 0 0 0

1399 8 dxGeom * 0 8576 8 dxGeom * 8 dxGeom * 0 0 1261 0 0 0 0 0 0 0 0 0 0

1400 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1401 14 LQuaternionf * 0 8576 14 LQuaternionf * 14 LQuaternionf * 0 0 1381 0 0 0 0 0 0 0 0 0 0

1402 12 OdeBoxGeom * 0 8576 12 OdeBoxGeom * 12 OdeBoxGeom * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1403 23 OdeCappedCylinderGeom * 0 8576 23 OdeCappedCylinderGeom * 23 OdeCappedCylinderGeom * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1404 17 OdeCylinderGeom * 0 8576 17 OdeCylinderGeom * 17 OdeCylinderGeom * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1405 14 OdePlaneGeom * 0 8576 14 OdePlaneGeom * 14 OdePlaneGeom * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1406 12 OdeRayGeom * 0 8576 12 OdeRayGeom * 12 OdeRayGeom * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1407 15 OdeSphereGeom * 0 8576 15 OdeSphereGeom * 15 OdeSphereGeom * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1408 16 OdeTriMeshGeom * 0 8576 16 OdeTriMeshGeom * 16 OdeTriMeshGeom * 0 0 1307 0 0 0 0 0 0 0 0 0 0

1409 16 LPoint3f const * 0 8576 16 LPoint3f const * 16 LPoint3f const * 0 0 1410 0 0 0 0 0 0 0 0 0 0

1410 14 LPoint3f const 0 8832 14 LPoint3f const 14 LPoint3f const 0 0 1374 0 0 0 0 0 0 0 0 0 0

1411 29 OdeCappedCylinderGeom const * 0 8576 29 OdeCappedCylinderGeom const * 29 OdeCappedCylinderGeom const * 0 0 1412 0 0 0 0 0 0 0 0 0 0

1412 27 OdeCappedCylinderGeom const 0 8832 27 OdeCappedCylinderGeom const 27 OdeCappedCylinderGeom const 0 0 1283 0 0 0 0 0 0 0 0 0 0

1413 16 OdeContactGeom * 0 8576 16 OdeContactGeom * 16 OdeContactGeom * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1414 22 OdeContactGeom const * 0 8576 22 OdeContactGeom const * 22 OdeContactGeom const * 0 0 1415 0 0 0 0 0 0 0 0 0 0

1415 20 OdeContactGeom const 0 8832 20 OdeContactGeom const 20 OdeContactGeom const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1416 11 dReal const 0 8832 11 dReal const 11 dReal const 0 0 1320 0 0 0 0 0 0 0 0 0 0

1417 25 OdeCollisionEntry const * 0 8576 25 OdeCollisionEntry const * 25 OdeCollisionEntry const * 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 23 OdeCollisionEntry const 0 8832 23 OdeCollisionEntry const 23 OdeCollisionEntry const 0 0 1285 0 0 0 0 0 0 0 0 0 0

1419 19 OdeCollisionEntry * 0 8576 19 OdeCollisionEntry * 19 OdeCollisionEntry * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1420 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1422 22 OdeSurfaceParameters * 0 8576 22 OdeSurfaceParameters * 22 OdeSurfaceParameters * 0 0 1286 0 0 0 0 0 0 0 0 0 0

1423 28 OdeSurfaceParameters const * 0 8576 28 OdeSurfaceParameters const * 28 OdeSurfaceParameters const * 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 26 OdeSurfaceParameters const 0 8832 26 OdeSurfaceParameters const 26 OdeSurfaceParameters const 0 0 1286 0 0 0 0 0 0 0 0 0 0

1425 12 OdeContact * 0 8576 12 OdeContact * 12 OdeContact * 0 0 1288 0 0 0 0 0 0 0 0 0 0

1426 16 dContact const * 0 8576 16 dContact const * 16 dContact const * 0 0 1427 0 0 0 0 0 0 0 0 0 0

1427 14 dContact const 0 8832 14 dContact const 14 dContact const 0 0 1428 0 0 0 0 0 0 0 0 0 0

1428 8 dContact 0 1024 8 dContact 8 dContact 0 0 0 0 0 0 0 0 0 0 0 0 0

1429 18 OdeContact const * 0 8576 18 OdeContact const * 18 OdeContact const * 0 0 1430 0 0 0 0 0 0 0 0 0 0

1430 16 OdeContact const 0 8832 16 OdeContact const 16 OdeContact const 0 0 1288 0 0 0 0 0 0 0 0 0 0

1431 23 OdeCylinderGeom const * 0 8576 23 OdeCylinderGeom const * 23 OdeCylinderGeom const * 0 0 1432 0 0 0 0 0 0 0 0 0 0

1432 21 OdeCylinderGeom const 0 8832 21 OdeCylinderGeom const 21 OdeCylinderGeom const 0 0 1290 0 0 0 0 0 0 0 0 0 0

1433 20 OdeHashSpace const * 0 8576 20 OdeHashSpace const * 20 OdeHashSpace const * 0 0 1434 0 0 0 0 0 0 0 0 0 0

1434 18 OdeHashSpace const 0 8832 18 OdeHashSpace const 18 OdeHashSpace const 0 0 1292 0 0 0 0 0 0 0 0 0 0

1435 22 OdeHinge2Joint const * 0 8576 22 OdeHinge2Joint const * 22 OdeHinge2Joint const * 0 0 1436 0 0 0 0 0 0 0 0 0 0

1436 20 OdeHinge2Joint const 0 8832 20 OdeHinge2Joint const 20 OdeHinge2Joint const 0 0 1293 0 0 0 0 0 0 0 0 0 0

1437 21 OdeHingeJoint const * 0 8576 21 OdeHingeJoint const * 21 OdeHingeJoint const * 0 0 1438 0 0 0 0 0 0 0 0 0 0

1438 19 OdeHingeJoint const 0 8832 19 OdeHingeJoint const 19 OdeHingeJoint const 0 0 1294 0 0 0 0 0 0 0 0 0 0

1439 20 OdeJointCollection * 0 8576 20 OdeJointCollection * 20 OdeJointCollection * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1440 26 OdeJointCollection const * 0 8576 26 OdeJointCollection const * 26 OdeJointCollection const * 0 0 1441 0 0 0 0 0 0 0 0 0 0

1441 24 OdeJointCollection const 0 8832 24 OdeJointCollection const 24 OdeJointCollection const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1442 22 OdeLMotorJoint const * 0 8576 22 OdeLMotorJoint const * 22 OdeLMotorJoint const * 0 0 1443 0 0 0 0 0 0 0 0 0 0

1443 20 OdeLMotorJoint const 0 8832 20 OdeLMotorJoint const 20 OdeLMotorJoint const 0 0 1296 0 0 0 0 0 0 0 0 0 0

1444 18 LVecBase4f const * 0 8576 18 LVecBase4f const * 18 LVecBase4f const * 0 0 1445 0 0 0 0 0 0 0 0 0 0

1445 16 LVecBase4f const 0 8832 16 LVecBase4f const 16 LVecBase4f const 0 0 1382 0 0 0 0 0 0 0 0 0 0

1446 20 OdePlaneGeom const * 0 8576 20 OdePlaneGeom const * 20 OdePlaneGeom const * 0 0 1447 0 0 0 0 0 0 0 0 0 0

1447 18 OdePlaneGeom const 0 8832 18 OdePlaneGeom const 18 OdePlaneGeom const 0 0 1299 0 0 0 0 0 0 0 0 0 0

1448 9 int const 0 8832 9 int const 9 int const 0 0 1322 0 0 0 0 0 0 0 0 0 0

1449 18 OdeRayGeom const * 0 8576 18 OdeRayGeom const * 18 OdeRayGeom const * 0 0 1450 0 0 0 0 0 0 0 0 0 0

1450 16 OdeRayGeom const 0 8832 16 OdeRayGeom const 16 OdeRayGeom const 0 0 1301 0 0 0 0 0 0 0 0 0 0

1451 22 OdeSliderJoint const * 0 8576 22 OdeSliderJoint const * 22 OdeSliderJoint const * 0 0 1452 0 0 0 0 0 0 0 0 0 0

1452 20 OdeSliderJoint const 0 8832 20 OdeSliderJoint const 20 OdeSliderJoint const 0 0 1303 0 0 0 0 0 0 0 0 0 0

1453 21 OdeSphereGeom const * 0 8576 21 OdeSphereGeom const * 21 OdeSphereGeom const * 0 0 1454 0 0 0 0 0 0 0 0 0 0

1454 19 OdeSphereGeom const 0 8832 19 OdeSphereGeom const 19 OdeSphereGeom const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1455 16 NodePath const * 0 8576 16 NodePath const * 16 NodePath const * 0 0 1456 0 0 0 0 0 0 0 0 0 0

1456 14 NodePath const 0 8832 14 NodePath const 14 NodePath const 0 0 1457 0 0 0 0 0 0 0 0 0 0

1457 8 NodePath 0 2048 8 NodePath 8 NodePath 0 0 0 0 0 0 0 0 0 0 0 0 762
/**
 * NodePath is the fundamental system for disambiguating instances, and also
 * provides a higher-level interface for manipulating the scene graph.
 *
 * A NodePath is a list of connected nodes from the root of the graph to any
 * sub-node.  Each NodePath therefore uniquely describes one instance of a
 * node.
 *
 * NodePaths themselves are lightweight objects that may easily be copied and
 * passed by value.  Their data is stored as a series of NodePathComponents
 * that are stored on the nodes.  Holding a NodePath will keep a reference
 * count to all the nodes in the path.  However, if any node in the path is
 * removed or reparented (perhaps through a different NodePath), the NodePath
 * will automatically be updated to reflect the changes.
 */

1458 16 OdeTriMeshData * 0 8576 16 OdeTriMeshData * 16 OdeTriMeshData * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1459 22 OdeTriMeshData const * 0 8576 22 OdeTriMeshData const * 22 OdeTriMeshData const * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1460 20 OdeTriMeshData const 0 8832 20 OdeTriMeshData const 20 OdeTriMeshData const 0 0 1305 0 0 0 0 0 0 0 0 0 0

1461 22 OdeTriMeshGeom const * 0 8576 22 OdeTriMeshGeom const * 22 OdeTriMeshGeom const * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 20 OdeTriMeshGeom const 0 8832 20 OdeTriMeshGeom const 20 OdeTriMeshGeom const 0 0 1307 0 0 0 0 0 0 0 0 0 0

1463 25 OdeUniversalJoint const * 0 8576 25 OdeUniversalJoint const * 25 OdeUniversalJoint const * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 23 OdeUniversalJoint const 0 8832 23 OdeUniversalJoint const 23 OdeUniversalJoint const 0 0 1308 0 0 0 0 0 0 0 0 0 0

1465 9 OdeUtil * 0 8576 9 OdeUtil * 9 OdeUtil * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1466 15 OdeUtil const * 0 8576 15 OdeUtil const * 15 OdeUtil const * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1467 13 OdeUtil const 0 8832 13 OdeUtil const 13 OdeUtil const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1468 15 short int const 0 8832 15 short int const 15 short int const 0 0 1469 0 0 0 0 0 0 0 0 0 0

1469 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

0
0
6
1470 8 get_axes 0 757 758 24 OdeAMotorJoint::get_axes 0

1471 10 get_joints 0 858 859 19 OdeBody::get_joints 0

1472 18 get_contact_points 0 992 993 37 OdeCollisionEntry::get_contact_points 0

1473 17 get_contact_geoms 0 992 994 36 OdeCollisionEntry::get_contact_geoms 0

1474 10 get_joints 0 1123 1124 30 OdeJointCollection::get_joints 0

1475 8 get_axes 0 1133 1134 24 OdeLMotorJoint::get_axes 0

