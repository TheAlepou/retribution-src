1481294027
3 2
13 libp3pipeline 4 kd_i 12 panda3d.core 
119
116 29 upcast_to_TypedReferenceCount 0 12 235 44 AsyncTaskBase::upcast_to_TypedReferenceCount 0 1 3 48
upcast from AsyncTaskBase to TypedReferenceCount
72
TypedReferenceCount *AsyncTaskBase::upcast_to_TypedReferenceCount(void);

117 25 downcast_to_AsyncTaskBase 0 12 236 46 TypedReferenceCount::downcast_to_AsyncTaskBase 0 1 4 50
downcast from TypedReferenceCount to AsyncTaskBase
68
AsyncTaskBase *TypedReferenceCount::downcast_to_AsyncTaskBase(void);

118 17 upcast_to_Namable 0 12 235 32 AsyncTaskBase::upcast_to_Namable 0 1 5 36
upcast from AsyncTaskBase to Namable
48
Namable *AsyncTaskBase::upcast_to_Namable(void);

119 25 downcast_to_AsyncTaskBase 0 12 237 34 Namable::downcast_to_AsyncTaskBase 0 1 6 38
downcast from Namable to AsyncTaskBase
56
AsyncTaskBase *Namable::downcast_to_AsyncTaskBase(void);

120 14 ~AsyncTaskBase 0 6 235 29 AsyncTaskBase::~AsyncTaskBase 0 0 10
/**
 *
 */
44
virtual AsyncTaskBase::~AsyncTaskBase(void);

121 14 get_class_type 0 4 235 29 AsyncTaskBase::get_class_type 0 1 2 0
54
static TypeHandle AsyncTaskBase::get_class_type(void);

122 13 AsyncTaskBase 0 4 235 28 AsyncTaskBase::AsyncTaskBase 0 1 1 10
/**
 *
 */
69
inline AsyncTaskBase::AsyncTaskBase(AsyncTaskBase const &) = default;

123 29 upcast_to_TypedReferenceCount 0 12 239 37 Thread::upcast_to_TypedReferenceCount 0 1 37 41
upcast from Thread to TypedReferenceCount
65
TypedReferenceCount *Thread::upcast_to_TypedReferenceCount(void);

124 18 downcast_to_Thread 0 12 236 39 TypedReferenceCount::downcast_to_Thread 0 1 38 43
downcast from TypedReferenceCount to Thread
54
Thread *TypedReferenceCount::downcast_to_Thread(void);

125 17 upcast_to_Namable 0 12 239 25 Thread::upcast_to_Namable 0 1 39 29
upcast from Thread to Namable
41
Namable *Thread::upcast_to_Namable(void);

126 18 downcast_to_Thread 0 12 237 27 Namable::downcast_to_Thread 0 1 40 31
downcast from Namable to Thread
42
Thread *Namable::downcast_to_Thread(void);

127 7 ~Thread 0 6 239 15 Thread::~Thread 0 0 10
/**
 *
 */
30
virtual Thread::~Thread(void);

128 11 bind_thread 0 4 239 19 Thread::bind_thread 0 1 7 952
/**
 * Returns a new Panda Thread object associated with the current thread (which
 * has been created externally). This can be used to bind a unique Panda
 * Thread object with an external thread, such as a new Python thread.
 *
 * It is particularly useful to bind a Panda Thread object to an external
 * thread for the purposes of PStats monitoring.  Without this call, each
 * external thread will be assigned the same global ExternalThread object,
 * which means they will all appear in the same PStats graph.
 *
 * It is the caller's responsibility to save the returned Thread pointer for
 * the lifetime of the external thread.  It is an error for the Thread pointer
 * to destruct while the external thread is still in the system.
 *
 * It is also an error to call this method from the main thread, or twice
 * within a given thread, unless it is given the same name each time (in which
 * case the same pointer will be returned each time).
 */
102
static PointerTo< Thread > Thread::bind_thread(std::string const &name, std::string const &sync_name);

129 13 get_sync_name 0 4 239 21 Thread::get_sync_name 0 1 8 279
/**
 * Returns the sync name of the thread.  This name collects threads into "sync
 * groups", which are expected to run synchronously.  This is mainly used for
 * the benefit of PStats; threads with the same sync name can be ticked all at
 * once via the thread_tick() call.
 */
60
inline std::string const &Thread::get_sync_name(void) const;

130 16 get_pstats_index 0 4 239 24 Thread::get_pstats_index 0 1 9 218
/**
 * Returns the PStats index associated with this thread, or -1 if no index has
 * yet been associated with this thread.  This is used internally by the
 * PStatClient; you should not need to call this directly.
 */
48
inline int Thread::get_pstats_index(void) const;

131 16 get_python_index 0 4 239 24 Thread::get_python_index 0 1 10 233
/**
 * Returns the Python index associated with this thread, or -1 if no index has
 * yet been associated with this thread.  This is used internally by the
 * direct.stdpy.thread module; you should not need to call this directly.
 */
48
inline int Thread::get_python_index(void) const;

132 13 get_unique_id 0 4 239 21 Thread::get_unique_id 0 1 11 161
/**
 * Returns a string that is guaranteed to be unique to this thread, across all
 * processes on the machine, during at least the lifetime of this process.
 */
53
inline std::string Thread::get_unique_id(void) const;

133 18 get_pipeline_stage 0 4 239 26 Thread::get_pipeline_stage 0 1 12 163
/**
 * Returns the Pipeline stage number associated with this thread.  The default
 * stage is 0 if no stage is specified otherwise.  See set_pipeline_stage().
 */
50
inline int Thread::get_pipeline_stage(void) const;

134 18 set_pipeline_stage 0 4 239 26 Thread::set_pipeline_stage 0 1 13 479
/**
 * Specifies the Pipeline stage number associated with this thread.  The
 * default stage is 0 if no stage is specified otherwise.
 *
 * This must be a value in the range [0 .. pipeline->get_num_stages() - 1].
 * It specifies the values that this thread observes for all pipelined data.
 * Typically, an application thread will leave this at 0, but a render thread
 * may set it to 1 or 2 (to operate on the previous frame's data, or the
 * second previous frame's data).
 */
52
void Thread::set_pipeline_stage(int pipeline_stage);

135 22 set_min_pipeline_stage 0 4 239 30 Thread::set_min_pipeline_stage 0 1 14 143
/**
 * Sets this thread's pipeline stage number to at least the indicated value,
 * unless it is already larger.  See set_pipeline_stage().
 */
67
inline void Thread::set_min_pipeline_stage(int min_pipeline_stage);

136 15 get_main_thread 0 4 239 23 Thread::get_main_thread 0 1 15 111
/**
 * Returns a pointer to the "main" Thread object--this is the Thread that
 * started the whole process.
 */
52
static inline Thread *Thread::get_main_thread(void);

137 19 get_external_thread 0 4 239 27 Thread::get_external_thread 0 1 16 248
/**
 * Returns a pointer to the "external" Thread object--this is a special Thread
 * object that corresponds to any thread spawned outside of Panda's threading
 * interface.  Note that multiple different threads may share this same
 * pointer.
 */
56
static inline Thread *Thread::get_external_thread(void);

138 18 get_current_thread 0 4 239 26 Thread::get_current_thread 0 1 17 415
/**
 * Returns a pointer to the currently-executing Thread object.  If this is
 * called from the main thread, this will return the same value as
 * get_main_thread().
 *
 * This will always return some valid Thread pointer.  It will never return
 * NULL, even if the current thread was spawned outside of Panda's threading
 * system, although all non-Panda threads will return the exact same Thread
 * pointer.
 */
55
static inline Thread *Thread::get_current_thread(void);

139 26 get_current_pipeline_stage 0 4 239 34 Thread::get_current_pipeline_stage 0 1 18 208
/**
 * Returns the integer pipeline stage associated with the current thread.
 * This is the same thing as get_current_thread()->get_pipeline_stage(), but
 * it may be faster to retrieve in some contexts.
 */
59
static inline int Thread::get_current_pipeline_stage(void);

140 22 is_threading_supported 0 4 239 30 Thread::is_threading_supported 0 1 19 159
/**
 * Returns true if threading support has been compiled in and enabled, or
 * false if no threading is available (and Thread::start() will always fail).
 */
56
static inline bool Thread::is_threading_supported(void);

141 15 is_true_threads 0 4 239 23 Thread::is_true_threads 0 1 20 196
/**
 * Returns true if a real threading library is available that supports actual
 * OS-implemented threads, or false if the only threading we can provide is
 * simulated user-space threading.
 */
49
static inline bool Thread::is_true_threads(void);

142 17 is_simple_threads 0 4 239 25 Thread::is_simple_threads 0 1 21 393
/**
 * Returns true if Panda is currently compiled for "simple threads", which is
 * to say, cooperative context switching only, reducing the need for quite so
 * many critical section protections.  This is not necessarily the opposite of
 * "true threads", since one possible implementation of simple threads is via
 * true threads with mutex protection to ensure only one runs at a time.
 */
51
static inline bool Thread::is_simple_threads(void);

143 5 sleep 0 4 239 13 Thread::sleep 0 1 22 119
/**
 * Suspends the current thread for at least the indicated amount of time.  It
 * might be suspended for longer.
 */
49
static inline void Thread::sleep(double seconds);

144 11 force_yield 0 4 239 19 Thread::force_yield 0 1 23 73
/**
 * Suspends the current thread for the rest of the current epoch.
 */
45
static inline void Thread::force_yield(void);

145 14 consider_yield 0 4 239 22 Thread::consider_yield 0 1 24 239
/**
 * Possibly suspends the current thread for the rest of the current epoch, if
 * it has run for enough this epoch.  This is especially important for the
 * simple thread implementation, which relies on cooperative yields like this.
 */
48
static inline void Thread::consider_yield(void);

146 6 output 0 6 239 14 Thread::output 0 1 25 10
/**
 *
 */
48
virtual void Thread::output(ostream &out) const;

147 14 output_blocker 0 4 239 22 Thread::output_blocker 0 1 26 184
/**
 * Writes a description of the mutex or condition variable that this thread is
 * blocked on.  Writes nothing if there is no blocker, or if we are not in
 * DEBUG_THREADS mode.
 */
48
void Thread::output_blocker(ostream &out) const;

148 12 write_status 0 4 239 20 Thread::write_status 0 1 27 10
/**
 *
 */
47
static void Thread::write_status(ostream &out);

149 10 is_started 0 4 239 18 Thread::is_started 0 1 28 117
/**
 * Returns true if the thread has been started, false if it has not, or if
 * join() has already been called.
 */
43
inline bool Thread::is_started(void) const;

150 11 is_joinable 0 4 239 19 Thread::is_joinable 0 1 29 77
/**
 * Returns the value of joinable that was passed to the start() call.
 */
44
inline bool Thread::is_joinable(void) const;

151 5 start 0 4 239 13 Thread::start 0 1 30 862
/**
 * Starts the thread executing.  It is only valid to call this once.
 *
 * The thread will begin executing its thread_main() function, and will
 * terminate when thread_main() returns.
 *
 * priority is intended as a hint to the relative importance of this thread.
 * This may be ignored by the thread implementation.
 *
 * joinable should be set true if you intend to call join() to wait for the
 * thread to terminate, or false if you don't care and you will never call
 * join(). Note that the reference count on the Thread object is incremented
 * while the thread itself is running, so if you just want to fire and forget
 * a thread, you may pass joinable = false, and never store the Thread object.
 * It will automatically destruct itself when it finishes.
 *
 * The return value is true if the thread is successfully started, false
 * otherwise.
 */
59
bool Thread::start(ThreadPriority priority, bool joinable);

152 4 join 0 4 239 12 Thread::join 0 1 31 134
/**
 * Blocks the calling process until the thread terminates.  If the thread has
 * already terminated, this returns immediately.
 */
31
inline void Thread::join(void);

153 7 preempt 0 4 239 15 Thread::preempt 0 1 32 183
/**
 * Indicates that this thread should run as soon as possible, preemptying any
 * other threads that may be scheduled to run.  This may not be implemented on
 * every platform.
 */
34
inline void Thread::preempt(void);

154 16 get_current_task 0 4 239 24 Thread::get_current_task 0 1 33 161
/**
 * Returns the task currently executing on this thread (via the
 * AsyncTaskManager), if any, or NULL if the thread is not currently servicing
 * a task.
 */
59
inline AsyncTaskBase *Thread::get_current_task(void) const;

155 16 set_python_index 0 4 239 24 Thread::set_python_index 0 1 34 160
/**
 * Stores a Python index to be associated with this thread.  This is used
 * internally by the thread module; you should not need to call this directly.
 */
48
inline void Thread::set_python_index(int index);

156 16 prepare_for_exit 0 4 239 24 Thread::prepare_for_exit 0 1 35 143
/**
 * Should be called by the main thread just before exiting the program, this
 * blocks until any remaining thread cleanup has finished.
 */
50
static inline void Thread::prepare_for_exit(void);

157 14 get_class_type 0 4 239 22 Thread::get_class_type 0 1 36 0
47
static TypeHandle Thread::get_class_type(void);

158 7 acquire 0 4 246 20 MutexDirect::acquire 0 1 41 405
/**
 * Grabs the mutex if it is available.  If it is not available, blocks until
 * it becomes available, then grabs it.  In either case, the function does not
 * return until the mutex is held; you should then call unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * mutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see MutexHolder.
 */
45
inline void MutexDirect::acquire(void) const;

159 11 try_acquire 0 4 246 24 MutexDirect::try_acquire 0 1 42 125
/**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */
49
inline bool MutexDirect::try_acquire(void) const;

160 7 release 0 4 246 20 MutexDirect::release 0 1 43 247
/**
 * Releases the mutex.  It is an error to call this if the mutex was not
 * already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * mutexes, mainly to allow thread-safe access to otherwise const data.
 */
45
inline void MutexDirect::release(void) const;

161 15 debug_is_locked 0 4 246 28 MutexDirect::debug_is_locked 0 1 44 278
/**
 * Returns true if the current thread has locked the Mutex, false otherwise.
 * This method is only intended for use in debugging, hence the method name;
 * in the MutexDirect case, it always returns true, since there's not a
 * reliable way to determine this otherwise.
 */
53
inline bool MutexDirect::debug_is_locked(void) const;

162 8 set_name 0 4 246 21 MutexDirect::set_name 0 1 45 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
59
inline void MutexDirect::set_name(std::string const &name);

163 10 clear_name 0 4 246 23 MutexDirect::clear_name 0 1 46 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
42
inline void MutexDirect::clear_name(void);

164 8 has_name 0 4 246 21 MutexDirect::has_name 0 1 47 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
46
inline bool MutexDirect::has_name(void) const;

165 8 get_name 0 4 246 21 MutexDirect::get_name 0 1 48 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
53
inline std::string MutexDirect::get_name(void) const;

166 6 output 0 4 246 19 MutexDirect::output 0 1 49 92
/**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * MutexDirect.
 */
45
void MutexDirect::output(ostream &out) const;

167 5 Mutex 0 4 247 12 Mutex::Mutex 0 2 50 51 78
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Do not attempt to copy mutexes.
 */
72
inline Mutex::Mutex(void);
inline Mutex::Mutex(std::string const &name);

168 6 ~Mutex 0 4 247 13 Mutex::~Mutex 0 0 10
/**
 *
 */
27
inline Mutex::~Mutex(void);

169 19 ~ConditionVarDirect 0 4 248 39 ConditionVarDirect::~ConditionVarDirect 0 0 10
/**
 *
 */
53
inline ConditionVarDirect::~ConditionVarDirect(void);

170 9 get_mutex 0 4 248 29 ConditionVarDirect::get_mutex 0 1 52 69
/**
 * Returns the mutex associated with this condition variable.
 */
62
inline MutexDirect &ConditionVarDirect::get_mutex(void) const;

171 4 wait 0 4 248 24 ConditionVarDirect::wait 0 2 53 54 1192
/**
 * Waits on the condition.  The caller must already be holding the lock
 * associated with the condition variable before calling this function.
 *
 * wait() will release the lock, then go to sleep until some other thread
 * calls notify() on this condition variable.  At that time at least one
 * thread waiting on the same ConditionVarDirect will grab the lock again, and
 * then return from wait().
 *
 * It is possible that wait() will return even if no one has called notify().
 * It is the responsibility of the calling process to verify the condition on
 * return from wait, and possibly loop back to wait again if necessary.
 *
 * Note the semantics of a condition variable: the mutex must be held before
 * wait() is called, and it will still be held when wait() returns.  However,
 * it will be temporarily released during the wait() call itself.
 */

/**
 * Waits on the condition, with a timeout.  The function will return when the
 * condition variable is notified, or the timeout occurs.  There is no way to
 * directly tell which happened, and it is possible that neither in fact
 * happened (spurious wakeups are possible).
 *
 * See wait() with no parameters for more.
 */
97
inline void ConditionVarDirect::wait(void);
inline void ConditionVarDirect::wait(double timeout);

172 6 notify 0 4 248 26 ConditionVarDirect::notify 0 1 55 542
/**
 * Informs one of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.  If multiple threads are currently
 * waiting, at least one of them will be woken up, although there is no way to
 * predict which one.  It is possible that more than one thread will be woken
 * up.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify event is lost.
 */
45
inline void ConditionVarDirect::notify(void);

173 6 output 0 4 248 26 ConditionVarDirect::output 0 1 56 106
/**
 * This method is declared virtual in ConditionVarDebug, but non-virtual in
 * ConditionVarDirect.
 */
52
void ConditionVarDirect::output(ostream &out) const;

174 12 ConditionVar 0 4 249 26 ConditionVar::ConditionVar 0 1 57 334
/**
 * You must pass in a Mutex to the condition variable constructor.  This mutex
 * may be shared by other condition variables, if desired.  It is the caller's
 * responsibility to ensure the Mutex object does not destruct during the
 * lifetime of the condition variable.
 */

/**
 * Do not attempt to copy condition variables.
 */
48
inline ConditionVar::ConditionVar(Mutex &mutex);

175 13 ~ConditionVar 0 4 249 27 ConditionVar::~ConditionVar 0 0 10
/**
 *
 */
41
inline ConditionVar::~ConditionVar(void);

176 9 get_mutex 0 4 249 23 ConditionVar::get_mutex 0 1 58 69
/**
 * Returns the mutex associated with this condition variable.
 */
50
inline Mutex &ConditionVar::get_mutex(void) const;

177 23 ~ConditionVarFullDirect 0 4 250 47 ConditionVarFullDirect::~ConditionVarFullDirect 0 0 10
/**
 *
 */
61
inline ConditionVarFullDirect::~ConditionVarFullDirect(void);

178 9 get_mutex 0 4 250 33 ConditionVarFullDirect::get_mutex 0 1 59 69
/**
 * Returns the mutex associated with this condition variable.
 */
66
inline MutexDirect &ConditionVarFullDirect::get_mutex(void) const;

179 4 wait 0 4 250 28 ConditionVarFullDirect::wait 0 2 60 61 1196
/**
 * Waits on the condition.  The caller must already be holding the lock
 * associated with the condition variable before calling this function.
 *
 * wait() will release the lock, then go to sleep until some other thread
 * calls notify() on this condition variable.  At that time at least one
 * thread waiting on the same ConditionVarFullDirect will grab the lock again,
 * and then return from wait().
 *
 * It is possible that wait() will return even if no one has called notify().
 * It is the responsibility of the calling process to verify the condition on
 * return from wait, and possibly loop back to wait again if necessary.
 *
 * Note the semantics of a condition variable: the mutex must be held before
 * wait() is called, and it will still be held when wait() returns.  However,
 * it will be temporarily released during the wait() call itself.
 */

/**
 * Waits on the condition, with a timeout.  The function will return when the
 * condition variable is notified, or the timeout occurs.  There is no way to
 * directly tell which happened, and it is possible that neither in fact
 * happened (spurious wakeups are possible).
 *
 * See wait() with no parameters for more.
 */
105
inline void ConditionVarFullDirect::wait(void);
inline void ConditionVarFullDirect::wait(double timeout);

180 6 notify 0 4 250 30 ConditionVarFullDirect::notify 0 1 62 536
/**
 * Informs one of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.  If multiple threads are currently
 * waiting, at least one of them will be woken up, although there is no way to
 * predict which one.  It is possible that more than one thread will be woken
 * up.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify is lost.
 */
49
inline void ConditionVarFullDirect::notify(void);

181 10 notify_all 0 4 250 34 ConditionVarFullDirect::notify_all 0 1 63 343
/**
 * Informs all of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify event is lost.
 */
53
inline void ConditionVarFullDirect::notify_all(void);

182 6 output 0 4 250 30 ConditionVarFullDirect::output 0 1 64 114
/**
 * This method is declared virtual in ConditionVarFullDebug, but non-virtual
 * in ConditionVarFullDirect.
 */
56
void ConditionVarFullDirect::output(ostream &out) const;

183 16 ConditionVarFull 0 4 251 34 ConditionVarFull::ConditionVarFull 0 1 65 334
/**
 * You must pass in a Mutex to the condition variable constructor.  This mutex
 * may be shared by other condition variables, if desired.  It is the caller's
 * responsibility to ensure the Mutex object does not destruct during the
 * lifetime of the condition variable.
 */

/**
 * Do not attempt to copy condition variables.
 */
56
inline ConditionVarFull::ConditionVarFull(Mutex &mutex);

184 17 ~ConditionVarFull 0 4 251 35 ConditionVarFull::~ConditionVarFull 0 0 10
/**
 *
 */
49
inline ConditionVarFull::~ConditionVarFull(void);

185 9 get_mutex 0 4 251 27 ConditionVarFull::get_mutex 0 1 66 69
/**
 * Returns the mutex associated with this condition variable.
 */
54
inline Mutex &ConditionVarFull::get_mutex(void) const;

186 7 acquire 0 4 252 22 ReMutexDirect::acquire 0 2 67 68 541
/**
 * Grabs the reMutex if it is available.  If it is not available, blocks until
 * it becomes available, then grabs it.  In either case, the function does not
 * return until the reMutex is held; you should then call unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * reMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see ReMutexHolder.
 */

/**
 * This variant on acquire() accepts the current thread as a parameter, if it
 * is already known, as an optimization.
 */
113
inline void ReMutexDirect::acquire(void) const;
inline void ReMutexDirect::acquire(Thread *current_thread) const;

187 11 try_acquire 0 4 252 26 ReMutexDirect::try_acquire 0 2 69 70 252
/**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */

/**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */
121
inline bool ReMutexDirect::try_acquire(void) const;
inline bool ReMutexDirect::try_acquire(Thread *current_thread) const;

188 12 elevate_lock 0 4 252 27 ReMutexDirect::elevate_lock 0 1 71 468
/**
 * This method increments the lock count, assuming the calling thread already
 * holds the lock.  After this call, release() will need to be called one
 * additional time to release the lock.
 *
 * This method really performs the same function as acquire(), but it offers a
 * potential (slight) performance benefit when the calling thread knows that
 * it already holds the lock.  It is an error to call this when the calling
 * thread does not hold the lock.
 */
52
inline void ReMutexDirect::elevate_lock(void) const;

189 7 release 0 4 252 22 ReMutexDirect::release 0 1 72 253
/**
 * Releases the reMutex.  It is an error to call this if the reMutex was not
 * already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * reMutexes, mainly to allow thread-safe access to otherwise const data.
 */
47
inline void ReMutexDirect::release(void) const;

190 15 debug_is_locked 0 4 252 30 ReMutexDirect::debug_is_locked 0 1 73 282
/**
 * Returns true if the current thread has locked the ReMutex, false otherwise.
 * This method is only intended for use in debugging, hence the method name;
 * in the ReMutexDirect case, it always returns true, since there's not a
 * reliable way to determine this otherwise.
 */
55
inline bool ReMutexDirect::debug_is_locked(void) const;

191 8 set_name 0 4 252 23 ReMutexDirect::set_name 0 1 74 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
61
inline void ReMutexDirect::set_name(std::string const &name);

192 10 clear_name 0 4 252 25 ReMutexDirect::clear_name 0 1 75 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
44
inline void ReMutexDirect::clear_name(void);

193 8 has_name 0 4 252 23 ReMutexDirect::has_name 0 1 76 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
48
inline bool ReMutexDirect::has_name(void) const;

194 8 get_name 0 4 252 23 ReMutexDirect::get_name 0 1 77 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
55
inline std::string ReMutexDirect::get_name(void) const;

195 6 output 0 4 252 21 ReMutexDirect::output 0 1 78 94
/**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * ReMutexDirect.
 */
47
void ReMutexDirect::output(ostream &out) const;

196 7 ReMutex 0 4 253 16 ReMutex::ReMutex 0 2 79 80 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
80
inline ReMutex::ReMutex(void);
inline ReMutex::ReMutex(std::string const &name);

197 8 ~ReMutex 0 4 253 17 ReMutex::~ReMutex 0 0 10
/**
 *
 */
31
inline ReMutex::~ReMutex(void);

198 14 get_class_type 0 4 254 30 ExternalThread::get_class_type 0 1 81 0
55
static TypeHandle ExternalThread::get_class_type(void);

199 15 ~ExternalThread 0 4 254 31 ExternalThread::~ExternalThread 0 0 0
38
ExternalThread::~ExternalThread(void);

200 7 acquire 0 4 255 25 LightMutexDirect::acquire 0 1 82 428
/**
 * Grabs the lightMutex if it is available.  If it is not available, blocks
 * until it becomes available, then grabs it.  In either case, the function
 * does not return until the lightMutex is held; you should then call
 * unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * lightMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see LightMutexHolder.
 */
50
inline void LightMutexDirect::acquire(void) const;

201 7 release 0 4 255 25 LightMutexDirect::release 0 1 83 262
/**
 * Releases the lightMutex.  It is an error to call this if the lightMutex was
 * not already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * lightMutexes, mainly to allow thread-safe access to otherwise const data.
 */
50
inline void LightMutexDirect::release(void) const;

202 15 debug_is_locked 0 4 255 33 LightMutexDirect::debug_is_locked 0 1 84 289
/**
 * Returns true if the current thread has locked the LightMutex, false
 * otherwise.  This method is only intended for use in debugging, hence the
 * method name; in the LightMutexDirect case, it always returns true, since
 * there's not a reliable way to determine this otherwise.
 */
58
inline bool LightMutexDirect::debug_is_locked(void) const;

203 8 set_name 0 4 255 26 LightMutexDirect::set_name 0 1 85 84
/**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */
64
inline void LightMutexDirect::set_name(std::string const &name);

204 10 clear_name 0 4 255 28 LightMutexDirect::clear_name 0 1 86 84
/**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */
47
inline void LightMutexDirect::clear_name(void);

205 8 has_name 0 4 255 26 LightMutexDirect::has_name 0 1 87 84
/**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */
51
inline bool LightMutexDirect::has_name(void) const;

206 8 get_name 0 4 255 26 LightMutexDirect::get_name 0 1 88 84
/**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */
58
inline std::string LightMutexDirect::get_name(void) const;

207 6 output 0 4 255 24 LightMutexDirect::output 0 1 89 102
/**
 * This method is declared virtual in LightMutexDebug, but non-virtual in
 * LightMutexDirect.
 */
50
void LightMutexDirect::output(ostream &out) const;

208 10 LightMutex 0 4 256 22 LightMutex::LightMutex 0 2 90 91 83
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 * Do not attempt to copy lightMutexes.
 */
92
inline LightMutex::LightMutex(void);
inline LightMutex::LightMutex(std::string const &name);

209 11 ~LightMutex 0 4 256 23 LightMutex::~LightMutex 0 0 10
/**
 *
 */
37
inline LightMutex::~LightMutex(void);

210 7 acquire 0 4 257 27 LightReMutexDirect::acquire 0 2 92 93 564
/**
 * Grabs the lightReMutex if it is available.  If it is not available, blocks
 * until it becomes available, then grabs it.  In either case, the function
 * does not return until the lightReMutex is held; you should then call
 * unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * lightReMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see LightReMutexHolder.
 */

/**
 * This variant on acquire() accepts the current thread as a parameter, if it
 * is already known, as an optimization.
 */
123
inline void LightReMutexDirect::acquire(void) const;
inline void LightReMutexDirect::acquire(Thread *current_thread) const;

211 12 elevate_lock 0 4 257 32 LightReMutexDirect::elevate_lock 0 1 94 468
/**
 * This method increments the lock count, assuming the calling thread already
 * holds the lock.  After this call, release() will need to be called one
 * additional time to release the lock.
 *
 * This method really performs the same function as acquire(), but it offers a
 * potential (slight) performance benefit when the calling thread knows that
 * it already holds the lock.  It is an error to call this when the calling
 * thread does not hold the lock.
 */
57
inline void LightReMutexDirect::elevate_lock(void) const;

212 7 release 0 4 257 27 LightReMutexDirect::release 0 1 95 268
/**
 * Releases the lightReMutex.  It is an error to call this if the lightReMutex
 * was not already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * lightReMutexes, mainly to allow thread-safe access to otherwise const data.
 */
52
inline void LightReMutexDirect::release(void) const;

213 15 debug_is_locked 0 4 257 35 LightReMutexDirect::debug_is_locked 0 1 96 293
/**
 * Returns true if the current thread has locked the LightReMutex, false
 * otherwise.  This method is only intended for use in debugging, hence the
 * method name; in the LightReMutexDirect case, it always returns true, since
 * there's not a reliable way to determine this otherwise.
 */
60
inline bool LightReMutexDirect::debug_is_locked(void) const;

214 8 set_name 0 4 257 28 LightReMutexDirect::set_name 0 1 97 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
66
inline void LightReMutexDirect::set_name(std::string const &name);

215 10 clear_name 0 4 257 30 LightReMutexDirect::clear_name 0 1 98 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
49
inline void LightReMutexDirect::clear_name(void);

216 8 has_name 0 4 257 28 LightReMutexDirect::has_name 0 1 99 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
53
inline bool LightReMutexDirect::has_name(void) const;

217 8 get_name 0 4 257 28 LightReMutexDirect::get_name 0 1 100 79
/**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */
60
inline std::string LightReMutexDirect::get_name(void) const;

218 6 output 0 4 257 26 LightReMutexDirect::output 0 1 101 99
/**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * LightReMutexDirect.
 */
52
void LightReMutexDirect::output(ostream &out) const;

219 12 LightReMutex 0 4 258 26 LightReMutex::LightReMutex 0 2 102 103 34
/**
 *
 */

/**
 *
 */

/**
 *
 */
100
inline LightReMutex::LightReMutex(void);
inline LightReMutex::LightReMutex(std::string const &name);

220 13 ~LightReMutex 0 4 258 27 LightReMutex::~LightReMutex 0 0 10
/**
 *
 */
41
inline LightReMutex::~LightReMutex(void);

221 14 get_class_type 0 4 259 26 MainThread::get_class_type 0 1 104 0
51
static TypeHandle MainThread::get_class_type(void);

222 11 ~MainThread 0 4 259 23 MainThread::~MainThread 0 0 0
30
MainThread::~MainThread(void);

223 9 Semaphore 0 4 260 20 Semaphore::Semaphore 0 1 105 57
/**
 *
 */

/**
 * Do not attempt to copy semaphores.
 */
51
inline Semaphore::Semaphore(int initial_count = 1);

224 10 ~Semaphore 0 4 260 21 Semaphore::~Semaphore 0 0 10
/**
 *
 */
35
inline Semaphore::~Semaphore(void);

225 7 acquire 0 4 260 18 Semaphore::acquire 0 1 106 134
/**
 * Decrements the internal count.  If the count was already at zero, blocks
 * until the count is nonzero, then decrements it.
 */
37
inline void Semaphore::acquire(void);

226 11 try_acquire 0 4 260 22 Semaphore::try_acquire 0 1 107 117
/**
 * If the semaphore can be acquired without blocking, does so and returns
 * true.  Otherwise, returns false.
 */
41
inline bool Semaphore::try_acquire(void);

227 7 release 0 4 260 18 Semaphore::release 0 1 108 166
/**
 * Increments the semaphore's internal count.  This may wake up another thread
 * blocked on acquire().
 *
 * Returns the count of the semaphore upon release.
 */
36
inline int Semaphore::release(void);

228 9 get_count 0 4 260 20 Semaphore::get_count 0 1 109 127
/**
 * Returns the current semaphore count.  Note that this call is not thread-
 * safe (the count may change at any time).
 */
44
inline int Semaphore::get_count(void) const;

229 6 output 0 4 260 17 Semaphore::output 0 1 110 10
/**
 *
 */
43
void Semaphore::output(ostream &out) const;

230 12 PythonThread 0 4 261 26 PythonThread::PythonThread 0 1 111 0
118
PythonThread::PythonThread(PyObject *function, PyObject *args, std::string const &name, std::string const &sync_name);

231 4 join 0 4 261 18 PythonThread::join 0 1 112 0
35
PyObject *PythonThread::join(void);

232 8 get_args 0 4 261 22 PythonThread::get_args 0 1 115 0
45
PyObject *PythonThread::get_args(void) const;

233 8 set_args 0 4 261 22 PythonThread::set_args 0 1 114 0
40
void PythonThread::set_args(PyObject *);

234 14 get_class_type 0 4 261 28 PythonThread::get_class_type 0 1 113 0
53
static TypeHandle PythonThread::get_class_type(void);

115
1 0 0 7 10 245 120 0 0 1 6 param0 0 265  
2 0 0 7 9 268 0 0 0 0 
3 0 0 7 3 269 0 0 0 1 4 this 3 245  
4 0 0 7 4 245 120 0 0 1 4 this 3 269  
5 0 0 6 6 270 0 0 0 1 4 this 3 245  
6 0 0 7 7 245 120 0 0 1 4 this 3 270  
7 0 0 7 18 272 127 0 952 /**
 * Returns a new Panda Thread object associated with the current thread (which
 * has been created externally). This can be used to bind a unique Panda
 * Thread object with an external thread, such as a new Python thread.
 *
 * It is particularly useful to bind a Panda Thread object to an external
 * thread for the purposes of PStats monitoring.  Without this call, each
 * external thread will be assigned the same global ExternalThread object,
 * which means they will all appear in the same PStats graph.
 *
 * It is the caller's responsibility to save the returned Thread pointer for
 * the lifetime of the external thread.  It is an error for the Thread pointer
 * to destruct while the external thread is still in the system.
 *
 * It is also an error to call this method from the main thread, or twice
 * within a given thread, unless it is given the same name each time (in which
 * case the same pointer will be returned each time).
 */ 2 4 name 1 271  9 sync_name 1 271  
8 0 0 6 19 271 0 0 279 /**
 * Returns the sync name of the thread.  This name collects threads into "sync
 * groups", which are expected to run synchronously.  This is mainly used for
 * the benefit of PStats; threads with the same sync name can be ticked all at
 * once via the thread_tick() call.
 */ 1 4 this 3 273  
9 0 0 6 20 243 0 0 218 /**
 * Returns the PStats index associated with this thread, or -1 if no index has
 * yet been associated with this thread.  This is used internally by the
 * PStatClient; you should not need to call this directly.
 */ 1 4 this 3 273  
10 0 0 6 21 243 0 0 233 /**
 * Returns the Python index associated with this thread, or -1 if no index has
 * yet been associated with this thread.  This is used internally by the
 * direct.stdpy.thread module; you should not need to call this directly.
 */ 1 4 this 3 273  
11 0 0 6 22 271 0 0 161 /**
 * Returns a string that is guaranteed to be unique to this thread, across all
 * processes on the machine, during at least the lifetime of this process.
 */ 1 4 this 3 273  
12 0 0 6 23 243 0 0 163 /**
 * Returns the Pipeline stage number associated with this thread.  The default
 * stage is 0 if no stage is specified otherwise.  See set_pipeline_stage().
 */ 1 4 this 3 273  
13 0 0 4 24 275 0 0 479 /**
 * Specifies the Pipeline stage number associated with this thread.  The
 * default stage is 0 if no stage is specified otherwise.
 *
 * This must be a value in the range [0 .. pipeline->get_num_stages() - 1].
 * It specifies the values that this thread observes for all pipelined data.
 * Typically, an application thread will leave this at 0, but a render thread
 * may set it to 1 or 2 (to operate on the previous frame's data, or the
 * second previous frame's data).
 */ 2 4 this 3 272  14 pipeline_stage 1 243  
14 0 0 4 25 275 0 0 143 /**
 * Sets this thread's pipeline stage number to at least the indicated value,
 * unless it is already larger.  See set_pipeline_stage().
 */ 2 4 this 3 272  18 min_pipeline_stage 1 243  
15 0 0 7 26 272 127 0 111 /**
 * Returns a pointer to the "main" Thread object--this is the Thread that
 * started the whole process.
 */ 0 
16 0 0 7 27 272 127 0 248 /**
 * Returns a pointer to the "external" Thread object--this is a special Thread
 * object that corresponds to any thread spawned outside of Panda's threading
 * interface.  Note that multiple different threads may share this same
 * pointer.
 */ 0 
17 0 0 7 28 272 127 0 415 /**
 * Returns a pointer to the currently-executing Thread object.  If this is
 * called from the main thread, this will return the same value as
 * get_main_thread().
 *
 * This will always return some valid Thread pointer.  It will never return
 * NULL, even if the current thread was spawned outside of Panda's threading
 * system, although all non-Panda threads will return the exact same Thread
 * pointer.
 */ 0 
18 0 0 6 29 243 0 0 208 /**
 * Returns the integer pipeline stage associated with the current thread.
 * This is the same thing as get_current_thread()->get_pipeline_stage(), but
 * it may be faster to retrieve in some contexts.
 */ 0 
19 0 0 6 30 244 0 0 159 /**
 * Returns true if threading support has been compiled in and enabled, or
 * false if no threading is available (and Thread::start() will always fail).
 */ 0 
20 0 0 6 31 244 0 0 196 /**
 * Returns true if a real threading library is available that supports actual
 * OS-implemented threads, or false if the only threading we can provide is
 * simulated user-space threading.
 */ 0 
21 0 0 6 32 244 0 0 393 /**
 * Returns true if Panda is currently compiled for "simple threads", which is
 * to say, cooperative context switching only, reducing the need for quite so
 * many critical section protections.  This is not necessarily the opposite of
 * "true threads", since one possible implementation of simple threads is via
 * true threads with mutex protection to ensure only one runs at a time.
 */ 0 
22 0 0 4 33 275 0 0 119 /**
 * Suspends the current thread for at least the indicated amount of time.  It
 * might be suspended for longer.
 */ 1 7 seconds 1 276  
23 0 0 4 34 275 0 0 73 /**
 * Suspends the current thread for the rest of the current epoch.
 */ 0 
24 0 0 4 35 275 0 0 239 /**
 * Possibly suspends the current thread for the rest of the current epoch, if
 * it has run for enough this epoch.  This is especially important for the
 * simple thread implementation, which relies on cooperative yields like this.
 */ 0 
25 0 0 4 36 275 0 0 10 /**
 *
 */ 2 4 this 3 273  3 out 1 277  
26 0 0 4 37 275 0 0 184 /**
 * Writes a description of the mutex or condition variable that this thread is
 * blocked on.  Writes nothing if there is no blocker, or if we are not in
 * DEBUG_THREADS mode.
 */ 2 4 this 3 273  3 out 1 277  
27 0 0 4 38 275 0 0 10 /**
 *
 */ 1 3 out 1 277  
28 0 0 6 39 244 0 0 117 /**
 * Returns true if the thread has been started, false if it has not, or if
 * join() has already been called.
 */ 1 4 this 3 273  
29 0 0 6 40 244 0 0 77 /**
 * Returns the value of joinable that was passed to the start() call.
 */ 1 4 this 3 273  
30 0 0 6 41 244 0 0 862 /**
 * Starts the thread executing.  It is only valid to call this once.
 *
 * The thread will begin executing its thread_main() function, and will
 * terminate when thread_main() returns.
 *
 * priority is intended as a hint to the relative importance of this thread.
 * This may be ignored by the thread implementation.
 *
 * joinable should be set true if you intend to call join() to wait for the
 * thread to terminate, or false if you don't care and you will never call
 * join(). Note that the reference count on the Thread object is incremented
 * while the thread itself is running, so if you just want to fire and forget
 * a thread, you may pass joinable = false, and never store the Thread object.
 * It will automatically destruct itself when it finishes.
 *
 * The return value is true if the thread is successfully started, false
 * otherwise.
 */ 3 4 this 3 272  8 priority 1 238  8 joinable 1 244  
31 0 0 4 42 275 0 0 134 /**
 * Blocks the calling process until the thread terminates.  If the thread has
 * already terminated, this returns immediately.
 */ 1 4 this 3 272  
32 0 0 4 43 275 0 0 183 /**
 * Indicates that this thread should run as soon as possible, preemptying any
 * other threads that may be scheduled to run.  This may not be implemented on
 * every platform.
 */ 1 4 this 3 272  
33 0 0 7 44 245 120 0 161 /**
 * Returns the task currently executing on this thread (via the
 * AsyncTaskManager), if any, or NULL if the thread is not currently servicing
 * a task.
 */ 1 4 this 3 273  
34 0 0 4 45 275 0 0 160 /**
 * Stores a Python index to be associated with this thread.  This is used
 * internally by the thread module; you should not need to call this directly.
 */ 2 4 this 3 272  5 index 1 243  
35 0 0 4 46 275 0 0 143 /**
 * Should be called by the main thread just before exiting the program, this
 * blocks until any remaining thread cleanup has finished.
 */ 0 
36 0 0 7 61 268 0 0 0 0 
37 0 0 7 13 269 0 0 0 1 4 this 3 272  
38 0 0 7 14 272 127 0 0 1 4 this 3 269  
39 0 0 6 15 270 0 0 0 1 4 this 3 272  
40 0 0 7 16 272 127 0 0 1 4 this 3 270  
41 0 0 4 63 275 0 0 405 /**
 * Grabs the mutex if it is available.  If it is not available, blocks until
 * it becomes available, then grabs it.  In either case, the function does not
 * return until the mutex is held; you should then call unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * mutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see MutexHolder.
 */ 1 4 this 3 279  
42 0 0 6 64 244 0 0 125 /**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */ 1 4 this 3 279  
43 0 0 4 65 275 0 0 247 /**
 * Releases the mutex.  It is an error to call this if the mutex was not
 * already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * mutexes, mainly to allow thread-safe access to otherwise const data.
 */ 1 4 this 3 279  
44 0 0 6 66 244 0 0 278 /**
 * Returns true if the current thread has locked the Mutex, false otherwise.
 * This method is only intended for use in debugging, hence the method name;
 * in the MutexDirect case, it always returns true, since there's not a
 * reliable way to determine this otherwise.
 */ 1 4 this 3 279  
45 0 0 4 67 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 2 4 this 3 281  4 name 1 271  
46 0 0 4 68 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 281  
47 0 0 6 69 244 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 279  
48 0 0 6 70 271 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 279  
49 0 0 4 71 275 0 0 92 /**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * MutexDirect.
 */ 2 4 this 3 279  3 out 1 277  
50 0 0 7 73 282 168 0 10 /**
 *
 */ 0 
51 0 0 7 73 282 168 0 10 /**
 *
 */ 1 4 name 1 271  
52 0 0 6 77 281 0 0 69 /**
 * Returns the mutex associated with this condition variable.
 */ 1 4 this 3 283  
53 0 0 4 78 275 0 0 863 /**
 * Waits on the condition.  The caller must already be holding the lock
 * associated with the condition variable before calling this function.
 *
 * wait() will release the lock, then go to sleep until some other thread
 * calls notify() on this condition variable.  At that time at least one
 * thread waiting on the same ConditionVarDirect will grab the lock again, and
 * then return from wait().
 *
 * It is possible that wait() will return even if no one has called notify().
 * It is the responsibility of the calling process to verify the condition on
 * return from wait, and possibly loop back to wait again if necessary.
 *
 * Note the semantics of a condition variable: the mutex must be held before
 * wait() is called, and it will still be held when wait() returns.  However,
 * it will be temporarily released during the wait() call itself.
 */ 1 4 this 3 285  
54 0 0 4 78 275 0 0 327 /**
 * Waits on the condition, with a timeout.  The function will return when the
 * condition variable is notified, or the timeout occurs.  There is no way to
 * directly tell which happened, and it is possible that neither in fact
 * happened (spurious wakeups are possible).
 *
 * See wait() with no parameters for more.
 */ 2 4 this 3 285  7 timeout 1 276  
55 0 0 4 79 275 0 0 542 /**
 * Informs one of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.  If multiple threads are currently
 * waiting, at least one of them will be woken up, although there is no way to
 * predict which one.  It is possible that more than one thread will be woken
 * up.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify event is lost.
 */ 1 4 this 3 285  
56 0 0 4 80 275 0 0 106 /**
 * This method is declared virtual in ConditionVarDebug, but non-virtual in
 * ConditionVarDirect.
 */ 2 4 this 3 283  3 out 1 277  
57 0 0 7 82 286 175 0 278 /**
 * You must pass in a Mutex to the condition variable constructor.  This mutex
 * may be shared by other condition variables, if desired.  It is the caller's
 * responsibility to ensure the Mutex object does not destruct during the
 * lifetime of the condition variable.
 */ 1 5 mutex 1 282  
58 0 0 6 84 282 0 0 69 /**
 * Returns the mutex associated with this condition variable.
 */ 1 4 this 3 287  
59 0 0 6 87 281 0 0 69 /**
 * Returns the mutex associated with this condition variable.
 */ 1 4 this 3 289  
60 0 0 4 88 275 0 0 867 /**
 * Waits on the condition.  The caller must already be holding the lock
 * associated with the condition variable before calling this function.
 *
 * wait() will release the lock, then go to sleep until some other thread
 * calls notify() on this condition variable.  At that time at least one
 * thread waiting on the same ConditionVarFullDirect will grab the lock again,
 * and then return from wait().
 *
 * It is possible that wait() will return even if no one has called notify().
 * It is the responsibility of the calling process to verify the condition on
 * return from wait, and possibly loop back to wait again if necessary.
 *
 * Note the semantics of a condition variable: the mutex must be held before
 * wait() is called, and it will still be held when wait() returns.  However,
 * it will be temporarily released during the wait() call itself.
 */ 1 4 this 3 291  
61 0 0 4 88 275 0 0 327 /**
 * Waits on the condition, with a timeout.  The function will return when the
 * condition variable is notified, or the timeout occurs.  There is no way to
 * directly tell which happened, and it is possible that neither in fact
 * happened (spurious wakeups are possible).
 *
 * See wait() with no parameters for more.
 */ 2 4 this 3 291  7 timeout 1 276  
62 0 0 4 89 275 0 0 536 /**
 * Informs one of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.  If multiple threads are currently
 * waiting, at least one of them will be woken up, although there is no way to
 * predict which one.  It is possible that more than one thread will be woken
 * up.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify is lost.
 */ 1 4 this 3 291  
63 0 0 4 90 275 0 0 343 /**
 * Informs all of the other threads who are currently blocked on wait() that
 * the relevant condition has changed.
 *
 * The caller must be holding the mutex associated with the condition variable
 * before making this call, which will not release the mutex.
 *
 * If no threads are waiting, this is a no-op: the notify event is lost.
 */ 1 4 this 3 291  
64 0 0 4 91 275 0 0 114 /**
 * This method is declared virtual in ConditionVarFullDebug, but non-virtual
 * in ConditionVarFullDirect.
 */ 2 4 this 3 289  3 out 1 277  
65 0 0 7 93 292 184 0 278 /**
 * You must pass in a Mutex to the condition variable constructor.  This mutex
 * may be shared by other condition variables, if desired.  It is the caller's
 * responsibility to ensure the Mutex object does not destruct during the
 * lifetime of the condition variable.
 */ 1 5 mutex 1 282  
66 0 0 6 95 282 0 0 69 /**
 * Returns the mutex associated with this condition variable.
 */ 1 4 this 3 293  
67 0 0 4 97 275 0 0 413 /**
 * Grabs the reMutex if it is available.  If it is not available, blocks until
 * it becomes available, then grabs it.  In either case, the function does not
 * return until the reMutex is held; you should then call unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * reMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see ReMutexHolder.
 */ 1 4 this 3 295  
68 0 0 4 97 275 0 0 126 /**
 * This variant on acquire() accepts the current thread as a parameter, if it
 * is already known, as an optimization.
 */ 2 4 this 3 295  14 current_thread 1 272  
69 0 0 6 98 244 0 0 125 /**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */ 1 4 this 3 295  
70 0 0 6 98 244 0 0 125 /**
 * Returns immediately, with a true value indicating the mutex has been
 * acquired, and false indicating it has not.
 */ 2 4 this 3 295  14 current_thread 1 272  
71 0 0 4 99 275 0 0 468 /**
 * This method increments the lock count, assuming the calling thread already
 * holds the lock.  After this call, release() will need to be called one
 * additional time to release the lock.
 *
 * This method really performs the same function as acquire(), but it offers a
 * potential (slight) performance benefit when the calling thread knows that
 * it already holds the lock.  It is an error to call this when the calling
 * thread does not hold the lock.
 */ 1 4 this 3 295  
72 0 0 4 100 275 0 0 253 /**
 * Releases the reMutex.  It is an error to call this if the reMutex was not
 * already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * reMutexes, mainly to allow thread-safe access to otherwise const data.
 */ 1 4 this 3 295  
73 0 0 6 101 244 0 0 282 /**
 * Returns true if the current thread has locked the ReMutex, false otherwise.
 * This method is only intended for use in debugging, hence the method name;
 * in the ReMutexDirect case, it always returns true, since there's not a
 * reliable way to determine this otherwise.
 */ 1 4 this 3 295  
74 0 0 4 102 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 2 4 this 3 297  4 name 1 271  
75 0 0 4 103 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 297  
76 0 0 6 104 244 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 295  
77 0 0 6 105 271 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 295  
78 0 0 4 106 275 0 0 94 /**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * ReMutexDirect.
 */ 2 4 this 3 295  3 out 1 277  
79 0 0 7 108 298 197 0 10 /**
 *
 */ 0 
80 0 0 7 108 298 197 0 10 /**
 *
 */ 1 4 name 1 271  
81 0 0 7 111 268 0 0 0 0 
82 0 0 4 114 275 0 0 428 /**
 * Grabs the lightMutex if it is available.  If it is not available, blocks
 * until it becomes available, then grabs it.  In either case, the function
 * does not return until the lightMutex is held; you should then call
 * unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * lightMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see LightMutexHolder.
 */ 1 4 this 3 299  
83 0 0 4 115 275 0 0 262 /**
 * Releases the lightMutex.  It is an error to call this if the lightMutex was
 * not already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * lightMutexes, mainly to allow thread-safe access to otherwise const data.
 */ 1 4 this 3 299  
84 0 0 6 116 244 0 0 289 /**
 * Returns true if the current thread has locked the LightMutex, false
 * otherwise.  This method is only intended for use in debugging, hence the
 * method name; in the LightMutexDirect case, it always returns true, since
 * there's not a reliable way to determine this otherwise.
 */ 1 4 this 3 299  
85 0 0 4 117 275 0 0 84 /**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 2 4 this 3 301  4 name 1 271  
86 0 0 4 118 275 0 0 84 /**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 301  
87 0 0 6 119 244 0 0 84 /**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 299  
88 0 0 6 120 271 0 0 84 /**
 * The lightMutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 299  
89 0 0 4 121 275 0 0 102 /**
 * This method is declared virtual in LightMutexDebug, but non-virtual in
 * LightMutexDirect.
 */ 2 4 this 3 299  3 out 1 277  
90 0 0 7 123 302 209 0 10 /**
 *
 */ 0 
91 0 0 7 123 302 209 0 10 /**
 *
 */ 1 4 name 1 271  
92 0 0 4 126 275 0 0 436 /**
 * Grabs the lightReMutex if it is available.  If it is not available, blocks
 * until it becomes available, then grabs it.  In either case, the function
 * does not return until the lightReMutex is held; you should then call
 * unlock().
 *
 * This method is considered const so that you can lock and unlock const
 * lightReMutexes, mainly to allow thread-safe access to otherwise const data.
 *
 * Also see LightReMutexHolder.
 */ 1 4 this 3 303  
93 0 0 4 126 275 0 0 126 /**
 * This variant on acquire() accepts the current thread as a parameter, if it
 * is already known, as an optimization.
 */ 2 4 this 3 303  14 current_thread 1 272  
94 0 0 4 127 275 0 0 468 /**
 * This method increments the lock count, assuming the calling thread already
 * holds the lock.  After this call, release() will need to be called one
 * additional time to release the lock.
 *
 * This method really performs the same function as acquire(), but it offers a
 * potential (slight) performance benefit when the calling thread knows that
 * it already holds the lock.  It is an error to call this when the calling
 * thread does not hold the lock.
 */ 1 4 this 3 303  
95 0 0 4 128 275 0 0 268 /**
 * Releases the lightReMutex.  It is an error to call this if the lightReMutex
 * was not already locked.
 *
 * This method is considered const so that you can lock and unlock const
 * lightReMutexes, mainly to allow thread-safe access to otherwise const data.
 */ 1 4 this 3 303  
96 0 0 6 129 244 0 0 293 /**
 * Returns true if the current thread has locked the LightReMutex, false
 * otherwise.  This method is only intended for use in debugging, hence the
 * method name; in the LightReMutexDirect case, it always returns true, since
 * there's not a reliable way to determine this otherwise.
 */ 1 4 this 3 303  
97 0 0 4 130 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 2 4 this 3 305  4 name 1 271  
98 0 0 4 131 275 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 305  
99 0 0 6 132 244 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 303  
100 0 0 6 133 271 0 0 79 /**
 * The mutex name is only defined when compiling in DEBUG_THREADS mode.
 */ 1 4 this 3 303  
101 0 0 4 134 275 0 0 99 /**
 * This method is declared virtual in MutexDebug, but non-virtual in
 * LightReMutexDirect.
 */ 2 4 this 3 303  3 out 1 277  
102 0 0 7 136 306 220 0 10 /**
 *
 */ 0 
103 0 0 7 136 306 220 0 10 /**
 *
 */ 1 4 name 1 271  
104 0 0 7 139 268 0 0 0 0 
105 0 0 7 142 307 224 0 10 /**
 *
 */ 1 13 initial_count 1 243  
106 0 0 4 144 275 0 0 134 /**
 * Decrements the internal count.  If the count was already at zero, blocks
 * until the count is nonzero, then decrements it.
 */ 1 4 this 3 307  
107 0 0 6 145 244 0 0 117 /**
 * If the semaphore can be acquired without blocking, does so and returns
 * true.  Otherwise, returns false.
 */ 1 4 this 3 307  
108 0 0 6 146 243 0 0 166 /**
 * Increments the semaphore's internal count.  This may wake up another thread
 * blocked on acquire().
 *
 * Returns the count of the semaphore upon release.
 */ 1 4 this 3 307  
109 0 0 6 147 243 0 0 127 /**
 * Returns the current semaphore count.  Note that this call is not thread-
 * safe (the count may change at any time).
 */ 1 4 this 3 308  
110 0 0 4 148 275 0 0 10 /**
 *
 */ 2 4 this 3 308  3 out 1 277  
111 0 0 7 150 310 127 0 0 4 8 function 1 262  4 args 1 262  4 name 1 271  9 sync_name 1 271  
112 0 0 6 151 262 0 0 0 1 4 this 3 310  
113 0 0 7 158 268 0 0 0 0 
114 0 0 4 157 275 0 0 0 2 4 this 3 310  6 param0 0 262  
115 0 0 6 156 262 0 0 0 1 4 this 3 311  
78
235 13 AsyncTaskBase 0 26625 13 AsyncTaskBase 13 AsyncTaskBase 0 0 0 1 122 120 0 1 121 0 0 2 3 236 116 117 3 237 118 119 0 0 140
/**
 * The abstract base class for AsyncTask.  This is defined here only so we can
 * store a pointer to the current task on the Thread.
 */

236 19 TypedReferenceCount 0 2049 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 0 0 0 0 0 0 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

237 7 Namable 0 2049 7 Namable 7 Namable 0 0 0 0 0 0 0 0 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

238 14 ThreadPriority 0 532481 14 ThreadPriority 14 ThreadPriority 0 0 0 0 0 0 0 0 0 0 4 6 TP_low 6 TP_low 0
0 9 TP_normal 9 TP_normal 0
1 7 TP_high 7 TP_high 0
2 9 TP_urgent 9 TP_urgent 0
3 0 105
// An enumerated type used by Thread to specify a suggested relative priority
// for a particular thread.

239 6 Thread 0 26625 6 Thread 6 Thread 0 0 0 0 127 8 313 314 315 316 317 318 319 320 30 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 0 0 2 3 236 123 124 3 237 125 126 0 0 396
/**
 * A thread; that is, a lightweight process.  This is an abstract base class;
 * to use it, you must subclass from it and redefine thread_main().
 *
 * The thread itself will keep a reference count on the Thread object while it
 * is running; when the thread returns from its root function, the Thread
 * object will automatically be destructed if no other pointers are
 * referencing it.
 */

240 12 string const 0 8832 17 std::string const 17 std::string const 0 0 241 0 0 0 0 0 0 0 0 0 0

241 6 string 0 2105344 11 std::string 11 std::string 0 0 242 0 0 0 0 0 0 0 0 0 0

242 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

243 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

244 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

245 15 AsyncTaskBase * 0 8576 15 AsyncTaskBase * 15 AsyncTaskBase * 0 0 235 0 0 0 0 0 0 0 0 0 0

246 11 MutexDirect 0 43009 11 MutexDirect 11 MutexDirect 0 0 0 0 0 0 9 158 159 160 161 162 163 164 165 166 0 0 0 0 0 164
/**
 * This class implements a standard mutex by making direct calls to the
 * underlying implementation layer.  It doesn't perform any debugging
 * operations.
 */

247 5 Mutex 0 26625 5 Mutex 5 Mutex 0 0 0 1 167 168 0 0 0 0 1 0 246 0 0 0 0 0

248 18 ConditionVarDirect 0 26625 18 ConditionVarDirect 18 ConditionVarDirect 0 0 0 0 169 0 4 170 171 172 173 0 0 0 0 0 377
/**
 * A condition variable, usually used to communicate information about
 * changing state to a thread that is waiting for something to happen.  A
 * condition variable can be used to "wake up" a thread when some arbitrary
 * condition has changed.
 *
 * A condition variable is associated with a single mutex, and several
 * condition variables may share the same mutex.
 */

249 12 ConditionVar 0 26625 12 ConditionVar 12 ConditionVar 0 0 0 1 174 175 0 1 176 0 0 1 0 248 0 0 0 0 0

250 22 ConditionVarFullDirect 0 26625 22 ConditionVarFullDirect 22 ConditionVarFullDirect 0 0 0 0 177 0 5 178 179 180 181 182 0 0 0 0 0 377
/**
 * A condition variable, usually used to communicate information about
 * changing state to a thread that is waiting for something to happen.  A
 * condition variable can be used to "wake up" a thread when some arbitrary
 * condition has changed.
 *
 * A condition variable is associated with a single mutex, and several
 * condition variables may share the same mutex.
 */

251 16 ConditionVarFull 0 26625 16 ConditionVarFull 16 ConditionVarFull 0 0 0 1 183 184 0 1 185 0 0 1 0 250 0 0 0 0 0

252 13 ReMutexDirect 0 43009 13 ReMutexDirect 13 ReMutexDirect 0 0 0 0 0 0 10 186 187 188 189 190 191 192 193 194 195 0 0 0 0 0 166
/**
 * This class implements a standard reMutex by making direct calls to the
 * underlying implementation layer.  It doesn't perform any debugging
 * operations.
 */

253 7 ReMutex 0 26625 7 ReMutex 7 ReMutex 0 0 0 1 196 197 0 0 0 0 1 0 252 0 0 0 0 0

254 14 ExternalThread 0 141313 14 ExternalThread 14 ExternalThread 0 0 0 0 199 0 1 198 0 0 1 0 239 0 0 0 0 149
/**
 * The special "external thread" class.  There is one instance of these in the
 * world, and it is returned by Thread::get_external_thread().
 */

255 16 LightMutexDirect 0 43009 16 LightMutexDirect 16 LightMutexDirect 0 0 0 0 0 0 8 200 201 202 203 204 205 206 207 0 0 0 0 0 167
/**
 * This class implements a lightweight Mutex by making direct calls to the
 * underlying implementation layer.  It doesn't perform any debugging
 * operations.
 */

256 10 LightMutex 0 26625 10 LightMutex 10 LightMutex 0 0 0 1 208 209 0 0 0 0 1 0 255 0 0 0 0 0

257 18 LightReMutexDirect 0 43009 18 LightReMutexDirect 18 LightReMutexDirect 0 0 0 0 0 0 9 210 211 212 213 214 215 216 217 218 0 0 0 0 0 171
/**
 * This class implements a standard lightReMutex by making direct calls to the
 * underlying implementation layer.  It doesn't perform any debugging
 * operations.
 */

258 12 LightReMutex 0 26625 12 LightReMutex 12 LightReMutex 0 0 0 1 219 220 0 0 0 0 1 0 257 0 0 0 0 0

259 10 MainThread 0 141313 10 MainThread 10 MainThread 0 0 0 0 222 0 1 221 0 0 1 0 239 0 0 0 0 141
/**
 * The special "main thread" class.  There is one instance of these in the
 * world, and it is returned by Thread::get_main_thread().
 */

260 9 Semaphore 0 26625 9 Semaphore 9 Semaphore 0 0 0 1 223 224 0 5 225 226 227 228 229 0 0 0 0 0 332
/**
 * A classic semaphore synchronization primitive.
 *
 * A semaphore manages an internal counter which is decremented by each
 * acquire() call and incremented by each release() call.  The counter can
 * never go below zero; when acquire() finds that it is zero, it blocks,
 * waiting until some other thread calls release().
 */

261 12 PythonThread 0 75777 12 PythonThread 12 PythonThread 0 0 0 1 230 127 1 321 2 231 234 0 0 1 0 239 0 0 0 0 174
/**
 * This class is exposed to Python to allow creation of a Panda thread from
 * the Python level.  It will spawn a thread that executes an arbitrary Python
 * functor.
 */

262 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 263 0 0 0 0 0 0 0 0 0 0

263 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 264 0 0 0 0 0 0 0 0 0 0

264 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

265 21 AsyncTaskBase const * 0 8576 21 AsyncTaskBase const * 21 AsyncTaskBase const * 0 0 266 0 0 0 0 0 0 0 0 0 0

266 19 AsyncTaskBase const 0 8832 19 AsyncTaskBase const 19 AsyncTaskBase const 0 0 235 0 0 0 0 0 0 0 0 0 0

267 10 TypeHandle 0 2048 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

268 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 267 0 0 0 0 0 0 0 0 0 0

269 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 236 0 0 0 0 0 0 0 0 0 0

270 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 237 0 0 0 0 0 0 0 0 0 0

271 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

272 8 Thread * 0 8576 8 Thread * 8 Thread * 0 0 239 0 0 0 0 0 0 0 0 0 0

273 14 Thread const * 0 8576 14 Thread const * 14 Thread const * 0 0 274 0 0 0 0 0 0 0 0 0 0

274 12 Thread const 0 8832 12 Thread const 12 Thread const 0 0 239 0 0 0 0 0 0 0 0 0 0

275 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

276 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

277 9 ostream * 0 8576 9 ostream * 9 ostream * 0 0 278 0 0 0 0 0 0 0 0 0 0

278 7 ostream 0 2048 7 ostream 7 ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

279 19 MutexDirect const * 0 8576 19 MutexDirect const * 19 MutexDirect const * 0 0 280 0 0 0 0 0 0 0 0 0 0

280 17 MutexDirect const 0 8832 17 MutexDirect const 17 MutexDirect const 0 0 246 0 0 0 0 0 0 0 0 0 0

281 13 MutexDirect * 0 8576 13 MutexDirect * 13 MutexDirect * 0 0 246 0 0 0 0 0 0 0 0 0 0

282 7 Mutex * 0 8576 7 Mutex * 7 Mutex * 0 0 247 0 0 0 0 0 0 0 0 0 0

283 26 ConditionVarDirect const * 0 8576 26 ConditionVarDirect const * 26 ConditionVarDirect const * 0 0 284 0 0 0 0 0 0 0 0 0 0

284 24 ConditionVarDirect const 0 8832 24 ConditionVarDirect const 24 ConditionVarDirect const 0 0 248 0 0 0 0 0 0 0 0 0 0

285 20 ConditionVarDirect * 0 8576 20 ConditionVarDirect * 20 ConditionVarDirect * 0 0 248 0 0 0 0 0 0 0 0 0 0

286 14 ConditionVar * 0 8576 14 ConditionVar * 14 ConditionVar * 0 0 249 0 0 0 0 0 0 0 0 0 0

287 20 ConditionVar const * 0 8576 20 ConditionVar const * 20 ConditionVar const * 0 0 288 0 0 0 0 0 0 0 0 0 0

288 18 ConditionVar const 0 8832 18 ConditionVar const 18 ConditionVar const 0 0 249 0 0 0 0 0 0 0 0 0 0

289 30 ConditionVarFullDirect const * 0 8576 30 ConditionVarFullDirect const * 30 ConditionVarFullDirect const * 0 0 290 0 0 0 0 0 0 0 0 0 0

290 28 ConditionVarFullDirect const 0 8832 28 ConditionVarFullDirect const 28 ConditionVarFullDirect const 0 0 250 0 0 0 0 0 0 0 0 0 0

291 24 ConditionVarFullDirect * 0 8576 24 ConditionVarFullDirect * 24 ConditionVarFullDirect * 0 0 250 0 0 0 0 0 0 0 0 0 0

292 18 ConditionVarFull * 0 8576 18 ConditionVarFull * 18 ConditionVarFull * 0 0 251 0 0 0 0 0 0 0 0 0 0

293 24 ConditionVarFull const * 0 8576 24 ConditionVarFull const * 24 ConditionVarFull const * 0 0 294 0 0 0 0 0 0 0 0 0 0

294 22 ConditionVarFull const 0 8832 22 ConditionVarFull const 22 ConditionVarFull const 0 0 251 0 0 0 0 0 0 0 0 0 0

295 21 ReMutexDirect const * 0 8576 21 ReMutexDirect const * 21 ReMutexDirect const * 0 0 296 0 0 0 0 0 0 0 0 0 0

296 19 ReMutexDirect const 0 8832 19 ReMutexDirect const 19 ReMutexDirect const 0 0 252 0 0 0 0 0 0 0 0 0 0

297 15 ReMutexDirect * 0 8576 15 ReMutexDirect * 15 ReMutexDirect * 0 0 252 0 0 0 0 0 0 0 0 0 0

298 9 ReMutex * 0 8576 9 ReMutex * 9 ReMutex * 0 0 253 0 0 0 0 0 0 0 0 0 0

299 24 LightMutexDirect const * 0 8576 24 LightMutexDirect const * 24 LightMutexDirect const * 0 0 300 0 0 0 0 0 0 0 0 0 0

300 22 LightMutexDirect const 0 8832 22 LightMutexDirect const 22 LightMutexDirect const 0 0 255 0 0 0 0 0 0 0 0 0 0

301 18 LightMutexDirect * 0 8576 18 LightMutexDirect * 18 LightMutexDirect * 0 0 255 0 0 0 0 0 0 0 0 0 0

302 12 LightMutex * 0 8576 12 LightMutex * 12 LightMutex * 0 0 256 0 0 0 0 0 0 0 0 0 0

303 26 LightReMutexDirect const * 0 8576 26 LightReMutexDirect const * 26 LightReMutexDirect const * 0 0 304 0 0 0 0 0 0 0 0 0 0

304 24 LightReMutexDirect const 0 8832 24 LightReMutexDirect const 24 LightReMutexDirect const 0 0 257 0 0 0 0 0 0 0 0 0 0

305 20 LightReMutexDirect * 0 8576 20 LightReMutexDirect * 20 LightReMutexDirect * 0 0 257 0 0 0 0 0 0 0 0 0 0

306 14 LightReMutex * 0 8576 14 LightReMutex * 14 LightReMutex * 0 0 258 0 0 0 0 0 0 0 0 0 0

307 11 Semaphore * 0 8576 11 Semaphore * 11 Semaphore * 0 0 260 0 0 0 0 0 0 0 0 0 0

308 17 Semaphore const * 0 8576 17 Semaphore const * 17 Semaphore const * 0 0 309 0 0 0 0 0 0 0 0 0 0

309 15 Semaphore const 0 8832 15 Semaphore const 15 Semaphore const 0 0 260 0 0 0 0 0 0 0 0 0 0

310 14 PythonThread * 0 8576 14 PythonThread * 14 PythonThread * 0 0 261 0 0 0 0 0 0 0 0 0 0

311 20 PythonThread const * 0 8576 20 PythonThread const * 20 PythonThread const * 0 0 312 0 0 0 0 0 0 0 0 0 0

312 18 PythonThread const 0 8832 18 PythonThread const 18 PythonThread const 0 0 261 0 0 0 0 0 0 0 0 0 0

0
9
313 9 sync_name 0 2 240 129 0 0 0 0 0 17 Thread::sync_name 0

314 12 pstats_index 0 2 243 130 0 0 0 0 0 20 Thread::pstats_index 0

315 12 python_index 0 2 243 131 0 0 0 0 0 20 Thread::python_index 0

316 9 unique_id 0 2 241 132 0 0 0 0 0 17 Thread::unique_id 0

317 14 pipeline_stage 0 6 243 133 134 0 0 0 0 22 Thread::pipeline_stage 0

318 7 started 0 2 244 149 0 0 0 0 0 15 Thread::started 0

319 8 joinable 0 2 244 150 0 0 0 0 0 16 Thread::joinable 0

320 12 current_task 0 2 245 154 0 0 0 0 0 20 Thread::current_task 0

321 4 args 0 6 262 232 233 0 0 0 0 18 PythonThread::args 0

0
